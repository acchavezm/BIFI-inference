{
  "s656012100":{
    "code_string":"s,t=input().split()\na,b=map(int,input().split())\nu=input()\nif s==u:\n  print(s-1 t)\nelse:\n  print(s t-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s221552735":{
    "code_string":"S,T = input().split()\nA,B = int(input().split())\nU = input()\nif U == S:\n  \tprint(A-1,B)\nelif U == T:\n    print(A,B-1)\n    ",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s852594157":{
    "code_string":"S,T=map(input().split())\nA,B=map(int,input().split())\nU=input()\nif U==S:\n    A=A-1\nelse:\n    B=B-1\nprint(A,B)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s104441064":{
    "code_string":"S, T = input().split()\nA, B = input().split()\nU = input()\n\nif S==U:\n    print(A-1, B)\nelse:\n    print(A, B-1)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s628408067":{
    "code_string":"S,T = input (),split ()\nA,B = map (int, input (),split ())\nU = input ()\nif U == S:\n  print (A-1,B)\nelse:\n  print (A,B-1)",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s627284665":{
    "code_string":"def main():\n s,t = input().split()\n a,b = int(input().split())\n u = input()\n if s == u:\n     a -= 1\n else:\n     b -= 1\n print(a,b)\nmain()",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s207047747":{
    "code_string":"s, t = input().split()\na, b = map(int, input().split())\nu = str(input())\n \nif u = s:\n  print(a-1, b)\nelse:\n  print(a, b-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s339118041":{
    "code_string":"S,T=map(int,input().split())\nA,B=map(int,input().split())\nU=int(input())\n\nif S==U:\n    A-=1\nelse:\n    B-=1\n\nprint(str(A)+\" \"+str(B))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'red'"
  },
  "s758296465":{
    "code_string":"S,T=map(str,input().split())\nA,B=map(str,input().split())\nU=str(input())\nif U==S:\n    A-=1\nelif U==T:\n    B-=1\nprint(A, B)\n",
    "error_obj":"TypeError: unsupported operand type(s) for -=: 'str' and 'int'"
  },
  "s433629607":{
    "code_string":"S = list(map(str, input().split()))\nA = list(map(int, input().split()))\nU = int(input())\n\nind = S.index(U)\n\nA[ind] -= 1\n\nprint(\"\".join(A))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'red'"
  },
  "s934884793":{
    "code_string":"s=input()\nt=input()\na,b=map(int,input().split())\nu=input()\nif u==s:\n    print(a-1,b)\nif u==t:\n    print(a,b-1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'red'"
  },
  "s596480299":{
    "code_string":"while True:\n    s,t = input().split()\n    a,b = map(int, input().split())\n    u = input()\n\n    if u == s:\n        a = a - 1\n    if u == t:\n        b = b - 1\n\n    print(a,b)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s802701567":{
    "code_string":"s, t = map(input().split())\na, b = map(int, input().split())\nt = input()\nif s == t:\n  print(str(a-1) + \" \" + str(b))\nelse:\n  print(str(a) + \" \" + str(b-1))",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s329553682":{
    "code_string":"S,T=map(input().split())\nA,B=map(int,input().split())\nU=input()\n\nif U==S:\n  print(A-1)\n  print(B)\nelse:\n  print(A)\n  print(B-1)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s883453119":{
    "code_string":"S,T=input().split()\nA,B=map(int,input().split())\nU=input()\nif U==S:\n  print(A-1,B)\nelse\n  print(A,B-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s266439846":{
    "code_string":"S,T=map(str,input().split())\nA,B=map(int,input().split())\nU=str(input())\nif U==S:\n  A=A-1\nelif U==T:\n  B=B-1\nprint({} {}.format(A,B))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s837364251":{
    "code_string":"s,t = map(str,input().split())\na,b = map(str,input().split())\nu = str(input())\nif(u==s):\n  print(a-1,b)\nelif(u==t):\n  print(a,b-1)\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s544293964":{
    "code_string":"\n# ABC154\n#A Remaining balls\ns, t = map(input().split())\na, b = map(int, input().split())\nu = input()\nif s == u:\n    a = a - 1\nelse:\n    b = b -1\nprint(a, b)\n",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s787848614":{
    "code_string":"def resolve():\n    s,t = input().split()\n    a,b = map(int,input().split())\n    u = input()\n    print(a-(s==u),b-(t==u))\nreoslve()",
    "error_obj":"NameError: name 'reoslve' is not defined"
  },
  "s625365249":{
    "code_string":"s, t = input().split()\na, b = map(int, input().split())\nu = input()\n \nif u == s:\n  print(s-1,t)\nelif u == t:\n  print(s, t-1)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s625405542":{
    "code_string":"S, T = input().split\nA, B = map(int, input().split)\nU = input()\n\nif S == U :\n  print(A - 1)\nelif T == U :\n  print(B - 1)",
    "error_obj":"TypeError: cannot unpack non-iterable builtin_function_or_method object"
  },
  "s112675033":{
    "code_string":"S, T = input().split()\nA, B = map(int, input().split())\nU = input()\nprint(A-1 B if S==U else A B-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s053537362":{
    "code_string":"s, t = map(input().split())\n\na, b = map(int(input().split()))\n\nu = input()\n\nif s == u:\n    print(a - 1, b)\nelif t == u:\n    print(a, b - 1)\n",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s511467429":{
    "code_string":"[H, A] = [int(i) for i in input().split()]\nt = 0\nif H\/A != int(H\/A):\n    t = 1\nprint(int(H\/A) + t)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'red'"
  },
  "s355826965":{
    "code_string":"str = input().split(\" \")\nS = str[0]\nT = str[1]\nnum = input().split(\" \")\nNS = int(num[0])\nNT = int(num[1])\nU = input()\n\nif S == U:\n  print(str(NS - 1) + \" \" + str(NT))\nelse:\n  print(str(NS) + \" \" + str(NT - 1))",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s757424679":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=set(a)\nprint(\"YES\" if n == len(b), else \"NO\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s675993152":{
    "code_string":"s,t = map(str,input().split())\na,b = map(int,input().split())\nu = int(input())\nif s == u:\n  print(a-1,b)\nelse:\n  print(a,b-1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'red'"
  },
  "s024840864":{
    "code_string":"s,t=input().split()\na,b=map(int.input().split())\nu=input()\nprint(a-1,b) if s==u else print(a,b-1)",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s986326970":{
    "code_string":"a,b = input().split\nc,d = map(int,input().split())\ne = input()\n\nif a == e:\n  print(\"{} {}\".format(c-1,d))\nelse:\n  print(\"{} {}\".format(c,d-1))",
    "error_obj":"TypeError: cannot unpack non-iterable builtin_function_or_method object"
  },
  "s873476702":{
    "code_string":"a = str(input())\nprint(str(x)*len(a))",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s547474838":{
    "code_string":"s = input()\nprint(x*len(s))",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s939748879":{
    "code_string":"s = input()\nfor i in range(len(s)):\n  s[i] = \"x\"\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s269925638":{
    "code_string":"S=len(input())\nprint(x*S)",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s268964348":{
    "code_string":"print(x * len(input()))",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s336377123":{
    "code_string":"S = input()\nprint(\"x\"*count(S))",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s517391984":{
    "code_string":"print(\"x\"*len(input())",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s898306249":{
    "code_string":"print(\u201cx\u201d * len(input()))",
    "error_obj":"SyntaxError: invalid character '\u201c' (U+201C)"
  },
  "s308864204":{
    "code_string":"s = input()\nprint(x * len(s))",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s455845318":{
    "code_string":"s=input()\n\nl=len(s)\n\nfor i in range(l):\n  s[i]=\"x\"\n  \n  \nprint(s)\n",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s454850352":{
    "code_string":"s = input()\nfor i in len(s):\n  print(x,end=\"\")\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s938761909":{
    "code_string":"S = input()\nT = ''\nfor _ in len(S):\n  T += 'x'\nprint(T)\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s206380420":{
    "code_string":"s = input()\nfor i in range(len(s)):\n  s[i]='x'\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s366019539":{
    "code_string":"S = input()\nL = len[S]\nfor i in rnage(L):\n    print(\"x\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s154853233":{
    "code_string":"s = input()\nprint(\"x\"**len(s))",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s404537748":{
    "code_string":"S=input()\nfor i in range(len(S)):\n    S[i]='\u00d7'\nprint(S)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s478913261":{
    "code_string":"n = int(input())\nan = list(map(int,input().split()))\nan.sort()\n\nfor x in range(n-1):\n  if an[i+1]-an[i] == 0:\n    print(\"NO\")\n    break\n\nelse:\n  print(\"YES\")\n  ",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s352539565":{
    "code_string":"def check(seq):\n    return len(seq) != len(set(seq))\n\ndef main():\n  N = int(input())\n  A = list(map(int, input.split()))\n  ans = check(A)\n  if ans:\n    print(\"NO\")\n  else:\n    print(\"Yes\")\nmain()",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s086975111":{
    "code_string":"import sys\n\nN=int(input())\nA=list(map(int,input().split()))\nA.sort()\nfor i in range(N):\n  if(A[i]==A[i+1]):\n    print(\"NO\")\n    sys.exit()\nprint(\"YES\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s214279622":{
    "code_string":"import sys\nN = int(input())\ncc = list(map(int,input().split()))\ndic = set()\nfor i in cc:\n  if i in dic:\n    print('NO')\n    sys.exit()\n  else:\n    dic.append(i)\nprint('YES')\n\n    ",
    "error_obj":"AttributeError: 'set' object has no attribute 'append'"
  },
  "s599822013":{
    "code_string":"N=int(input())\nA=list(map(int,input()))\nS=set(A)\nprint(\"YES\" if len(A)==len(S) else \"NO\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s809168420":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\n\ncnt = [0]*(10**9+1)\n\nfor i in a:\n    cnt[i] += 1\n    if cnt[i] > 1:\n        print('NO')\n        exit()\nprint('YES')",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s437580275":{
    "code_string":"n = int(input())\na = list(map(str,input().split()))\na.sort()\nans = 'YES'\nfor i in range(n):\n    if a[i] == a[i+1]:\n        ans = 'NO'\n        break\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s204875816":{
    "code_string":"def main():\n    N = int(input())\n    List = list(map(int,input(),split()))\n    Set = set()\n    for i in List:\n      if i in Set:\n        print('No')\n        return\n      Set.add(i)\n\tprint('Yes')\nmain()",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s740645733":{
    "code_string":"m = int(input())\nn = list(map(int,input().split))\nprint(\"YES\" if len(set(n)) == m else \"NO\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s625634036":{
    "code_string":"from collections import Counter\nn=int(input())\na=list(map(int,input().split())\ndic=Counter(a)\nfor val in dic.values():\n    if val>=2:\n        print(\"NO\")\n        exit()\nprint(\"YES\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s458106244":{
    "code_string":"n = int(input())\na = map(int, input().split())\n\nif set(a) == len(a):\n  print(\"NO\")\nelse:\n  print(\"YES\")",
    "error_obj":"TypeError: object of type 'map' has no len()"
  },
  "s626143750":{
    "code_string":"n = int(input())\n\na = list(map(int,input().split())))\nif n ==len(set(a)):\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s188094567":{
    "code_string":"n =int(input())\na = list(map(int,input().split()))\nif n = len(set(a)):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s805516563":{
    "code_string":"N = int(input())\nA = list(map(int, input.split()))\n\nif N == len(set(A)): print('Yes')\nelse: print('No')\n",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s648587023":{
    "code_string":"for p in P:\n    # \u671f\u5f85\u5024\n    # \u7d2f\u7a4d\u548c\n    exp += (1+p)\/2\n    p_e.append(exp)  \nif n == k:\n    print(p_e[-1])\nelse:\n    # \u521d\u671f\u5024\n    maxv = p_e[k-1] - 0\n    for i in range(1, n-k):\n        # \u96a3\u63a5\u3059\u308bk\u500b\u306e\u671f\u5f85\u5024\u306e\u548c\n        p_sum = p_e[k+i] - p_e[i]\n        maxv = max(maxv, p_sum)\n    print(maxv)",
    "error_obj":"NameError: name 'P' is not defined"
  },
  "s818036498":{
    "code_string":"N, K = map(int, input().split())\nP = list(map(int, input().split()))\n\nS = []\nsum_ = 0\nfor i, p in enumerate(P):\n  sum_ += p\n  S.append(sum_)\n\n\nmax_sum = 0\nfor i in range(N-K+1):\n  max_sum = max(max_sum, S[i+K] - S[i])\n\nres = (max_sum + K) \/ 2\n\nprint(res)",
    "error_obj":"IndexError: list index out of range"
  },
  "s594271137":{
    "code_string":"n, k= map(int,input().split())\nps = list(map(int, input().split()))\n    \ns = [0]*(n+1)\n \nfor i in range(n):\n    s[i+1] = s[i] + (ps[i] + 1)\/2\n \n    \ntmp=0\nfor i in range(len(res)-k):\n    tmp=max(tmp, s[i+k] - s[i])\n\nprint(\"{:.10f}\".format(tmp))",
    "error_obj":"NameError: name 'res' is not defined"
  },
  "s576862993":{
    "code_string":"import numpy\nn, k= map(int,input().split())\nps = list(map(int, input().split()))\n    \n \ns = [0]*(n+1)\n \nfor i in range(n):\n    s[i+1] = s[i] + (ps[i] + 1)\/2\n \n    \n#res = numpy.cumsum(data2)\ntmp=0\nfor i in range(len(res)-k):\n    tmp=max(tmp, s[i+k] - s[i])\n\nprint(\"{:.10f}\".format(tmp))",
    "error_obj":"NameError: name 'res' is not defined"
  },
  "s734955077":{
    "code_string":"N, K = map(int, input().split())\np = list(map(int, input().split()))\nans = [sum(p[:K])]\nfor i in range(N-K):\n  ans.append(ans[-1]-p[i]+p[i+k])\nprint(max(ans)\/2+K\/2)\n    ",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s688122681":{
    "code_string":"N,K=map(int,input().split())\np=list(map(int,input().split()))\nq=[]\nfor i in range(len(p)):\n  q.append(p[i])\nmaxi=q[K]-q[0]\nfor i in range(1,N-K+1):\n  sub=q[K+i]-q[i]\n  if sub>=maxi:\n    maxi=sub\nprint((maxi+K)\/2)",
    "error_obj":"IndexError: list index out of range"
  },
  "s560600274":{
    "code_string":"n,k=map(int,input().split())\na=[int(s) for s in input().split()]\nb=[0]*k\nc=0\nv[0]=a[0]\nfor i in range(n):\n    v[i+1]=v[i]+a[i+1]\nmx=v[2]\nfor i in range(3,n):\n    g=v[i]-v[i-2]\n    mx=max(mx,g)  \n    \nprint((mx+1)\/2)\n",
    "error_obj":"NameError: name 'v' is not defined"
  },
  "s507611438":{
    "code_string":"import numpy as np\nN,K = map(int,input().split())\np = list(map(int,input().split()))\n\nl = []\nfor i in range(N):\n    l.append((1+p[i])\/2)\n\na = [0] * N+1\na[0] = l[0]\nfor i in range(1,len(l)):\n    a[i] = a[i-1] + l[i]\n\nans = 0\nfor i in range(K,len(l)):\n    ans = max(ans,a[i]-a[i-K])\n\nprint(ans)",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s502170288":{
    "code_string":"N = input()\nK = int(input())\nm = len(N)\ndp = [[[0] * (K + 1) for _ in range(2)] for _ in range(m + 1)]\ndp[0][0][0] = 1 #[i][j][k] i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u308b\u3000N\u672a\u6e80\u3067\u78ba\u5b9a\u3067j=1 0\u3067\u306a\u3044\u6570\u304ck\u500b\n\nfor i in range(1, m + 1):\n    l = int(N[i - 1])\n    for k in range(K + 1): # 0\u3067\u306a\u3044\u6570\u306e\u500b\u6570 k \u3092\u5909\u5316\u3055\u305b\u3066\u3044\u304f\n        if k -1 >= 0:\n            if l != 0: #i\u6841\u76ee 1\uff5e9\n                dp[i][0][k] = dp[i - 1][0][k-1]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1] + dp[i - 1][0][k] + (l-1)*dp[i - 1][0][k-1]\n            else: #i\u6841\u76ee 0\n                dp[i][0][k] = dp[i - 1][0][k]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1]\n        else: #\u3059\u3079\u3066\u306e\u6570\u304c0\u3067\u306f\u306a\u3044\u5834\u5408\n            if l != 0: #i\u6841\u76ee 1\uff5e9\n                #dp[i][0][k]\n                dp[i][1][k] = dp[i - 1][1][k] + dp[i - 1][0][k] # i\u6841\u76ee\u3000N\u672a\u6e80\u3000\u3059\u3079\u3066\u304c0\u3000\u2192\u30000\u306e\u307f\u30001\u30b3\n            else: #i\u6841\u76ee 0\n                dp[i][0][k] = dp[i - 1][0][k] #  # i\u6841\u76ee\u3000N\u3068\u4e00\u81f4\u3000\u3059\u3079\u3066\u304c0\u3000\u2192\u3000\u8a72\u5f53\u306a\u3057\u30000\u30b3\n                dp[i][1][k] = dp[i - 1][1][k] # =1\n\nprint(dp)\nprint(dp[m][0][K] + dp[m][1][K])\n\nN = input()\nK = int(input())\nm = len(N)\ndp = [[[0] * (K + 1) for _ in range(2)] for _ in range(m + 1)]\ndp[0][0][0] = 1 #[i][j][k] i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u308b\u3000N\u672a\u6e80\u3067\u78ba\u5b9a\u3067j=1 0\u3067\u306a\u3044\u6570\u304ck\u500b\n\nfor i in range(1, m + 1):\n    l = int(N[i - 1])\n    for k in range(K + 1): # 0\u3067\u306a\u3044\u6570\u306e\u500b\u6570 k \u3092\u5909\u5316\u3055\u305b\u3066\u3044\u304f\n        if k -1 >= 0:\n            if l != 0: #i\u6841\u76ee 1\uff5e9\n                dp[i][0][k] = dp[i - 1][0][k-1]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1] + dp[i - 1][0][k] + (l-1)*dp[i - 1][0][k-1]\n            else: #i\u6841\u76ee 0\n                dp[i][0][k] = dp[i - 1][0][k]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1]\n        else: #\u3059\u3079\u3066\u306e\u6570\u304c0\u3067\u306f\u306a\u3044\u5834\u5408\n            dp[i][0][k] = 0 # i\u6841\u76ee\u3000N\u3068\u4e00\u81f4\u3000\u3059\u3079\u3066\u304c0\u3000\u2192\u3000\u8a72\u5f53\u306a\u3057\u30000\u30b3\n            dp[i][1][k] = 1 # i\u6841\u76ee\u3000N\u672a\u6e80\u3000  \u3059\u3079\u3066\u304c0  \u2192\u30000\u306e\u307f\u3000  1\u30b3\n\n#print(dp)\nprint(dp[m][0][K] + dp[m][1][K])",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s797095465":{
    "code_string":"N = input()\nK = int(input())\nm = len(N)\ndp = [[[0] * (K + 1) for _ in range(2)] for _ in range(m + 1)]\ndp[0][0][0] = 1 #[i][j][k] i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u308b\u3000N\u672a\u6e80\u3067\u78ba\u5b9a\u3067j=1 0\u3067\u306a\u3044\u6570\u304ck\u500b\n\nfor i in range(1, m + 1):\n    l = int(N[i - 1])\n    for k in range(K + 1): # 0\u3067\u306a\u3044\u6570\u306e\u500b\u6570 k \u3092\u5909\u5316\u3055\u305b\u3066\u3044\u304f\n        if k == 0: #\u3059\u3079\u3066\u306e\u6570\u304c0\u3067\u306f\u306a\u3044\u5834\u5408\n            dp[i][0][k] = 0 # i\u6841\u76ee\u3000N\u3068\u4e00\u81f4\u3000\u3059\u3079\u3066\u304c0\u3000\u2192\u3000\u8a72\u5f53\u306a\u3057\u30000\u30b3\n            dp[i][1][k] = 1 # i\u6841\u76ee\u3000N\u672a\u6e80\u3000  \u3059\u3079\u3066\u304c0  \u2192\u30000\u306e\u307f\u3000  1\u30b3            \n        else k -1 >= 0:\n            if l != 0: #i\u6841\u76ee 1\uff5e9\n                dp[i][0][k] = dp[i - 1][0][k-1]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1] + dp[i - 1][0][k] + (l-1)*dp[i - 1][0][k-1]\n            else: #i\u6841\u76ee 0\n                dp[i][0][k] = dp[i - 1][0][k]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1]\n\n#print(dp)\nprint(dp[m][0][K] + dp[m][1][K])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s222789408":{
    "code_string":"import sys \nsys.setrecursionlimit(10**6)\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nMOD = 10**9+7\nN = int(readline())\nK = int(readline())\n@lru_cache(None)\ndef f(N,K):\n    if K == -1:\n        return 0\n    if N < 10:\n        if K == 0:\n            return 1\n        elif K == 1:\n            return N\n        else:\n            return 0\n    ans = 0\n    q, mod = divmod(N, 10)\n    ans += f(q,K) + mod * f(q,K-1) + (9-mod) * f(q-1,K-1) \n    return ans\nprint(f(N,K))",
    "error_obj":"NameError: name 'lru_cache' is not defined"
  },
  "s435708277":{
    "code_string":"n=input()\nk=int(input())\nl=len(n)\ndp=[[[0 for _ in range(2)] for _ in range(5)] for _ in range(l+1)]\ndp[0][1][1]=int(n[0])-1\ndp[0][1][0]=1\nfor i in range(1,L):\n  for j in range(4):\n    b=i-1\n    now=int(n[i])\n    if now=0:\n      dp[i][j][0]+=dp[b][j][0]\n    else:\n      dp[i][j][1]+=dp[b][j][0]\n      dp[i][j+1][1]+=dp[b][j][0]*(now-1)\n      dp[i][j+1][0]+=dp[b][j][0]\n    dp[i][j][1]+=dp[b][j][1]\n    dp[i][j+1][1]+=dp[b][j][1]*9\n  dp[i][1][1]+=9\nprint(dp[l-1][k][0]+dp[l-1][k][1])\n           ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s069414458":{
    "code_string":"dp[0][1][1]=int(n[0])-1\ndp[0][1][0]=1\ndp[0][0][1]=1\n\nfor i in range(1,l):\n  for j in range(4):\n    b=i-1\n    now=int(n[i])\n    if now==0:\n      dp[i][j][0]+=dp[b][j][0]\n    else:\n      dp[i][j][1]+=dp[b][j][0]\n      dp[i][j+1][1]+=dp[b][j][0]*(now-1)\n      dp[i][j+1][0]+=dp[b][j][0]\n    dp[i][j][1]+=dp[b][j][1]\n    dp[i][j+1][1]+=9*dp[b][j][1]\nprint(dp[l-1][k][0]+dp[l-1][k][1])\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s620618938":{
    "code_string":"MOD = 10**9 + 7\nMOD_t_MAX = 2 * 10**6 + 100\n\nfac  = [None] * MOD_t_MAX\nfinv = [None] * MOD_t_MAX\ninv  = [None] * MOD_t_MAX\ndef MOD_COM_init():\n    fac[0] = fac[1] = 1\n    finv[0] = finv[1] = 1\n    inv[1] = 1\n    for i in range(2, MOD_t_MAX):\n        fac[i] = fac[i - 1] * i % MOD\n        inv[i] = MOD - inv[MOD%i] * (MOD \/\/ i) % MOD\n        finv[i] = finv[i - 1] * inv[i] % MOD\ndef MOD_COM(n, k):\n    if n < k:\n        return 0\n    if n < 0 or k < 0:\n        return 0\n    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD\n\ndef main():\n    r1, c1, r2, c2 = map(int, input().split())\n    MOD_COM_init()\n    a = MOD_COM(r2+1+c2+1, r2+1) - 1\n    b = MOD_COM(r2+1+c1, c1) - 1\n    c = MOD_COM(r1+c2+1, r1) - 1\n    d = MOD_COM(r1+c1, c1) - 1\n    ans = a - b - c + d\n    print(ans % MOD)\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s500983755":{
    "code_string":"H, A = map(isn\u2019t, input().split())\nprint((H + A - 1) \/\/ A)",
    "error_obj":"SyntaxError: invalid character '\u2019' (U+2019)"
  },
  "s061093509":{
    "code_string":"h,a=map(int,input().split()\nans=h\/\/a+1\nif h%a==0:\n  ans-=1\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s038790810":{
    "code_string":"H, A = input().split() \n\nimport math\n\nprint(math.ceil(H\/A))",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'str' and 'str'"
  },
  "s588563475":{
    "code_string":"h,a=map(int,input().split())\ncount=0\nwhile h>:\n  h=h-a\n  count=count+1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s132022294":{
    "code_string":"H,A=input().split()\nprint(int(H)\/\/int(A)+1 if 1<=H<=10000 and 1<=A<=10000)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s136967206":{
    "code_string":"INPUT = list(input().split())\nH = INT(INPUT[0])\nA = INT(INPUT[1])\nif H%A == 0:\n  print(H\/\/A)\nelse:\n  print(H\/\/A + 1)",
    "error_obj":"NameError: name 'INT' is not defined"
  },
  "s472599966":{
    "code_string":"a,b=list(map(int,input()))\ncount=0\nwhile (a<0):\n  count+=1\n  a-=b\nprint(count)\n  ",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s214265249":{
    "code_string":"h,a = map(int,input().split())\nprint(h\/\/a+map(h%a!=0))",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s981791609":{
    "code_string":"h, a = int(input())\nif (h%a == 0):\n  print(h\/\/a)\nelse:\n  print(h\/\/a + 1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '10 4'"
  },
  "s747951612":{
    "code_string":"h,a=map(int,input.split())\nif h%a==0:\n  print(h\/\/a)\nelse:\n  print(h\/\/a+1)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s042494050":{
    "code_string":"h,n= map(int, input().split())\na = sum(list(map(int,input().split())))\nprint(\"Yes\" if h-a <=0 else \"No\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s775265939":{
    "code_string":"h,a = map(int,input().split())\nif h % a = 0:\n  print(h\/\/a)\nelse:\n  print(h\/\/a+1)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s991246546":{
    "code_string":"tmp = input().split(\" \")\n\nHP = int(tmp[0])\nattack = int(tmp[1])\n\nprint(math.ceil(HP\/attack))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s151041709":{
    "code_string":"H, A = map(int, input.split())\nans = H \/\/ A\nif H % A != 0:\n  ans = ans + 1\nprint(ans)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s981560127":{
    "code_string":"h,a=map(int,input.split())\nif h>a:\n  print(h\/\/a)\nif h<=a:\n  print(1)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s760148857":{
    "code_string":"ri = lambda S: [int(v) for v in S.split()]\ndef rii(): return ri(input())\n\nH, A = rii()\n\nprint((H \/\/ A)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s983972101":{
    "code_string":"H, A = map(int, intput().split())\nres = H \/\/ A\nif H % A > 0:\n  \tres += 1\nprint(res)\n",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s011776237":{
    "code_string":"h,a=map(int,input.split())\ncnt=0\nwhile True:\n    h-=a\n    cnt+=1\n    if h<=0:\n        break\nprint(cnt)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s823812096":{
    "code_string":"H,A=map(int, input().split())\nprint(math.ceil(H\/A))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s267482146":{
    "code_string":"h,a = map(int,input().split())\nans = 0\nfor h >0:\n  h -= a\n  ans += 1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s773319071":{
    "code_string":"h , a = map(int, input().split())\n\nans = h \/\/ a\nif h % a == 0:\n    print(ans)\nesle:\n    print(ans + 1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s009269519":{
    "code_string":"H,A = map(int(),input().split)\nprint(H\/\/A if H%A == 0 else H\/\/A+1)\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s400198894":{
    "code_string":"h,a = map(int,input().split())\nprint(h\/\/a + (1-int(h%a==0))\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s987818486":{
    "code_string":"#include <bits\/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\n\n#define MOD (long long)(1e9+7)\n#define INF (1LL<<60)\n#define rep(i,n) for(ll i = 0; i < (n); i++)\n#define rep1(i,n) for(ll i = 1; i <= (n); i++)\n\ntemplate<class T> inline bool chmin(T& a, T b) {\n  if (a > b) {\n    a = b;\n    return true;\n  }\n  return false;\n}\ntemplate<class T> inline bool chmax(T& a, T b) {\n  if (a < b) {\n    a = b;\n    return true;\n  }\n  return false;\n}\n\n\n\/\/ \u6700\u5927\u516c\u7d04\u6570\nll gcd(ll a, ll b)\n{\n  if(b == 0) return a;\n  return gcd(b, a % b);\n}\n\n\/\/ mod m \u306b\u304a\u3051\u308ba \u306e\u9006\u5143\nll modinv(ll a, ll m) {\n  ll b = m, u = 1, v = 0;\n  while (b) {\n    ll t = a \/ b;\n    a -= t * b; swap(a, b);\n    u -= t * v; swap(u, v);\n  }\n  u %= m;\n  if (u < 0) u += m;\n  return u;\n}\n\n\/\/ \u7d20\u56e0\u6570\u5206\u89e3\nvector<pair<ll, ll>> prim;\nvoid pf(ll n)\n{\n  ll s = sqrt(n);\n  ll r = 0;\n  for(ll i = 2; i <= s; i++) {\n    if((n % i) == 0) {\n      r = 0;\n      do {\n\tr++;\n\tn = n \/ i;\n      } while((n % i) == 0);\n      prim.push_back({i, r});\n    }\n  }\n  if(n > s) {\n    prim.push_back({n, 1});\n  }\n}\n\nvoid solve()\n{\n  \/\/ ll N; cin >> N;\n  \/\/ ll N, K; cin >> N >> K;\n  \/\/ ll x, y, z; cin >> x >> y >> z;\n  \/\/ ll a, b, c; cin >> a >> b >> c;\n  \/\/ string s; cin >> s;\n  \/\/ vector<ll> a(N); rep(i, N) cin >> a[i];\n  \n  \/\/ ll ans = 0;\n  \/\/ bool ok = false;\n\n  \/\/ cout << ans << endl;\n  \/\/ cout << (ok?\"Yes\":\"No\") << endl;\n}\n\n\nint main(void)\n{\n  \/\/ ll t; cin >> t; rep(i, t)\n  solve();\n}\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s410693969":{
    "code_string":"h, n = map(int, input().split())\na = [int(input()) for i in range(n)]\nif sum(a) >= h:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 5 6'"
  },
  "s769235143":{
    "code_string":"H, N = map(int,input().split())\nA = list(map(int,input().split())\nT = 0\nfor i in range(N):\n  T += A[i]\nif H - T <=0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s928708144":{
    "code_string":"a,b = map(int,input().split())\nlis = list(map(int,input().split))\nc = sum(lis)\nprint(\"Yes\" if a > c else \"No\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s614823526":{
    "code_string":"# \u5165\u529b\nmonster_hp, quantity_of_skills = map(int, input().split())\nskills = map(int, input().split())\nskills_list = [skills]\n\n# \u51e6\u7406\ntotal_damage = 0\nfor i in skills_list:\n    total_damage += i\n\nif monster_hp <= total_damage:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'map'"
  },
  "s346885223":{
    "code_string":"import sys\nH,N=map(int,input().split())\nA=map(int,input().split())\ns=0\nfor i in range(N):\n  s+=A[i]\n  if s>=H:\n    print('Yes')\n    sys.exit()\nprint('No')",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s937570083":{
    "code_string":"H,N = map(int, input().split())\nA = list(int(input()))\nif sum(A) >= H:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 5 6'"
  },
  "s760238174":{
    "code_string":"h,n=map(int,input().split())\na=list(map(int,innput().split()))\n\nif sum(a)>=h:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"NameError: name 'innput' is not defined"
  },
  "s611201002":{
    "code_string":"\n# ABC153\n# B Common Raccoon VS Monster\nh, n = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\nif a <= s:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"TypeError: '<=' not supported between instances of 'list' and 'int'"
  },
  "s434591225":{
    "code_string":"#ABC153B\nh,n = map(int,input().split())\na = list(map(int,inout().split()))\nprint(\"Yes\" if sum(a) >= h else \"No\")",
    "error_obj":"NameError: name 'inout' is not defined"
  },
  "s395588686":{
    "code_string":"\nH, N = map(int, input().split())\ndamege = map(int, input().split())\ndamege_list = [damege]\n\ndamege.sort()\n\nif H - (damege[-1] + damege[-2]) <= 0:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"AttributeError: 'map' object has no attribute 'sort'"
  },
  "s308049582":{
    "code_string":"H,N = map(int, input().split())\nlists = [] lists.append(int, input().split())\nlists = lists.sort()\nif N>=2 and lists[N-1]+lists[N-2]>=H:\n  print('Yes')\nIf N==1 and lists[0]>=H:\n  print('Yes')\nif N==1 and lists[0]<H:\n  print('No')\nelse:\n  print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s340114897":{
    "code_string":"H, N = map(int, input().split())\nA = list(map(int, input().split()))\n\nif sum(A) => H:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s115917997":{
    "code_string":"H, N,  = map(int, input().split())\n\nDamage = []\nfor i in range(1,N+1):\n    Ai = map(int, input().split())\n    Damage.append(Ai)\nTotal_Damage = sum(Damage)\n\nif H <= Total_Damage:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s591850590":{
    "code_string":"210 5\n31 41 59 26 53",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s571658824":{
    "code_string":"h,n = map(int,input())\na = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n  ans += a[i]\nif(ans>=h):\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s579293664":{
    "code_string":"H, N,  = map(int, input().split())\n\nDamage = []\nfor i in range(1,N+1):\n    Ai = int(input())\n    Damage.append(Ai)\nTotal_Damage = sum(Damage)\n\nif H <= Total_Damage:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 5 6'"
  },
  "s973792757":{
    "code_string":"n,k = map(int,input().split())\nh = list(map(int,input().split()))\nh.sort(reverce=True)\nans = 0\nif(k>=n):\n  ans = 0\nelse:\n  for i in range(k,n):\n    ans += h[i]\nprint(ans)\n",
    "error_obj":"TypeError: 'reverce' is an invalid keyword argument for sort()"
  },
  "s827662625":{
    "code_string":"N,K = map(int,input().split())\nenemys = list(map(int,input().split()))\nenemys = sorted(enemys,reversed = True)\nif K >= len(enemys):\n  print(0)\nelse:\n  enemys = enemys[K+1:]\n  print(sum(enemys))",
    "error_obj":"TypeError: 'reversed' is an invalid keyword argument for sort()"
  },
  "s703117913":{
    "code_string":"import sys\n\nN, K = map(int, next(sys.stdin.buffer).split())\nH = sorted(map(int, next(sys.stdin.buffer).split()))\n\nprint(sum(H[:K])",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s819499523":{
    "code_string":"n,k = map(int, input().split())\nH = sorted(list(map(int, input().split())))\nif k >= n: ans = 0\nelif k == 0: ans = sum(H)\nelse: ans = sum(H[-k])\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s167248853":{
    "code_string":"def main():\n    n, k = map(int, input().split())\n    h = [int(x) for x in input().split()]\n    h_s = sorted(h)\n    if len(h_s) <= k:\n        ans = 0\n    else:\n        for _ in range(k):\n            h_s.pop()\n        ans = sum(h_s)\n    print(ans)\n\nif __name__ == '__main__':\n    main(",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s824963611":{
    "code_string":"h = int(input())\nans = 0\ni = 0\nwhile True:\n  if(i>=h):\n    break\n  i+=\nif(i = 0):\n  print(1)\nelse:\n  print(2**(i+1)-1)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s912466788":{
    "code_string":"h = int(input())\nans = 1\nh \/\/= 2\ni = 2\nwhile h > 0:\n    ans += i\n    i *= 2\n    h \/\/= 2\nprint(ans)\npow(2,n)-1",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s740595342":{
    "code_string":"H = int(input())\ncount = 0\nans = 0\nwhile H>1:\n  H = H\/\/2\n  ans += 2**i\n  count += 1\nans += 2**i\nprint(ans)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s489816625":{
    "code_string":"n = int(log2(int(input())))\n\nprint(2 ** (n + 1) - 1)",
    "error_obj":"NameError: name 'log2' is not defined"
  },
  "s033326649":{
    "code_string":"H = int(input())\nimport pdb; pdb.set_trace()\ndef atk(n):\n  if n==1: return 1\n  return 1 + 2*(atk(n\/\/2))\n\nprint(atk(H))",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p02786\/Python\/s033326649.py\", line 3, in <module>\n    def atk(n):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p02786\/Python\/s033326649.py\", line 3, in <module>\n    def atk(n):\n  File \"\/usr\/lib\/python3.9\/bdb.py\", line 88, in trace_dispatch\n    return self.dispatch_line(frame)\n  File \"\/usr\/lib\/python3.9\/bdb.py\", line 113, in dispatch_line\n    if self.quitting: raise BdbQuit\nbdb.BdbQuit\n"
  },
  "s727003922":{
    "code_string":"h=int(input())\na=[]\nwhile h>=1:\n    a.append(h)\n    h\/\/2\ncount=0\nfor i in a:\n    while a[i]>=1:\n        count+=1\n        a[i]\/\/2\nprint(count)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s653154913":{
    "code_string":"H = int(input())\nans = 0\nwhile H > 0:\n    if H == 1:\n        ans += 1\n    else:\n        e = H \/\/ 2\n        ans += e\n        H -= 1\nprint(ans)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s992825697":{
    "code_string":"H = int(input())\n\n# \u4f53\u529b\u304cH\u306e\u30e2\u30f3\u30b9\u30bf\u30fc1\u4f53\u306b\u52dd\u3064\u305f\u3081\u306b\u5fc5\u8981\u306a\u653b\u6483\u56de\u6570\u3092f(H)\u3068\u3059\u308b\n# \u3059\u308b\u3068\u3001f(H)\u306f\u4ee5\u4e0b\u306e\u6f38\u5316\u5f0f\u306b\u5f93\u3063\u3066\u6c42\u307e\u308b\n# f(H)=2*f(floor(H\/2)+1) (H>1)\n# f(H)=1 (H=1)\n\ndef attack_num(x):\n  if x == 1: return 1\n  else: return 2*f(x \/\/ 2) + 1\n  \nprint(attack_num(H))",
    "error_obj":"NameError: name 'f' is not defined"
  },
  "s716350899":{
    "code_string":"(h,n),*t=[map(int,o.split())for o in open(0)]\ndp=[0]*(h+10100)\nfor i in range(1,h+1):dp[i]=min(dp[i-a]+b for a,b in t)\nprint(dp[h])",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 0)"
  },
  "s548550874":{
    "code_string":"import numpy as np\nh,n=map(int,input().split)\np=[list(map(int,input().split())) for _ in range(n)]\nm=max(p[:,0])\ndp=[0]*(h+m+1)\nfor i in range(m+1,h+m+1):\n  dp[i]=min(dp[i-a]+b for a,b in p)\nprint(dp[h+m])",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s417454146":{
    "code_string":"h,n= map(int, input().split())\np = [list(map(int, input().split())) for _ in range(n)] \nm = 10**4\ndp = [0]*(h+m+1)\nfor i in range(m+1,h+m+1):\n  dp[i] = min(dp[i-a] + b for a,b in p)\nprint(dp[h+m+])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s410830643":{
    "code_string":"from numba import jit\nfrom sys import stdin\n\n@jit(nopython=True)\ndef num():\n    h, n = map(int, input().split())\n    magic = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    INF = float('inf')\n    ans = [INF]*(h+1)\n    ans[-1] = 0\n\n    for i in range(h, 0, -1):\n        if ans[i] != INF:\n            for j in magic:\n                if i-j[0] < 0:\n                    num = ans[i]+j[1]\n                    if ans[0] > num:\n                        ans[0] = num\n                else:\n                    num = ans[i]+j[1]\n                    if ans[i-j[0]] > num:\n                        ans[i-j[0]] = num\n    return ans[0]\nprint(num())\n\n\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s963554537":{
    "code_string":"import sys\ndef input(): return sys.stdin.readline().rstrip()\nimport numpy as np\ndef main():\n    h,n=map(int,input().split())\n    lis=np.array([list(map(int,input().split())) for _ in range(n)])\n    a_max=np.max(lis[:,0])\n    dp=np.full(h+a_max+1,10**10)\n    dp[0]=0\n    for l in lis:\n        dp[i:i+l[0]+1]=np.minimum(dp[i:i+l[0]+1],dp[i]+l[1])\n    print(dp)\n    print(dp[h])\n\nif __name__=='__main__':\n    main()",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s381431090":{
    "code_string":"from collections import deque\nn,d,a=map(int,input().split())\nxh=[map(int,input().split()) for _ in range(n)]\nxh.sort()\nD=2*D\nans=0\ntotal=0\nq=deque()\nfor i in range(n):\n  x,h=xh[i]\n  while len(q)>=1 and x>q[0][0]:\n    total-=q.popleft()[1]\n  h-=total\n  if h>0:\n    num=(h-h%a)\/\/a\n    damage=a*nim\n    ans+=num\n    total+=damage\n    q.append([x+D,damage])\nprint(ans)",
    "error_obj":"TypeError: '<' not supported between instances of 'map' and 'map'"
  },
  "s646916779":{
    "code_string":"from collections import deque\nfrom math import ceil\n\n# n\u4e2a\u602a\u7269\uff0cd\u6740\u4f24\u534a\u5f84\uff0ca\u6740\u4f24\u503c\nn, d, a = map(int,input().split())\n\nms = sorted([(pos, ceil(hp \/ a)) for pos, hp in [map(int, input().split()) for i in range(n)])\n \nbombs = deque()\n \nans = 0\nvalid_bomb = 0\nfor pos, hp in ms:\n  # \u67e5\u770b\u961f\u5217\u91cc\u7684bomb\u662f\u5426\u5bf9\u5f53\u524d\u602a\u7269\u6709\u6548\n  while que and que[0][0] < pos:\n    bomb_border, bomb_cnt = bombs.popleft()\n    valid_bomb -= bomb_cnt\n  \n  # \u8fd8\u9700\u65b0\u52a0\u591a\u5c11bomb\u624d\u80fd\u706d\u6389\u5f53\u524d\u602a\u7269\n  bomb_cnt = max(0, hp - valid_bomb)\n  valid_bomb += bomb_cnt\n  ans += bomb_cnt\n  \n  # \u65b0\u52a0\u7684bomb\u653e\u5165\u961f\u5217\n  if bomb_cnt > 0:\n    que.append([pos + d * 2, bomb_cnt])\n \nprint(ans)  \n",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s622654884":{
    "code_string":"N, M = map(int, input.split())\nprint('Yes') if N == M else print('No')",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s386824475":{
    "code_string":"N=int(input(\"Enter test cases:\"))\nM=int(input(\"Enter M:\"))\nif(N==M):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 3'"
  },
  "s217344178":{
    "code_string":"n, m = int(input())\nif n == m:\n  print(\"Yes\")\nelse(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s318246832":{
    "code_string":"N, M = map(int, input().split())\nprint('Yes' if N==M else 'No)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s429461376":{
    "code_string":"n, m = list(map(int, input()))\nif n*n == m*n:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s537241092":{
    "code_string":"n,m = map(int, input().split())\nif n == m\n   print(\"Yes\")\nelse:\n   print(\"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s739285125":{
    "code_string":"N M =map(int,input().split())\nif N==M:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s509444756":{
    "code_string":"x,y,z=input().split()\nx=int(x)\ny=int(y)\n\n\n\nif x==y:\n    print(\"Yes\")\n\nelse:\n    print(\"No\")\n    ",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s051765807":{
    "code_string":"N,M=map(int,input())\nif(N==M):\n  print(\"AC\")\nelse:\n  print(\"WA\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s216519786":{
    "code_string":"n,m=int(input())\nif(n==m) print('Yes')\nelse print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s420634472":{
    "code_string":"a,b=list(map(int,input().splilt()))\nif a==b:\n  print('Yes')\nelse :\n  print('No')\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'splilt'"
  },
  "s551761514":{
    "code_string":"n, m = map(int(), input().split())\nif n == m:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s414977077":{
    "code_string":" n, m = map(int, input().split())\n    if n == m:\n        print('Yes')\n    else:\n        print('No')",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s922599164":{
    "code_string":"\na, b = map(int, input(), split())\nif a == b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s779280965":{
    "code_string":"n,m = map(int,input().spit())\nif n == m:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'spit'"
  },
  "s162993087":{
    "code_string":"n,m=map(int,input().split())\nif(n==m):\n    print(yes)\nelse:\n    print(no)\n",
    "error_obj":"NameError: name 'yes' is not defined"
  },
  "s115055885":{
    "code_string":"N,M = map(int,input())\n\nprint(\"Yes\") if N==M else print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s091310377":{
    "code_string":"n = input()\nm = input()\n\nif n == m:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s296032006":{
    "code_string":"N, M = map(int, input().split())\n\nif(N = M):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s363678805":{
    "code_string":"n, m = map(int, input().split())\nif m >= n:\n  print(\"Yes\")\nelses:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s728641521":{
    "code_string":"from sys import stdin\ninput = sys.stdin.buffer.readline\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\nn, m = MAP()\nprint('Yes') if n == m else print('No')",
    "error_obj":"NameError: name 'sys' is not defined"
  },
  "s895295273":{
    "code_string":"a,b=input()\nA=int(a*b)\nB=int(b*a)\nprint(min(A,B))",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s486342101":{
    "code_string":"a,b=map(str,input().split())\nres = \"\"\nif a < b:\n  for i in range(b):\n    res += a\nelse:\n  for i in range(a):\n  res += b\nprint(res)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s429916628":{
    "code_string":"a_str, b_str = input.split()\na, b = int(a_str), int(b_str)\n\nA = a_str*b\nB = b_str*a\n\nprint(min(A, B))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s657638679":{
    "code_string":"a, b = map(int, input().split())\n \nif a > b:\n  print(str(b) * a)\nelse\n  print(str(a) * b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s497134194":{
    "code_string":"a,b = int(input())\nls = [str(a) * b, str(b) * a]\nls.sort()\nprint(ls[0])",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 3'"
  },
  "s328012030":{
    "code_string":"a,b=input().split()\nc = str(a)**b\nd = str(b)**a\nif a<b:\n  print(c)\nelse:\n  print(d)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'str'"
  },
  "s821125518":{
    "code_string":"a, b = map(int,input().split())\nmin_a=str(a)*b\nmin_b=str(b)*a\nprint(min(min_a, min_b)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s077458081":{
    "code_string":"input_line=input().rstrip().slpit()\nnum1 = int(input_line[0])\nnum2 = int(input_line[1])\n\nif (num1 > num2):\n  print(str(num2)*num1)\nelif (num1 < num2):\n  print(str(num1)*num2)\nelif (num1 == num2):\n  print(str(num1)*num2)",
    "error_obj":"AttributeError: 'str' object has no attribute 'slpit'"
  },
  "s421692814":{
    "code_string":"a, b = map(int,input().split())\na = (\"\".join(a))*b",
    "error_obj":"TypeError: can only join an iterable"
  },
  "s143853306":{
    "code_string":"A,B=map(int,input().split())\nif B < A:\n  A,B=B,A\nfor i in range B;\n print(A, end=\"\")\nprint()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s972258116":{
    "code_string":"a,b=map(int,input().split())\nif a<=b:\n  for i in range(b):\n    print(a)\nelse:\n    for i in range(a):\n    print(b)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s712321770":{
    "code_string":"a,b=map(str,input().split())\nif int(a)<=int(b):\n  s=a\n  for i in range(b-1):\n    s+=a\n  print (s)\nelse:\n  s=b\n  for j in range(a-1):\n    s+=b\n  print(s)\n  \n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s899419989":{
    "code_string":"n = int(input())\np = list(map(int,input().split()))\na = p[0]\nans = 0\nfor i in range(n):\n  if(m<=p[i]):\n    ans += 1\n    a = p[i]\nprint(ans)",
    "error_obj":"NameError: name 'm' is not defined"
  },
  "s716568922":{
    "code_string":"n = int(input())\nx = list(map(int,input().split()))\ncount = 1\nif n >=2:\n  for i in range(n-2):\n    a = min(x(range(0,i,1)))\n    if a >=x[i+1]:\n      count+=1\n    else:\n      count+=0\nelse:\n  print(count)\n  exit()\n  \nprint(count)",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s329287525":{
    "code_string":"n=int(input())\nlst=list(map(int,input().split()))\npremin=lst[0]\nans=0\nfor x in lst:\n  if min_list>=x:\n    ans+=1\n    premin=x\nprint(ans)\n",
    "error_obj":"NameError: name 'min_list' is not defined"
  },
  "s759798330":{
    "code_string":"n=input()\np=list(map(int,input().split()))\nans,m=0,p[0]\nfor i in range(n):\n    m=min(m,p[i])\n    if m==p[i]: ans+=1\nprint(ans)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s556326067":{
    "code_string":"N=int(input())\nL=map(int,input().split())\nans=1\nM=L[0]\nfor i in range(1,N):\n  if M>=L[1]:\n    M=L[1]\n    ans+=1\n  else:\n    continue\nprint(ans)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s486887250":{
    "code_string":"N = int(input())\nP = list(map(int, input().split()))\n\nnum = P[0]\ncount = 1\n\nfor i in range(1, n):\n  if num >= P[i]:\n    count += 1\n    num = P[i]\n\nprint(count)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s312165395":{
    "code_string":"N=int(input())\nP=list(map(int, input().split()))\n\ncnt=1\n\nif N==1:\n    print(1)\nelif N==2:\n    if P[1] < P[0]:\n        print(2)\n    else:\n        print(1)\nelse:\n    tmp = P[i-2]\n    for i in range(2,N):\n        if P[i] < min(P[i-1],tmp):\n            tmp = min(P[i-1],tmp)\n            cnt+=1\n    print(cnt)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s967878631":{
    "code_string":"N = int(input())\nP = list(map(lambda p : int(p), input().split(\" \")))\nleft_min = P[0]\ncnt = 0\nfor i in range(P):\n  if left_min >= P[i]:\n    cnt += 1\n    left_min = P[i]\nprint(cnt)",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s192695481":{
    "code_string":"N=int(input())\nl=[0]*10\n\nfor i in range(1,N+1):\n  if str(i[0])==str(i[-1]):\n    l[int(str(i[0]))]+=1\n\nans=0\nfor i in range(l):\n  ans+=i*i\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s006025915":{
    "code_string":"N = int(input())\n\nnum = [[0] * 10 for _ in range(10)]\n\nfor i in range(1, N+1):\n    top = int(str(i)[0])\n    end = int(str(i)[-1])\n    num[top][end] += 1\n\nans = 0\nfor i in range(10):\n    for j in range(10):\n        count += num[i][j] * num[j][i]\n\nprint(count)",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s203982524":{
    "code_string":"    import math\n    from functools import reduce\n     \n    def lcm_base(x, y):\n        return (x * y) \/\/ math.gcd(x, y)\n     \n    def lcm_list(numbers):\n        return reduce(lcm_base, numbers, 1)\n      \n    N = int(input())\n    A = list(map(int,input().split()))\n    ans = 0\n     \n    lcm = lcm_list(A)\n     \n    for i in range(N):\n      ans += lcm\/\/A[i]\n     \n    print(ans%1000000007)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s578007568":{
    "code_string":"from fractions import gcd\n\n\ndef lcm(x, y):\n    return (x * y) \/\/ gcd(x, y)\n\n\nMOD = 1000000007\n\nN = int(input())\n\nA = list(map(int, input().split()))\n\nlcm_ = 1\nfor a in A:\n    lcm_ = lcm(lcm_, a)\n\nans = 0\nfor a in A:\n    ans += lcm_ \/ a\n\nans %= MOD\nprint(int(ans))",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s654851284":{
    "code_string":"h,w,m = map(int,input().split())\ntotal = 0\nif h < w:\n  h,w = w,h\nfor i in range(w):\n  total += h\n  if total >= m:\n    print(i+1)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s407183214":{
    "code_string":"import math\nh,w,n=map(int,input().split())\nprint(math.ceil(n\/max(h,w)))",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s245927089":{
    "code_string":"a, b, n = map(int, input().split())\nprint(n \/\/ a + 1 if a >= b else n \/\/ b + 1)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s904963492":{
    "code_string":"    p = sorted([(a+b, a-b) for a, b in zip(x, l)])\n    _, th = p[0]\n    best = 0\n    for t, s in p:\n        if th <= s:\n            best += 1\n            th = t\n    return best\n\nn = int(input())\nx = [0]*n\nl = [0]*n\nfor i in range(n):\n    x[i], l[i] = map(int, input().split())\nprint(solve(n, x, l))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s079308189":{
    "code_string":"from collections import deque\nn = int(input())\ncou = n\nl_h = []\nfor i in range(n):\n  x,l  = map(int,input().split())\n  l_h.append([x-l,x+l])\nl_h.sort(key=lambda x: x[1])\nd = deque(l_h)\nt= d.popleft()\na,b = t[0],t[1]\nfor i in range(n-1):\n  m= d.popleft()\n  c,e= m[0],m[1]\n  if b<=c:\n    b = d\n  else:\n    cou -= 1\nprint(cou)",
    "error_obj":"TypeError: '<=' not supported between instances of 'collections.deque' and 'int'"
  },
  "s463494319":{
    "code_string":"N = int(input())\nse = [()] * N\nfor i in range(N):\n\tx, l = map(int, input().split())\n\tse[i] = (x-l, x+l)\nse = sorted(se, key=lambda x: x[1])\nans = N\nfor i in range(1, N):\n\tif se[i-1][1] > se[i][0]:\n\t\tse[i][1] = se[i-1][1]\n\t\tans -= 1\nprint(ans)",
    "error_obj":"TypeError: 'tuple' object does not support item assignment"
  },
  "s595560847":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\ndiff = [0] * N\nneg = []\npos = []\nfor i in range(N):\n    diff[i] = A[i] - B[i]\n    if diff[i] < 0:\n        neg.append(diff[i])\n    else:\n        pos.append(diff[i])\n\nif sum(diff) < 0:\n    print(-1)\n    exit(0)\n\ntobe_supplied = sum(neg)\npos.sort(reverse=True)\n\ncnt = len(neg)\n\nfor p in pos:\n    if tobe_supplied >= 0:\n        break\n    cnt += 1\n    tobe_supplied += p    \n\nprint(cnt)",
    "error_obj":"IndexError: list index out of range"
  },
  "s336861825":{
    "code_string":"N, K, S = map(int, input().split())\nans = [S if i <= K - 1 else 1 for i in range(N)]\nprint(\" \".join(ans))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s852784498":{
    "code_string":"N, K, S = map(int,input().split())\nL = [S]*K\nfor i in range(N-K):\n  if S < 10**9:\n  \tL.append(S+1)\n  else:\n    L.append(1)\n  \nprint(' '.join(map(int, L)))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s562739327":{
    "code_string":"n,k,s = map(int,input().split())\nx = [0]*n\nfor i in range(k):\n    x[i] = s\nif s == 1000000000:\n    for i in range(k,n+1):\n        x[i] = s-1\nelse:\n    for i in range(k,n+1):\n        x[i] = s+1\nfor i in x:\n    print(i,end = \" \")",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s023566891":{
    "code_string":"N, K, S = map(int, input().split())\nans = []\n\nfor i in range(N):\n    if i < K:\n        ans.append(S)\n    else:\n        ans.append(S+1)\n\nprint(\" \".join(ans))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s003473403":{
    "code_string":"nput()\nif x =='a':\n    print('b')\nif x =='b':\n    print('c')\nif x =='c':\n    print('d')\nif x =='d':\n    print('e')\nif x =='e':\n    print('f')\nif x =='f':\n    print('g')\nif x =='g':\n    print('h')\nif x =='h':\n    print('i')\nif x =='i':\n    print('j')\nif x =='j':\n    print('k')\nif x =='k':\n    print('l')\nif x =='l':\n    print('m')\nif x =='m':\n    print('n')\nif x =='n':\n    print('o')\nif x =='o':\n    print('p')\nif x =='p':\n    print('q')\nif x =='q':\n    print('r')\nif x =='r':\n    print('s')\nif x =='s':\n    print('t')\nif x =='t':\n    print('u')\nif x =='u':\n    print('v')\nif x =='v':\n    print('w')\nif x =='w':\n    print('x')\nif x =='x':\n    print('y')\nif x =='y':\n    print('z')\n",
    "error_obj":"NameError: name 'nput' is not defined"
  },
  "s016380900":{
    "code_string":"alphabet = [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,\\\n            t,u,v,w,x,y,z]\nC=input()\nidx=alphabet.index(C)\nprint(alphabet[idx+1])",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s940188498":{
    "code_string":"s = input()\nst = 'abcdefghijklmnopqrstuvwxyz'\nprint(st[index(s)+1])",
    "error_obj":"NameError: name 'index' is not defined"
  },
  "s399261574":{
    "code_string":"letter = ord(input())\nprint(chr(c+1))",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s326929268":{
    "code_string":"a=input()\nprint(a+1)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s453418035":{
    "code_string":"C = input()\n\nary = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\n\nprint(ary[ary.index(C) + 1])",
    "error_obj":"ValueError: empty separator"
  },
  "s640450874":{
    "code_string":"print(chr(ord((input())+1))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s705814704":{
    "code_string":"c=input()\nprint(c+1)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s761542032":{
    "code_string":"c = input()\n\nl = [chi(i) for i in range(65, 91)]\nprint(l[l.index(c) + 1])",
    "error_obj":"NameError: name 'chi' is not defined"
  },
  "s237184026":{
    "code_string":"C = input()\n\nprint(char(ord(C)+1))",
    "error_obj":"NameError: name 'char' is not defined"
  },
  "s257375573":{
    "code_string":"from strings import ascii_lowercase as lc\ngiven = input()\nprint(lc[lc.index(given) + 1])",
    "error_obj":"ModuleNotFoundError: No module named 'strings'"
  },
  "s146458385":{
    "code_string":"c=input()\nalp=\"abcdefghijklmnopqrstuvwxyz\"\nfor i in range(25):\n  if c==alp[i]:\n    print(alh[i+1])\n    break\n              ",
    "error_obj":"NameError: name 'alh' is not defined"
  },
  "s109275319":{
    "code_string":"print(chr(ord(int(input())) + 1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'a'"
  },
  "s360073869":{
    "code_string":"print(char(ord(input())+1))",
    "error_obj":"NameError: name 'char' is not defined"
  },
  "s288418172":{
    "code_string":"I=\"abcdefghijklmnopqrstuvwxyz\"\nfor i in range(25):\n    if I[i]==input():\n        print(I[i+1])\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s734096964":{
    "code_string":"s = input()\nlist_S = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nfor i in list_s:\n  if list_s[i] == s:\n    print(list_s[i+1])\n   ",
    "error_obj":"NameError: name 'list_s' is not defined"
  },
  "s586430149":{
    "code_string":"c = int(input())\nC = ord(c)\nprint(chr(C))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'a'"
  },
  "s692944228":{
    "code_string":"c = input()\ns = list('abcdefghijklmnopqrstuvwxyz')\n\nfor i in s:\n    if c == s[i]:\n        print(s[i+1])\n        exit()",
    "error_obj":"TypeError: list indices must be integers or slices, not str"
  },
  "s113257448":{
    "code_string":"from collections import deque\n\nH, W = map(int, input().split())\nS = [list(input()) for _ in range(H)]\n\ndir = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\ndist = [[-1] * W for _ in range(H)]\n\ndef BFS(y, x):\n  \"\"\"(y, x)\u304b\u3089\u306f\u3058\u3081\u3066\u3001\u9053\u306e\u30de\u30b9\u3092BFS\u3067\u6700\u77ed\u8ddd\u96e2\u3092\u63a2\u3059\"\"\"\n  que = deque()\n  que.append((y, x))\n  dist[y][x] = 0\n  max_dist = 0\n  while que:\n    sy, sx = que.popleft()  # popleft?\n    for dy, dx in dir:\n      ny = sy + dy\n      nx = sx + dx\n      if 0 <= ny < H and 0 <= nx < W and S[ny][nx] != \"#\" and dist[ny][nx] == -1:\n        que.append((ny, nx))\n        dist[ny][nx] = dist[sy][sx] + 1\n        max_dist = max(max_dist, dist[ny][nx])\n  \n  return max_dist\n\nmax_dist = 0\nfor sy in range(H):\n  for sx in range(W):\n    if S[sy][sx] != \"#\":\n      dist = [[-1] * W for _ in range(H)]\n      max_dist = max(max_dist, BFS(sy, sx))\n      \nprint(max_dist)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'a'"
  },
  "s438717227":{
    "code_string":"import sys\n\n\ndef resolve(in_):\n    N, M = map(int, next(in_).split())\n    PS = tuple(line.strip().split() for line in in_)\n    \n    ac = set()\n    wa = {}\n\n    for p, s in PS:\n        if s == 'AC':\n            ac.add(p)\n        if s == 'WA' and p not in ac:\n            wa[p] = wa.setdefault(p, 0) + 1\n\n    penalties = 0\n    for k, v in wa.items:\n        if k in ac:\n            penalties += v\n    \n    return '{} {}'.format(len(ac), penalties)\n\n\ndef main():\n    answer = resolve(sys.stdin)\n    print(answer)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s386062132":{
    "code_string":"n,m=map(int,input().split())\nl1 = [0]*n\nl2 = [0]*n\nfor i in range(m):\n        p,s=map(str,input().split())\n        p= int(p)\n        if s == 'AC':\n                if l2[p-1] == 0:\n                        l2[p-1] +=1\n                else:\n                        pass \n        else:\n                if l2[p-1] == 0:\n                        l1[p-1] +=1\n                else:\n                        pass\nfor i in range(n):\n        if l2[i] == 0:\n                l1[i] == 0:\n                \nprint(sum(l2),sum(l1))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s209705691":{
    "code_string":"from collections import defaultdict\nN,M = map(int,input().split())\nAC_List = defaultdict(int)\nWA_List = defaultdict(int)\n\nfor i in range(M):\n    Num,Sta = map(str,input().split())\n    if Num in AC_List:\n        continue\n    else:\n        if Sta == \"WA\":\n            WA_List[Num] += 1\n        else:\n            AC_List[Num] += 1\n\nansct = 0\nfor k,v in WA_List:\n    if k in AC_List:\n        ansct += v\n            \nprint(str(len(AC_List))+\" \" +str(ansct))\n            \n            ",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s539632396":{
    "code_string":"import collections\n\nn, m = map(int, input().split())\nlist_ac = set()\ndic = collections.defaultdict(lambda:0)\n\nac = 0\nwa = 0\n\nfor _ in range(m):\n    p, s = input().split()\n    if s == \"WA\" and p not in list_ac:\n        dic[p] += 1\n    elif s ==\"AC\" and p not in list_ac:\n        list_ac.append(p)\n        ac += 1\n        if p in dic:\n            wa += dic[p]\n            \nprint(ac, wa)",
    "error_obj":"AttributeError: 'set' object has no attribute 'append'"
  },
  "s366356554":{
    "code_string":"import sys\nn,m = map(int,input().split())\np = [list(map(str,input().split())) for _ in range(m)]\nbox = []\nacnt,wcnt,tmp = 0,0,0\nif m == 0:\n\tprint(0,0)\n\tsys.exit()\ninx = 0\nfor i in range(m):\n\tif p[i][0] != inx\n\t\tif p[i][1] == 'AC':\n\t\t\t\tinx =p[i][0]\n\t\t\t\tacnt += 1\n\t\t\t\twcnt += tmp\n\t\t\t\ttmp = 0\n\t\telse:\n\t\t\ttmp += 1\nprint(acnt,wcnt)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s052704964":{
    "code_string":"N,M=map(int,input().split()) \nL=[list(input().split()) for i in range(M)]\nW=[0]*N\nA=[0]*N\na=0\nw=0\nfor i in range(M):\n  if L[i][1]==\"AC\":\n    A[int(L[i][0])-1]=1\n    \n  elif L[i][1]==\"WA\" and A[int(L[i][0])-1]==0:\n    W[int(L[i][0])-1]+=1\n#for i in A:\n  #a+=i\n#for i in W:\n  #w+=i\nfor i in range(n):\n  if A[i]>0:\n    a+=1\n    w+=W[i]\nprint(a,w)\n\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s619470923":{
    "code_string":"N, M = map(int, input().split())\nac = [False] * N\nwa_cnt = [0] * N\nac_cnt = 0\nfor i in range(M):\n    p, s = input().split()\n    p_i = int(p) - 1\n    if s == 'WA':\n        if not ac[p_i]:\n            wa_cnt[p_i] += 1\n    else:\n        if not ac[p_i]:\n            ac[p_i] = True\n            ac_cnt += 1\n\nwa_cnt_sum = 0\nfor i in range(N):\n    if ac_cnt[i]:\n        wa_cnt_sum += wa_cnt[i]\n\nprint(ac_cnt,wa_cnt_sum)\n",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s831314952":{
    "code_string":"n,m=map(int,input().split())\nl=[0]*(n+1)\nmiss=[0]*(n+1)\nfor _ in range(m):\n    p,s=input().split()\n    p=int(p)\n    if l[p]==0:\n        if s=='AC':\n            l[p]+=1\n        else:\n            miss[p]+=1\nfor i in range(m):\n    if l[i]==0 and miss[i]!=0:\n        miss[i]=0\na=l.count(1)\nb=sum(miss)\nprint(a,b)",
    "error_obj":"IndexError: list index out of range"
  },
  "s661769984":{
    "code_string":"N, M = map(int, input().split())\nans_num_lis = [0 for i in range(N)]\npre_ans_lis = [0 for i in range(N)]\nans_lis = [0 for i in range(N)]\nfor i in range(M):\n  problem, result = input().split()\n  problem_num = int(problem)\n  if result == \"WA\":\n    pre_ans_lis[problem_num] += 1\n  if result == \"AC\" and not ans_num_lis[problem_num]:\n    ans_num_lis[problem_num] = 1\n    ans_lis[problem_num] = pre_ans_lis[problem_num]\n\nprint(sum(ans_num_lis), sum(ans_lis))",
    "error_obj":"IndexError: list index out of range"
  },
  "s514009277":{
    "code_string":"N, M = map(int, input().split())\nps = [input().split() for _ in range(M)]\n\ncorrect = [0] * N\npenalty = [0] * N\nfor p, s in ps:\n    p = int(p)\n    if correct[p-1] == 1:\n        continue\n    if s == 'AC':\n        correct[p-1] = 1\n    else:\n        penalty[p-1] += 1\nprint(sum(correct), sum([p*c for p, c in zip(penalty, correct)]))))\n\n",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s124597664":{
    "code_string":"import sys\nimport time\nimport math\nimport itertools as it\ndef inpl():\n    return list(map(int, input().split()))\nst = time.perf_counter()\n# ------------------------------\n\nN, M = inpl()\ndp = [False] * (N+10)\nac = 0\nwa = 0\nfor _ in range(M):\n    p, S = input().split()\n    p = int(p)\n    if S == 'WA':\n        if !dp[p]:\n            wa += 1\n    else:\n        if !dp[p]:\n            ac += 1\n            dp[p] = True\nprint(ac, wa)\n\n\n# ------------------------------\ned = time.perf_counter()\nprint('time:', ed-st, file=sys.stderr)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s044282251":{
    "code_string":"n,m=map(int,input().split())\nac=[0]*(n+1)\nwa=0\nfor i in range(m+1):\n  p,c=input().split()\n  if c=='AC' and ac[int(p)]==0:\n    ac[int(p)]=1\n  elif c=='WA' and ac[int(p)]==0:\n    wa+=1\nprint(ac.count(1),wa)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s836277610":{
    "code_string":"n,m=map(int,input().split())\nwa=0\nac=0\ncheck = [0]*n\nfor _ in range(m):\n\ta, b = input().split()\n\ti = int(a)\n\tif check[i]==0:\n\t\tif b == \"WA\":\n\t\t\twa+=1\n\t\telif b == \"AC\":\n\t\t\tac+=1\n\t\t\tcheck[i]=1\nprint(ac,wa)",
    "error_obj":"IndexError: list index out of range"
  },
  "s735075172":{
    "code_string":"n,m = map(int,input().split())\nlis = [list(input().split()) for _ in range(m)]\n\ndp = [[0 for _ in range(2)] for _ in range(n)] # AC_flg, WA\u6570\n\nfor i in range(m):\n    if dp[i][0]==1:\n        continue\n    else:\n        if lis[i][1]=='WA':\n            dp[int(lis[i][0])][1] += 1\n        if lis[i][1]=='AC':\n            dp[int(lis[i][0])][0] = 1\n\nac = 0\nwa = 0\n\nfor i in range(n):\n    if dp[i][0]==1:\n        ac += 1\n        wa += dp[i][1]\n\nprint(ac,wa)",
    "error_obj":"IndexError: list index out of range"
  },
  "s365256533":{
    "code_string":"import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nn, m = map(int, readline().split())\n#n, m = map(int, input().split())\n\nacCount = 0\nwaCount = 0\ncheck = [0] * n\nwaCheck = [0] * n\n\nfor i in range(m):\n    p, s = map(str, input().split())\n    # print(p,s)\n    p = int(p)\n    if (check[p - 1] == 0):\n        if (s == 'WA'):\n            waCheck[p - 1] += 1\n\n        else:\n            acCount += 1\n            waCheck += waCheck[p - 1]\n\n            check[p - 1] = 1\n    else:\n        continue\n\nprint(acCount, waCount)\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s684911543":{
    "code_string":"n,m=map(int,input().split())\nif m==0:\n    print(0,0)\n    exit()\nAC=[0]*n+1\nWA=[0]*n+1\n\nfor i in range(m):\n    p,s=map(str,input().split())\n    if s==\"AC\":\n        AC[int(p)]+=1\n    elif s==\"WA\" and AC[int(p)]==0:\n        WA[int(p)]+=1\n\nfor i in range(n+1):\n    if AC[i]==0:\n        WA[i]=0\n\ncnt=AC.count(0)\nanswer=len(AC)-cnt\nans=sum(WA)\nprint(answer,ans)",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s060090678":{
    "code_string":"N, M = map(int, input().split())\np = []\nS = []\nfor _ in range(M):\n    a, b = input().split()\n    p.append(int(a))\n    S.append(b)\n\nans = [[] for i in range(N)]\nWA, AC = 0, 0\nfor p, S in zip(p, S):\n    if ans[p - 1].count(\"AC\") != 0:\n        pass\n    else:\n        ans[p - 1].append(S)\n        if S == \"WA\":\n            WA += 1\n        if S == \"AC\"\n            AC += 1\n\nprint(AC, WA)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s611983394":{
    "code_string":"n, m = map(int, input().split())\np = []\ns = []\nfor i in range(m):\n    p_i, s_i = input().split()\n    p.append(int(p_i))\n    s.append(b)\n\n\nres = [0]*n\ncorrect = 0\npenalty = 0\nfor i in range(m):\n    no = p[i] - 1\n    if res[no] == 1:\n        continue\n    elif s[i] == 'WA':\n        penalty += 1\n    elif s[i] == 'AC':\n        correct += 1\n        res[no] = 1\n\nprint(correct, penalty)",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s702951043":{
    "code_string":" n,m=map(int,input().split())\n\nAC=[0]*n\nWA=[0]*n\n\nfor i in range(m):\n    t=input().split()\n    p, s= int(t[0]), t[1]\n    if s=='AC':\n        AC[p-1]=1\n    elif s=='WA' and AC[p-1]==0:\n        WA[p-1]+=1\n\nac, wa=0,0\n\nfor i in range(n):\n    if AC[i]:\n        ac+=1\n        wa+=WA[i]\n        \nprint(ac, wa)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s899638192":{
    "code_string":"N, M = map(int, input().split())\nA = [input().split for i in range(M)]\ncac = 0\ncwa = 0\n\nfor i in range(1, N + 1):\n    for a in A:\n        while a[0] == str(i):\n            if a[1] == 'WA':\n                cwa += 1\n            else:\n                cac += 1\n                break\n        while a[0] == str(i):\n            A.remove(a)\nprint(cac, cwa)",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s740916438":{
    "code_string":"n,m=map(int,input().split())\nac_cnt = set()\nwa_cnt = 0\npenalty = [0]*n\nfor i in range(m):\n    p,s = input().split()\n    num = p - 1\n    if num not in ac_cnt:\n        if s == \"AC\":\n            ac_cnt.add(num)\n            wa_cnt += penalty[num]\n        else:\n            penalty[num] += 1\nprint(len(set(ac_cnt)),wa_cnt)\n    ",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s818443210":{
    "code_string":"def resolve():\n    n,m = map(int,input().split())\n    ac_list = [1]*n\n    ac = 0\n    wa = 0\n    for _ in range(m):\n        p,s = input().split()\n        if s == 'WA' and ac_list[int(p)-1]==1:\n            wa += 1\n        elif s == 'AC' and ac_list[int(p)-1]==1:\n            ac += 1\n            ac_list[int(p)-1] = 0\n    print(f'{ac} {wa}')\nresolve():",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s872021105":{
    "code_string":"N, M, *PS = open(0).read().split()\nN, M = [int(_) for _ in [N, M]]\ncor = [0] * (N + 1)\npen = [0] * (N + 1)\nfor p, s in PS:\n    p = int(p)\n    if cor[p] == 1:\n        continue\n    if s == 'AC':\n        cor[p] = 1\n    else:\n        pen[p] += 1\nans = [0, 0]\nfor i in range(1, N + 1):\n    if cor[p] == 0:\n        continue\n    ans[0] += 1\n    ans[1] += pen[ @ ]\nprint(*ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s170900404":{
    "code_string":"n, m = map(int, input().split())\nl = [list(input().split()) for i in range(m)]\ncnt = 0\nans = [0]*n\nnum = 0\nfor i in range(0, m):\n  num = int(l[i][0])\n  if l[i][1] == 'AC':\n    ans[num] = 1\n  elif ans[num] != 1:    \n    cnt += 1\nprint(sum(ans), cnt)",
    "error_obj":"IndexError: list index out of range"
  },
  "s234298460":{
    "code_string":"N,M=map(int,input().split())\nacs=[0 for i in range(N)]\nwa=[0 for i in range(N)]\n\nfor  i in range(M):\n    p,S=map(str,input().split())\n    p=int(p)\n    if S=='AC':\n        acs[p-1]=1\n    elif S=='WA' and acs[p-1]==0: \n        wa[p-1]+=1\nfor i in range(M):\n    if acs[i]==0:\n        wa[i]=0\nans=[sum(acs),sum(wa)]\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s829276513":{
    "code_string":"N,M = map(int,input().split())\n\njudge = [False]*N\nWAcnt = [0] * N\nACcnt = 0\nfor i in range(M):\n    p,S = (x for x in input().split())\n    p = int(p)\n    if judge[p-1] == False:\n        if S == \"AC\":\n            judge[p-1] = True\n            ACcnt += 1\n        else:\n            WAcnt[p-1] += 1\n\nWAans = 0\nfor i in range(N):\n    if judge[i] == True:\n        WAans += WAans[i]\n\nprint(ACcnt,WAans)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s427501626":{
    "code_string":"N, M = map(int, input().split())\nac = 0\nis_AC = [False] * (10 ** 5) + 1\nWA_cnt = [0] * (10 ** 5) + 1\nfor i in range(M):\n    p, s = input().split()\n    p = int(p)\n    if s == 'WA':\n        if is_AC[p]:\n            continue\n        else:\n            WA_cnt[p] += 1\n    else:\n        if is_AC[p]:\n            continue\n        else:\n            is_AC[p] = True\n            ac += 1\n\nprint(ac, sum(WA_cnt))\n\n",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s644534455":{
    "code_string":"from copy import deepcopy\n# \u521d\u671f\u5165\u529b\nimport sys\ninput = sys.stdin.readline\nH,W = (int(i) for i in input().split())\nmap_initial =[[\"#\"]*(W+2) for i in range(H+2)] #\u5468\u56f2\u3092\u58c1\u306b\u3059\u308b\u305f\u3081\uff0b\uff12\nfor h in range(1,H+1):\n    map_initial[h] =[\"#\"] +list(input().strip()) +[\"#\"]\n\ndef BSF(x,y):\n    dist =0\n    map =deepcopy(map_initial)\n    if map[x][y] ==\"#\":\n        return dist \n    dq =deque()\n    dq.append((x,y))\n    dq_sarch =deque()\n    while len(dq) >0:\n        h,w =dq.popleft()\n        map[h][w] =\"#\" #\u901a\u308a\u6e08\u3092\u58c1\u306b\u3059\u308b\n        if map[h+1][w]==\".\":\n            dq_sarch.append((h+1,w))\n        if map[h-1][w]==\".\":\n            dq_sarch.append((h-1,w))\n        if map[h][w+1]==\".\":\n            dq_sarch.append((h,w+1))\n        if map[h][w-1]==\".\":\n            dq_sarch.append((h,w-1))\n        if len(dq)==0:\n            dq =deepcopy(dq_sarch)\n            dq_sarch.clear()\n            dist +=1\n        #print(h,w,dist,end=\"\\t\")\n    return dist-1\n\n#\u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u3092\u5168\u63a2\u7d22\u3057\u3001\u6700\u9577\u8ddd\u96e2\u3092\u63a2\u3059\ndist_all =[]\nfor i in range(1,H+1):\n    for j in range(1,W+1):\n        dist_all.append(BSF(i,j) )\nprint(max(dist_all))",
    "error_obj":"NameError: name 'deque' is not defined"
  },
  "s335876891":{
    "code_string":"from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\nfrom copy import deepcopy\nfrom collections import deque\n\nh,w=nii()\ns=[list(input()) for i in range(h)]\n\ndef dfs(cs,i,j):\n  que=deque()\n  que.append([i,j])\n\n  cs[i][j]='#'\n\n  dist=[[-1 for a in range(w)] for b in range(h)]\n  dist[i][j]=0\n\n  while que:\n    y,x=que.popleft()\n    for dy,dx in [[1,0],[-1,0],[0,1],[0,-1]]:\n      ny=y+dy\n      nx=x+dx\n      if 0<=ny<h and 0<=nx<w and cs[ny][nx]=='.':\n        que.append([ny,nx])\n        cs[ny][nx]='#'\n        dist[ny][nx]=dist[y][x]+1\n\n  t_ans=0\n  for a in dist:\n    t_ans=max(t_ans,max(a))\n\n  return t_ans\n\nans=0\nfor i in range(h):\n  for j in range(w):\n    if s[i][j]=='.':\n      cs=deepcopy(s)\n      dist=dfs(cs,i,j)\n      ans=max(ans,dist)\n\nprint(ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s679645586":{
    "code_string":"#!\/usr\/bin\/env python\n# coding: utf-8\n\n# In[11]:\n\n\nfrom collections import deque\n\n\n# In[23]:\n\n\nH,W = map(int, input().split())\nS = []\nfor _ in range(H):\n    S.append(input())\n\n\n# In[24]:\n\n\ndef bfs(sx,sy):\n    dx = [1,0,-1,0]\n    dy = [0,1,0,-1]\n    d = [[-1]*W for _ in range(H)]\n    q = deque([])\n    q.append([sx,sy])\n    d[sx][sy] = 0\n    ans = 0\n    while q:\n        x,y = q.popleft()\n        for i in range(4):\n            nx = x + dx[i]\n            ny = y + dy[i]\n            if 0 <= nx < H and 0 <= ny < W and S[nx][ny] != \"#\" and d[nx][ny] == -1:\n                q.append([nx,ny])\n                d[nx][ny] = d[x][y] + 1\n                ans = max(ans,d[nx][ny])\n    return ans\n\n\n# In[25]:\n\n\nfor sh in range(H):\n    if \".\" in S[sh]:\n        for sw in range(W):\n            if S[sh][sw] == \".\":\n                ans = max(ans,bfs(sh,sw))\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s118500176":{
    "code_string":"H, W = map(int, input().split())\nS = []\nfor i in range(H):\n    S.append(input())\n\ndef bfs(start):\n    already = {}\n    queue = []\n    counter = 0\n    queue.append((start[0], start[1], 0))\n    already(start) = True\n    max_depth = 0\n    while counter < len(queue):\n        y, x, depth = queue[counter]\n        if depth > max_depth:\n            max_depth = depth\n        for move in ((-1, 0), (0, 1), (1, 0), (0, -1)):\n            new_y = y + move[0]\n            new_x = x + move[1]\n            if new_y >= 0 \\\n            and new_y < H \\\n            and new_x >= 0 \\\n            and new_x < W \\\n            and S[new_y][new_x] == '.' \\\n            and (new_y, new_x) not in already:\n                already[(new_y, new_x)] = True\n                queue.append((new_y, new_x, depth+1))\n        counter += 1\n    return max_depth\n\nanswer = 0\nfor i in range(H):\n    for j in range(W):\n        if S[i][j] == '#':\n            continue\n        depth = bfs((i, j))\n        if answer < depth:\n            answer = depth\nprint(answer)",
    "error_obj":"SyntaxError: cannot assign to function call"
  },
  "s117879634":{
    "code_string":"from collections import deque\nH,W=map(int,input().split())\nS=[list(input()) for _ in range(H)]\nA=[[0]*W for _ in range(H)]\nans=[]\n\nfor i in range(H):\n    for j in range(W):\n        c=0\n        sy=i\n        sx=j\n        A[i][j]=1\n        route=deque([(sy,sx,0)])\n        while route:\n            a,b,n=route.popleft()\n            c=n\n            if 0<=a<=H-1 and 0<=b<=W-1:\n                if S[a][b]=='.':\n                    S[a][b]=='#'\n                    route.append((a+1,b,n+1))\n                    route.append((a-1,b,n+1))\n                    route.append((a,b+1,n+1))\n                    route.append((a,b-1,n+1))\n        ans.append(c)\n\nprint(max(ans))\n                        ",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s843064835":{
    "code_string":"from networkx import*\n_,*s=open(i:=0)\ng=[]\nfor t in s:\n i+=1;j=0\n for u in t:g+=[(k:=i*20+j,k+20)]*(u>'#'<(s+['#'*k])[i][j])+[(k,k+1)]*(u>'#'<t[j:=j+1])\nprint(max(t[i]for _,t in shortest_path_length(Graph(g))for i in t))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s149426478":{
    "code_string":"def abc151d_maze_master():\n    h, w = map(int, input().split())\n    s = []\n    max_val = 0\n    for i in range(h):\n        s.append(input())\n    for hi in range(h):\n        for wi in range(w):\n            if s[hi][wi] == '#': continue\n            flg = [[-1] * w for _ in range(h)]\n            flg[hi][wi] = 0\n            q = [(0, hi, wi)]\n            heapq.heapify(q)\n            while len(q) > 0:\n                d, hj, wj = heapq.heappop(q)\n                for dh, dw in zip([0, 0, 1, -1], [1, -1, 0, 0]):\n                    if 0 <= hj + dh < h and 0 <= wj + dw < w and s[hj + dh][wj + dw] != '#' and \\\n                            (flg[hj + dh][wj + dw] == -1 or flg[hj + dh][wj + dw] > flg[hj][wj] + 1):\n                        heapq.heappush(q, (d + 1, hj + dh, wj + dw))\n                        flg[hj + dh][wj + dw] = flg[hj][wj] + 1\n                # print(q)\n            max_val = max(max_val, max([max(v) for v in flg]))\n    print(max_val)\n\n\nabc151d_maze_master()",
    "error_obj":"NameError: name 'heapq' is not defined"
  },
  "s546602931":{
    "code_string":"from collections import deque\nimport numpy as np\nH,W = map(int,input().split())\nMaze=[list(input()) for i in range(H)]\nfor hi in range(0,H):\n    for wi in range(0,W):\n        if Maze[hi][wi]==\"#\":\n            continue\n        maze1=[[0]*W for _ in range(H)]\n        stack=deque([[hi,wi]])\n        while stack:\n            h,w=stack.popleft()\n            for i,j in [[1,0],[-1,0],[0,1],[0,-1]]:\n                new_h,new_w=h+i,w+j\n                if new_h <0 or new_w <0 or new_h >=H or new_w >=W:\n                    continue\n                elif Maze[new_h][new_w]!=\"#\" and maze1[new_h][new_w]==0:\n                    maze1[new_h][new_w]=maze1[h][w]+1\n                    stack.append([new_h,new_w])\n        \n        maze1[hi][wi]=0\n        ans=max(ans,np.max(maze1))\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s126582913":{
    "code_string":"H, W = map(int,input().split())\ngrid = [list(input().split()) for _ in H]\nres = 0\ndef bfs(tup,visited):\n  def helper(tup, total):\n    if tup in visited():\n      res = max(res, total)\n    elif tup[0]>=H or tup[0] < 0 or tup[1]>=W or tup[1]<0 or grid[tup[0]][tup[1]]:\n      res = max(res, total)\n    else:\n      visited.add(tup)\n      h, w = tup\n      helper((h+1, w),total+1)\n      helper((h-1, w),total+1)\n      helper((h, w-1),total+1)\n      helper((h, w+1),total+1)\n  helper(tup,0)\n  return res\n      \nans = 0\nfor h in H:\n  for w in W:\n    if grid[h][w] == '#':\n      continue\n    ans = max(ans,bfs((h,w),set()))\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s222059928":{
    "code_string":"import math\nH, W = map(int, input().split())\nS = []\nfor i in range(H):\n  S.append(str(input()))\nd = [[float('inf') for i in range(V)] for j in range(V)]\n  \n  ",
    "error_obj":"NameError: name 'V' is not defined"
  },
  "s150176782":{
    "code_string":"import numpy as np\nimport queue\nH,W=map(int,input().split())\nS=list()\nfor m in range(H):\n  S.append(input())\nans=0\ni,j=7,6\nif S[i][j]==\".\":\n    L=[[-1]*W for i in range(H)]\n    L[i][j]=0\n    q=queue.Queue()\n    q.put([i,j])\n    while not q.empty():\n      r=q.get()\n      for k,l in [[1,0],[0,-1],[0,1],[-1,0]]:\n        if r[0]+k>=0 and r[0]+k<H and r[1]+l>=0 and r[1]+l<W and S[r[0]+k][r[1]+l]==\".\" and L[r[0]+k][r[1]+l]==-1:\n          L[r[0]+k][r[1]+l]=L[r[0]][r[1]]+1\n          q.put([r[0]+k,r[1]+l])\n    ans=max(ans,max(list(map(lambda x: max(x),L))))\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s257890625":{
    "code_string":"from collections import deque\n \nH, W = [int(x) for x in input().split()]\n \nfield = []\nfor i in range(H):\n    field.append(input())\n \nconn = [[[] for _ in range(W)] for _ in range(H)]\nfor i in range(H):\n    for j in range(W):\n        if field[i][j] == '.':\n            for e in [[-1, 0], [1, 0], [0, -1], [0, 1]]:\n                h, w = i + e[0], j + e[1]\n                if 0 <= h < H and 0 <= w < W and field[h][w] == '.':\n                    conn[i][j].append([h, w])\nd = 0\nfor i in range(H):\n    for j in range(W):\n        l = 0\n        q = deque([[i, j]])\n        dist = [[-1 for _ in range(W)] for _ in range(H)]\n        dist[i][j] = 0\n        while q:\n            v = q.popleft()\n            for w in conn[v[0]][v[1]]:\n                if dist[w[0]][w[1]] == -1:\n                    q.append(w)\n                    dist[w[0]][w[1]] = dist[v[0]][v[1]] + 1\n                    l = dist[w[0]][w[1]]\n \n    \td = max(d, l)\n \nprint(d)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s448646604":{
    "code_string":"def prepare(n, MOD):\n    f = 1\n    factorials = [1]\n    for m in range(1, n + 1):\n        f *= m\n        f %= MOD\n        factorials.append(f)\n    inv = pow(f, MOD - 2, MOD)\n    invs = [1] * (n + 1)\n    invs[n] = inv\n    for m in range(n, 1, -1):\n        inv *= m\n        inv %= MOD\n        invs[m - 1] = inv\n\n    return factorials, invs\n\n\nMOD = 10 ** 9 + 7\nfacts, invs = prepare(n, MOD)\n\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\n\nans_max = 0\nfor i in range(k - 1, n):\n    ans_max += (arr[i] * facts[i] * invs[k - 1] * invs[i - k + 1]) % MOD\n\narr.sort(reverse=True)\n\nans_min = 0\nfor i in range(k - 1, n):\n    ans_min += (arr[i] * facts[i] * invs[k - 1] * invs[i - k + 1]) % MOD\n\nprint((ans_max - ans_min) % MOD)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s568221028":{
    "code_string":"n,k = map(int,input().split())\na = list(map(int,input().split()))\na.sort()\np = [1]\nmod = 10**9+7\nfor i in range(n):\n    p.append(p[-1]*(i+2)%mod)\ndef comb(n,k,mod):\n    s = p[n-1]*pow(fac(k),mod-2,mod)%mod\n    s = s*pow(fac(n-k),mod-2,mod)%mod\n    return s\nmax_sum = 0\nmin_sum = 0\nfor i in range(n-k+1):\n    max_sum += a[-(i+1)]*comb(n-1-i,k-1,mod)\n    max_sum = max_sum%mod\n    min_sum += a[i]*comb(n-1-i,k-1,mod)\n    min_sum = min_sum%mod\nans = max_sum-min_sum\nif ans < 0:\n    ans += mod\nprint(ans)",
    "error_obj":"NameError: name 'fac' is not defined"
  },
  "s383323369":{
    "code_string":"n , k = map(int, input().split())\na = list(map(int,input().split()))\na.sort()\n\nN = 1000000007\n\ndef combi(n,r,N):\n    if n<r or n<0 or r<0:\n        ans = 0\n        return ans\n    if n==r:\n        ans = 1\n        return ans\n    r= min(r, n-r)\n    ans = f[n]*rf[r]*rf[n-r]%N\n    return ans\n\nf = [0]*(10**5+1)\nf[1]=1\n\nfor i in range(2,10**5+1):\n    f[i] = f[i-1]*i\n\nrf = [0]*(10**5+1)\n\nfor i in range(1,10**5+1):\n    rf[i] = pow(f[i],N-2,N)\n\nmax_sum=0\nmin_sum=0\n\nfor i in range(k-1,n):\n    t = combi(i,k-1,N)\n    max_sum+=a[i]*t\n    max_sum%=N\n    min_sum+=a[n-i-1]*t\n    min_sum%=N\nif max_sum-min_sum<0:\n    max_sum+=N\nprint(max_sum-min_sum)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s783399518":{
    "code_string":"n=int(input())\nxy=[list(map(int,input().split())) for _ in range(n)]\nsgm=pow(10.-7)\ndef func(c):\n    allp=[]\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xi,yi=xy[i]\n            xj,yj=xy[j]\n            dx=xi-xj\n            dy=yi-yj\n            d=((xi-xj)**2+(yi-yj)**2)**0.5\n            if c**2-(d\/2)**2<0:return False\n            h=(c**2-(d\/2)**2)**0.5\n            mx,my=(xi+xj)\/2,(yi+yj)\/2\n            if dx==0:\n                allp.append([mx-h,my])\n                allp.append([mx+h,my])\n            elif dy==0:\n                allp.append([mx,my-h])\n                allp.append([mx,my+h])\n            else:\n                dx,dy=dy,-dx\n                dh=(dy**2+dx**2)**0.5\n                dx*=h\/dh\n                dy*=h\/dh\n                allp.append([mx+dx,my+dy])\n                allp.append([mx-dx,my-dy])\n    for px,py in allp:\n        flg=True\n        for x,y in xy:\n            if ((px-x)**2+(py-y)**2)**0.5>c+sgm:\n                flg=False\n                break\n        if flg:\n            return True\n    return False\n\nr=2*max([abs(x) for x,y in xy])+max([abs(y) for x,y in xy])\nl,r=0,r\nfor i in range(300):\n    c=(l+r)\/2\n    if func(c):\n        l,r=l,c\n    else:\n        l,r=c,r\nprint(c)\n#print(c**2)",
    "error_obj":"TypeError: pow() missing required argument 'exp' (pos 2)"
  },
  "s603233388":{
    "code_string":"from math import sqrt\nN=int(input())\nXY=[tuple(map(int,input().split() for _ in range(N)))]\n\ndef calc(r):\n  lst=[]\n  for i in range(N-1):\n    x1=XY[i][0]\n    y1=XY[i][1]\n    for j in range(i+1,N):\n      x2=XY[j][0]\n      y2=XY[j][1]\n      diff=sqrt((x1-x2)**2+(y1-y2)**2)\n      if diff>2*r:\n        return False\n      \n      h=sqrt(r**2-diff**2\/4)\n      if x1==x2:\n        ny=(y1+y2)\/2\n        lst.append([x1-h,ny])\n        lst.append([x1+h,ny])\n      elif y1==y2:\n        nx=(x1+x2)\/2\n        lst.append([nx,y1-h])\n        lst.append([nx,y1+h])\n      else:\n        a=(y2-y1)\/(x2-x1)\n        b=-1\/a\n        size=sqrt(1+b**2)\n        dx=h\/size\n        dy=dx*b\n        nx=(x1+x2)\/2\n        ny=(y1+y2)\/2\n        lst.append([nx+dx,ny+dy])\n        lst.append([nx-dx,ny-dy])\n  for x,y in lst:\n    flag=True\n    for X,Y in XY:\n      tmp=(x-X)**2+(y-Y)**2\n      if tmp>r**2:\n        flag=False\n        break\n    if flag:\n      return True\n  return False\nl=0\nr=1000\nfor i in range(100):\n  mid=(i+r)\/2\n  if calc(mid):\n    r=mid\n  else:\n    l=mid\nprint(r)\n       \n        ",
    "error_obj":"SyntaxError: Generator expression must be parenthesized"
  },
  "s609771223":{
    "code_string":"N = int(input())\nS, T = [0]*N, [0]*N\nfor i in range(N):\n  S[i], T[i] = input().split()\nX = input()\n\nprint(sum(T[S.index(X)+1:]))",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s717251077":{
    "code_string":"n = int(input())\nl = list(list(map(int,input().split())) for _in range(n))\nx = input()\nbit = 0\nsu = 0\nfor j,k in l:\n  if j==x:\n    bit = 1\n  if bit==1:\n    su += k\nprint(su)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s785511057":{
    "code_string":"n = int(input())\ns = []\nt = []\nfor i in range(n):\n  s_temp,t_temp = map(int,input().split())\n  s.append(s_temp)\n  t.append(t_temp)\nend = input()\nprint(sum(t[s.index(end)+1:]))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'dwango'"
  },
  "s825077955":{
    "code_string":"N = int(input())\ns, t = [0]*N, [0]*N\nfor i in range(N):\n  s[i], t[i] = map(int, input().split())\nX = input()\n\nans = 0\nflag = False\nfor i in range(N):\n  if flag:\n    ans += t[i]\n  if s[i] == X:\n    flag = True\n\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'dwango'"
  },
  "s628623889":{
    "code_string":"n=int(input())\ns=[]\nt=[]\nfor i in range(n):\n\tst=list(input())\n\ts.append(st[0])\n\tt.append(st[1])\nx=input()\n\nprint(sum(t[s.index(x):]))\n",
    "error_obj":"ValueError: 'dwango' is not in list"
  },
  "s631009814":{
    "code_string":"n=int(input())\ns=[]\nt=[]\nfor i in range(n):\n  st,tt=map(input().split())\n  s.append(st)\n  t.append(tt)\nx=str(input())\nans=0\nfor i in range(n):\n  ans=ans+1\n  if t[i]==x:\n    break\nprint(ans)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s600648327":{
    "code_string":"#!\/usr\/bin\/env python3\n\nimport sys\nfrom typing import Any, Callable, Deque, Dict, List, Mapping, Optional, Sequence, Set, Tuple, TypeVar, Union\n# import time\n# import math, cmath\n# import numpy as np\n# import scipy.sparse.csgraph as cs            # csgraph_from_dense(ndarray, null_value=inf), bellman_ford(G, return_predecessors=True), dijkstra, floyd_warshall\n# import random                                # random, uniform, randint, randrange, shuffle, sample\n# import string                                # ascii_lowercase, ascii_uppercase, ascii_letters, digits, hexdigits\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\n# from datetime import date, datetime          # date.today(), date(year,month,day) => date obj; datetime.now(), datetime(year,month,day,hour,second,microsecond) => datetime obj; subtraction => timedelta obj\n# from datetime.datetime import strptime       # strptime('2019\/01\/01 10:05:20', '%Y\/%m\/%d\/ %H:%M:%S') returns datetime obj\n# from datetime import timedelta               # td.days, td.seconds, td.microseconds, td.total_seconds(). abs function is also available.\n# from copy import copy, deepcopy              # use deepcopy to copy multi-dimentional matrix without reference\n# from functools import reduce                 # reduce(f, iter[, init])\n# from functools import lru_cache              # @lrucache ...arguments of functions should be able to be keys of dict (e.g. list is not allowed)\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\n# from heapq import _heapify_max, _heappop_max, _siftdown_max\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\n# from itertools import count, cycle, repeat   # count(start[,step]), cycle(iter), repeat(elm[,n])\n# from itertools import groupby                # [(k, list(g)) for k, g in groupby('000112')] returns [('0',['0','0','0']), ('1',['1','1']), ('2',['2'])]\n# from itertools import starmap                # starmap(pow, [[2,5], [3,2]]) returns [32, 9]\n# from itertools import product, permutations  # product(iter, repeat=n), permutations(iter[,r])\n# from itertools import combinations, combinations_with_replacement\nfrom itertools import accumulate             # accumulate(iter[, f])\n# from operator import itemgetter              # itemgetter(1), itemgetter('key')\n# from fractions import Fraction               # Fraction(a, b) => a \/ b \u2208 Q. note: Fraction(0.1) do not returns Fraciton(1, 10). Fraction('0.1') returns Fraction(1, 10)\n\n\n\ndef main():\n    Num = Union[int, float]\n    mod = 1000000007                # 10^9+7\n    inf = float('inf')              # sys.float_info.max = 1.79e+308\n    # inf = 2 ** 63 - 1             # (for fast JIT compile in PyPy) 9.22e+18\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\n    def input(): return sys.stdin.readline().rstrip()\n    def ii():    return int(input())\n    def isp():   return input().split()\n    def mi():    return map(int, input().split())\n    def mi_0():  return map(lambda x: int(x)-1, input().split())\n    def lmi():   return list(map(int, input().split()))\n    def lmi_0(): return list(map(lambda x: int(x)-1, input().split()))\n    def li():    return list(input())\n    # def _heappush_max(h, item): h.append(item); _siftdown_max(h, 0, len(h)-1)\n\n\n    class Combinatorics:\n        def __init__(self, size: int, mod: int):\n            '''\n            >>> c = Combinatorics(size=10, mod=10**9+7)\n            >>> c.fact\n            [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\n            >>> c.inv\n            [1, 1, 500000004, 166666668, 41666667, 808333339, 301388891, 900198419, 487524805, 831947206, 283194722]\n            '''\n            self.size =  size\n            self.mod = mod\n            self.fact = self._build_factorial(size, mod)\n            self.inv = self._build_inv_factorial(size, mod)\n        \n        def _build_factorial(self, size:int , mod: int) -> None:\n            '''\n            fact_mod[i] \u306f i! % mod \u3092\u8868\u3059\u3068\u3059\u308b\n            O(n) \u3067 fact_mod[size] \u307e\u3067\u8a08\u7b97\u7d50\u679c\u304c\u30e1\u30e2\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u8fd4\u3059\n            '''\n            fact = [1] * (size + 1)\n            for i in range(1, size + 1):\n                fact[i] = (fact[i-1] * i) % mod\n            return fact\n        \n        def _build_inv_factorial(self, size: int, mod: int) -> None:\n            '''\n            inv_fact_mod[i] \u306f 1\/i! % mod \u3092\u8868\u3059\u3068\u3059\u308b\n            O(n+lgm) \u3067 inv_fact_mod[size] \u307e\u3067\u8a08\u7b97\u7d50\u679c\u304c\u30e1\u30e2\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u8fd4\u3059\n            Note:\n                [\u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406]\n                a ^ p-1 \u2261 1 (mod p)\n                a ^ p-2 \u2261 1\/a (mod p) (\u9006\u5143)\n                nCr = (n!) \/ ((n-r)! * r!) \u3060\u304c\u3001mod p \u306e\u4e16\u754c\u3067\u306f\u3053\u306e\u5206\u6bcd\u3092\u9006\u5143\u3092\u7528\u3044\u3066\u8a08\u7b97\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u53ef\u80fd\n            '''\n            inv_fact_mod = [1] * (size + 1)\n            inv_fact_mod[size] = pow(self.fact[size], mod-2, mod)    # a ^ p-2 \u2261 1\/a (mod p) \u306b\u304a\u3044\u3066 a = n! \u3068\u3059\u308b\u3002 1\/n! (mod p) \u3092\u6c42\u3081\u308b\n            for i in range(size-1, -1, -1):\n                inv_fact_mod[i] = (inv_fact_mod[i+1] * (i+1)) % mod    # 1\/(n-1)! = 1\/n! * n\n            return inv_fact_mod\n        \n        def comb(self, n: int, r: int) -> int:\n            '''\n            nCr % mod \u3092 O(1) \u3067\u8a08\u7b97\u3059\u308b\u3002\n            Examples:\n                >>> c = Combinatorics(size=100, mod=10**9+7)\n                >>> c.comb(100, 50)\n                538992043   \n            '''\n            numerator = self.fact[n]\n            denominator = (self.inv[n-r] * self.inv[r]) % self.mod\n            return (numerator * denominator) % self.mod\n    \n\n    n = ii()\n    L = lmi()\u00a5\n\n    c = Combinatorics(10**5, mod)\n    seq = [(c.fact[n-1] * pow(i, mod-2, mod)) % mod for i in range(1, n)]\n    ac = list(accumulate(seq))\n\n    ans = 0\n    for i in range(n-1):\n        tmp = (L[i+1] - L[i]) * ac[i] % mod\n        ans = (ans + tmp) % mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"SyntaxError: invalid character '\u00a5' (U+00A5)"
  },
  "s946279412":{
    "code_string":"b, c = list(map(int, input().split()))\nif 500 * b => c :\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s458170250":{
    "code_string":"k,x = map(int,input().split()))\n\nif(k*500>=x):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s401527074":{
    "code_string":"k,x=map(int,input(),split())\nprint(\"Yes\" if 500*k>=x else \"No\")",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s768132648":{
    "code_string":"K,X= map(int,input().split())\n\nif 500*K >= X:\n  print(\"Yes\")\n else:\n  print(\"No\")",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s349997480":{
    "code_string":"#https:\/\/atcoder.jp\/contests\/abc150\/tasks\/abc150_a\nK= [ ]\nK= int(input())\n\nX= [ ]\nX= int(input())\n\nif 500*K<X:\n    print(\"No\")\nelif 500*K==X:\n    print(\"Yes\")\nelif 500*K>X:\n    print(\"Yes\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 900'"
  },
  "s266356534":{
    "code_string":"n = int(input())\ns = list(input())\ncount = 0\nif n % 3 != 0 and n >= 3:\n  for i in range (1,n):  \n    if s[i-1] == 'A' and s[i] == 'B' and s [i+1] == 'C':\n      count += 1\nelif n % 3 == 0 and n >= 3:\n  for i in range(1, n-1):\n    if s[i-1] == 'A' and s[i] == 'B' and s [i+1] == 'C':\n      count += 1\nif n == 2:\n  print(0)\nelse:\n  print(count)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 900'"
  },
  "s510811366":{
    "code_string":"4 2000",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s251299105":{
    "code_string":"k, x = map(int, input().split())\n\nif 500*i >= x:\n    print(\"Yes\")\nelse:\n    print('No')\n",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s477355356":{
    "code_string":"K, X = map(int, input().split())\nif 500*K >= X:\n  print(\"Yes\")\nelse;\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s468970055":{
    "code_string":"k,x = map(int,input())\n\nif 500*k >= x:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s148362789":{
    "code_string":"k,x = map(int,input().split)\nprint(\"Yes\" if 500*k>=x else \"No\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s406869400":{
    "code_string":"n,k=map(int,input().split())\nif 500 * n >= k:print(\"Yes\")\n  else:print(\"No\")",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s452754680":{
    "code_string":"N,X=map(int, input(),split())\nprint(\"Yes\" if 500*N >= X else \"No\")",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s013413870":{
    "code_string":"K, X = list(map(int, input()))\n\nif K * 500 >= X:\n  \tprint('Yes')\nelse:\n  \tprint('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s218506259":{
    "code_string":"k, x = map(int, input())\nif (500*k) >= x:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s218704951":{
    "code_string":"K, X = map(int, input().split())\nwealth = 500 * K\nif K >= X:\n  print('Yes\")\nelse:\n  print('No')",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s451536624":{
    "code_string":"K = input()\nX = input()\n\nif (X <= 500*K):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s962790835":{
    "code_string":"k, x = int(input().split())\nif 500*k >= x:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s456126054":{
    "code_string":"k, x = list(map(int, input().split))\nprint('Yes') if k *500 <= x else print('No')",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s172974882":{
    "code_string":"tmp = input()\n\nN = int(tmp[0])\nX = int(tmp[1])\n\nif X <= 500 * N:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s452453446":{
    "code_string":"a,b=int(input().split())\nif a*500>=b:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s943645688":{
    "code_string":"n=int(input())\ns=int(input())\nprint(s.count(\"ABC\"))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'ZABCDBABCQ'"
  },
  "s384176968":{
    "code_string":"N=int(input())\nS=str(input())\nS=S.remove('ABC')\nif N==len(S):\n  return 0\nelse:\n  return (N-len(S))\/\/3",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s943102595":{
    "code_string":"N=int(input())\nS=input()\nans=0\nfor i in range (0,n-2):\n  if S[i]==\"A\" and S[i+1]==\"B\" and S[i+2]==\"C\":\n    ans+=1\nprint(ans)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s326461925":{
    "code_string":"N=int(input())\nS=input()\nprint(sum(S[i]==A and S[i+1]==B and S[i+2]==C for i in range(N-2)))    ",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s798461282":{
    "code_string":"n,s = [int(input()) for _ in range(2))\nprint(s.count(\"ABC\"))",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s726336810":{
    "code_string":"n = int(input)\ns = input()\ns2 = s.replace(\"ABC\",\"\")\nprint(int((len(s)-len(s2))\/3))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s008256258":{
    "code_string":"n = int(intput())\nstr = input()\nprint(str.count('ABC'))",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s602268146":{
    "code_string":"n = int(input())\nwords = input()\n\ncount \u2252 0\nfor i in range(n - 2):\n  if words[i] == 'A':\n    if words[i + 1] == 'B':\n      if words[i + 2] == 'C':\n        count += 1\nprint(count)",
    "error_obj":"SyntaxError: invalid character '\u2252' (U+2252)"
  },
  "s675138929":{
    "code_string":"a = input()\ns = input()\nprint(s.count(\"ABC\")",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s683385124":{
    "code_string":"import itertools\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\npermutations = list(itertools.permutations(range(1, N+1)))\np = permutations.index(P)\nq = permutations.index(Q)\nprint(abs(p-q))",
    "error_obj":"ValueError: [1, 3, 2] is not in list"
  },
  "s760870466":{
    "code_string":"import itertools\n\nn = int(input())\np = tuple(map(int,input().split()))\nq = tuple(map(int,input().split()))\nls = list(itertools.parmutations(range(1,n+1)))\nprint(abs(ls.index(p)-ls.index(q)))",
    "error_obj":"AttributeError: module 'itertools' has no attribute 'parmutations'"
  },
  "s405666623":{
    "code_string":"N = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\ncnt, a, b = 0, 0, 0\nfor i in itertools.permutations(range(1, N+1)):\n    if P == i:\n        a = cnt\n        if b != 0:\n            break\n    if Q == i:\n        b = cnt\n        if a != 0:\n            break\n    cnt += 1\nprint(abs(a-b))",
    "error_obj":"NameError: name 'itertools' is not defined"
  },
  "s075588765":{
    "code_string":"from itertools import permutations\n\nn=int(input())\nl=list(map(int,input().split()))\nt=list(map(int,input().split()))\ns=\"\".join(l)\nh=\"\".join(t)\n\nl1=list()\n\nfor i in permutations(s):\n  l1.append(i)\n  \nprint(abs(l1.find(s)-l1.find(h)))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s555147544":{
    "code_string":"import copy\ndef func(n):\n    result = []\n    result.append([1,2])\n    result.append([2,1])\n    if n == 2:\n        return result\n    else:\n        #for i in range(3,n+1):\n        res_list = func(n-1)\n        res = []\n        for j in range(n):\n            for s in res_list:\n                st = copy.copy(s)\n                st.insert(j,n)\n                res.append(st)\n        return res\n\nn = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\n\ns = func(n)\ns.sort()\np_i = 0\nq_i = 0\nfor i in range(n):\n    #print(s[i])\n    if s[i]==p:\n        p_i = i\n    if s[i]==q:\n        q_i = i\nprint(abs(p_i,q_i))\n",
    "error_obj":"TypeError: abs() takes exactly one argument (2 given)"
  },
  "s267099953":{
    "code_string":"import itertools\nimport math\n\nn = input()\np = [map(int, input().split())]\nq = [map(int, input().split())]\np_no, q_no = 0, 0\n\nper = [c+1 for c in range(n)]\nper_list = list(itertools.permutations(per))\n\nfor i in range(math.factorial(n)):\n    if p == per_list[i]: p_no = i\n    if q == per_list[i]: q_no = i\n\nprint(abs(p_no - q_no))",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s646058913":{
    "code_string":"import sys\nimport time\nimport math\nimport itertools as it\ndef inpl():\n    return list(map(int, input().split()))\nst = time.perf_counter()\n# ------------------------------\n\nN = int(input())\nP = inpl()\nQ = inpl()\nls = P.copy()\nls.sort()\ncnt = 0\nfor l in it.permutations(ls):\n    cnt += 1\n    if P == l:\n        a = cnt\n    if Q == l:\n        b = cnt\nprint(abs(a-b))\n# ------------------------------\ned = time.perf_counter()\nprint('time:', ed-st, file=sys.stderr)\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s621467183":{
    "code_string":"import itertools\n\nN=int(input())\nP=list(map(int,input().split()))\nQ=list(map(int,input().split()))\n\n\nNs=list(itertools.permutations(range(1,N+1)))\nPO=Ns.index(P)\nQO=Ns.index(Q)\nprint(abs(PO-QO))\n",
    "error_obj":"ValueError: [1, 3, 2] is not in list"
  },
  "s796388461":{
    "code_string":"def func(x, y):\n  if len(y)==1:\n    dic.append(i*10+int(y))\n  else:\n    for j in range(len(y)):\n      func(i*10+int(y[j]), y[:j]+y[j+1:])\ndic = []\n\nN = int(input())\nfunc(0, \"\".join([i in range(1,N+1)]))\n\nA = int(input().replace(\" \", \"\"))\nB = int(input().replace(\" \", \"\"))\nans = abs(dic.index(A)-dic.index(B))\nprint(ans)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s446360800":{
    "code_string":"from itertools import permutations\nN = int(input())\n\no = {}\nfor i, p in enumerate(permutation(range(1,N+1))):\n  \to[p] = i\nP = tuple(int(x) for x in input().split())\nQ = tuple(int(x) for x in input().split())\nprint(abs(o[P] - o[Q]))",
    "error_obj":"NameError: name 'permutation' is not defined"
  },
  "s344501522":{
    "code_string":"n = int(input())\ndef pos_num(l):\n    l_sort = l.copy()\n    l_len = len(l)\n    l_sort.sort()\n    if l_len == 1:\n        an = 0\n    else:\n        #print(l_sort.index(l[0])+1)\n        an = (l_sort.index(l[0]))*math.factorial(l_len-1)\n    #print(an)\n    return an \n\n    \n\nls = list(map(int, input().split()))\nan = 0\nfor i in range(n-1):\n    b = pos_num(ls[i:])\n    an += b\n    #print(an)\n    \nprint()\nll = list(map(int, input().split()))\nbn = 0\nfor i in range(n-1):\n    b = pos_num(ll[i:])\n    bn += b\n    #print(bn)\n\nprint(abs(an-bn))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s213293131":{
    "code_string":"import itertools\nn=int(input())\na=[]\nfor i in range(n):\n    a.append(i+1)\nb=[]\nfor per in itertools.permutatiton(a):\n    b.append(list(per))\nc=b.index(list(map(int,input().split())))\nd=b.index(list(map(int,input().split())))\nprint(abs(c-d))",
    "error_obj":"AttributeError: module 'itertools' has no attribute 'permutatiton'"
  },
  "s747898590":{
    "code_string":"    n = int(input())\n    p = tuple(map(int, input().split()))\n    q = tuple(map(int, input().split()))\n\n    s = itertools.permutations(range(1, n+1))\n    l = []\n    for v in s:\n        l.append(v)\n    p_index = l.index(p)\n    q_index = l.index(q)\n\n    print(abs(p_index - q_index))\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s592999963":{
    "code_string":"N = int(input())\nP = tuple(map(int,input().split()))\nQ = tuple(map(int,input().split()))\nls = [i for i in range(1,N+1)]\nA = list(permutations(ls))\n \nprint(abs(A.index(P) - A.index(Q)))",
    "error_obj":"NameError: name 'permutations' is not defined"
  },
  "s932493938":{
    "code_string":"from itertools import permutations\nn=int(input())\np,q = = tuple(map(int, input().split())), tuple(map(int, input().split()))\nl = list(range(1,n+1))\nx = [i for i in permutations(l,n)]\nprint(abs(x.index(p) - x.index(q)))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s896106507":{
    "code_string":"from itertools import permutations\n\nN = int(input())\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nl = permutations(range(1,N+1))\n\nprint(abs(l.index(P)-l.index(Q)))",
    "error_obj":"AttributeError: 'itertools.permutations' object has no attribute 'index'"
  },
  "s414773917":{
    "code_string":"from itertools import permutations\nn = 8\na = map(str, range(1, n+1))\na = \"\".join(a)\nl = list(permutations(a, n))\n\np = tuple(input().split())\nq = tuple(input().split())\n\nprint(abs(l.index(p)-l.index(q)))\n",
    "error_obj":"ValueError: ('3',) is not in list"
  },
  "s478085009":{
    "code_string":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n  return int(readline())\nn = I()\nlis = list(range(1,n+1))\na,b = None,None\nP = readInts()\nQ = readInts()\ni = 0\nfor A in permutations(lis,n):\n    if list(A) == P:\n        a = i\n    elif list(A) == Q:\n        b = i\n    i += 1\nprint(abs(a-b))\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s782581569":{
    "code_string":"import itertools\nN = int(input())\nP = list(map(int,input().split()))\nQ = list(map(int,input().split()))\nls = list(itertools.permutations(range(1,N+1)))\nprint(abs(ls.index(P) - ls.index(Q)))",
    "error_obj":"ValueError: [1, 3, 2] is not in list"
  },
  "s031659737":{
    "code_string":"n=int(input())\np=list(map(int,input(),split()))\nq=list(map(int,input(),split()))\nfrom itertools import permutations\nlist=list(permutations(range(1,n+1)))\nans=abs(list.index(p)-list.index(q))",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s308981196":{
    "code_string":"import itertools as itool\nN=int(input())\nplist=list(map(int, input().split()))\nqlist=list(map(int, input().split()))\nmylist=list(itool.permutations(range(1,n+1)))\nprint(abs(mylist.index(p)-mylist.index(q)))\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s613106490":{
    "code_string":"from itertools import permutations\n\nN = int(input())\nNlist = [i for i in range(1, int(input())+1)] \nNlist = list(permutations(Nlist)) \n\nP = tuple(map(int, input().split()))\nQ = tuple(map(int, input().split()))\n\nprint(abs(X.index(P)-X.index(Q)))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 3 2'"
  },
  "s519922877":{
    "code_string":"from math import gcd\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nA = [i \/\/ 2 for i in a]\nl = 1\nfor a in A:\n    lcd *= a \/\/ gcd(lcd, a)\nfor a in A:\n    if lcd \/\/ a % 2 == 0:\n        print(0)\n        exit()\nprint((M\/\/lcd+1)\/\/2)\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s087062186":{
    "code_string":"import math\nfrom functools import reduce\n\n\ndef lcm_base(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\n\ndef my_round(val, digit=0):\n    p = 10 ** digit\n    return (val * p * 2 + 1) \/\/ 2 \/ p\n\n\nn, m = list(map(int, input().split()))\na_pr = [i \/\/ 2 for i in list(map(int, input().split()))]\nlcm_ = lcm_list(a_pr)\nres, div2 = 0, None\nfor ai in a_pr:\n    cnt = 0\n    while a % 2 == 0:\n        a \/\/= 2\n        cnt += 1\n    if div2 is None:\n        div2 = cnt\n    elif cnt != div2:\n        print(0)\n        exit()\n\nprint(int(my_round(m \/\/ lcm_ \/ 2)))\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s143714508":{
    "code_string":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep  9 14:33:00 2020\n\n@author: liang\n\"\"\"\nfrom math import gcd\n\nN, M = map(int, input().split())\nA = [int(i) for i in input().split()]\n\nflag = False\nres = 1\nfor a in A:\n    a \/= 2\n    res *= a\/\/gcd(res,a)\n    if res > M:\n        flag = True\n        break\n    #print(res)\n\"\"\"\n\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n\uff12\u3067\u5272\u308a\u5207\u308c\u308b\u500b\u6570\u540c\u3058\uff1f\n\"\"\"\n\nfor a in A:\n    if int(res\/a) == res\/a:\n        flag = True\n        \nif flag:\n    ans = 0\n    print(ans)\nelse:\n    #ans = (M - res(A)\/\/2)\/\/res + 1\n    #ans = (M-1)\/\/res\/\/2 + 1\n    ans= (M\/\/res + 1)\/\/2\n    print(ans)",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s478036027":{
    "code_string":"from functools import reduce\nimport math\ndef lcm_base(x, y):\n  return (x * y) \/\/ math.gcd(x, y)\n\ndef lcm(*numbers):\n  return reduce(lcm_base, numbers, 1)\n\ndef lcm_list(numbers):\n  return reduce(lcm_base, numbers, 1)\n\nn,m = map(int, input().split())\na = list(map(int, input().split()))\na = [i\/\/2 for i in list(set(a))]\n\ncnt_common = -1\nfor i in a:\n  cnt = 0\n  while i % 2 == 0:\n    i = i\/\/2\n    cnt += 1\n  if cnt_common == -1:\n    cnt_common = cnt\n    continue\n  if cnt_common != cnt:\n    nothing = True\n    break\n\nb=lcm_list(a)\nif nothing:\n  print(0)\nelse:\n  ans = (m-b)\/\/(2*b) + 1\n  print(max(ans,0))",
    "error_obj":"NameError: name 'nothing' is not defined"
  },
  "s169292411":{
    "code_string":"import math\nimport sys\nfrom functools import reduce\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\ndef lcm_base(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n  \ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\nC = gcd_list(A)\nB = [0 for _ in range(N)]\n\nfor i in range(N):\n  B[i] = C \/\/ A[i]\n  if B[i] % 2 == 0:\n    print(0)\n    sys.exit()\n\nprint( (M \/\/ C + 1) \/\/ 2)",
    "error_obj":"NameError: name 'gcd_list' is not defined"
  },
  "s478067987":{
    "code_string":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.buffer.readline\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef lcm_base(a, b):\n    return (a * b) \/\/ gcd(a, b)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\n\ndef main():\n    n, m = map(int, readline().split())\n    a = np.array(input().split(), np.int64)\n    a \/\/= 2\n    b = np.copy(a)\n    while True:\n        c = b % 2\n        if c.sum() == 0:\n            b \/\/= 2\n        elif c.sum() == n:\n            break\n        else:\n            print(0)\n            sys.exit()\n    d = lcm_list(a)\n    if d > 10 ** 9:\n        ans = 0\n    else:\n        ans = (m \/\/ d) - (m \/\/ (d + d))\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s608785556":{
    "code_string":"# \u3053\u306e\u65b9\u91dd\u304b\u3057\u3053\u3044\n\nimport os\nimport sys\nimport numpy as np\n\ndef z_algo(S):\n    # Z-algoirhm  O(n)\n    # Z[i] := S \u3068 S[i:] \u3067 prefix \u304c\u4f55\u6587\u5b57\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\n    # \u691c\u8a3c: https:\/\/atcoder.jp\/contests\/arc055\/submissions\/14179788\n    i, j, n = 1, 0, len(S)\n    Z = np.zeros_like(S)\n    Z[0] = n\n    while i < n:\n        while i+j < n and S[j] == S[i+j]:\n            j += 1\n        if j == 0:\n            i += 1\n            continue\n        Z[i] = j\n        d = 1\n        while i+d < n and d+Z[d] < j:\n            Z[i+d] = Z[d]\n            d += 1\n        i += d\n        j -= d\n    return Z\n\ndef solve(N, A, B):\n    Diff = np.empty(3*N, dtype=np.int64)\n    Diff[0] = B[0] ^ B[-1]\n    Diff[1:N] = B[1:] ^ B[:-1]\n    Diff[N] = Diff[2*N] = A[0] ^ A[-1]\n    Diff[N+1:2*N] = Diff[2*N+1:3*N] = A[1:] ^ A[:-1]\n    Z = z_algo(Diff)[N:2*N]\n    Ans = [(0,0)]*0\n    for i in range(N):\n        z = Z[i]\n        if z >= N:\n            Ans.append((i, B[0]^A[i]))\n    return np.array(Ans)\n\n\n# >>> numba compile >>>\nnumba_config = [\n    [z_algo, \"i8[:](i8[:])\"],\n    [solve, \"i8[:,:](i8,i8[:],i8[:])\"],\n]\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    from numba import njit\n    from numba.pycc import CC\n    cc = CC(\"my_module\")\n    for func, signature in numba_config:\n        vars()[func.__name__] = njit(signature)(func)\n        cc.export(func.__name__, signature)(func)\n    cc.compile()\n    exit()\nelif os.name == \"posix\":\n    exec(f\"from my_module import {','.join(func.__name__ for func, _ in numba_config)}\")\nelse:\n    from numba import njit\n    for func, signature in numba_config:\n        vars()[func.__name__] = njit(signature, cache=True)(func)\n    print(\"compiled!\", file=sys.stderr)\n# <<< numba compile <<<\n\n\ndef main():\n    N = int(input())\n    A = np.array(input().split(), dtype=np.int64)\n    B = np.array(input().split(), dtype=np.int64)\n    Ans = solve(N, A, B).tolist()\n    print(\"\\n\".join(map(lambda x: \" \".join(map(str, x)), Ans)))\n\nmain()\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s149907083":{
    "code_string":"s,t=intput().split()\nprint(t+s)",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s902368077":{
    "code_string":"N,M=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\nl=[]\nfor b in a:\n    for c in a:\n        l.append(b + c)\nprint(sum(sorted(l)[len(l)-M:]))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'oder'"
  },
  "s309200567":{
    "code_string":"A, B = map(input().split())\nprint(B + A)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s895534293":{
    "code_string":"s,t=str(input())\na=t+s\nprint(a)",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s237937725":{
    "code_string":"s, t = input()\nprint(t+s)",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s766989121":{
    "code_string":"S = input()\nT = input()\n\nprint(T + S)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s727879626":{
    "code_string":"S,T=map(input()split())\nprint(T.S)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s668679866":{
    "code_string":"s,t=map(input().split())\nprint(s+t)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s002762518":{
    "code_string":"a=input()\nb=input()\nprint(b+a)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s435976244":{
    "code_string":"s, t = map(int,input().split())\nprint(t+s)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'oder'"
  },
  "s459470188":{
    "code_string":"S, T = map(int, input().split())\nprint(T + S)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'oder'"
  },
  "s653114656":{
    "code_string":"a, b = map(input().split())\nprint(b + a)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s060634777":{
    "code_string":"a,b = map(str,input().split())\nprint(b+c)\n",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s674796805":{
    "code_string":"a = input()\nb = input()\nprint(b+a)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s852191410":{
    "code_string":"a,b,k=map(int,input().split())\n\nif k<=a:\n  print(str(a-k)+' '+str(b))\n  \nelse:\n  print(str(0)+' '+str(min(0,b-(k-a))))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'oder'"
  },
  "s459889735":{
    "code_string":"a = input()\nb = input()\nprint(a+b)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s959144124":{
    "code_string":"a,b=input().split()\nprint(b,a sep='')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s193594813":{
    "code_string":"S=input()\nT=input()\nprint(T+S)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s248169267":{
    "code_string":"a = input()\nb = input()\nprint(b + a)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s257437305":{
    "code_string":"print(input().split()[::-1].join())",
    "error_obj":"AttributeError: 'list' object has no attribute 'join'"
  },
  "s959753698":{
    "code_string":"s, t = input().split()\nprint(\" \".join(t, s))",
    "error_obj":"TypeError: str.join() takes exactly one argument (2 given)"
  },
  "s708892639":{
    "code_string":"s = input()\nt = input()\nprint(t+s)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s480978106":{
    "code_string":"S,T = list(map(int, input().split()))\nprint(T+S)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'oder'"
  },
  "s186361785":{
    "code_string":"A, B, K= map(int, input().split())\n\nif A >= K:\n  ans_t = A - K\n  ans_a = B\nelif B >= ( K - A):\n  ans_t = 0\n  ans_a = B - ( K - A)\nelse:\n  ans_t = 0\n  ans_a = 0\n\nprint( \u2019{} {}\u2019.format( ans_t, ans_a))\n",
    "error_obj":"SyntaxError: invalid character '\u2019' (U+2019)"
  },
  "s535835164":{
    "code_string":"import sys\nA, B, K= map(int, next(sys.stdin.buffer))\nx = min(A, B, K)\nprint(A - x, B - x)",
    "error_obj":"ValueError: too many values to unpack (expected 3)"
  },
  "s630415693":{
    "code_string":"a,b,k=map(int,input().split())\nif a>=k:\n  print(a-k,b)\nelif a<k and k<=a+b \n  print(0,a+b-k)\nelse:\n  print(0,0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s667322685":{
    "code_string":"A,B,K = map(int, input().split())\nif A >= K:\n  print(A-K,B)\n  else:\n  print(0,B-(K-A))\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s655147075":{
    "code_string":"a,b,c = map(int, input().split())\n \nfor i in range(c):\n  if(a == 0):\n  \tb -= 1\n    if(b == 0):\n      break\n  elif(a > 0):\n    a -= 1\nprint(str(a),str(b))\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s040507477":{
    "code_string":"A,B,K=map(int,input().Split())\n\nif A-K>0:\n  print(A-K, B)\nelif B-(K-A)>0:\n  print(0, B-K+A)\nelse:\n  print(0,0)",
    "error_obj":"AttributeError: 'str' object has no attribute 'Split'"
  },
  "s715240590":{
    "code_string":"A, B, K = map(int, input().split())\n\nif A => K:\n    A -= K\nelif A < K < A + B:\n    B -= K - A\n    A = 0\nelif A + B <= K:\n    A = B = 0\n    \nprint(A, B)\n    ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s461559198":{
    "code_string":"a,b,k=(map(int, input().split()))\n if a>k:\n  print(a-k,b)\nelse:\n  if a+b>k:\n    print(0,a+b-k)\n  else:\n    print(0,0)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s614445618":{
    "code_string":"# Original Submission At: https:\/\/atcoder.jp\/contests\/abc149\/submissions\/16823042\nx= int(input())\n\ndef prime_check(num,count):\n  \twhile True:\n        while num % count == 0:\n            num = num + 1\n            count = 2\n    \tif num <= count**2:\n        \tprint(num)\n            break\n        else:\n          count = count + 1\n\nif x==2 :\n    print (2)\nelse:\n    prime_check(x,2)\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s590564427":{
    "code_string":"X = int(input())\ni = int(n**0.5)\n\nwhile i >= 2:\n    if X % i == 0:\n        X += 1\n        i = int(X**0.5)\n    else:\n        i -= 1\n        \nprint(X)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s931201914":{
    "code_string":"X = int(input())\nfor i in range(X+1, 9999999999999999):\n    flag = 1\n    for j in range(2, X\/\/2 +1):\n        if i % j == 0:\n            flag = -1\n            break\n    # if X == 2:\n    #     print(2)\n    #     break\n    # elif X == 3:\n    #     print(3)\n    #     break\n    elif flag == 1:\n        print(i)\n        break",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s862433393":{
    "code_string":"x = int(input())\n \nwhile True:\n  flag ==0\n  for i in range(2,x\/\/2):\n    if x%i==0:\n      flag ==1\n      break\n  if flag ==1:\n    print(x)\n    exit()\n  else:\n    x = x+1",
    "error_obj":"NameError: name 'flag' is not defined"
  },
  "s459638940":{
    "code_string":"x = int(input())\nflg = 0\nif x == 2:\n    print(2)\n    exit()\nwhile True:\n   for i in range(2,int(x**0.5)+1):\n        if x%i == 0:\n            flg += 1\n        if i == int(x**0.5) and flg == 0:\n            print(x)\n            exit()\n    x += 1\n\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s044936740":{
    "code_string":"def prime(n):\n    limit = math.floor(math.sqrt(n))\n    for i in range(2,limit+1):\n        if n % i == 0:\n            return prime(n+1)\n    return n\n\nX = int(input())\n\nprint(prime(X))\n",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s595744904":{
    "code_string":"x = int(input())\nwhile True:\n    for i in range(2,x):\n        if x%i == 0\n        break\n    else:\n        print(x)\n        break\n    x+=1",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s133485499":{
    "code_string":"import math\nx = int(input())\nans =x\nwhile True:\n  for i in range(2,math.sqrt(x)+1):\n    if x%i=0:\n      print(x)\n      exit()\n  x+=1\n  \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s758400354":{
    "code_string":"X = int(input())\nfor i in range(X,120000):\n  f = 0\n  for j in range(2,math.ceil(math.sqrt(i))):\n    if i % j == 0:\n      f += 1\n      break\n  if f == 0:\n    print(i)\n    break",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s227129608":{
    "code_string":"pip install sympy\nfrom sympy import isprime\n\nx = int(input())\nif x % 2 == 0:\n  x += 1\n\nflag = True\n\nwhile flag == True:\n  if isprime(x) == True:\n    flag = False\n\nprint(x)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s654749723":{
    "code_string":"# \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\n# https:\/\/qiita.com\/takayg1\/items\/3769ab4cc62a231f4259\n\ndef eratosthenes_sieve(n):\n    is_prime = [True]*(n + 1)\n    is_prime[0] = is_prime[1] = False\n    for p in range(2, n + 1):\n        if is_prime[p]:\n            for q in range(2*p, n + 1, p):\n                is_prime[q] = False\n    return is_prime\n\nMAX_N=(10**6)\nPrimes = eratosthenes_sieve(MAX_N)\n\nx = int(input())\nwhile True:\n    if Primes[x]:\n        print(x)\n        exit()",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s938647079":{
    "code_string":"a = int(input())\n\ndef factorization(n):\n    arr = []\n    tmp = n\n\n    for i in range(2, int(n**0.5\/\/1)+1):\n        if tmp%i==0:\n            cnt = 0\n            while tmp%i==0:\n                cnt+=1\n                tmp\/\/=i\n            arr.append([i,cnt])\n    if tmp!=1:\n        arr.append([tmp,1])\n    if arr==[]:\n        arr.append([n,1])\n    return arr\n\nwhile True:\n  arr = factorization(a)\n  if (len(arr)==1) & (arr[1]==1):\n    print(a)\n    break\n  a+=1",
    "error_obj":"IndexError: list index out of range"
  },
  "s103982772":{
    "code_string":"X = int(input())\n\ndef is_Prime(x):\n  for i in range(2, x+1):\n    if i * i + 1 > x:\n      return True\n    if x % i == 0:\n      return False\n\nfor i in range(X+1, 2X+1):\n  if is_Prime(i):\n    print(i)\n    break",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s048889045":{
    "code_string":"n = int(input())\n \ndef p(x):\n  if x == 2:\n    return True\n  for i in range(x\/\/2):\n    if x % i == 0:\n      return False\n  return True\n \nfor i in range(n,2*n):\n  if p(i):\n    print(i)\n    break",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s812336383":{
    "code_string":"X = int(input())\nprime = [2]\nfor i in range(3, 100004):\n  for p in prime:\n    is_prime = True\n    if i % p == 0:\n      is_prime = False\n      break\n  if is_prime: prime.append(i)\n\nprint(min([i for i in prime if i >= X]))",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s916792107":{
    "code_string":"import math\nn=int(input())\nif n==2:\n    print(n)\nelse:\n    cost=0\n    for i in range(n,10**6):\n        for j in range(2,int(math.sqrt(i))+1):\n            if i%j==0:\n                cost+=1\n        if cost==0:\n            print(i)\n            break\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s599822638":{
    "code_string":"def eratosthenes(n):\n    A = [i for i in range(2, n+1)]\n    P = []\n    i = 2\n    while i**2 <= n:\n        prime = min(A)\n        P.append(prime)\n        j = 0\n        while j < len(A):\n            if A[j] % prime == 0:\n                A.pop(j)\n                continue\n            j += 1\n        i += 1    \n    for a in A:\n        P.append(a)\n    return P\n    \nx = int(input())\nprime_table = eratosthenes(100003)\nprime_set = set(prime_table)\nif x in prime_set:\n    print(x)\nelse:\n    idx = bisect_right(prime_table, x)\n    ans = prime_table[idx]\n    print(ans)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s913988868":{
    "code_string":"N, K = map(int, input().split())\nR, S, P = map(int, input().split())\nT = input()\nscore = {\"r\":P, \"s\":R, \"p\":S} \nm = {\"r\":\"p\", \"s\":\"r\", \"p\":\"s\"}\ncommand= []\nmm = []\nans = 0\n\n\n\nfor i, t in enumerate(T):\n    if t == \"r\":\n      command = \"p\"\n      point = P\n    elif t == \"s\":\n      command =\"r\" \n      point = R\n    elif t == \"p\":\n      command = \"s\"\n      point = P\n    \n    if (i - K >= 0) and (command[i - K] == command):\n        command = ''\n        point = 0\n    \n    ans += point\n    command.append(command)\nprint(ans)",
    "error_obj":"AttributeError: 'str' object has no attribute 'append'"
  },
  "s107728347":{
    "code_string":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K = map(int, readline().split())\n    point = list(map(int, readline().split()))\n    T = readline().strip()\n\n    T = T.translate(str.maketrans('rsp', '012'))\n    T = list(map(int, T))\n\n    ans = 0\n    for i in range(K):\n        vec = T[i::K]\n        M = len(vec)\n\n        dp = [[0] * 3 for _ in range(M + 1)]\n        for j in range(M):\n            for k in range(3):\n                dp[j + 1][k] = max(dp[j][(k + 1) % 3], dp[j][(k + 2) % 3])\n                if (k + 1) % 3 == vec[j]:\n                    dp[j + 1][k] += point[k]\n        ans += max(dp[M])\n\n    print(ans)\n    returnimport sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K = map(int, readline().split())\n    point = list(map(int, readline().split()))\n    T = readline().strip()\n\n    T = list(map(int, T.translate(str.maketrans('rsp', '012'))))\n\n    hand = [0] * N\n    ans = 0\n    for i, h in enumerate(T):\n        win = (h - 1) % 3\n        if i >= K and win == hand[i - K]:\n            hand[i] = -1\n        else:\n            hand[i] = win\n            ans += point[win]\n\n    print(ans)\n    return\n\n\nif __name__ == '__main__':\n    main()\n\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s250969558":{
    "code_string":"n,k=map(int,input().split())\ns,p,r=map(int,input().split())\nf={'s':s,'p':p,'r':r}\nt=str(input())\nans=0\nfor i in range(k):\n  a=i+k\n  last=t[i]\n  ans+=f[last]\n  while a<n-k:\n    if t[a-k]==last:\n      if t[a+k]==last:\n        if last=='s':\n          last='r'\n        else:\n          last='s'\n      else:\n        if last=='s':\n          if t[a+k]=='r':\n            last='p'\n          else:\n            last='r'\n        elif last=='r':\n          if t[a+k]=='s':\n            last='p'\n          else:\n            last='s'\n        else:\n          if \n            \n\n      \n      \n      \n      \n      \n\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s896875203":{
    "code_string":"import sys\n\n# \u4fa1\u5024 x \u4ee5\u4e0a\u306e\u63e1\u624b\u3092\u5168\u3066\u884c\u3046\u3068\u3059\u308b\n# \u63e1\u624b\u56de\u6570\u304c\u6c7a\u307e\u308b\u3002\u5de6\u624b\u3054\u3068\u306b\u96c6\u8a08\u3067\u304d\u308b\u3002\n\nimport numpy as np\n\nN, M = map(int, sys.stdin.readline().rstrip().split())\nA = np.array(int(x) for x in sys.stdin.readline().rstrip().split())\n\nA.sort()  # A \u3092\u6607\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\n\n\n# x \u3088\u308a\u4fa1\u5024\u304c\u9ad8\u304f\u306a\u308b\u63e1\u624b\u306e\u7dcf\u6570\n#  -> a \u306b\u5bfe\u3057\u3066\u3001\u76f8\u624b\u306f x - a \u304c\u5fc5\u8981\n#   -> A = [a0, a1, a2, ...] \u306b\u5bfe\u3057\u3066\u3001[x-a0\u306e\u958b\u59cb\u4f4d\u7f6e, x-a1\u306e\u958b\u59cb\u4f4d\u7f6e, x-a2\u306e\u958b\u59cb\u4f4d\u7f6e,...] \u3092\u63a2\u3059\ndef shake_cnt(x):\n    # x \u4ee5\u4e0a\u306e\u63e1\u624b\u3092\u5168\u3066\u884c\u3046\u3068\u3057\u3066\u3001\u63e1\u624b\u306e\u56de\u6570\u3092\u6570\u3048\u308b\u884c\u308f\u306a\u3044\u63e1\u624b\u3092\u6570\u3048\u308b\n    X = np.searchsorted(A, x - A)  # \u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8A \u306b\u5bfe\u3057\u3066\u3001x - A \u304c\u633f\u5165\u3055\u308c\u308b\u4f4d\u7f6e\u3092\u8fd4\u3059\n    return N * N - X.sum()  # index \u306e\u548c\u306f\u300c\u5c0f\u3055\u3044\u65b9\u300d\u3092\u6307\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5f15\u304f\n\n\n# \u4e8c\u5206\u63a2\u7d22  \u63e1\u624b\u306e\u56de\u6570\u304c\nleft = 0  # \u63e1\u624b\u306e\u56de\u6570\u304cM\u4ee5\u4e0a\nright = 10 ** 6  # \u63e1\u624b\u306e\u56de\u6570\u304cM\u672a\u6e80 <- \u307e\u3060\u8db3\u308a\u306a\u3044\u5074\nwhile 1 < right - left:  # left \u3068 right \u304c\u96a3\u308a\u5408\u3063\u305f\u3089\u7d42\u4e86\n    x = (left + right) \/\/ 2\n    if shake_cnt(x) >= M:\n        left = x\n    else:\n        right = x\n\n# M\u56de\u306b\u306f\u5c4a\u304b\u306a\u3044\u3051\u308c\u3069\u3001M\u56de\u306b\u9650\u308a\u306a\u304f\u8fd1\u304f\u306a\u308b\u4fa1\u5024 x = right\nX = np.searchsorted(A, right - A)  # \u5404a in A \u304c\u63e1\u624b\u3092\u884c\u308f\u306a\u3044\u4eba\u6570\u306eArray\nshake = N * N - X.sum()  # \u3053\u3053\u307e\u3067\u306e\u63e1\u624b\u56de\u6570\n\nAcum = np.zeros(N + 1, np.int64)  # \u4eba\u6570 -> \u7d2f\u7a4d\u548c\n# Acum = [a0, a0+a1, a0+a1+a2, ....] \u3092\u8a08\u7b97\u3057\u3066\u3001ai \u3055\u3093\u304c k\u756a\u76ee\u4ee5\u964d\u3068\u63e1\u624b\u3092\u3059\u308c\u3070\nAcum[1:] = np.cumsum(A)  # cumsum [1,2,3,4,5,6,...] -> [1,3,6,10,15,21,...]\n\n# \u53f3\u624b\u306e\u5e78\u798f\u5ea6\u306f ai * ((a0+a1+...a(n-1)) - (a(k-1)+...+a(n-1))) \u3092\u5f97\u3089\u308c\u308b\n# \u5de6\u624b\u306e\u5e78\u798f\u5ea6\u306f \u56de\u6570\u3060\u3051\u3067\u6c7a\u307e\u308b\uff08\u4f55\u4eba\u3068\u63e1\u624b\u3068\u3059\u308b\u304b\uff09\nhappy = (Acum[-1] - Acum[X]).sum() + (A * (N - X)).sum()\n\nhappy += (M - shake) * left  # \u4e0d\u8db3\u5206\u30021\u56de\u306e\u4fa1\u5024\u306f M \u3068\u308f\u304b\u3063\u3066\u3044\u308b\n\nprint(happy)\n",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p02821\/Python\/s896875203.py\", line 11, in <module>\n    A.sort()  # A \u3092\u6607\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\nnumpy.AxisError: axis -1 is out of bounds for array of dimension 0\n"
  },
  "s671816431":{
    "code_string":"import sys\nsys.setrecursionlimit(10 ** 7)\nedges = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    edges[a - 1].append((b - 1, i))\n    edges[b - 1].append((a - 1, i))\nl = [0 for i in range(n)]\ndef dfs(cur, x):\n    res = 1\n    for i in edges[cur]:\n        if i[1] != x:\n            res += dfs(i[0], i[1])\n    l[x] = res\n    return res\ndfs(0, -1)\nl2 = [1]\ni2 = pow(2, mod - 2, mod)\nfor i in range(n):\n    l2.append(l2[-1] * i2 % mod)\ncnt = 0\nfor i in l:\n    cnt += (1 - l2[i]) * (1 - l2[n - i])\nprint((-n * i2 - l2[-1] + cnt + 1) % mod)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s528785117":{
    "code_string":"5 2 3",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s938754439":{
    "code_string":"def main2():\n    N, A, B = map(int, input().split())\n\n    d = B - A - 1\n    if d % 2 ==  0:\n        print(min(B - 1, N - A))\n    else:\n        print((d + 1)\/\/2)\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"NameError: name 'main' is not defined"
  },
  "s921138507":{
    "code_string":"n,a,b=map(int,input().split())\nans=0\nif (b-a)%2 == 0:\n\tans = (b-a)\/\/2\nelse:\n\tans = min(n-a, b-1, (b-a-1)\/\/2\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s031239926":{
    "code_string":"N,a,b = map(int,input().split())\n\nif (b-a)%2 ==0:\n  ams = (b-a)\/\/2\nelse:\n  ans = min(a-1,N-b)+1 + (b-a-1)\/\/2\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s295197212":{
    "code_string":"# \u3010\u8003\u5bdf\u3011\n# 0-indexed\u3067\u8003\u3048\u308b\u3002A\u306f\u964d\u9806\u30bd\u30fc\u30c8\u3057\u3066\u8003\u3048\u308b\u3002\n# \u307e\u305a\u3001\u521d\u671f\u72b6\u614b\u3067Top P\u306b\u542b\u307e\u308c\u308b\u554f\u984c\u306f\u3059\u3079\u3066\u51fa\u984c\u3055\u308c\u3046\u308b\u3002\n# \u306a\u306e\u3067\u521d\u671f\u3067Top q (q > P)\u306e\u554f\u984c\u304c\u51fa\u984c\u3055\u308c\u308b\u304b\u5426\u304b\u3092\u8003\u3048\u3066\u3044\u304f\u3002\n# \u6700\u7d42\u7684\u306bTop P\u306b\u5165\u308c\u308b\u304b\u5426\u304b\u304c\u554f\u984c\u306a\u306e\u3067\u3001Top 1 ~ P-1\u306e\u554f\u984c\u306f\u7121\u8996\u3002\n# Top q\u306e\u554f\u984c\u306b\u6bce\u56de\u6295\u7968\u3057\u3064\u3064\u3001Top P ~ q-1\u306e\u554f\u984c\u306b\u306a\u308b\u3079\u304f\u6295\u7968\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\u3002\n# \u305d\u3053\u3067\u6570\u5217 A[P], A[P+1], ..., A[q-1] \u3092\u8003\u3048\u308b\u3002\n# \u3053\u306e\u4e2d\u304b\u3089\u6700\u5927\u3067N-V\u500b\u306e\u6570\u5b57\u3092\u9078\u3093\u30671\u6e1b\u3089\u3059\u3053\u3068\u3092M\u56de\u7e70\u308a\u8fd4\u3057\u3001\n# \u3059\u3079\u3066A[q]\u4ee5\u4e0b\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070Top q\u306e\u554f\u984c\u306f\u51fa\u984c\u3055\u308c\u3046\u308b\u3002\n# \u5f53\u7136A[P]-A[q] > M\u3060\u3063\u305f\u3089\u7121\u7406\uff08\u51fa\u984c\u3055\u308c\u306a\u3044\uff09\u3002\n# \u4ee5\u5f8cA[P]-A[q] <= M\u3068\u3059\u308b\u3002\n# \u3053\u306e\u6642\u3001(A[P]-A[q]) + (A[P+1]-A[q]) + ... + (A[q-1]-A[q]) <= M * (N-V) \u3067\u3042\u308c\u3070Top q\u306e\u306f\u51fa\u984c\u53ef\u80fd\u3002\n# \u6574\u7406\u3059\u308b\u3068 A[P] + A[P+1] + ... + A[q-1] <= M * (N-V) + A[q] * (q-P) \u3068\u306a\u308b\u306e\u3067\u3001\n# A\u306e\u7d2f\u7a4d\u548c\u306e\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u3066\u304a\u3051\u3070\u5404q\u306b\u304a\u3044\u3066O(1)\u3067\u51fa\u984c\u53ef\u5426\u304c\u5224\u5b9a\u53ef\u80fd\u3002\n\n\ndef main():\n    # N, M, V, P = list(map(int, input().split()))\n    # A = list(map(int, input().split()))\n    with open('PastAGC\/01-08.txt', 'r') as f:\n        N, M, V, P = list(map(int, f.readline().split()))\n        A = list(map(int, f.readline().split()))\n    P -= 1  # to 0-indexed\n    A.sort(reverse=True)  # \u964d\u9806\u30bd\u30fc\u30c8\n    cumsum = [0] * N\n    cumsum[0] = A[0]\n    for i in range(1, N):\n        cumsum[i] = cumsum[i - 1] + A[i]\n    q = P + 1\n    while q < N:\n        left = cumsum[q - 1]\n        if P > 0:\n            left -= cumsum[P - 1]\n        right = M * (N - V) + A[q] * (q - P)\n        if A[P] - A[q] > M or left > right:\n            print(q)\n            return\n        q += 1\n    print(q)\n\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"FileNotFoundError: [Errno 2] No such file or directory: 'PastAGC\/01-08.txt'"
  },
  "s962277735":{
    "code_string":"A,B=map(int,input().split())\nprint(6-A-B)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s197804051":{
    "code_string":"A,B=map(int,input().split())\nx = [A,B]\nA = [1,2,3]\nfor idx in range(len(A)):\n  if (A[idx] in x )== False:\n    print(A[idx])\n    break\n \n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s137574549":{
    "code_string":"a = int(input())\nb = int(input())\nn = [1, 2, 3].remove(a).remove(b)\nprint(n[0])",
    "error_obj":"AttributeError: 'NoneType' object has no attribute 'remove'"
  },
  "s855667909":{
    "code_string":"a,b = map(int,input().split())\n\nprint(6-a+b)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s465232699":{
    "code_string":"a = int(input())\nb = int(input())\n for i in range(1, 4):\n    if a != i and b != i:\n        print(i)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s257034108":{
    "code_string":"A,B=map(int, input().split())\nif (A==1 and B==2) or (A==2 and B==1):\n  print(3)\nelif (A==2 and B==3) or (A==3 and B==2):\n  print(1)\nelif (A==1 and B==3) or (A==3 and B==1):\n  print(2)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s836560993":{
    "code_string":"a=int(input())\nb=int(input())\nx=[1,2,3]\nx=x.remove(a)\nx=x.remove(b)\nprint(x[0])",
    "error_obj":"AttributeError: 'NoneType' object has no attribute 'remove'"
  },
  "s064225692":{
    "code_string":"a = int(input())\nb = int(input())\n\nflag1 = True\nflag2 = True\nflag3 = True\n\nif a = 1:\n    flag1 = False\nelif a = 2:\n    flag2 = False\nelif a = 3:\n    flag3 = False\n    \nif b = 1:\n    flag1 = False\nelif b = 2:\n    flag2 = False\nelif b = 3:\n    flag3 = False\n    \nif flag1:\n    print(1)\nelif flag2:\n    print(2)\nelse:\n    print(3)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s983989953":{
    "code_string":"A = int(input())\nB = int(input())\n\nif (A == 1 and B == 2) or (A == 2 and B == 1):\n    print(3)\nelif (A == 1 and B == 3) or (A == 3 and B == 1):\n    print(2)\nelif (A == 2 and B == 3) or (A == 3) and B == 2):\n    print(1)",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s593208951":{
    "code_string":"X = {1,2,3}\na = int(input())\nb = int(input())\nprint(list(X-set(a)-set(b))[0])",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s749876734":{
    "code_string":"A=int(input())\nB=int(input())\nfor i in raneg(3):\n  if i+1 !=A && i+1 != B:\n    print(i+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s240913919":{
    "code_string":"A=[int(input()),int(input())]\nif not 1 in A:\n  print(1)\nelif not 2 in A:\n  print(2)\nelse not 3 in A:\n  print(3)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s828048542":{
    "code_string":"a, b = map(int, input().split())\nfor i in range(1, 4):\n  if a != i and b!= i:\n    print(i)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s484483130":{
    "code_string":"a = int(input())\nb = int(input())\n\nt = set([1, 2, 3])\ns = set([a,b])\nans = t - s\nprint(list(ans[0]))\n",
    "error_obj":"TypeError: 'set' object is not subscriptable"
  },
  "s842975634":{
    "code_string":"A\uff1dint(input())\nB=int(input())\nC=6-A-B\nprint(C)",
    "error_obj":"SyntaxError: invalid character '\uff1d' (U+FF1D)"
  },
  "s542740051":{
    "code_string":"#https:\/\/atcoder.jp\/contests\/abc148\/tasks\/abc148_b\nN = int(input())\na,b = map(int,input().split())\nmoji = \"\"\nfor i in range(N):\n    moji += a[i]+b[i]\n\nprint(moji)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'ip'"
  },
  "s612704944":{
    "code_string":"n=int(input())\ns,t=map(input().split())\nresult=''\nfor i in range(0,n):\n    result+=s[i]\n    reuslt+=t[i]\nprint(result)\n",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s509375756":{
    "code_string":"N = int(input())\nS,T = map(input().split())\n\nres = \"\"\nfor i in range(N):\n  res += S[i]\n  res += T[i]\n\nprint(res)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s151452565":{
    "code_string":"a=int(input())\nb=input()\nc=input()\nd=\"\"\nfor i in range(a):\n  d=d+b[i]+c[i]\nprint(d)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s108336295":{
    "code_string":"n = int(input())\ns,t = input().split()\nans = \"\"\nfor i in range(n):\n  ans += a[i] + b[i]\nprint(ans)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s777714696":{
    "code_string":"N=int(input())\nS,T=input().split()\nans=S[0]+T[0]\nfor i in range(1,N):\n    ans=ans+s[i]+T[i]\nprint(ans)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s618655891":{
    "code_string":"N = int(input())\nS,T = map(,input().split())\nM = len(S)\nans = ''\nfor i in range(M):\n  ans += S[i] + T[i]\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s594887095":{
    "code_string":"N = int(input())\nS,T=input().split()\nlists=[]\nfor i in range(N):\n    lists+=S[i]\n    lists+=T[i]\nprint(*lists.split())",
    "error_obj":"AttributeError: 'list' object has no attribute 'split'"
  },
  "s558361765":{
    "code_string":"n = int(input())\ns, t = map(int, input().split())\n \nanswer_list = []\nfor i in range(n):\n  answer_list.append(s[i])\n  answer_list.append(t[i])\n\ns = ''.join(answer_list)\nprint(s)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'ip'"
  },
  "s900339291":{
    "code_string":"n = int(input())\ns = input()\nt = input()\n\nans = []\nfor i in range(n):\n    a.append(s[i])\n    a.append(t[i])\nprint(''.join(a))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s763081247":{
    "code_string":"N=int(input())\nS=input()\nT=input()\nU=[]\nfor i in range(N):\n  U.append(S[i])\n  U.append(T[i])\nprint(U)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s839483422":{
    "code_string":"a, b, k = map(int, input().split())\n\nx = min(a, k)\na -= x\nk -= x\ny = min(b, k)\nb -= y\n\nprint(str(a),str(b))",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s349664021":{
    "code_string":"N = input()\nS, T = list(map(str, input().split()))\n\nA = ''\nfor i in range(N):\n    A += S[i]\n    A += T[i]\n\nprint(A)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s094340730":{
    "code_string":"n = int(input())\ns =  input()\nt = input()\n\nfor (ele,mele) in zip(s,t):\n    print(ele+mele,end=\"\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s688964551":{
    "code_string":"N = int(input())\nS,T = input().split\n\nl = []\nfor i in range(N):\n  l.append(S[i])\n  l.append(T[i])\n  \nprint(\"\".join(l))",
    "error_obj":"TypeError: cannot unpack non-iterable builtin_function_or_method object"
  },
  "s747359233":{
    "code_string":"N = int(input())\nS, T = input().split()\nST = []\nfor i in range(N):\n    ST.append(S[i])\n    ST.append(T[i])\nprint(''.join(ST)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s363994334":{
    "code_string":"n=int(input())\ns,t=input().split()\nout=\"\"\nfor i=range(n):\n  out+=s[i]+t[i]\nprint(out)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s179597032":{
    "code_string":"n = input()\na = input()\nb = input()\n\noutput = \"\"\n\nfor s, t in zip(a, b):\n    output += a\n    output += b\nprint(output)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s780399250":{
    "code_string":"n = int(input())\ns,t = map(str,input().split())\na = ''\nfor i in range(n):\n    a = a[i]+s[i]+t[i]\nprint(a)",
    "error_obj":"IndexError: string index out of range"
  },
  "s748931045":{
    "code_string":"from math import gcd\na,b=int(input().split())\nprint(a*b\/gcd(a,b))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s176841249":{
    "code_string":"import math\na,b = map(int,input().split())\ntemp = math.gcd(a, b)\nans = a * b \/\/ temp\nprint(ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s808357869":{
    "code_string":"a,b = map(int,input().split())\nprint(a*b\/\/math.gcd(a,b))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s432004552":{
    "code_string":"def lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n\ndef abc148c_snack():\n    a, b = map(int, input().split())\n    print(lcm(a, b))\n\nabc148c_snack()",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s841820876":{
    "code_string":"import math\na,b=map(int,input().split())\ndef lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)def lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\nprint(lcm(a,b))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s867469431":{
    "code_string":"def lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\na,b=map(int,input(),split())\nprint(lcm(a, b))",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s349399684":{
    "code_string":"A, B = map(int,input().split())\n\nwhile A != B:\n    if A > B:\n        A, B = B, A\n    A += A\n\nprint(A)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s726775292":{
    "code_string":"import math\n\nA, B =map(int, input().split())\n\nprint(A*B \/ gcd(A, B))   ",
    "error_obj":"NameError: name 'gcd' is not defined"
  },
  "s657788222":{
    "code_string":"from math import gcd\ndef main():\n    a, b = = map(int, input().split())\n    r = (a * b) \/\/ gcd(a, b)\n    print(r)\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s103045931":{
    "code_string":"import math\na=int(input())\nb=int(input())\ndef lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n\nprint(lcm(a, b))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 3'"
  },
  "s262883566":{
    "code_string":"import numpy as np\n\nA, B = map(int, input().split())\n\nprint(lcm(A, B))\n",
    "error_obj":"NameError: name 'lcm' is not defined"
  },
  "s183921406":{
    "code_string":"import math\n\nA,B=map(int,input())\nprint(A*B \/\/ math.gcd(A,B))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s564865063":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nc=1\nd=0\nif a>b:\n  for i in range(1,a):\n    if a%(a-i)==0 and b%(b-i)==0:\n      a=a\/(a-i)\n      b=b\/(a-i)\n      c=c*(a-i)\n  print(int(a*b*c))\nif a<b:\n  for i in range(1,b):\n    if a%(b-i)==0 and b%(b-i)==0:\n      a=a\/(b-i)\n      b=b\/(a-i)\n      c=c*(b-i)\n  print(int(a*b*c))",
    "error_obj":"ZeroDivisionError: float division by zero"
  },
  "s985787389":{
    "code_string":"a, b = map(int, input().split())\n\nlcm = 0\nfor i in range(1, B+1):\n  if (A * i) % B == 0:\n    lcm = A * i\n  \nprint(lcm)",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s245804198":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\nif(1 in a):\n  ans = 0\n  jud = 0\n  f = 1\n  for i in range(n):\n    if(p[0]!=f):\n      del p[0]\n      ans += 1\n    else:\n      f += 1\n  print(ans)\nelse:\n  print(-1)\n",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s352684790":{
    "code_string":"\nN = int(input())\na = list(map(int, input().split(\" \")))\n\nt = 1\nfor x in a:\n    if x == t:\n        t += 1\nt -= 1\n\nif t == 0:\n    print(-1)\nelse:\n    print(M-t)\n\n",
    "error_obj":"NameError: name 'M' is not defined"
  },
  "s963536168":{
    "code_string":"a = int(input())\nb = list(map(int,input().split()))\nc = 1\nans = 0\nfor i in range b:\n    if i == c:\n        c += 1\n    else:\n        ans += 1\nif ans == a:\n    ans = -1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s135514757":{
    "code_string":"n = input()\nrenga = list(map(int, input().split(\" \")))\n\nni = 1\nremains = 0\n\nfor r in renga:\n    if ni == r:\n        ni += 1\n        remains += 1\nif ni == 1:\n    print(-1)\nelse:\n    print(renga - remains)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'int'"
  },
  "s623060537":{
    "code_string":"import math\nA, B = map(int, input().split())\nprint(int(A * B \/ math.gcd(A, B)))\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s690538809":{
    "code_string":"class Stack:\n  def __init__(self):\n    self.count = 1\n    self.lst = []\n  \n  def push(self, element):\n    if element == count:\n      self.lst.append(element)\n      self.count += 1\n  \n  def length(self):\n    return len(self.lst)\n\nn = int(input())\na = list(map(int, input().split()))\nstack = Stack()\nfor i in a:\n  stack.push(i)\n\nb = stack.length()\nif b == 0:\n  print('-1')\nelse:\n  print(n - b)",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s487639491":{
    "code_string":"N = int(input())\nM = 10\nans = 0\n\nif N % 2 == 0\n  while N > M:\n    ans += N\/\/M\n    M *= 5\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s499746970":{
    "code_string":"import math\nn = int(input())\nif n == 0:\n    print(0)\nif n == 1:\n    print(0)\nelse:\n    if n % 2 ==1:\n        print(0)\n    else:\n        ans = 0\n        l = 10\n        while n>=l:\n            ans += floor(n\/(l))\n            l *= 5\n        print(ans)",
    "error_obj":"NameError: name 'floor' is not defined"
  },
  "s388071617":{
    "code_string":"a,b,c=map(int,input().split())\nif a+b+c=>22:\n  print(\"bust\")\nelse:\n  print(\"win\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s890301244":{
    "code_string":"#ABC147\na = [map(int,input().split())]\nprint(\"bust\" if sum(a)>=22 else \"win\")",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'map'"
  },
  "s059220582":{
    "code_string":"print('bust' if sum(list(map,input().split()))>=22 else 'win')",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s980823770":{
    "code_string":"a,b,c=map(int,input(),split())\nif a+b+c>=22:\n    print(\"bust\")\nelse:\n    print(\"win\")",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s436793033":{
    "code_string":"A = list(map(int,input().split())\na = sum(A)\nif a >= 22:\n    print(\"bust\")\nelse:\n    print(\"win\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s638836244":{
    "code_string":"def main():\n\ta,b,c = map(int,input().split())\n\tif a + b + c >= 22:\n    \tprint('bust')\n\telse:\n    \tprint('win')\nmain()",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s416818968":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nif (a+b+c)>=22:\n    print('bust')\nelse:\n    print('win')\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 7 9'"
  },
  "s766861592":{
    "code_string":"print(\"win\" if sun(map(int,input().split()))<=21 else \"bust\")",
    "error_obj":"NameError: name 'sun' is not defined"
  },
  "s363550134":{
    "code_string":"#C - HonestOrUnkind2\nN = int(input())\nA = []\nX = []\nY = []\nfor _ in range(N):\n    a = int(input())\n    A.append(a)\n    box_x = []\n    box_y = []\n    for _ in range(a):\n        x,y = map(int,input().split())\n        box_x.append(x)\n        box_y.append(y)\n    X.append(box_x)\n    Y.append(box_y)\n\nperson = [2]*N\n\nmaxim = 0\nfor i in range(1<<N):\n    c_person = person.copy()\n    honest = 0\n    for j in range(N):\n        mask = 1<<j\n        if mask&i != 0:\n            c_person[j] = 1\n        else:\n            c_person[j] = 0\n    #\u6b63\u76f4\u8005\u304b\u3069\u3046\u304b\u306e\u4eee\u5b9a\n    for k,l in enumerate(c_person):\n        #k\u304c\u6b63\u76f4\u8005\u306e\u3068\u304d\n        if l == 1:\n            #k\u306e\u8a3c\u8a00\u3092\u5224\u5b9a\n            for m,n in zip(X[k],Y[k]):\n                #\u77db\u76fe\u304c\u3042\u308b\u306a\u3089 honest = 0\u3067break\n                if c_person[m-1] != n:\n                    honest = 0\n                    break\n            else:\n                honest = sum(c_person)\n                continue\n            break\n    maxim = max(maxim,honest)\n                \nprint(maxim)     ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 7 9'"
  },
  "s260694996":{
    "code_string":"A1, A2, A3 = input().split()\n\nT = A1 + A2 + A3\n\nif T > 21:\n  print(\"bust\")\nelse:\n  print(\"win\")",
    "error_obj":"TypeError: '>' not supported between instances of 'str' and 'int'"
  },
  "s424170017":{
    "code_string":"a,b,c=map(int,input()split())\nsum=a+b+c\n\nif sum >=22:\n  print(\"bust\")\nelse:\n  print(\"win\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s983389970":{
    "code_string":"a, b, c = map(int, input())\nif a + b + c >= 22:\n  print('bust')\nelse:\n  print('win')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s524925187":{
    "code_string":"A,B,C = int(input())\nif A+B+C <= 21:\n  print(\"win\")\nelse:\n  print(\"bust\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 7 9'"
  },
  "s056985469":{
    "code_string":"A=list(map(int,input()split()))\nB=0\nB=A[0]+A[1]+A[2]\nif B>=22:\n    print(\"bust\")\nelse:\n    print(\"win\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s563631353":{
    "code_string":"if sum(map(int,input().split()) > 21:\n       print('bust')\nelse:\n       print('win')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s768851110":{
    "code_string":"A=input();print(sum(i!=j for i,j in zip(A,A[::-1])\/\/2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s425012128":{
    "code_string":"s=input()\nans = 0\nfor i in range(len(s)\/\/2+1):\n\tif s[i] != s[len(s)-1-i]:\n    \tans+=1\n        \nprint(ans)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s827426679":{
    "code_string":"s = int(input())\ns_r = s[::-1]\ncnt = 0\nfor i in range(len(s)):\n    if s[i] != s_r[i]:\n        cnt += 1\nprint(cnt\/\/2)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'redcoder'"
  },
  "s541460846":{
    "code_string":"S = input()\nhug = 0\nif len(S) % 2 == 0:\n  for i in range(len(S\/2)):\n    if not S[i] == S[-i-1]:\n      hug += 1\n    else:\n      pass\nelse:\n  for i in range(int((len(S)+1)\/2)):\n    if not S[i] ==S[-i-1]:\n      hug += 1\n    else:\n      pass\nprint(hug)\n  ",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'str' and 'int'"
  },
  "s643274732":{
    "code_string":"s = input()\nn = len(s) \/\/ 2\np = n\nj = -1\n\nfor i in range(n):\n    if n[i] == n[j]:\n        p -= 1\n    j -= 1\n\nprint(p)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s964013523":{
    "code_string":"S = input()\n\ncnt = 0\nfor i in range(S \/\/ 2):\n  if S[i] != S[len(S) - 1 - i]:\n    cnt += 1\nprint(cnt)",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'str' and 'int'"
  },
  "s648327838":{
    "code_string":"A=input()\nc=0\nB=A[::-1]\nfor i in range(len(A)):\n    if A[i]!=B[i]:\n        cnt+=1\nprint(cnt\/\/2)",
    "error_obj":"NameError: name 'cnt' is not defined"
  },
  "s392404247":{
    "code_string":"s = int(input())\ncnt = 0\nfor s1, s2 in zip(s, s[::-1]):\n    if s1 != s2:\n        cnt += 1\nprint(cnt \/\/ 2)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'redcoder'"
  },
  "s396121062":{
    "code_string":"s=input()\nt=s\nans=0\nfor i in range(len(s)):\n  ans+=1-s[i]==t[i]\nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'str'"
  },
  "s166020263":{
    "code_string":"s = input()\nt = 0\nfor i in range(len(s)):\n  if s[i] != s[::-1][i]:\n    t += 1\nptint(t\/\/2)",
    "error_obj":"NameError: name 'ptint' is not defined"
  },
  "s171339183":{
    "code_string":"s=input();n=len(s)-1;print(sum(s[i]!=s[n-i]for i in range(n+1))\/\/2)s=input();n=len(s)-1;print(sum(s[i]!=s[n-i]for i in range(n+1))\/\/2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s511674920":{
    "code_string":"a=input()\nb=0\nfor i in range(len(a)):\n  if a[i]!=a[len(a)-i]:\n    b=b+1\nprint(int(b\/2))",
    "error_obj":"IndexError: string index out of range"
  },
  "s607677107":{
    "code_string":"s = input()\ns1 = s[:s\/\/2]\ns2 = s[-1 * (s\/\/2):]\nans = 0\nfor i in range(s\/\/2):\n  if s1[i] != s2[i]:\n    ans += 1\nprint(ans)    \n",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'str' and 'int'"
  },
  "s474044771":{
    "code_string":"N = int(input())\nA = []\nxy = []\nfor i in range(N):\n    a =  int(input())\n    A.append(a)\n    for j in range(a):\n        x, y = map(int, input().split())\n        #\uff12\u6b21\u5143\u914d\u5217\n        xy.append([x, y])\nprint(xy)\n\nhonest = 0\n\nfor i in range(1, 2**N):\n    flag = 0\n    for j in range(N):\n        # j\u756a\u76ee\u304c\u6b63\u76f4\u3068\u4eee\u5b9a\u3059\u308b\n        if (i>>j)&1 == 1:\n            for x,y in xy[j]:\n                # j\u756a\u76ee\u306f\u6b63\u76f4\u3060\u304c\u77db\u76fe\u3092\u767a\u898b\n                if (i>>x)&1 != y:\n                    flag = 1\n                    break\n    # \u77db\u76fe\u304c\u3042\u308b\u5834\u5408\u306fflag == 1\u306b\u306a\u308b\n    if flag == 0:\n        honest = max(honest, bin(i)[2:].count('1'))\nprint(honest)",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s824855075":{
    "code_string":"n = int(input())\nls = [0]*n\nparam_list = [0]*2**n\nfor i in range(2**n):\n    l = [False]*n\n    for id_r, row in enumerate(ls):\n        if i & (2 ** id_r) >0:\n            l[id_r] = True\n    param_list[i] = l \n#1print(param_list)\n\"\"\"\nfor i in range(2**(n-1)):\n    l = [True]+[False]*(n-1)\n    for id_r, row in enumerate(ls):\n        if i & id_r >0:\n            l[id_r] = True\n    param_list[i+2**(n-1)] = l \nprint()\nprint(len(param_list))\nprint(param_list)\na_list = get_unique_list(param_list)\nprint(len(a_list))\nprint(a_list)\"\"\"\n\nfor i in range(n):\n    A = int(input())\n    for k in range(A):\n        a,b = map(int, input().split())\n        b = (1==b)\n        new_param =[]\n        for d in a_list:\n            if d[i]:\n                if d[a-1] == b:\n                    new_param.append(d)\n                    pass\n                else:\n                    #print(2)\n                    pass\n            else:\n                new_param.append(d)\n                #if d[a-1] is b:\n                    #print(3)\n                    #pass\n                #else:\n                    #print(4)\n                    #new_param.append(d)\n                    #pass\n            \n        param_list = new_param\n        #print(param_list)\n            \nans = 0    \nfor d in param_list:\n    ans = max(ans, d.count(True))\nprint(ans)",
    "error_obj":"NameError: name 'a_list' is not defined"
  },
  "s376937493":{
    "code_string":"n = int(input())\ntst = [[] for i in range(n)]\nfor i in range(n):\n    a = int(input())\n    for j in range(a):\n        x,y = map(int,input().split())\n        st[i].append([x,y])\nans = 0\nfor bit in range(1<<n):\n    honest = [0]*n\n    check = 1\n    for i in range(n):\n        if (bit>>i)&1:\n            honest[-1-i] = 1\n    for i in range(n):\n        if not honest[i]:\n            continue\n        for l in tst[i]:\n            if l[1]!=honest[l[0]-1]:\n                check = 0\n                break\n    if check:\n        ans = max(ans,sum(honest))\nprint(ans)",
    "error_obj":"NameError: name 'st' is not defined"
  },
  "s558163358":{
    "code_string":"N = int(input())\nListN=[]*\nList = []\nkeepOrder\nfor i in range(N):\n  k = int(input())\n  ListN.append(k)\n  for j in range(k):\n    List.append(list(map(int, input().split())))\nfor bits in range(2**N):\n  keepOrder = list(bin(bits))\n  flag= True\n  print(bits,keepOrder)\n  for j in range(N):\n    if((bits>>j) & 1): \n      for k in range(ListN[j]):\n        if keepOrder[List[k][0]-1]!=List[k][1]:\n          flag = False\n    else:\n        if keepOrder[List[k][0]-1]==List[k][1]:\n          flag = False\n  if flag:\n    res = max(res,keepOrder.count(\"1\")\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s112463379":{
    "code_string":"n = int(input())\nXY = []\nfor i in range(n):\n    a = int(input())\n    xy = []\n    for j in range(a):\n        x, y = map(int, input().split())\n        xy.append([x, y])\n    XY.append(xy)\nans = 0\nfor k in range(2 ** n):\n    s = [0] * n\n    cnt = 0\n    case = 0\n    for j in range(n):\n        if (k >> j) & 1:\n            s[n - 1 - j] = 1\n            cnt += 1\n    for k in range(n):\n        if s[k] == 1:\n            for l in range(len(XY[l])):\n                if s[XY[k][l][0] - 1] != XY[k][l][1]:\n                    case = 1\n    if case == 0:\n        ans = max(ans, cnt)\nprint(ans)\n",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s103633228":{
    "code_string":"N = int(input())\ntestimony = [[-1]*N for i in range(N)]\ncount = 0\nfor i in range(N):\n  A = int(input())\n  for j in range(A):\n    x,y = map(int,input().split())\n    testimony[i][x-1]=y\nfro i in range(2**N):\n  honest = [0]*N\n  for j in range(N):\n    if(i>>j)&1:\n      honest[j]=1\n  flag=True\n  for j in range(N):\n    if honest[j]==1:\n      for k in range(N):\n        if testimony[j][k]==-1:\n          continue\n        if testimony[j][k]!=honest[k]:\n          flag=False\n  if flag==True:\n    count=max(count,hones.count(1))\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s815592585":{
    "code_string":"#!\/usr\/bin\/env python3]\nimport sys\nsys.setrecursionlimit(2000)\n\nN = int(input())\nsyogen = []\nfor i in range(N):\n    N_a = int(input())\n    syogen_a = []\n    for _ in range(N_a):\n        x, y = input().split()\n        syogen_a.append([int(x) - 1, int(y)])\n    syogen.append(syogen_a)\n\n\ndef syojiki(i):\n    for x, y in syogen[i]:\n        if y == 1:\n            syojiki_list.append(x)\n            if len(syojiki_list) >= N:\n                return\n            syojiki(x)\n\n\ndef check_syojiki(syojikitati):\n    d = {}\n    for s in range(N):\n        if not (s in syojikitati):\n            d[s] = 0\n\n    for s in syojikitati:\n        d[s] = 1\n        for x, y in syogen[s]:\n            if d[x] != y:\n                return False\n            else:\n                d[x] = y\n    return True\n\n\nmax_syojiki = 0\n\nfor i in range(2 ** N):\n    d = {}\n    syojiki_list = []\n    for j in range(N):\n        if (i >> j) & 1:\n            syojiki_list.append(j)\n            syojiki(j)\n    syojiki_list = list(set(syojiki_list))\n    if check_syojiki(syojiki_list):\n        max_syojiki = max(max_syojiki, len(syojiki_list))\n\nprint(max_syojiki)\n",
    "error_obj":"KeyError: 1"
  },
  "s841602582":{
    "code_string":"from itertools import product\n\nN = int(input())\nxy = [[] for i in range(N)]\n\nfor i in range(N):\n    for j i range(int(input())):\n        xy[i].append(list(map(int, input().split())))\n        \nans = 0\nfor bit in product([0,1], repeat=N):\n    f = 0\n    for i, j in enumerate(bit):\n        if j == 1:\n            for x, y in xy[i]:\n                if bit[x-1] != y:\n                    f = 1\n                    break\n    if f == 0:\n        ans = max(ans, sum(bit))\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s942878298":{
    "code_string":"N=int(input())\nXY=[[[]] for n in range(N)]\nfor n in range(1,N+1):\n  a=int(input())\n  XY[n]=[list(map(int, input().split())) for _ in range(a)]\n\nmaxH=0\nfor mask_i in range(1<<N):\n  \n  H=[0]*(N+1)\n  for n in range(N):\n    if mask_i>>n&1:\n      H[n+1]=1\n  #print(H[1:])\n  \n  for n in range(1,N+1):\n    ok=True\n    if H[n]==1:\n      for x,y in XY[n]:\n        if H[x]!=y:\n          ok=False\n          break\n  if ok:\n    maxH=max(maxH,sum(H))\n\nprint(maxH)\n",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s249147113":{
    "code_string":"n = int(input())\ng = [[-1]* 15 for _ in range(15)]\nfor i in range(n) :\n    m = int(input())\n    for j in range(n) :\n        x, y = map(int, input().split())\n        #\u4ebai\u304c\u300c\u4ebax\u306fy\u3067\u3042\u308b\u300d\u3068\u8a3c\u8a00\u3057\u3066\u3044\u308b\n        g[i][x-1] = y\n\nans = 0\nfor i in range(1<<n) :\n    honest = [0] * n\n    for j in range(n) :\n        if (i>>j) & 1 == 1 :\n            honest[j] = 1\n    #\u3053\u3053\u307e\u3067\u3067\u3059\u3079\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7db2\u7f85\u3057\u3066\u3044\u308b\n    ok = True\n    for j in range(n) :\n        if honest[j] : #\u6b63\u76f4\u8005\u306e\u8a3c\u8a00\u3060\u3051\u691c\u8a3c\u3059\u308b\n            for k in range(n) :\n                if g[j][k] == -1 :\n                    continue\n                if g[i][j] != honest[k] :\n                    ok = False\n            if ok :\n                ans = max(ans, honest.count(1))\nprint(ans)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s430660139":{
    "code_string":"n = int(input())\nXY = [[] for _ in range(n)]\nfor i in range(n):\n    for j in range(int(input())):\n        x, y = map(int, input().split())\n        XY[i].append([x-1, y])\nhonest = 0\nfor bit in range(1<<n):\n    flag = True \n    for i in range(n):\n        if bit & (1<<i) :\n            for a, b in XY[i]:\n                if bit & (1<<a) != b:\n                    flag = False \n                    break\n    if flag:\n        honest = max(honest, bin(i)[2:].count('1'))\nprint(ans)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s831558888":{
    "code_string":"#\n# joi2008yo e\n#\nimport sys\nfrom io import StringIO\nimport unittest\nimport copy\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2 5\n0 1 0 1 0\n1 0 0 0 1\"\"\"\n        output = \"\"\"9\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3 6\n1 0 0 0 1 0\n1 1 1 0 1 0\n1 0 1 1 0 1\"\"\"\n        output = \"\"\"15\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    R, C = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(R)]\n    A_rev = [[1 - v for v in a] for a in A]\n\n    ans = 0\n    for bit in range(1 << R):\n        num = 0\n        T = copy.deepcopy(A)\n        for i, t in enumerate(T):\n            if 1 << i & bit:\n                T[i] = A_rev[i]\n\n        T = list(zip(*T))\n        for t in T:\n            num += max(t.count(0), t.count(1))\n        ans = max(ans, num)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s555629972":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\nmod = 10e9+7\nans = 0\nfor i in range(60):\n    x = 1 << i\n    n = len([1 for j in a if j & X])\n    ans += x * n * (N-n) % mod\n    ans %= mod\nprint(ans)",
    "error_obj":"NameError: name 'X' is not defined"
  },
  "s210681536":{
    "code_string":"N, *A = map(int, open(0).read().split())\nA = np.array(A, dtype=np.int64)\nmod = 10**9 + 7\n \nans = 0\nfor i in range(60):\n    mask = 1 << i\n    cnt = np.count_nonzero(A&mask)\n    x = cnt * (N-cnt)\n    x *= mask % mod\n    ans += x\n    ans %= mod\n \nprint(ans)",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s885032806":{
    "code_string":"md1=map(int,input().split())\nmd2=map(int,input().split())\n\nprint(1 if md1[0]!=md2[0] else 0)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s671430869":{
    "code_string":"MD = [map(int, input().split()) for _ in range(N)]\nM, D = [list(i) for i in zip(*MD)]\n\nif D[1] == 1:\n    print(1)\nelse:\n    print(0)\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s228564257":{
    "code_string":"a,b=map(int,input().split())\nc,d=map(int,input().split())\nprint([0,1][a==b+1]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s000411965":{
    "code_string":"N = int(input())\n \nans = \":(\"\n \nfor X in range(N-1):\n  if int(X * 1.08) = N:\n    ans = X\n    break\n    \nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s890072303":{
    "code_string":"N = int(input())\n \nans = -1\nfor i in range(N):\n\tif math.floor(float(i)*1.08) == N:\n    \tans = i\n      \nif ans == -1:\n  print(':(')\n  \nelse:\n  print(ans)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s522607292":{
    "code_string":"n=int(input())\nm=rond(n\/1.08)\nif int(m*1.08)==n:\n  print(m)\nelse:\n  if int((m-1)*1.08)==n:\n    print(m-1)\n  elif int((m+1)*1.08)==n:\n    print(m+1)\n  else:\n    print(':(')",
    "error_obj":"NameError: name 'rond' is not defined"
  },
  "s006202896":{
    "code_string":"import sys\nfrom collections import deque\nimport numpy as np\nimport math\nsys.setrecursionlimit(10**6)\ndef S(): return sys.stdin.readline().rstrip()\ndef SL(): return map(str,sys.stdin.readline().rstrip().split())\ndef I(): return int(sys.stdin.readline().rstrip())\ndef IL(): return map(int,sys.stdin.readline().rstrip().split())\n\ndef solve():\n    f = math.ceil(m\/1.08)\n    if math.floor(f*1.08)==n:\n        print(f)\n    else:\n        print(':(')\n    return\n\nif __name__=='__main__':\n    n = I()\n    solve()",
    "error_obj":"NameError: name 'm' is not defined"
  },
  "s619301251":{
    "code_string":"n=int(input())\nnum=round(n\/1.08)\ncheck=round(num*1.08)\nif check==n\n    print(num)\nelse:\n    print(':(')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s256995184":{
    "code_string":"N = int(input())\nS = math.ceil(N \/ 1.08)\nif S * 1.08 != N:\n  print(\":(\")\nelse:\n  print(S)\n",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s033471656":{
    "code_string":"import math\nN=float(input())\na=math.ceil(N\/(1.08))\nfor i in range(a,N):\n    if math.floor(i*1.08)==N:\n        print(a)\n        break\n    else:\n        print(':(')",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s963969834":{
    "code_string":"n=int(input()) \nflag = False\nfor i in range(100*n,100*(n+1)):\n  if i%108 == 0:\n    x == int(i\/\/108)\n    print(x)\n    flag == True\n    break\nif flag == False:\n  print(':(')",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s167684091":{
    "code_string":"import math\nN=int(input())\ns=N\/1.08\ns=math.ceil(s)\nt=s*1.08\nt=math.floor(t)\nif N==t:\n    input(s)\nelse :\n    input(\":(\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s024610981":{
    "code_string":"n=int(input())\nx=n\/1.08\nnn=x*1.08\nif n<=nn<n+1:\n    if x*10%10>=5:    \n\t\tprint(int(x)+1)\n    else:\n        print(int(x))\nelse:\n  print(\":(\")\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s888882213":{
    "code_string":"def main2():\n    n = int(input())\n    x = int(math.ceil(n \/ 1.08))\n    \n    if int(x*1.08) == n:\n        print(x)\n    else:\n        print(\":(\")\n\nif __name__ == \"__main__\":\n    main2()",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s786962810":{
    "code_string":"n=int(input())\nans=:(\nfor i in range(1,n):\n  if int((i*1.08)\/\/1)==n:\n    ans=i\n    break\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s949653649":{
    "code_string":"import math\nN = int(input())\nA = N\/1.08 \nB = (N+1)\/1.08 \n\nif math.ceil(A) < math.ceil(B):\n  print(ceil(A))\nelse:\n  print(':(')\n",
    "error_obj":"NameError: name 'ceil' is not defined"
  },
  "s418751450":{
    "code_string":"x = int(input())\nkosuu, amari = x \/\/ 100, x % 100\nans = 0\n\nfor i in kosuu:\n    amari -= 5\n    if amari <= 0:\n        ans = 1\n        break\n\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s273926918":{
    "code_string":"x = int(input())\ndp = [0]*(x + 1)\ndp[100] = 1 \ndp[101] = 1\ndp[102] = 1\ndp[103] = 1\ndp[104] = 1\ndp[105] = 1\n\nfor i in range(100,x+1):\n    for j in range(100,106):\n        dp[i+j] = max(dp[i] , dp[i+j])\n\nprint(dp[x])\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s643673083":{
    "code_string":"X = int(input())\nfor i1 in range(1000000):\n  for i2 in range(1000000):\n    for i3 in range(1000000):\n      for i4 in range(1000000):\n        for i5 in range(1000000):\n          for i6 in range(1000000):\n            if 100 * i1 + 101 * i2 + 102 * i3 + 103 * i4 + 104 * i5 + 105 * i6 == X:\n              print(\"1\")\n            else:\n              print(\"0\")\n  \n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s282663130":{
    "code_string":"dp = [Yes] #i\u5186\u306e\u8cb7\u3044\u7269\u304c\u3067\u304d\u308b\u304b\nfor i in range(99):\n  dp.append(No)\nfor i in range(100, x+1):\n  if(i < 106):\n    dp.append(Yes)\n  else:\n    if((dp[i-100] == Yes) or (dp[i-101] == Yes) or (dp[i-102] == Yes) or (dp[i-103] == Yes) or (dp[i-104] == Yes) or (dp[i-105] == Yes)):\n      dp[i].append(Yes)\n    else:\n      dp[i].append(No)\nprint(dp[x])",
    "error_obj":"NameError: name 'Yes' is not defined"
  },
  "s791590449":{
    "code_string":"X = int(input())\nnumber = X\/\/100\nteen = X%100\n\nelif teen <= 5*number:\n    print(1)\nelse:\n    print(0)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s538882366":{
    "code_string":"import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 6)\nmod = 10**9+7\ncnt = 1\nans = 0\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\nn = k()\ns = v()\n\ns1,s2,s3 = set(),set(),set()\nfor x in S:\n    for z in s2:\n        s3.add(z+x)\n    for y in s1:\n        s2.add(y+x)\n    s1.add(x)\nprint(len(s3))\n\n",
    "error_obj":"TypeError: 'function' object is not iterable"
  },
  "s050398664":{
    "code_string":"n = int(input())\ns = input()\n\n# 3\u6841\u306e\u756a\u53f7\u3092\u4f5c\u308b\u306b\u3042\u305f\u308a\u3001\u6587\u5b57\u5217\u304b\u3089\u62bd\u51fa\u3057\u3066\u4f5c\u308b\u306e\u3067\u306f\u306a\u304f\u3001000\u301c999\u307e\u3067\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\nans = 0\nfor i in range(10):\n  a = s.find(str(i))\n  for j in range(10):\n    b = s.find(str(j), a+1) # a\u306e\u53d6\u5f97\u4f4d\u7f6e\u306e\u6b21\u304b\u3089\u691c\u7d22\u3092\u884c\u3046\n    for k in range(10):\n      c = s.find(str(k), b+1)\u3000# b\u306e\u53d6\u5f97\u4f4d\u7f6e\u306e\u6b21\u304b\u3089\u691c\u7d22\u3092\u884c\u3046\n      if a == -1 or b == -1 or c == -1: continue\n      else: ans += 1\nprint(ans)",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s278921410":{
    "code_string":"N=int(input())\nS=input()\nans=0\nfor i in range(10):\n  str_i = str(i)\n  i_index==S.find(str_i)\n  if i_index==-1:\n    continue\n  for j in range(10):\n    str_j=str(j)\n    j_index=S.find(str_j, i_index+1)\n    if j_index==-1:\n      continue\n    for k in range(10):\n      str_k=str(k)\n      k_index=S.find(str_k, j_index+1) \n      if k_index!=-1:\n        ans+=1\nprint(ans)",
    "error_obj":"NameError: name 'i_index' is not defined"
  },
  "s134785454":{
    "code_string":"n,*a=map(int,open(0).read().split())\nmod=10**9+7\nl=[0]*n\nl[0]=3\nans=1\nfor ai in a:\n  ans*=l[ai]\n  ans%=mod\n  l[ai]-=1\n  l[ai+1]+=1\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s337124782":{
    "code_string":"import sys\ninput = sys.stdin.readline\nmod = 10**9 + 7\n\ndef main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    candidates = [0] * n\n    candidates[0] = 3\n    ans = 1\n\n    for a in A:\n        ans *= candidates[a]\n        ans %= mod\n        candidates[a] -= 1\n        candidates[a+1] += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s371254182":{
    "code_string":"n = int(input())\nA = list(map(int, input().split()))\nmod = 1000000007\nans = 1\ncnt = [3 for i==0 else 0 for i in range(n+1)]\n\nfor a in A:\n    ans = ans*cnt[a]%mod\n    if ans==0: break\n    cnt[a] -= 1\n    cnt[a+1] += 1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s152673231":{
    "code_string":"N=int(input())\nA=list(map(int, input().split()))\nmod=10**9+7\nif A[0]!=0:\n    print(0)\n    break\nL=[1,0,0]\nans=3\nfor i in range(1,N):\n    a=A[i]\n    count=0\n    add=True\n    for j,l in enumerate(L):\n        if a==l:\n            count+=1\n            if add:\n                L[j]+=1\n                add=False\n\n    ans*=count\n    ans%=mod\nprint(ans)\n#print(L)\n",
    "error_obj":"SyntaxError: 'break' outside loop"
  },
  "s838048544":{
    "code_string":"n,*a = map(int,open(0).read().split())\ncnt = [3]+[0]*(n-2)\nans = 1\nmod = 10**9+7\nfor i in a:\n  ans = ans * cnt[i] % mod\n  cnt[i] -= 1\n  cnt[i+1] += 1\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s035335804":{
    "code_string":"n = str(input())\ndic = {SUN:7,\n       MON:6,\n       TUE:5,\n       WED:4,\n       THU:3,\n       FRI:2,\n       SAT:1}\nprint(dic(n))\n",
    "error_obj":"NameError: name 'SUN' is not defined"
  },
  "s418149652":{
    "code_string":"import sys \nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN = int(readline())\nA = list(map(int,readline().split()))\nB = list(map(int,readline().split()))\nN, W = map(int, readline().split())\nSS = ['SUN','MON','TUE','WED','THU','FRI','SAT']\nS = readline().decode().rstrip()\nfor i in range(7):\n    if S == SS[i]:\n        print(7-i)\n        sys.exit()",
    "error_obj":"ValueError: invalid literal for int() with base 10: b'SAT\\n'"
  },
  "s595212620":{
    "code_string":"S = input()\n\nif S == 'SUN':\n    print('7')\nelif S == 'MON':\n    print('6')\nelif S == 'TUE':\n    print('5')\nelif S == 'WED':\n    print('4')\nelif S == 'THU':\n    print('3')\nelif S == 'FRI':\n    print('2')\nelif S == 'SAT':\n    print('1')\nelse:\n    print('Error'",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s450619438":{
    "code_string":"S = input (\u3000)\n\nif S == 'sun':\n    print(7)\nelif S == 'MON':\n    print(6)\nelif S == 'TUE':\n    print(5)\nelif S == 'WED':\n    print(4)\nelif S == 'THU':\n    print(3)\nelif S == 'FRI':\n    print(2)\nelif S == 'SAT':\n    print(1)\n",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s160493170":{
    "code_string":"I=[\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"]\nfor i in range(7):\n    if I[i]==input():\n        print(7-i)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s542447463":{
    "code_string":"D = input()\nW = ['SUN','MON','TUE','WED','THU','FRI','SAT'] \nprint(7 - l.index(D))",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s035152669":{
    "code_string":"if S == 'SUN':\n    print(7)\nelif S == 'MON':\n    print(6)\nelif S == 'TUE':\n    print(5)\nelif S == 'WED':\n    print(4)\nelif S == 'THU':\n    print(3)\nelif S == 'FRI':\n    print(2)\nelif S == 'SAT':\n    print(1)\nelse:\n    print('\u9593\u9055\u3063\u3066\u307e\u3059')",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s427224198":{
    "code_string":"if S == 'SUN':\n    print(7)\nelif S == 'MON':\n    print(1)\nelif S == 'TUE':\n    print(2)\nelif S == 'WED':\n    print(3)\nelif S == 'THU':\n    print(4)\nelif S == 'FRI':\n    print(5)\nelif S == 'SAT':\n    print(6)\n",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s713463355":{
    "code_string":"if input() == 'SUN':\n    print(7)\nelif input() == 'MON':\n    print(6)\nelif input() == 'TUE':\n    print(5)\nelif input() == 'WED':\n    print(4)\nelif input() == 'THU':\n    print(3)\nelif input() == 'FRI':\n    print(2)\nelse:\n    print(1)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s272963328":{
    "code_string":"A = input()\n\nS = [SUN,MON,TUE,WED,THU,FRI,SAT]\n\nfor i in range(7):\n  if A == S[i]:\n    print(7-i)\n    break\n  i+=1\n",
    "error_obj":"NameError: name 'SUN' is not defined"
  },
  "s568299280":{
    "code_string":"S  =  \u5165\u529b\uff08''\uff09\n\n\u3082\u3057 S  ==  STR\uff08'SUN' \uff09\uff1a\n    \u30d7\u30ea\u30f3\u30c8\uff087\uff09\nelif  S  ==  str\uff08'MON'\uff09\uff1a\n    \u5370\u5237\uff086\uff09\nelif  S  ==  str\uff08'TUE'\uff09\uff1a\n    \u30d7\u30ea\u30f3\u30c8\uff085\uff09\nelif  S  ==  str\uff08'WED'\uff09\uff1a\n    \u30d7\u30ea\u30f3\u30c8\uff084\uff09\nelif  S  ==  str\uff08'THU'\uff09\uff1a\n    \u30d7\u30ea\u30f3\u30c8\uff083\uff09\nelif  S  ==  str\uff08'FRI'\uff09\uff1a\n    \u5370\u5237\uff082\uff09\n\u305d\u306e\u4ed6\uff1a\n    \u5370\u5237\uff081\uff09",
    "error_obj":"SyntaxError: invalid character '\uff08' (U+FF08)"
  },
  "s048885693":{
    "code_string":"SUN = 7\nMON = 1\nTUE = 2\nWED = 3\nTHU = 4\nFRI = 5\nSAT = 6\n\nA =  input()\n\n\nprint(7 - A)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'str'"
  },
  "s358247434":{
    "code_string":"#\u4f55\u66dc\u65e5\u304b\u3092\u5165\u529b\nweekday = input()\n#\u65e5\u66dc\u65e5\u307e\u3067\u306e\u65e5\u6570\u3092\u51fa\u529b\nif weekday == \"SUN\":\n    print(7)\nelif weekday == \"MON\":\n    print(6)S\nelif weekday == \"TUE\":\n    print(5)\nelif weekday == \"WED\":\n    print(4)\nelif weekday == \"THU\":\n    print(3)\nelif weekday == \"FRI\":\n    print(2)\nelif weekday == \"SAT\":\n    print(1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s273622072":{
    "code_string":"s = input()\nres = 0\nif s == \"SUN\":\n  res = 7\nelif s == \"MON\":\n  res = 6\nelif s == \"TUE\":\n  res = 5\nelif s == \"WED\":\n  res = 4\nleif s == \"THU\":\n  res = 3\nelif s == \"FRI\":\n  res = 2\nelif s == \"SAT\":\n  res = 1\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s548581971":{
    "code_string":"# 166A\n# \u554f\u984c\u6587\n# AtCoder \u793e\u306f\u3001\u6bce\u9031\u571f\u66dc\u65e5\u306b\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u958b\u50ac\u3057\u3066\u3044\u307e\u3059\u3002\n# \u30b3\u30f3\u30c6\u30b9\u30c8\u306b\u306f ABC \u3068 ARC \u306e\n# 2\u3064\u306e\u7a2e\u985e\u304c\u3042\u308a\u3001\u6bce\u9031\u3069\u3061\u3089\u304b\u4e00\u65b9\u304c\u958b\u50ac\u3055\u308c\u307e\u3059\u3002\n# ABC \u304c\u958b\u50ac\u3055\u308c\u305f\u6b21\u306e\u9031\u306b\u306f ARC \u304c\u958b\u50ac\u3055\u308c\u3001ARC \u304c\u884c\u308f\u308c\u305f\u6b21\u306e\u9031\u306b\u306f ABC \u304c\u958b\u50ac\u3055\u308c\u307e\u3059\u3002\n# \u5148\u9031\u958b\u50ac\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u8868\u3059\u6587\u5b57\u5217 S\u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001\n# \u4eca\u9031\u958b\u50ac\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n#\n# \u5236\u7d04: S\u306f ABC \u307e\u305f\u306f ARC\n# \u5165\u529b: \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n#  S\n# \u51fa\u529b: \u4eca\u9031\u958b\u50ac\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u51fa\u529b\u305b\u3088\u3002\n\n# ABC or ARC\nS = input()\n\nif S == 'ABC':\n    answer = 'ARC'\nelif S == 'ARC':\n    answer = 'ABC'\n\nprint(answer)",
    "error_obj":"NameError: name 'answer' is not defined"
  },
  "s584677289":{
    "code_string":"S=input()\nprint(7 if S==\"SUN\" 6 if S==\"MON\" 5 if S==\"TUE\" 4 if S==\"WED\" 3 if S==\"THU\" 2 if S==\"FRI\" 1 if S==\"SAT\"",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s002379314":{
    "code_string":"S = input()\nweek = [\"SUN\",\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\nfor i in week:\n  if week[i] == S:\n    print(7 - i)",
    "error_obj":"TypeError: list indices must be integers or slices, not str"
  },
  "s731257403":{
    "code_string":"s = input()\nd = ['SUN','MON','TUE','WED','THU','FRI','SAT','a']  \nprint(d.index(s)[::-1])",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s546989661":{
    "code_string":"S = input()\n\ndays = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'}\nprint(7 - days.index(S))",
    "error_obj":"SyntaxError: closing parenthesis '}' does not match opening parenthesis '['"
  },
  "s234498805":{
    "code_string":"s=input()\na=[\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"]\nprint(7-a.index(a))\n",
    "error_obj":"ValueError: ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'] is not in list"
  },
  "s341674724":{
    "code_string":"S = input()\nDAY = [\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"]\nfor num in range(7):\n  if DAY[num] = S:\n    print(7-num)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s145326999":{
    "code_string":"youbi = ['SUN','MON','TUE','WED','THU','FRI','SAT']\ny = input()\n\nfor i in range(1, 7):\n  if y = youbi[i]:\n    print(7-i)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s373220539":{
    "code_string":"n = int(input())\ns = input()\nx = len(s)\nfor i in range(x):\n  a = s[i]\n  b = ord(a)\n  c = ord(\"A\")\n  d = (b + n - c)%26\n  s[i] = chr(c + d)\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s227070059":{
    "code_string":"n = int(input())\ns = input()\nfor i in range(len(s)):\n  s[i] = chr(ord((s[i]-65+n) % 26 + 65))\nprint(s)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s504429322":{
    "code_string":"n = int(input())\n\ndef push(chara, dig):\n  if ord(chara) + dig > 90: return chr(64 + dig + ord(chara) -90)\n  else: return chr(dig + ord(chara))\n  \nstring = input()\n\nfor i in range(0, len(string)):\n  string[i] = push(string[i], n)\n  \nprint(string)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s654080780":{
    "code_string":"import string\nl = string.ascii_uppercase\n\nN = int(input())\nS = input()\n\nans = []\nplusNumber = N % 26\nfor c in S :\n    ans.append(l[l.index(c) + plusNumber])\nprint(\"\".join(ans))",
    "error_obj":"IndexError: string index out of range"
  },
  "s572407299":{
    "code_string":"A=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O',\n   'P','Q','R','S','T','U','V','W','X','Y','Z']\nN=int(input())\nX=input()\nfor i in range(0,len(X)-1):\n  n=(A.index(X[i])+N)%26\n  X[i]=A[n]\nprint(X)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s444062727":{
    "code_string":"n = int(input())\nA = list(input())\nA_change={}\nB = [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z]\nfor i in A:\n  for j in B:\n    if i==j:\n      A_change[i] = str(B[(B.index(j)+n)%26])\nprint(list(A_change.values()))",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s950271401":{
    "code_string":"A=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\nn=int(input())\ns=str(input())\nx=n%26\nfor i in range(len(A)):\n  for j in range(25):\n    if s[i]==A[j]:\n      if j+x<=25:\n        s[i]=A[j+x]\n        break\n      else:\n        s[i]=A[j+x-26]\n        break\n\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s571031764":{
    "code_string":"from collections import deque\nn=int(input())\ng=[[] for _ in range(n+1)]\ne=[]\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    g[a].append(b)\n    e.append(b)\n\nq=deque([0])\n\ncolor=[0 for _ in range(n)]\nwhile(len(q)>0):\n    ei=q.popleft()\n    c=1\n    for x in g[ei]:\n        if c == color[ei]:\n            c+=1\n\n        color[x]=c\n        c+=1\n        q.append(x)\n\nprint(max(color))\nfor i in e:\n    print(color[i])",
    "error_obj":"IndexError: list index out of range"
  },
  "s812802817":{
    "code_string":"from collections import deque\n\nn = int(input())\ngraph = []\n\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    graph[a].append([b, i])\n    graph[b].append([a, i])\n\nans = [0] * (n - 1)\n\nq = deque([[1, 0, 0]])a\n\nwhile q:\n    node, pcol, p_node = q.popleft()\n    cnt = 1\n    for n_node in graph[node]:\n        if n_node[0] == p_node:\n            continue\n        if cnt == pcol:\n            cnt += 1\n        ans[n_node[1]] = cnt\n        q.append([n_node[0], cnt, node])\n        cnt += 1\n\nprint(max(ans))\nprint(*ans, sep=\"\\n\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s066742133":{
    "code_string":"x,y=map(int, input())\ncoin=0\nif x==1 and y==1:\n  coin+=400000\nif x==1:\n  coin+=300000\nif y==1:\n  coin+=300000\nif x==2:\n  coin+=200000\nif y==2:\n  coin+=200000\nif x==3:\n  coin+=100000\nif y==3:\n  coin+=100000\nprint(coin)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s530156392":{
    "code_string":"import sys\nimport collections\nimport bisect\n\n\ndef main():\n    n = int(input())\n    AList = list(map(int, input().split()))\n    ASum = sum(a)\n    c = 0\n    for i in range(n):\n        c += AList[i]\n        if c >= ASum \/ 2:\n            k = i\n            break\n    ans = min(2 * c - ASum, ASum - 2 * c + 2 * AList[k])\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s221543204":{
    "code_string":"n=int(input())\nA=list(map(int,input().split()))\nm=float('INF')\nsa=[]\nfor i,a in enumerate(A):\n    sa.append(sa[i]+ai)\nfor i in range(n+1):\n    ans=min(ans,abs(sa[i]-(sa[-1]-sa[i])))\nprint(ans)\n    ",
    "error_obj":"IndexError: list index out of range"
  },
  "s085201735":{
    "code_string":"## B - Iron Bar Cutting\nN = int(input())\nA = list(map(int, input().split()))\nval = sum(A)\/\/2\ntmp = 0\nfor n in range(N):\n    tmp += A[n]\n    if tmp >= val:\n        print( min( abs(sum(A[n+1:] - tmp ), abs(sum(A[n:] - tmp - A[n] ) )\n        break",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s427055858":{
    "code_string":"h, w, k = list(map(int, f.readline().split()))\n\ngrid = [input() for _ in range(h)]\nans = [[0]*w for _ in range(h)]\n\ncnt = 0\n\nfor j in range(h):\n    for i in range(w):\n        if grid[j][i] == \"#\":\n            cnt += 1\n            l = i\n            r = i\n            u = j\n            d = j\n\n            moving = True\n            while moving and l > 0:\n                moving = False\n                if ans[j][l-1] == 0 and grid[j][l-1] == \".\":\n                    moving = True\n                    l -= 1\n\n            moving = True\n            while moving and r < w-1:\n                moving = False\n                if ans[j][r+1] == 0 and grid[j][r+1] == \".\":\n                    moving = True\n                    r += 1\n\n            moving = True\n            while moving and u > 0:\n                moving = False\n                canMove = True\n\n                for x in range(l, r+1):\n                    if not (ans[u-1][x] == 0 and grid[u-1][x] == \".\"):\n                        canMove = False\n                        break\n\n                if canMove:\n                    moving = True\n                    u -= 1\n\n            moving = True\n            while moving and d < h-1:\n                moving = False\n                canMove = True\n\n                for x in range(l, r+1):\n                    if not (ans[d+1][x] == 0 and grid[d+1][x] == \".\"):\n                        canMove = False\n                        break\n\n                if canMove:\n                    moving = True\n                    d += 1\n\n            for y in range(u, d+1):\n                for x in range(l, r+1):\n                    ans[y][x] = cnt\n\nfor row in ans:\n    print(\" \".join(map(str, row)))",
    "error_obj":"NameError: name 'f' is not defined"
  },
  "s064972326":{
    "code_string":"h,w,k = map(int, input().split())\ns = [list(input()) for _ in range(h)]\n\nans = []\nn = 1\ncnt = 0\nfor i in range(h):\n    if \"#\" in s[i]:\n        ans = []\n        for s[i][j] == \"#\":\n            for _ in range(j+1-len(ans)):\n                ans.append(str(n))\n            n += 1\n        if len(ans) < w:\n            x = ans[-1]\n            for _ in range(w-len(ans)):\n                ans.append(x)\n    if ans:\n        for _ in range(i+1-cnt):\n            print(\" \".join(ans))\n            cnt += 1",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s913014055":{
    "code_string":"import math\n\na, b, c= [int(x) for x in input().split()] \n\n# Atcoder beginner contest 145. A - Circle\n\nr = int(input())\n\na = (math.pi * (r)**2)\nans = a \/ math.pi\n\n# the answer must be integer, != float\nprint(int(ans))",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s302751159":{
    "code_string":"r = int((input))\nprint(r**2)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s761651539":{
    "code_string":"n=int(input())\nprint(r*r)",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s925177470":{
    "code_string":"r = int(input)\nx = r ** 2\nprint(x)\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s169589626":{
    "code_string":"import sys\n\ndef cirCle(r: int):\n ans = r ** 2\n print(ans)\n return()\n\n\nif __name__ == '__main__':\n  args = sys.argv\n  cirCle(int(args[1]))",
    "error_obj":"IndexError: list index out of range"
  },
  "s456514871":{
    "code_string":"import sys\nr = sys.argv[1]\nprint(int(r) ** 2)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s210333063":{
    "code_string":"import math\nr=int(input())\narea1=pi\narear=pi*pow(r,2)\nratio=int(arear\/area1)\nprint(ratio)",
    "error_obj":"NameError: name 'pi' is not defined"
  },
  "s513856433":{
    "code_string":"import sys\n\nsys.setrecursionlimit(500005)\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip() \n\nr = list(input())\nprint(r*r)",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'list'"
  },
  "s337252212":{
    "code_string":"r = int(input)\nprint(r**2)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s028963663":{
    "code_string":"n = int(input())\nprint(r**2)",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s363835679":{
    "code_string":"r=int(input())\nprint(powr,2)",
    "error_obj":"NameError: name 'powr' is not defined"
  },
  "s057670363":{
    "code_string":"hamkei = input()\nprint(int(hankei)**2)",
    "error_obj":"NameError: name 'hankei' is not defined"
  },
  "s486372653":{
    "code_string":"print(int(input()**2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s535985760":{
    "code_string":"print(r**2)",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s514765751":{
    "code_string":"r = input()\nprint(r*r)",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s128327941":{
    "code_string":"a=input()\nprint(a*a)",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s414586962":{
    "code_string":"int(r*r)",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s993372888":{
    "code_string":"r = int(input(\"long?\"))\n\nreturn r * r",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s939161509":{
    "code_string":"num = input()\n\nreturn num*num",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s088948011":{
    "code_string":"print(r*r)\n",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s956007916":{
    "code_string":"r = input()\nresult = int(r*r)\nprint(result)",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s416113626":{
    "code_string":"pritn(int(input())**2)",
    "error_obj":"NameError: name 'pritn' is not defined"
  },
  "s221720546":{
    "code_string":"\noutput = r**2\n\nprint(output)\n",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s119141741":{
    "code_string":"int(input())\nprint(r*r)",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s677044358":{
    "code_string":"print(int(input()**2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s587537818":{
    "code_string":"r = input()\nr1 = 1\n\nprint( r**2 )",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s460037052":{
    "code_string":"a = input()\nprint(a ^ 2)",
    "error_obj":"TypeError: unsupported operand type(s) for ^: 'str' and 'int'"
  },
  "s533726044":{
    "code_string":"import math\n\nr = int(input('\u6574\u6570r(1<=r<=100)\u3092\u5165\u529b >>')\narear = r * r * math.pi\narea1 = 1 * 1 * math.pi\n\nnanbai = arear \/ area1\nprint('\u534a\u5f84{}\u306e\u5186\u306e\u9762\u7a4d\u306f\u534a\u5f841\u306e\u5186\u306e\u9762\u7a4d\u306e{}\u500d\u3067\u3059',r,nanbai)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s920012292":{
    "code_string":"print(r*r)",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s124563270":{
    "code_string":"n = int(input())\na = input()\nif a[:n\/2+1]==a[n\/2+1:]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: slice indices must be integers or None or have an __index__ method"
  },
  "s638245538":{
    "code_string":"n = int(input())\ns = input()\nif s%2==1:\n  print('No')\nelse:\n  print('Yes' if s[:n\/\/2]==s[n\/\/2:] else 'No')",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s196669487":{
    "code_string":"N = int(input())\nS = input()\nif N % 2 > 0 or S != S[:int(N\/2)] + S[:int(N\/2)]:\n    exit(\"No\")\nexit(\"Yes\")",
    "error_obj":"Yes\n"
  },
  "s753456282":{
    "code_string":"lst = input()\n\nlst[0] = int(lst[0])\nn = lst[0]\ns = lst[1]\n\nif n % 2 == 1:\n    print('NO')\n\nt = ''\n\nfor i in range(0, n\/\/2):\n    t += s[i]\n\nif t + t == s:\n    print('YES')\nelse:\n    print('NO')\n",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s725145119":{
    "code_string":"n = int(input())\ns = input()\nfor i in range((n\/\/2)+1):\n    if s[i] == s[i+(n\/\/2)]:\n        c+= 1\nif c*2 == n:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    ",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s637292607":{
    "code_string":"N = int(input())\nS = input()\nif N%2 == 0:\n  T = S[0:N\/2]\n  if T+T == S:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: slice indices must be integers or None or have an __index__ method"
  },
  "s724439669":{
    "code_string":"n = int(input())\ns = input()\nif n % 2 == 1:\n  print(\"No\")\n\nif s[0:s\/2] == s[s\/2:]:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'str' and 'int'"
  },
  "s139312063":{
    "code_string":"N = int(input())\nA = str(input())\n\nif (N % 2 == 0):\n  if (A[:N\/2] == A[N\/2:]):\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")\n",
    "error_obj":"TypeError: slice indices must be integers or None or have an __index__ method"
  },
  "s251736770":{
    "code_string":"n = int(input())\ns = input()\nif n%2==1:\n  print(\"NO\") \nelif:\n  s1 = \"\"\n  s2 = \"\"\n  for i in range(0, n\/2):\n    s1+=s[i]\n    s2+=s[n\/2 + i]\n  if(s1 == s2):\n    print(\"YES\")\n  else:\n    print(\"NO\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s906513929":{
    "code_string":"n = str(input())\nif len(n) % 2 ==1:\n  print('No')\nelse:\n  a = n[0 : len(n)\/2]\n  b = n[len(n)\/2 : len(n)]\n  if a = b:\n    print('Yes')\n  else:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s477373167":{
    "code_string":"c=input()\na=input()\nb=0\nif c%2==1:\n  print(\"No\")\nelse:\n  for i in range(c\/2):\n    if a[i]!=a[i+int(c\/2)]:\n      b=b+1\n  if b==0:\n    print(\"Yes\")\n  else:\n    print(\"No\")",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s476098166":{
    "code_string":"n = int(input())\ns = input()\nc = n\/2\nstt = s[:c]\nend = s[c:]\n\nif (n%2 == 1):\n  print(\"No\")\n\nif (stt == end):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: slice indices must be integers or None or have an __index__ method"
  },
  "s597283385":{
    "code_string":"#a,b,c = map(int,input().split())\na = int(input())\nb = input()\nc = s[:a\/\/2]\nd = s[a\/\/2:a]\nprint(\"No\" if c == d else \"Yes\")\n\n",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s633461341":{
    "code_string":" = int(input())\ns = str(input())\nif n%2 == 1:\n    print('No')\nelse:\n    if s[:n\/\/2] == s[n\/\/2:]:\n        print('Yes')\n    else:\n        print('No')",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s105367858":{
    "code_string":"n=int(input())\ns=input()\nans='No'\nif n%2==0:\n  if s[:n\/\/2]=s[n\/\/2:]:\n    ans='Yes'\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s972480879":{
    "code_string":"n=int(input())\ns=input()\n\n\nif(n%2==1):\n  print('No')\n\nelse:  \n   \n    \n    if s[0:n\/\/2]==s[(n\/\/2)+1:n]:\n    print('Yes')\n    else:\n      print(\"No\")\n    \n\n        \n     ",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s987052617":{
    "code_string":"N=int(input())\nS=input()\nif N%2!=0:\n    print('No')\nfor i in range(N\/2):\n    if S[i]!=S[N\/2+i]:\n        print('No')\n        exit()\nprint('Yes')",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s364196250":{
    "code_string":"n = int(input())\ns = input()\nif n % 2 == 0 and s[:n\/\/2] == s[s\/\/2:] :\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'str' and 'int'"
  },
  "s303713958":{
    "code_string":"N = int(input())\nS = str(input())\n\nif N % 2 == 0:\n  NN = N\/2\n  for i in range(0, NN):\n    if S[i] != S[i+NN]:\n      print('No')\n  else:\n    print('Yes')\n    \nelse:\n  print('No')",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s074168428":{
    "code_string":"n = int(input())\ns = input()\nif n % 2 == 1:\n  print(\"No\")\nelif s[:n\/2] == s[n\/2:] :\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: slice indices must be integers or None or have an __index__ method"
  },
  "s741020121":{
    "code_string":"s = input()\nif s % 2 == 1:\n  print(\"No\")\n  exit(0)\nif s[:len(s) \/\/ 2 - 1] == s[len(s) \/\/ 2:]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s512700074":{
    "code_string":"N,S = [int(input()) for _ in range(2)]\nif N%2!=0:\n  print(\"No\")\nelse:\n  print(S[:(N\/2-1)])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'abcabc'"
  },
  "s485496871":{
    "code_string":"n = int(input())\ns = input()\n\nif n % 2 == 1:\n  print('No')\nelse:\n  s1 = s[: n\/\/2)]\n  s2 = s[n\/\/2: ]\n  \n  if s1 == s2:\n    print('Yes')\n  else:\n    print('No')\n",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s009853854":{
    "code_string":"N = int(input())\nS = input()\n\nif N % 2 == 1:\n  print(\"No\")\n  return\nfor i in range(N\/2):\n  if S[i] != S[N\/2 + i]:\n    print(\"No\")\n    return\nprint(\"Yes\")\n",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s670077032":{
    "code_string":"N = int(input())\nS = list(str(input()))\n\np = []\nfor i in range(N\/2):\n    if S[i] != S[N\/2+i]:\n        print('No')\nprint('Yes')",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s764168958":{
    "code_string":"def distance(a,b):\n    return ((a[0]-b[0])**2+(a[1]-b[1])**2)**0.5\nn = int(input())\na = [tuple(map(int,input().split())) for _ in range(n)]\nl = []\nfor m in list(itertools.permutations(a)):\n    d = 0\n    for i in range(n-1):\n        d += distance(m[i],m[i+1])\n    l.append(d)\nprint(sum(l)\/len(l))",
    "error_obj":"NameError: name 'itertools' is not defined"
  },
  "s869514496":{
    "code_string":"n = int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\n\nsum = 0\nfor i in range(n):\n    for j in range(n):\n        if i != j:\n            sum += sqrt((l[i][0] - l[j][0]) * (l[i][0] - l[j][0]) + (l[i][1] - l[j][1]) * (l[i][1] - l[j][1]))\nprint(sum \/ n)\n",
    "error_obj":"NameError: name 'sqrt' is not defined"
  },
  "s169588172":{
    "code_string":"def resolve():\n    N = int(input())\n    x, y, = [], []\n    for i in range(N):\n        x_tmp, y_tmp = list(map(int, input().split()))\n        x.append(x_tmp)\n        y.append(y_tmp)\n    ans = 0\n    ls = list(permutations(list(range(N)), N))\n    for l in ls:\n        for i in range(len(l)-1):\n            ans += dist(x[l[i]], y[l[i]], x[l[i+1]], y[l[i+1]])\n\n    print(ans \/ len(ls))\n    return\n\nresolve()",
    "error_obj":"NameError: name 'permutations' is not defined"
  },
  "s425738705":{
    "code_string":"import math\n\nn = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(n):\n  for j in range(i+1, n):\n    cnt += math.sqrt((a[i][0] - a[j][0]) ** 2 + (a[i][1] - a[j][1]) ** 2)\nprint(cnt * 2 \/ n)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s183040937":{
    "code_string":"import itertools\nimport math\nn = int(input())\nm = math.factorial(n)\nl = [list(map(int,input().split())) for i in range(n)]\nx,y = [list(i) for i in zip(*l)]\nz = list(range(n))\nz = list(itertools.permutations(l))\nans = 0\nfor i in range(m):\n    for j in range(n-1):\n        ans += math.sqrt((x[z[i][j]] - x[z[i][j+1]]) ** 2 + (y[z[i][j]] - y[z[i][j+1]]) ** 2)\nprint(ans \/ m)",
    "error_obj":"TypeError: list indices must be integers or slices, not list"
  },
  "s640121068":{
    "code_string":"# -*- coding: utf-8 -*-\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport math\nimport itertools\n\n\ndef get_input() -> tuple:\n    \"\"\"\n    \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\u3059\u308b.\n\n    Returns:\\n\n        tuple: \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\n    \"\"\"\n    N = int(input())\n    x, y = [], []\n    for n in range(N):\n        x_n, y_n = list(map(int, input().split()))\n        x.append(x_n)\n        y.append(y_n)\n\n    return N, x, y\n\n\ndef get_distance(x: list, y: list, i: int, j: int) -> float:\n    \"\"\"\n    \u753ai\u3068\u753aj\u306e\u9593\u306e\u8ddd\u96e2\u3092\u53d6\u5f97\u3059\u308b.\n\n    Args:\\n\n        x (list): \u753a\u306ex\u5ea7\u6a19\n        y (list): \u753a\u306ey\u5ea7\u6a19\n        i (int): \u753a\n        j (int): \u753a\n\n    Returns:\\n\n        float: \u753ai\u3068\u753aj\u306e\u9593\u306e\u8ddd\u96e2\n    \"\"\"\n    return math.sqrt((x[i] - x[j])**2 + (y[i] - y[j])**2)\n\n\ndef get_path_length(N: int, distance: dict, path: list) -> float:\n    \"\"\"\n    \u7d4c\u8def\u306e\u9577\u3055\u3092\u6c42\u3081\u308b.\n\n    Args:\\n\n        N (int): \u753a\u306e\u6570\n        distance (dict): \u753a\u9593\u306e\u8ddd\u96e2\n        path (list): \u7d4c\u8def\n\n    Returns:\\n\n        float: \u7d4c\u8def\u306e\u9577\u3055\n    \"\"\"\n    path_length = 0\n    for n in range(N - 1):\n        path_length += distance[(path[n], path[n + 1])]\n\n    return path_length\n\n\ndef main(N: int, x: list, y: list) -> None:\n    \"\"\"\n    \u30e1\u30a4\u30f3\u51e6\u7406.\n\n    Args:\\n\n        N (int): \u753a\u306e\u6570\n        x (list): \u753a\u306ex\u5ea7\u6a19\n        y (list): \u753a\u306ey\u5ea7\u6a19\n    \"\"\"\n    # \u4e8b\u524d\u306b\u753a\u9593\u306e\u8ddd\u96e2\u60c5\u5831\u3092\u4f5c\u3063\u3066\u304a\u304f\n    distance = {}\n    for i, j in itertools.product(range(N), repeat=2):\n        distance[(i, j)] = get_distance(i, j)\n\n    # \u6c42\u89e3\u51e6\u7406\n    ans = 0\n    for path in itertools.permutations(range(N)):\n        ans += get_path_length(distance, path)\n    ans \/= math.factorial(N)\n\n    # \u7d50\u679c\u51fa\u529b\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\n    N, x, y = get_input()\n\n    # \u30e1\u30a4\u30f3\u51e6\u7406\n    main(N, x, y)\n",
    "error_obj":"TypeError: get_distance() missing 2 required positional arguments: 'i' and 'j'"
  },
  "s761559113":{
    "code_string":"import math\nimport itertools\n\ndef l2(z1, z2):\n  return math.sqrt(pow(z1[0] - z2[0], 2) + pow(z1[1] - z2[1], 2))\n\nn = int(input())\nl = [list(map(int, input().split(' '))) for _ in range(n)]\n\ndist = 0\nz_fr = []\nz_to = []\nfor seq in itertools.permutations(l, n):\n  for z in seq:\n    z_fr = z_to\n    z_to = z\n    if len(z_fr):\n      continue\n    dist += l2(z_fr, z_to)\n\n#print(dist\/math.factorial(n))\nprint('2.2761423749')",
    "error_obj":"IndexError: list index out of range"
  },
  "s256788082":{
    "code_string":"import numpy as np\nN = int(input())\nxy = [list(map(int, input().split(\" \"))) for i in range(N)]\n\nL = 0\nfor i in range(len(xy)-1):\n  a = xy[i][0]-xy[i+1][0]\n  b = xy[i][1]-xy[i+1][2]\n  l = np.sqrt( a**2 +b**2)\n  L += l\nprint(L)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s173098803":{
    "code_string":"N = int(input())\nA = [tuple(map(int, input().split())) for _ in range(N)]\nans = []\nimport numpy as np\nfor zyun in itertools.permutations(range(N)):\n    cnt = 0\n    for k in range(len(zyun)-1):\n        cnt += np.sqrt((A[zyun[k+1]][0]-A[zyun[k]][0])**2+(A[zyun[k+1]][1]-A[zyun[k]][1])**2 )\n    ans.append(cnt)\nprint(sum(ans) \/ len(ans))",
    "error_obj":"NameError: name 'itertools' is not defined"
  },
  "s354247638":{
    "code_string":"    import itertools\n    import math\n    def distance(i, j):\n        return math.sqrt((i[0]-j[0])**2+(i[1]-j[1])**2)\n\n    n = int(input())\n    l = list(range(n))\n    X_Y = []\n    for i in range(n):\n        X_Y.append(list(map(int, input().split())))\n    p_list = list(itertools.permutations(l, n))\n    total = 0\n    for p in p_list:\n        p_t = 0\n        for index in range(n-1):\n            p_t += distance(X_Y[p[index]], X_Y[p[index+1]])\n        total += p_t\n    print(total\/len(p_list))\nresolve()",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s204891599":{
    "code_string":"n = int(input())\na = [list(map(int,input().split())) for i in range(n)]\nsum = 0\nfor i in range(n):\n  for j in range(j+1,n):\n    sum += ((a[i][0]-a[j][0])**2+(a[i][1]-a[j][1])**2)**0.5\nprint(2*sum\/n)",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s228783899":{
    "code_string":"def dist(x0, y0, x1, y1):\n    return math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2)\n\ndef resolve():\n    N = int(input())\n    x, y = [], []\n    for _ in range(N):\n        x_tmp, y_tmp = list(map(int, input().split()))\n        x.append(x_tmp)\n        y.append(y_tmp)\n\n    ls = list(permutations(list(range(N)), N))\n    ans = 0\n    for l in ls:\n        idx = 0\n        while idx + 1 < len(l):\n            ans += dist(x[l[idx]], y[l[idx]], x[l[idx+1]], y[l[idx+1]])\n            idx += 1\n\n    print(ans \/ len(ls))\n    return\n\nresolve()",
    "error_obj":"NameError: name 'permutations' is not defined"
  },
  "s305682908":{
    "code_string":"n = int(input())\nxy = [list(map(int, input().split())) for _ in range(n)]\n\nans = 0\nfor i in range(n):\n  for j in range(n):\n    if i == j: continue\n    ans += ((xy[i][0] - xy[j][0])**2 + (xy[i][1] - xy[j][1])**2)**0.5\n    t += 1\nprint(ans\/n)",
    "error_obj":"NameError: name 't' is not defined"
  },
  "s945106814":{
    "code_string":"def nCr(n, r, mod):\n    x, y = 1, 1\n    for r_ in range(1, r+1):\n        x = x*(n+1-r_)%mod\n        y = y*r_%mod\n    return x*pow(y, mod-2, mod)%mod\n\nx, y = map(int, input().split())\nif (x+y)%3 or 2*x<y or 2*y<x:\n    print(0)\nelse:\n    print(nCr((x+y)\/\/3,(2*x-y)\/\/3, mod))",
    "error_obj":"NameError: name 'mod' is not defined"
  },
  "s858567694":{
    "code_string":"X, Y = map(int, input().split())\n\nif (x+y)%3 != 0 or x*2 < y or y*2 < x:\n    print(0)\n    exit()\n\nn = (2*X - Y) \/\/ 3\nm = (2*Y - X) \/\/ 3\n\nP = 10 ** 9 + 7\nN = 10 ** 6\nfact = [1, 1]\nfactinv = [1, 1]\ninv = [0, 1]\nfor i in range(2, N+1):\n    fact.append((fact[-1]*i)%P)\n    inv.append((-inv[P%i] * (P \/\/ i)) %P)\n    factinv.append((factinv[-1] * inv[-1])%P)\nprint(fact[n+m]*factinv[n]*factinv[m]%P)\n",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s852724604":{
    "code_string":"x,y = map(int,input().split())\ns=2*x-y\nt=2*y-x\nif s%3!=0 or s<0 or t%3!=0 or t<0:\n  print(0)\nelse:\n  import sys\n  mod = 1000000007\n  p = 1\n  q = 1\n  for i in range(s\/\/3):\n    p = (p*(n-i)) % mod\n    q = (q*(i+1)) % mod\n  print((p*pow(q, -1, mod)) % mod)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s847492595":{
    "code_string":"x, y = list(map(int, input().split(' ')))\n# K\u99ac(\u53f3\u4e0a\u306e\u307f) -> \u30d1\u30b9\u30ab\u30eb\u306e\u4e09\u89d2\u5f62\u3063\u307d\u3044\nmmm = 1000000000 + 7\nsss = x + y\nif sss % 3 != 0:\n    print(0)\n    exit()\nhoge = sss \/\/ 3\n# \u4e0a\u306bp, \u53f3\u306bq\n# 2p + q = y\n# 2q + p = x\n# p + q = hoge\n# p = y - hoge\n# q = x - hoge\np =  y - hoge\nq = x - hoge\n#print(hoge, p, q)\nif p < 0 or q < 0:  # 3 0 \u306e\u6642\u3067 Wrong Answer\n    return 0\n\n# \u4e8c\u9805\u4fc2\u6570 mod [\u691c\u7d22]\nfac = []\ninv = []\ninv_fac = []\ndef init(n):\n    fac.append(1)\n    fac.append(1)\n    inv.append(0)\n    inv.append(1)\n    inv_fac.append(1)\n    inv_fac.append(1)\n    for i in range(2, n):\n        fac.append(fac[-1] * i % mmm)\n        inv.append(mmm - inv[mmm%i] * (mmm \/\/ i) % mmm)\n        inv_fac.append(inv_fac[-1] * inv[-1] % mmm)\n\ndef choice(a, b):\n    if a < b:\n        return 0\n    return fac[a] * (inv_fac[b] * inv_fac[a-b] % mmm) % mmm\n\ninit(hoge * 2 + 1)\nprint(choice(hoge, p) % mmm)\n\n# nCk - TLE \u3067\u3057\u305f\n# def choice(a, b):\n#     if a == b or b == 0:\n#         return 0\n#     if a < b:\n#         return choice(b, a)\n#     bunshi = a\n#     t = min(b, (a-b))\n#     bunbo = t\n#     for i in range(1, t):\n#         bunshi *= (a-i) % mmm\n#         bunbo *= (t-i) % mmm\n#     return bunshi \/\/ bunbo\n",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s640918296":{
    "code_string":"x,y=map(int,input().split())\nif (x+y)%3!=0:\n    print(0)\n    exit()\nif x<y:\n    y=x\n    x,y=y,x\nif 2y<x:\n    print(0)\n    exit()\nmod=10**9+7\na=(2y-x)\/\/3\nb=(2x-y)\/\/3\nmx=10**6*2\nk=[1]*(mx+1)\ndef inv(n):\n    return pow(n,mod-2,mod)\nfor i in range(mx):\n    k[i+1]=k[i]*(i+1)%mod\nans=(k[w+h]*inv(k[w])*inv(k[h]))%mod\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s026394465":{
    "code_string":"def inv(a,p):\n    if a==1:\n        return 1\n    elif a==0:\n        return 0\n    return p-(inv(p%a,p)*(p\/\/a))%p\nx,y=map(int,input().split())\nif (x+y)%3!=0:\n    print(\"0\")\n    exit()\nif y\/x>2 or y\/x<0.5:\n    print(\"0\")\n    exit()\nn=(x+y)\/\/3\nr=(2*x-y)\/\/3\np=10**9+7\ndef fact(n,p):\n    a=[[] for _ in range(n+1)]\n    a[0]=1\n    for i in range(n):\n        a[i+1]=(a[i]*(i+1))%p\n    return a\nc=f[-1]\nd=f[r]\ne=f[n-r]\ndd=inv(d,p)\nee=inv(e,p)\nans=(c*dd*ee)%p\nprint(ans)",
    "error_obj":"NameError: name 'f' is not defined"
  },
  "s708636678":{
    "code_string":"#n\u56de,m\u56de\u3000\u3000X =n + 2*m  Y = 2*n + m\nX,Y = map(int,input().split())\nimport numpy as np\na = [[1, 2], [2, 1]]\n#\u6b21\u306b\u9006\u884c\u5217\u3092\u6c42\u3081\u307e\u3059\u3002\nmod = pow(10,9)+7\n\nb = np.linalg.inv(a)\n\n\nZ = np.array([[X],[Y]])\n\nn,m=np.dot(b,Z)\np,q = *n,*m\n\ndef comb(n,k,p):\n    if k==0:\n        return 1\n    A = reduce(lambda x,y:x*y%p ,[n-k+1+i for i in range(k)])\n    B = reduce(lambda x,y:x*y%p ,[i+1 for i in range(k)])\n    return A*pow(B,p-2,p)%p\n\nif p<0 or q<0:\n    print(0)\nelif not p == int(p) or not q==int(q):\n    print(0)\nelif p==0 and q==0:\n    print(0)\nelif p==0:\n    print(1)\nelif q==0:\n    print(1)\nelse:\n    n = int(p)\n    m = int(q)\n    ans = comb(n,m,mod)\n\n    print(ans%mod)\n",
    "error_obj":"NameError: name 'reduce' is not defined"
  },
  "s091760908":{
    "code_string":"x,y=map(int,input().split())\na=-1\np=10**9+7\nfor i in range(x\/\/2+1):\n  if i+2*(x-2*i)==y:\n    a=i\n    break\nif a==-1:\n  print(0)\n  exit()\nelif a==0:\n  print(1)\nelse:\n  gyaku=[0,1]\n  for i in range(2,a+1):\n    gyaku.append(((p\/\/i)*-gyaku[p%i])%p)\n  com=[1]\n  for i in range(1,a+1):\n    com.append(com[-1]*gyaku[i]*(x-a+1-i)%p)\n\u3000\u3000print(com[a])\n",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s382160410":{
    "code_string":"import math\nimport numpy as np\n\ndef cmb(n, r, mod):\n  r = min(r, n-r)\n  return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 10**9+7 \nN = 10**6\ng1 = [1, 1] \ng2 = [1, 1] \ninverse = [0, 1] \n\nfor i in range( 2, N + 1 ):\n  g1.append( ( g1[-1] * i ) % mod )\n  inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n  g2.append( (g2[-1] * inverse[-1]) % mod )\n\nX, Y = map(int,input().split()) \n\na=(-X+2*Y)\/3\nb=(2*X-Y)\/3\nif a.is_integer()==False or b.is_integer()==False or a<0 or b<0:\n    print(0)\nelse:\n    print(cmb(int(N[0]+N[1]),int(N[0]),mod))\n\n#\u4ed6\u8005\u306e\u89e3\u7b54\u3092\u53c2\u8003\u306b\u3057\u305f",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s712267384":{
    "code_string":"import numpy as np\nimport sys\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef main():\n    n, t = map(int, input().split())\n    dp = np.zeros(t,dtype=int)\n    food = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        food.append([a, b])\n    food.sort(key=lambda x: x[0]*-1)\n    for j in range(n):\n        a, b = food[j][0], food[j][1]\n        dptmp=np.zeros(t,dtype=int)\n        dptmp[a:] = np.maximum(dp[a:],dp[:-a]+b)\n        dptmp[:a] = np.maximum(np.full(a,b,dtype=int), dp[:a])\n        dp=dptmp\n    print(dp[-1])\n\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"ValueError: operands could not be broadcast together with shapes (100,) (60,) "
  },
  "s420973154":{
    "code_string":"import numpy as np\nimport numba\nfrom numba import njit, b1, i4, i8, f8\n\n#@njit((i8,i8,i8[:]), cache=True)\ndef main(N,T,A):\n  dp = np.zeros(T+1, np.int64)\n  for i in range(N):\n    for t in range(T-1,-1,-1):\n      u = min(T,t+A[i,0])\n      dp[u] = max(dp[u],dp[t]+A[i,1])\n  ans = dp[-1]\n  return ans\n\nN, T = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(N)]\nA = np.array(sorted(A))\nprint(main(N,T,A))",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s602874084":{
    "code_string":"N = input()\nprint((N-1)\/\/2)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s249471011":{
    "code_string":"N = int(input())\nans = 0\nfor i in range(1,N\/2+1):\n  if i != N-i:\n    ans += 1\nprint(ans)",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s043116024":{
    "code_string":"print((int(input()-1)\/\/2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s058837715":{
    "code_string":"import sys\nimport itertools\n# import numpy as np\nimport time\nimport math\nimport heapq\nfrom collections import defaultdict\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 7)\n \nINF = 10 ** 18\nMOD = 10 ** 9 + 7\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n# map(int, input().split())\n\ndef my_pow(base, n, mod):\n    if n == 0:\n        return 1\n    x = base\n    y = 1\n    while n > 1:\n        if n % 2 == 0:\n            x *= x\n            n \/\/= 2\n        else:\n            y *= x\n            n -= 1\n        x %= mod\n        y %= mod\n    return x * y % mod\n\nN = int(input())\nD = list(map(int, input().split()))\nMOD = 998244353\ncnt = [0] * (10 ** 5 + 1)\nfor d in D:\n    cnt[d] += 1\n\nif cnt[0] != 1:\n    print(0)\n    exit()\nans = cnt[0]\nfor i in range(1, dmax + 1):\n    if cnt[i] == 0:\n        print(0)\n        exit()\n    now = my_pow(cnt[i - 1], cnt[i], MOD)\n    ans *= now\n    ans %= MOD\nprint(ans)\n",
    "error_obj":"NameError: name 'dmax' is not defined"
  },
  "s531989417":{
    "code_string":"N = int(input())\nD = list(map(int, input().split()))\nM = 998244353\nfrom collections import Counter\n\nif D[0] != 0:\n    print(0)\n    exit(0)\n\ncd = Counter(D)\nif cd[0] != 1:\n    print(0)\n    exit(0)\n\ntmp = sorted(cd.items(), key=lambda x: x[0])\n\nans = 1\n\nimport math\nfor kx in range(1, max(D)+1):\n    ans *= math.pow(cd[kx-1], cd[kx],M)\n    ans %= M\n\nprint(ans)",
    "error_obj":"TypeError: pow expected 2 arguments, got 3"
  },
  "s659738230":{
    "code_string":"n = int(input())\nd = {}\nmod = 998244353\nmax_v = 0\nlis = list(map(int, input().split()))\n\n# \u5148\u982d\u306f\u304b\u306a\u3089\u305a0\nif lis[0] != 0:\n    print(0)\n    exit()\n\nfor v in list(map(int, input().split())):\n    if v not in d:\n        d[v] = 1\n    else:\n        d[v] += 1\n    max_v = max(max_v, v)\n\n# 0\u306f\u3072\u3068\u3064\u3060\u3051\nif 0 not in d or d[0] > 1:\n    print(0)\n    exit()\n\nans = 1\n# \u6728\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306a\u3089\u30701~max_v\u307e\u3067\u306e\u6570\u5b57\u304c\u305d\u308c\u305e\u308c1\u3064\u4ee5\u4e0a\u5b58\u5728\u3059\u308b\nfor i in range(1, max_v + 1):\n    if i not in d or i - 1 not in d:\n        ans *= 0\n    else:\n        ans *= pow(d[i - 1], d[i], mod)\n        ans %= mod\nprint(ans)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s114474523":{
    "code_string":"N = int(input())\nD = list(map(int, input().split()))\nM = 998244353\nfrom collections import Counter\n\nif D[0] != 0:\n    print(0)\n    exit(0)\n\ncd = Counter(D)\nif cd[0] != 1:\n    print(0)\n    exit(0)\n\ntmp = sorted(cd.items(), key=lambda x: x[0])\n\nans = 1\n# for kx in range(1, max(D)+1):\nfor kx in range(2, len(tmp)+1):\n    __, p = tmp[kx-1]\n    _, v = tmp[kx]\n    # p = cd[kx-1]\n    # v = cd[kx]\n    # print(\"{}^{}\".format(p, v))\n    while v > 0:\n        ans *= p\n        ans %= M\n        v -= 1\n# print(cd)\n\n# for kx in range(1, max(D)+1):\n#     ans *= pow(cd[kx-1], cd[kx],M)\n#     ans %= M\n\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s092043637":{
    "code_string":"# \uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n# \u30b1\u30fc\u30b912\u306813\u3001\u5b8c\u5168\u306b\u30d0\u30b0\u3068\u3057\u304b\u601d\u3048\u306a\u3044\u306e\u3067\u3059\u304c?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n\n# \u3082\u3057\u304b\u3057\u3066\uff1a\u9802\u70b91\u306f\u5fc5\u305a0\uff1f\n\nn = int(input())\na = list(map(int, input().split()))\nif a[0] != 0:\n    print(0)\n    exit()\na = sorted(a)\nd = {}\nfor av in a:\n    if av not in d:\n        d[av] = 1\n    else:\n        d[av] += 1\nif d[0] != 1\n    print(0)\n    exit()\nMOD = 998244353\n\nans = 1\nfor i in range(1, a[-1] + 1):\n    if i not in d:\n        ans = 0\n        break\n    ans *= pow(d[i - 1], d[i], MOD)\nprint(ans % MOD)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s541174607":{
    "code_string":"\ndef resolve():\n    MOD = 998244353\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    if D[0] != 0:\n        print(0)\n        return\n\n    CNT = Counter(D)\n    if CNT[0] > 1:  # \u8ddd\u96e20\u306f1\u500b\n        print(0)\n        return\n\n    ans = 1\n    for i in range(1, max(D) + 1):\n        ans *= pow(CNT[i - 1], CNT[i], MOD)\n        ans %= MOD\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()\n",
    "error_obj":"NameError: name 'Counter' is not defined"
  },
  "s541961840":{
    "code_string":"#!\/usr\/bin\/env python3\n\nfrom collections import Counter\n\ndef II(): return int(input())\ndef MII(): return map(int, input().split())\ndef LII(): return list(map(int, input().split()))\n\ndef main():\n    N = II()\n    D = LII()\n\n   if D[0] != 0 or D.count(0) > 1:\n       print(0)\n       return \n    \n    mx = max(D)\n    cnt = 1\n    for i in range(1, mx+1):\n        pre = D.count(i)\n        post = D.count(i+1)\n        cnt *= pre ** post\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s876260318":{
    "code_string":"s = input()\nl, count = [], 0\nfor i in s:\n    if i=='>': count+=1\n    else:\n        if count: l.append(count)\n        count = 0\nif count: l.append(count); count = 0\nj = 0\nans = []\nif s[0]=='<':\n    ans.append(0)\n    for i in range(len(s)):\n    if s[i]=='<': ans.append(ans[-1]+1)\n    else:\n        if l[j]==0: j+=1\n        if ans[-1]>=l[j]:\n            l[j]-=1\n            ans.append(l[j])\n                \n        else:\n            ans[-1]=l[j]\n            l[j]-=1\n            ans.append(l[j])\n    print(sum(ans))\n\nelse:\n    ans.append(l[j])\n    l[j]-=1\n    for i in range(len(s)):\n    if s[i]=='<': ans.append(ans[-1]+1)\n    else:\n        if l[j]==0: j+=1\n        if j<len(l):\n            \n            if ans[-1]>=l[j]:\n                ans.append(l[j])\n                l[j]-=1\n                \n                    \n            else:\n                ans[-1]=l[j]\n                ans.append(l[j])\n                l[j]-=1\n                \n        else: ans.append(0)\n    print(sum(ans))\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s607165664":{
    "code_string":"s=input()\na=[0]*len(s)\nfor i in range(len(s)+1):\n    if s[i]==\"<\":\n        a[i+1]=a[i]+1\nfor i in range(len(s)-1,-1,-1):\n    if s[i]==\">\":\n        a[i]=max(a[i],a[i+1]+1)\nprint(sum(a))",
    "error_obj":"IndexError: string index out of range"
  },
  "s404149360":{
    "code_string":"s = input()\nn = len(s) #length s\naa = ['.'] * (n + 1)\n\nif s[0] == '<':\n  aa[0] = 0\n\nfor i in range(n-1):\n  if s[i] ==  '>' and s[i+1] == '<':\n    aa[i+1] = 0 \n  elif s[i] == '<' and s[i+1] == '>':\n    aa[i+1] = n\n    \nid0 = [i for i,x in enumerate(aa) if x == 0]\nidm = [i for i, x in enumerate(aa) if x == n]\n\n\nfor i in range(len(id0)-1):\n  aa[idm[i]] = max(idm[i]-id0[i], id0[i+1]-idm[i])\n\nfor i in range(n):\n  if s[i] == '<' and aa[i+1] == '.':\n    aa[i+1] = aa[i] + 1\nfor i in range(n-1, 0,-1):\n  if aa[i] == '.' and s[i] == '>':\n    aa[i] = aa[i+1] +1\n\nprint(sum(aa))",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s821777546":{
    "code_string":"i=0\nwhile i<len(s):\n  k=0\n  while s[i]=='<' if i<len(s) else False:\n    k+=1\n    i+=1\n  if k>0:\n    l.append(k)\n  k=0\n  while s[i]=='>' if i<len(s) else False:\n    k+=1\n    i+=1\nsm=0\nfor i in l:\n  sm+=(i*(i+1))\/\/2\n  \nprint(sm)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s070069939":{
    "code_string":"s=int(input())\n\nsl=len(s)+1\nl=[0]*sl\n\nfor i in range(sl-1):\n  if s[i]==\"<\":\n    l[i+1]=l[i]+1\n    \nfor i in range(sl-2,-1,-1):\n  if s[i]==\">\":\n    l[i]=max(l[i+1], l[i])\n    \nprint(sum(l))\n  \n  ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '<>>'"
  },
  "s960541647":{
    "code_string":"S = input()\nans = 0\nS = S.repace(\"><\"\/, \">,<\").split(\",\")\nfor s in S:\n  a = s.count(\">\")\n  b = s.count(\"<\")\n  ans += a * (a - 1) \/\/ 2 + b * (b - 1) \/\/ 2 + max(a, b)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s515889883":{
    "code_string":"INF = 10 ** 10\n\nN = int(input())\n\nL = [tuple(map(int,input().split())) for _ in range(N)]\n\nL.sort(key=lambda x:(-x[0], x[1]))\n\nMAX_L = 0\nMIN_R = INF\nMAX = 0\na = 0\nb = 0\n\nfor i in range(N):\n    if MAX_L < L[i][0]:\n        MAX_L = L[i][0]\n        a = i\n    if MIN_R > L[i][1]:\n        MIN_R = L[i][1]\n        b = i\n    MAX = max(MAX, L[i][1] - L[i][0] + 1)\n\nans = MAX + max(0, MIN_R - MAX_L + 1)\n\np = 0\n\nfor i in range(N-1):\n    p = max(p, L[i+1][0])\n    ans = max(ans, max(0, L[i][1] - L[0][0] + 1) + max(0, L[-1][1] - L[i+1][0] + 1))\n\n\n    print(ans)INF = 10 ** 10\n\nN = int(input())\n\nL = [tuple(map(int,input().split())) for _ in range(N)]\n\nL.sort(key=lambda x:(-x[0], x[1]))\n\nMAX_L = 0\nMIN_R = INF\nMAX = 0\na = 0\nb = 0\n\nfor i in range(N):\n    if MAX_L < L[i][0]:\n        MAX_L = L[i][0]\n        a = i\n    if MIN_R > L[i][1]:\n        MIN_R = L[i][1]\n        b = i\n    MAX = max(MAX, L[i][1] - L[i][0] + 1)\n\nans = MAX + max(0, MIN_R - MAX_L + 1)\n\np = 0\n\nfor i in range(N-1):\n    p = max(p, L[i+1][0])\n    ans = max(ans, max(0, L[i][1] - L[0][0] + 1) + max(0, L[-1][1] - L[i+1][0] + 1))\n\n\n    print(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s534488898":{
    "code_string":"a1=input()\na2=[i for i in a1.split()]\nx,y=float(a2[0]),float(a2[1])\nv,v1=x.is_integer(),y.is_integer()\nif 1<=(x and y)<=20 and v1==v2==True:\n    if 1<=(x and y)<=9:\n        print(int(x*y))\n    else:\n        print('-1')",
    "error_obj":"NameError: name 'v2' is not defined"
  },
  "s924202300":{
    "code_string":"A,B=int(input())\nif A*B<=81:\n    print(\"A*B\")\nelse:\n    print(\"-1\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 5'"
  },
  "s442808405":{
    "code_string":"A,B = map(int,input().split())\nif A<=9 && B<=9:\n  print(A*B)\nelse:\n  print(-1)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s476220441":{
    "code_string":"A,B=map(int,input().split())\n\nif 1<=A,B<=9:\n  print(A*B)\nelse:\n  print(-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s154866861":{
    "code_string":"#ABC144A\na,b = map(int,input().split())\nprint(a*b if 1<=a<=9 ans 1<=b<=9 else -1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s403009159":{
    "code_string":"A, B = int(input().split())\n\nprint(A*B)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s127542273":{
    "code_string":"a, b = map(int(), input().split())\n\nif a < 10 and b < 10:\n    print(a * b)\nelse:\n    print(-1)",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s540493624":{
    "code_string":"a.b = list(map(int, input().split( )))\nif 1 <= a <= 9 and 1 <= b <= 9:\n  print(a*b)\nelse:\n  print(-1)\n  ",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s526233723":{
    "code_string":"a,b=map(int,input())\nif 1<=a<=9 and 1<=b<=9:\n    print(a*b)\nelse:\n    print(-1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s436464315":{
    "code_string":"a, b = map(int, input().split())\nif 1 <= a and a <= 9 and 1 <= b nd b <= 9:\n  print(a*b)\nelse:\n  print(-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s047028724":{
    "code_string":"A, B = map(int.input().split())\nif (0<=A<=9) and (0<=B<=9):\n  print(A*B)\nelse:\n  print(-1)",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s144155158":{
    "code_string":"n = int(input())\na = 0\nfor i in range(1,10):\n    if n % i != 0:\n        continue\n    else:\n        if n \/ i <= 9:\n            a += 1\n            break\n        else:\n            continue\nif a == 1:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 5'"
  },
  "s041856638":{
    "code_string":"A,B=map(int,input(),split())\nif A<=9 and B<=9:\n    print(A*B)\nelse:\n    print(-1)\n",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s673276908":{
    "code_string":"a,b = map(int,input())\nprint(a*b if a<=9 and b<=9 else -1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s739762007":{
    "code_string":"a = int(input())\nif a % 1 == 0 or a % 2 == 0 or a % 3 == 0 or a % 4 == 0 or a % 5 == 0 or a % 6 == 0 or a % 7 == 0 or a % 8 == 0 or a % 9 == 0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 5'"
  },
  "s672964835":{
    "code_string":"a, b = int(input().split())\n\nif a < 10 and b < 10:\n    print(a * b)\nelse:\n    print(-1)\n\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s495067962":{
    "code_string":"import sys\nN = int(input())\narray = [ I for I in range(1,10) ]\n\nif not ( 1 <= N <= 100 ): sys.exit()\n\nfor J in range(1,10):\n    for K in range(1,10):\n        if n == J*K:\n            print('Yes')\n            sys.exit()\nprint('No')",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s471950092":{
    "code_string":"n=int(input())\nflag=0\nfor i in range(9):\n    for j in range(9):\n        if i*j=n:\n            flag=1\n            break\nif flag: print(\"Yes\")\nelse: print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s521629370":{
    "code_string":"n = int(input())\na = set()\nfor i in range(1,10):\n  for j in range(1,10):\n    a.append(i*j)\nif n in a:\n  print('Yes')\nelse:\n  print('No')\n    ",
    "error_obj":"AttributeError: 'set' object has no attribute 'append'"
  },
  "s645202853":{
    "code_string":"N=int(input())\nresult=0\nfor i in range(1,10):\n  for j in range(1,10):\n    if i*j==N:\n      result=1\nif result=1:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s872328527":{
    "code_string":"    import sys\n    N = int(input())\n     \n    for i in range(1,10):\n        for j in range(1,10):\n            if(N == i*j):\n                print(\"Yes\")\n                sys.exit()\n    print(\"No\")",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s512039163":{
    "code_string":"N = int(input())\nfor i in range(1, 9 + 1):\n    if N % i == 0 and N \/ i <= 9:\u3000\n        result = \"Yes\"\n        break\n    else:\n        result = \"No\"\nprint(result) ",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s932223898":{
    "code_string":"Suji=[]\nfor i in range(1,9):\n  Suji.append(i)\nN = int(input())\nSuji_check=False\nfor s in Suji:\n  A = N%s\n  try A != 0:\n      for t in Suji:\n      if A == t:\n        Suji_check = True\n  except:\n    pass\nif Suji_check:\n  print('Yes')\nelse:\n  print('No')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s759090630":{
    "code_string":"N = int(input())\nkuku = []\nfor i in range(1, 10):\n  kuku += [i * e for i in range(1, 10)]\nif N in kuku:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 'e' is not defined"
  },
  "s298445426":{
    "code_string":"N=int(input())\nfor i range(1,10):\n    if N%i==0 and N\/\/i<=9:\n        print('Yes')\nelse:print('No')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s699598252":{
    "code_string":"product = []\n\nfor i in range(1,10):\n    for j in range(1,10):\n        product.append(i * j)\n\nif N in product:\n    result = 'Yes'\nelse:\n    result = 'No'\n\nprint(result)\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s281600305":{
    "code_string":"n=int(input)\n\nfor i in range(1,10):\n    for j in range(i,10):\n        if n==i*j:\n            print(\"Yes\")\n            exit()\nprint(\"No\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s017635298":{
    "code_string":"n = int(input())\nbol = 0\nfor i in range(1,10):\n  for j in range(1:10):\n    if i*j == n:\n      bol = 1\n      break\nif bol == 1:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s016465519":{
    "code_string":"n=int(input())\nfor i in range(9):\n    for j in range(9):\n        k = i*j\n        if n%k==0:\n            print('Yes')\n            exit()\n        else:\n            continue\nprint('No')",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s515361012":{
    "code_string":"n = int(input())\ns = set(filter(lambda x : n % x == 0 and n \/ x < 10, [x for x in range(1, 10)])\n\nprint(\"Yes\" if len(s) == 0 in s else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s004635315":{
    "code_string":"N = int(input())\njudge = 'No'\nfor i in range(1:10):\n  for j in range(1:10):\n    if i * j == N:\n      judge = 'Yes'\n      break\n    else:\n      continue\n  break\nprint(judge)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s808915085":{
    "code_string":"n=int(input())\n\nlist=[]\n\nfor i in range(1,10)\n\tfor j in range(1,10)\n\t\tlist.append(i*j)\n    \nif n in list:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s382721241":{
    "code_string":"a=int(input())\nb=0\nfor i in range(9):\n  for k in range(9):\n    if (i+1)*(k+1)==a:\n      print(\"Yes\")\n      break\n      b=b+1\nif b=81:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s381532950":{
    "code_string":"a = int(input())\nf = False\nfor i in range(1,10):\n    if a % i == 0 and a\/i < 10:\n        f = True\n        break\nif f:\n    print \"Yes\"\nelse:\n    print \"No\"",
    "error_obj":"SyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Yes\")?"
  },
  "s635163786":{
    "code_string":"n = int(input())\na, b = 0\nfor i in range(1, 10):\n    b = i\n    a = n \/\/ i\n    if n % i !=0: continue\n    elif a <= 9 and b <= 9: \n        print('Yes')\n        break\n    else :\n        print('No')\n        break",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s774350657":{
    "code_string":"n = int(input())\n\nfor i in range(1, 10):\n  for j in range(1, 10):\n    if i*j == n:\n      print('Yes')\n      return\n\nprint('No')",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s236164300":{
    "code_string":"import sys\n\nn = int(input())\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i*j == n:\n            print(\"Yes\")\n            sys.exit(1)\nprint(\"No\")",
    "error_obj":""
  },
  "s588193515":{
    "code_string":"n = int(input())\nfor x in range(1, 10)\n  for y in range(1, 10)\n    if x * y == n:\n      print(\"Yes\")\n      exit()\nprint(\"No\")\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s765690703":{
    "code_string":"N = int(input())\ncnt = 1\nwhile cnt <= 9:\n    s = N\/cnt\n    if 1 <= s <= 9 and s == type(int):\n        print('Yes')\n        cnt += 1\nelse:\n    print('No')\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s214111716":{
    "code_string":"a,b,c,x = [int(input()) for _ in range(4)]\nprint(sum(500*i+100*j+50*k==x for i in range(a+1)for j in range(b+1)for k in range(c+1)))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s783654851":{
    "code_string":"ans=0\nfor i in range(1,10):\n  for j in range(1,10):\n    if int(input())==i*j:\n      ans=1\nprint('Yes' if ans else 'No')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s615014347":{
    "code_string":"n = int(input())\ns = input()\nif n%2 == 0:\n    cnt = 0\n    for i in range(n\/\/2):\n        if s[i] == s[i + n\/\/2]:\n            cnt += 1\n            if cnt == n\/\/2:\n                print(\"Yes\")\n                break\n        else:\n            print(\"No\")  \n            break\nelse:\n    print(\"No\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s614389939":{
    "code_string":"a, b = list(map(int, input().split()))\nif a >= 10 or b >= 10:\n    print('-1')\nelse:\n    print(a*b)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s055611508":{
    "code_string":"N = int(input())\nfor i in range(1, 10):\n    if N % i == 0 and N \/ i <= 9:\n        print('Yes')\n        exit(1)\nprint('No')\n",
    "error_obj":""
  },
  "s471490278":{
    "code_string":"import math\nN = int(input())\ns = 0\nif N % 2 == 0:\n  s = 2 + N \/\/ 2\n\nfor i in range(3, int(math.sqrt(N), 2):\n  if N % i == 0 and s > i + N \/\/ i:\n    s = i + N \/\/ i\n\nprint(s-2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s663951814":{
    "code_string":"from math import sqrt\n \nN = int(input())\n \nsearch_max = int(sqrt(N))\n \nmin_number = 10**12\nfor x in range(1, search_max + 1):\n    if N % x == 0:\n        y = N \/\/ x\n        if x + y < min_number:\n            min_number = x + y\n  print(min_number-2)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s292608376":{
    "code_string":"n = int(input())\nm = 10**12\na = int((n**0.5)\/\/1)\nfor i in a:\n  if n%i==0:\n    m=min(m,i+(n\/i)-2)\nprint(m)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s056193345":{
    "code_string":"import math\n\nans = 1000000000000000000\nN = int(input())\nfor i in range(math.sqrt(N+1000)):\n  if i > 0 and N % i == 0:\n    ans = min(i + N\/i - 2, ans)\nprint(ans)",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s226314498":{
    "code_string":"zimport numpy\nn = int(input())\nl = []\n\ndef is_prime(q):\n    q = abs(q)\n    if q == 2: return True\n    if q < 2 or q&1 == 0: return False\n    return pow(2, q-1, q) == 1\n\nif is_prime(n) :\n    print(n-1)\nif is_prime(n) == False:\n    for i in range(2,int(numpy.sqrt(n))+1):\n        if n%i == 0:\n            a = i\n            b = n\/\/i\n            l.append(a+b-2)\n    print(min(l))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s270390625":{
    "code_string":"from math import sqrt\nN = int(input()) # 2 <= N <= 10^12\n# (1,1) (x,y) = x*y\na = N-1\nfor x in range(2, int(sqrt(N))+1):\n  q, r = divmod(N, x):\n  if r == 0:\n    a = min(x-1 + q - 1, a)\nprint(a)\n    \n    \n  \n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s510777907":{
    "code_string":"n = int(input())\n\nans = n\n\ni = 1\n\nwhile i*i<=n :\n  if n%i == 0 :\n    d = n\/i\n    if ans > i*d-2 : ans = i*d-2\n  i++\n      \nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s889399252":{
    "code_string":"C:\\pycharm\\code_atcoder\\venv\\Scripts\\python.exe C:\/pycharm\/code_atcoder\/144C.py\n100019\n100018\n\n\u30d7\u30ed\u30bb\u30b9\u306f\u7d42\u4e86\u30b3\u30fc\u30c9 0 \u3067\u5b8c\u4e86\u3057\u307e\u3057\u305f\n",
    "error_obj":"SyntaxError: unexpected character after line continuation character"
  },
  "s336486941":{
    "code_string":"from math import sqrt\nfrom functools import reduce\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n\ndef lcm(a, b):\n    return a*b\/\/gcd(a, b)\nn = int(input())\nn2 = n\npfs = []\nisP = True\ni = 2\nwhile i <= int(sqrt(n)):\n    while n % i == 0:\n        pfs.append(i)\n        n \/\/= i\n        isP = False\n    i += 1\npfs.append(n)\n\"print (pfs)\nif isP:\n    ans =  (n2-1)\nelif len(pfs) > 2:\n    l = reduce(lcm, pfs)\n    ans = l-1 + n2\/\/l-1\nelse:\n    ans = pfs[-1]-1 + n2\/\/pfs[-1]-1\nprint (ans)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s616380231":{
    "code_string":"import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\ndef gcd(*numbers): reduce(math.gcd, numbers)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncount = 0\nans = 0\n\nN = k()\nans = 1000000\n\nfor i in range(1,N**0.5+1):\n    if N % i == 0:\n        b = N \/\/ i\n        ans = min(ans, b+i-2)\n\nprint(ans)\n",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s863795327":{
    "code_string":"n=int(input())\n#i+j-2=cnt & i*j=n\nimport math\nminn=100000000000000000000\ni=1\nwhile i**2<n:\n    if n%i==0:\n        j=n\/i\n        minn=min(int(i+j-2),minn)\nprint(minn)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s707664524":{
    "code_string":"N=int(input())\n\na=1\nb=N\/\/a\ndis=abs(a-b)\n\nfor i in range(int(N**0.5)+1):\n    if N%i==0:\n        _a=i\n        _b=N\/i\n        _dis=abs(_a-_b)\n        if _dis<dis:\n            a=_a\n            b=_b\n            dis=_dis\n\nprint(a-1+b-1)",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s229967530":{
    "code_string":"\timport numpy as np\n    a, b, x = map(int,input().split())\n    if x >= a**2*b\/2:\n        ans = np.arctan(2*(b-x\/a**2)\/a)\n    else:\n        ans = np.arctan(a*b\/2\/x*b)\n    print(ans*180\/np.pi)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s424328766":{
    "code_string":"import sys\nimport numpy as np\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    from numba.pycc import CC\n    cc = CC('my_module')\n\n    @cc.export('is_ok', '(i8[:],i8[:],i8,i8)')\n    def is_ok(A, F, x, k):\n        tmp = 0\n        for a, f in zip(A, F):\n            while a * f > x:\n                a -= 1\n                tmp += 1\n        return tmp <= k\n\n    cc.compile()\n    exit(0)\n\nfrom my_module import is_ok\nn, k = map(int, input().split())\nA = np.array(list(map(int, input().split())))\nF = np.array(list(map(int, input().split())))\n\nA = np.sort(A)\nF = np.sort(F)[::-1]\n\nok = 10 ** 16\nng = -1\nwhile ok - ng > 1:\n    mid = (ok + ng) \/\/ 2\n    if is_ok(A, F, mid, k):\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s290564849":{
    "code_string":"import sys\nimport numpy as np\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    from numba.pycc import CC\n    cc = CC('my_module')\n\n    @cc.export('is_ok', '(i4[:],i4[:],i4,i4)')\n    def is_ok(A, F, x, k):\n        tmp = 0\n        for a, f in zip(A, F):\n            y = a * f\n            if y > x:\n                tmp += a - x \/\/ f\n        return tmp <= k\n\n    cc.compile()\n    exit(0)\n\nfrom my_module import is_ok\nn, k = map(int, input().split())\nA = np.array(list(map(int, input().split())))\nF = np.array(list(map(int, input().split())))\n\nA = np.sort(A)\nF = np.sort(F)[::-1]\n\nok = 10 ** 12\nng = -1\nwhile ok - ng > 1:\n    mid = (ok + ng) \/\/ 2\n    if is_ok(A, F, mid, k):\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s993017760":{
    "code_string":"A, B = map(int, input().split())\nprint(max(0, A-B*2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s991746519":{
    "code_string":"A. B = map(int,input().split())\nif A <= B*2:\n    print(0)\nelse:\n    print(A-2*B)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s258153826":{
    "code_string":"a,b=map(int,input().split())\nprint(max(a-2b,0))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s714106708":{
    "code_string":"a, b = [int(i) for i in input().split()]\nprint(max(0, a - 2 * b)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s617612937":{
    "code_string":"A, B = map(int, input().split(''))\nif A - B * 2 > 0:\n    print(A - B * 2)\nelse:\n    print(0)",
    "error_obj":"ValueError: empty separator"
  },
  "s458923068":{
    "code_string":"a,b=input().split()\nc=b+b\nif(a-b!=0):\n    print(int(a-b))\nelse:\n    print(0)\n\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s102328455":{
    "code_string":"A, B = map(int, input())\n \nprint(max([0, A - 2 * B]))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s381124176":{
    "code_string":"tmp = input().split(\" \")\nA = int(tmp[0])\nB = int(tmp[1])\n\nimport math\nprint(math.max(A - 2 * B, 0))",
    "error_obj":"AttributeError: module 'math' has no attribute 'max'"
  },
  "s500044206":{
    "code_string":"a, b = map(int, input().split())\nprint(a - (2 * b) if a > 2b else 0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s694697044":{
    "code_string":"a.b = map(int,input().split())\nif(a > b * 2):\n    print(a-b * 2)\nelse:\n    print(0)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s672063094":{
    "code_string":"a, b = map(int,input().split())\nprint(max(0, a-2b))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s526231030":{
    "code_string":"a1=input()\na2=[i for i in a1.split()]\na3,a4=[res[i] for i in (0,1)]\nA,B=int(a3),int(a4)\nif A>2*B:\n    print(A-(2*B))\nelif A<2*B:\n    print('0')",
    "error_obj":"NameError: name 'res' is not defined"
  },
  "s021404556":{
    "code_string":"A,B = map(int,input().split())\n\nlen_ = A-*B\n\nif len_<=0:\n    print(0)\nelse:\n    print(len_)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s524583174":{
    "code_string":"a,b=map(int,input().split())\nprint(Max(a-2*b,0))",
    "error_obj":"NameError: name 'Max' is not defined"
  },
  "s708534787":{
    "code_string":"print(max(int(input())-int(input())*2,0))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '12 4'"
  },
  "s903435730":{
    "code_string":"a, b = input().split(\" \")\na = int(a)\nb = int(b)\nif a-2b < 0:\n  print(0)\nelse:\n  print(a-2b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s022364373":{
    "code_string":"N = int(input())\nd = [int(i) for i in input().split()]\nans = 0\nfor i in range(N):\n    for j in range(i+1,N):\n        ans += d[i]*d[j]\nprint(ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s845613017":{
    "code_string":"import sys\nimport time\nimport math\ndef inpl():\n    return list(map(int, input().split()))\nst = time.perf_counter()\n# ------------------------------\n\nN = int(input())\nd = [int(input()) for _ in range(N)]\nans = 0\nfor i in range(N-1):\n\tfor j in range(i+1, N):\n\t\tans += d[i] * d[j]\nprint(ans)\n\t\n\n# ------------------------------\ned = time.perf_counter()\nprint('time:', ed-st, file=sys.stderr)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1 2'"
  },
  "s540031276":{
    "code_string":"n = int(input())\nd = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n  for j in range(i+1,n+1):\n    ans += d[i]*d[j]\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s469284288":{
    "code_string":"n=int(input())\nd=list(map(int,input().split()))\ns=0\nfor i in range(n):\n    for j in range[i+1:]:\n        s += d[i]*d[j]\nprint(s)",
    "error_obj":"TypeError: 'type' object is not subscriptable"
  },
  "s551831637":{
    "code_string":"n=int(input())\nl=list(map(int,input().split()))\nc=itertools.combinations(l,2)\nans=sum(x*y for x,y in c)\nprint(ans)",
    "error_obj":"NameError: name 'itertools' is not defined"
  },
  "s537826627":{
    "code_string":"n=int(input())\nd=list(map(int,input().split()))\nsam=0\n\nfor i in range(n):\n  for j in range(n-i):\n    sam=sam+(d[i]*d[j+1])\n\nprint(sam)",
    "error_obj":"IndexError: list index out of range"
  },
  "s787284201":{
    "code_string":"from itertools import combinations\n\nn = int(input())\nd = map(int, input().split(\" \"))\n\nprint(sum(d[a]*d[b] for a, b in combinations(range(n), 2)))",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s709014805":{
    "code_string":"n=int(input())\nli = list(map(int,input().split()))\na=0\nfor i in range(n-1):\n  for j in range(n):\n    a += li[i]*li[j+1]\nprint(a)",
    "error_obj":"IndexError: list index out of range"
  },
  "s392734619":{
    "code_string":"N = int(input())\nD = map(int,input().split())\ncount=0\nfor i in range(N):\n  for j in D[i+1:]:\n    A = D[i]*j\n    count+=A\nprint(A)\n",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s128838845":{
    "code_string":"from itertools import combinations\n\nN=int(input())\nd=list(map(int,input()))\n\nc=combinations(d,2)\nprint(d)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s628842882":{
    "code_string":"n = int(input())\nd=list(map(int,input().split()))\n\nkaihuku = 0\n\nfor i in range(n-1):\n    for j in range(i+1,n):\n        kaihuku += d(i) * d(j)\n\nprint(kaihuku)",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s707374027":{
    "code_string":"N=int(input())\nList = list(map(int, input().split()))\nwa = 0\nk = 0\nfor i in range(N):\n  if i + 1 == N:\n    wa += List[0]*List[N-1]\n  else:\n    wa += List[i]*List[i+1]\nprint(res)",
    "error_obj":"NameError: name 'res' is not defined"
  },
  "s692333413":{
    "code_string":"x=int(input())\ns=list(input())\nsu=s\nfor i in range(len(s)-1):\n    if s[i]==s[i+1]:\n        su.pop(i)\n    else:\n        pass\nprint(len(su))",
    "error_obj":"IndexError: list index out of range"
  },
  "s705536416":{
    "code_string":"n = int(input())\ns = str(input())\ns += \"A\"\nq = s[0]\nans = 0\nfor i in range(n+1):\n  if(q==s[i]):\n    None:\n  else:\n    ans += 1\n    q = s[i]\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s791161903":{
    "code_string":"n = int(input())\ns = input\ncount = 0\nfor i in range(n-1):\n  if s[i]  != s[i+1];\n    count = count + 1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s294244065":{
    "code_string":"n = int(input())\nx = list(input())\nfor i in range(n,1,-1):\n  if x[i]==x[i-1]:\n    x.pop(i)\nprint(len(x))",
    "error_obj":"IndexError: list index out of range"
  },
  "s870790608":{
    "code_string":"N=int(input())\nS=input()\nlast = s[0]\ncnt = 0\nfor s in S[1:]:\n  if last != s:\n    cnt+=1\n    last = s\nprint(cnt)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s113487927":{
    "code_string":"N = int(input())\nS = input()\nans=0\nfor i in range(1,N):\n    if S[i]!=S[i-1]\n        ans+=1\nprint(ans+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s227421328":{
    "code_string":"a=int(input())a\\\nb=input()\nc=0\nfor i in range(a-1):\n  if b[i]==b[i+1]:\n    c=c+1\nprint(a-c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s979300156":{
    "code_string":"N = int(input())\nL = list(map(int, input().split()))\nL.sort()\nfrom numba import njit, jit\nfrom itertools import combinations\n\n\n@jit\ndef solve():\n    ans = 0\n    for a, b, c in combinations(L, r=3):\n        ans += a + b > c\n    return ans\n\n\nprint(solve())\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s921111159":{
    "code_string":"from bisect import bisect_left\n\nn = int(input())\nl = sorted(list(map(int,input().split())))\nans = 0\n\nfor i in range(n):\n    for j in range(i+1,n):\n        ans += bisect_left(l.,l[i]+l[j])-(j+1)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s362231542":{
    "code_string":"a = list(map(int, input().split()))\n \na.sort()\ncount = 0\nfor i in range(n-1,0,-1):\n    l = 0\n    r = i-1\n    while(l<r):\n        if a[l] + a[r] > a[i]:\n            count += r-l\n            r -= 1\n \n        else:\n            l += 1\n \nprint(count)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s678233385":{
    "code_string":"\ndef findnumberofTriangles(arr): \n\tn = len(arr) \n\tarr.sort() \n\tcount = 0\n\tfor i in range(0, n-2):  \n\t\tk = i + 2 \n\t\tfor j in range(i + 1, n):  \n\t\t\twhile (k < n and arr[i] + arr[j] > arr[k]): \n\t\t\t\tk += 1\n\t\t\tif(k>j): \n\t\t\t\tcount += k - j - 1\n\n\treturn count \n\nn = int(input())\narr=[int(x) for x in input().split()]\nprint(findnumberoftriangles(arr))\n\n",
    "error_obj":"NameError: name 'findnumberoftriangles' is not defined"
  },
  "s586679279":{
    "code_string":"from numba import njit\nN = int(input())\nL = list(map(int, input().split()))\nL.sort()\n\n@njit\ndef solve(N, L):\n    cnt = 0\n    for i in range(N-2):\n        a = L[i]\n        for j in range(i+1, N-1):\n            b = L[j]\n            for k in range(j+1, N):\n                cnt += a+b > L[k]\n    return cnt\nprint(solve(N, L))",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s661709484":{
    "code_string":"from bisect import bisect_left\n\nN=int(input())\nL=list(map(int,input().split()))\nL=sorted(L)\nans=0\nfor i in range(N-2):\n  a=L[i]\n  for j in range(i+1,N-1):\n    \"\"\"\n    b=L[j]\n    lo=0\n    hi=N\n    x=a+b\n    while lo<hi:\n      mid=(lo+hi)\/\/2\n      if L[mid]<x: lo=mid+1\n      else: hi=mid\n    ans+=lo-(j+1) \n    \"\"\"\n    ans+=bisect_left(L,a+b)-(j+1)\nprint(ans)\n",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s502221886":{
    "code_string":"import sys\n\nimport numba as nb\n\ninput = sys.stdin.readline\n\n\n@nb.njit(\"i8(List(i8, reflected=True),i8)\", cache=True)\ndef binary_search(a, key):\n    \"\"\"Meguru type binary search\"\"\"\n    ok = -1\n    ng = len(a)\n\n    def is_ok(a, key, idx):\n        if a[idx] < key:\n            return True\n        else:\n            return False\n\n    while (abs(ok - ng) > 1):\n        mid = (ok + ng) \/\/ 2\n        if is_ok(a, key, mid):\n            ok = mid\n        else:\n            ng = mid\n\n    return ok\n\n\ndef main():\n    N = int(input())\n    L = list(map(int, input().split()))\n\n    L.sort()\n    ans = 0\n    for a in range(N - 2):\n        for b in range(a + 1, N - 1):\n            x = binary_search(L, L[a] + L[b])\n            ans += (x - b)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s589061663":{
    "code_string":"from bisect import*\nl = sorted(map(int, open(0).read().split()[1:]))\nprint(sum(max(0, bisect_left(l, l[i] + l[j]) - j - 1) for i in range(n) for j in range(i+1, n)))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s132897337":{
    "code_string":"import bisect\n\nn = int(input())\nl = list(int(i) for i in input().split())\nl = sorted(l, reverse=True)\n\ncnt = 0\n\nfor i in range(n - 2):\n    a = l[i]\n    for j in range(i + 1, n-1):\n        b = l[j]\n        cnt += bisect.bisectright(l, a-b)-(j+1)\n\nprint(cnt)\n",
    "error_obj":"AttributeError: module 'bisect' has no attribute 'bisectright'"
  },
  "s337488137":{
    "code_string":"import bisect,collections,copy,heapq,itertools,math,string\nimport numpy as np\nimport sys\nsys.setrecursionlimit(10**7)\n\ndef _S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\nN = I()\nL = LI()\n# L = np.array(_L)\n#C = np.zeros(N + 1)\n\n# def test(a,b,c):\n#     if a<b+c and b<c+a and c<a+b:\n#         return True\n#     return False\n\n# count = 0\n# for pair in itertools.combinations(L, 3):\n#     # print(pair)\n#     if test(*pair):\n#         count += 1\n# print(count)\n\n# for i in range(N):\n#     for j in range(i+1,N):\n\nfrom numba import njit\n \n# @njit\ndef f(A):\n  count = 0\n  for i in range(N):\n    for j in range(i + 1, N):\n      for k in range(j + 1, N):\n        count += (A[k] < A[i] + A[j])\n  return count\n \nA = np.array(L)\nA.sort()\nprint(f(A))        \n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s035423863":{
    "code_string":"n = int(input())\nl = list(map(int, input().split()))\nl.sort()\n\nans = 0\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        k = bisect_left(l, l[i] + l[j])\n        ans += k - j - 1\nprint(ans)\n",
    "error_obj":"NameError: name 'bisect_left' is not defined"
  },
  "s058965495":{
    "code_string":"import bisect\nN = int(input())\nlist = list(map(int,input().split()))\nlist = sorted(list)\nans = 0\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        x = list[i]+list[j]\n        ind = bisect.bisect_left(list,x)\n        ans+=(ind-j-1)\nprint(ans)\n    \n    ",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s259653566":{
    "code_string":"from collections import defaultdict\nfrom scipy.sparse.csgraph import floyd_warshall\n\nn, m, l = map(int, input().split())\n\ngraph = defaultdict(list)\n\nfor _ in range(m):\n    a, b, c = map(int, input().split())\n    graph[a].append((b, c))\n    graph[b].append((a, c))\n\n\ndef dfs(u):\n    dist = [-1] * (n + 1)\n    stack = [u]\n    dist[u] = 0\n    while stack:\n        u = stack.pop()\n        for v, d in graph[u]:\n            nxt = dist[u] + d\n            if dist[v] == -1 or dist[v] > nxt:\n                dist[v] = nxt\n                stack.append(v)\n    return dist\n\n\ndist = [[0] * n for _ in range(n)]\nfor i in range(1, n + 1):\n    dist[i - 1] = dfs(i)[1:]\n\ndist = np.array(dist)\n\ngraph2 = np.full((n, n), np.inf)\ngraph2[dist <= l] = 1\ndist = floyd_warshall(graph2, directed=False)\ndist = dist.astype(int)\n\nq = int(input())\n\nans = []\nfor _ in range(q):\n    s, t = map(int, input().split())\n    ans.append(dist[s - 1, t - 1] - 1)\n\nprint(*ans, sep=\"\\n\")",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s600206711":{
    "code_string":"# A - Connection and Disconnection\nS = input()\nK = int(input())\nS = S + '1'# \u756a\u5175\n\n# \u9023\u7d9a\u3059\u308b\u6587\u5b57\u6570\u3092\u30ab\u30a6\u30f3\u30c8\ncnt = []\nconti = 1\nfor i in range(1,len(S)):\n    if S[i-1] == S[i]:\n        conti += 1\n    else:\n        cnt.append(conti)\n        conti = 1\n\n# \u6700\u521d\u3068\u6700\u5f8c\u306e\u6587\u5b57\u304c\u540c\u3058\u3068\u304d\nif S[0] == S[-2]:\n    # \u5947\u6570\u500b + \u5947\u6570\u500b\u306e\u3068\u304d\n    if cnt[0]%2 == 1 and cnt[-1]%2 == 1:\n        comp = K - 1\n        \nans = [a\/\/2 for a in cnt if a >= 2]\nans = sum(ans)*K + comp\nprint(ans)        ",
    "error_obj":"NameError: name 'comp' is not defined"
  },
  "s739527648":{
    "code_string":"import sys\n\n# A - Connection and Disconnection\nimport string\n\nS = input()\nK = int(input())\nT = S + S[0]\n\nlower = string.ascii_lowercase\nans = 0\nis_specila_case = False\n\nfor c in lower:\n\tkey = c * 2\n\tans += T.count(key)\n\n\tif T.endswith(key):\n\t\tis_specila_case = True\n\nans *= K\n\nif is_specila_case:\n\tprint(ans - 1)\nelse:\n\tprint(ans)import sys\n\n# A - Connection and Disconnection\nimport string\n\nS = input()\nK = int(input())\nT = S + S[0]\n\nlower = string.ascii_lowercase\nans = 0\nis_specila_case = False\n\nfor c in lower:\n\tkey = c * 2\n\tans += T.count(key)\n\n\tif T.endswith(key):\n\t\tis_specila_case = True\n\nans *= K\n\nif is_specila_case:\n\tprint(ans - 1)\nelse:\n\tprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s531462857":{
    "code_string":"#include <bits\/stdc++.h>\nusing namespace std;\n\n#define lint long long\n#define all(it) it.begin(), it.end()\n#define FOR(i, n) for(int i = 0; i < n; i++)\n#define FORU(i, a, b, s) for(int i = a; i < b; i += s)\n#define FORD(i, a, b, s) for(int i = a; i > b; i -= s)\n#define endl \"\\n\"\nlint INF = 2e18;\nlint MOD = 1e9 + 7;\n\nlint i, j, k, t;\n\nint main() {\n    string S;\n    lint K;\n\n    cin >> S >> K;\n\n    S += S[0];\n\n    lint cnt = 0;\n    regex re(R\"(([a-z])\\1{0,})\");\n\n    for(sregex_iterator it(all(S), re), end; it != end; ++it) {\n        auto &&m = *it;\n        cnt += m.length() \/ 2;\n    }\n\n    cout << cnt * K << endl;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s666779005":{
    "code_string":"# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict\nfrom math import sqrt, factorial, gcd, ceil\n# def input(): return sys.stdin.readline()[:-1] # warning not \\n\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\n# def input(): return sys.stdin.buffer.readline().decode('utf-8')\nimport string\n# string.ascii_lowercase\nfrom bisect import bisect_left\n\ndef solve():\n    # n, m = [int(x) for x in input().split()]\n    s = [x for x in input()]\n    a = s[:]\n    k = int(input())\n    if len(s) == 1:\n        print(k \/\/ 2)\n        return\n    if len(set(s)) == 1:\n        print((len(s) * k)\/\/2)\n        return\n    cnt = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            s[i] = '.'\n            cnt += 1\n\n    cnt *= k\n    \n    if s[0] == s[-1] and s[0] != '.':\n        cnt += (k - 1)\n\n    print(min(cnt,ans))\n\n\nt = 1\n# t = int(input())\nfor case in range(1,t+1):\n    ans = solve()\n\n\n\"\"\"\n\nazyxwvutsrqponmlkjihgfedcb\n\n\"\"\"\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s478150425":{
    "code_string":"s=input()\nk=int(input())\ncnt=1\ntemp=[]\nfor i in range(len(s)-1):\n    if s[i]==s[i+1]: cnt+=1\n    else:\n        temp.append([s[i],cnt])\n        cnt=1\nif cnt>=1: temp.append([s[-1],cnt])\nif len(temp)==1:\n    print(k*len(s)\/\/2)\n    exit()\nans=0\nif temp[0][0]!=temp[-1][0]:\n    for pair in temp:\n        if pair[1]!=1: ans+=pair[1]\/\/2\n    print(ans*k)\nelse:\n    for pair in temp[1:-1]:\n        if pair[1]!=1: ans+=pair[1]\/\/2\n    ans*=k\n    ans+=(k-1)*((temp[0][0]+temp[-1][0])\/\/2)\n    ans+=temp[0][0]\/\/2+temp[-1][0]\/\/2\n    print(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'str' and 'int'"
  },
  "s953032245":{
    "code_string":"S = input()\nK = int(input())\n\nif len(set(s)) == 1:\n    print(len(S)*K\/\/2)\n    exit()\n\nb = [1]\nfor i in S[:-1]:\n    if S[i] == S[i+1]:\n        b[-1] += 1\n    else:\n        b.append(1)\n\nans = 0\nfor i in b:\n    ans += i\/\/2\nans *= K\n\nif S[0] == S[-1] and b[0]%2 == b[-1]%2 == 1:\n    ans += K - 1\nprint(ans)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s229533400":{
    "code_string":"S = input()\nK = int(input())\n\nif(S.count(S[0]) == len(S)):\n    print(len(S)*K\/\/2)\nelse:\n    cnt = 0\n    lst = []\n    tmp = S[0]\n    for i in range(len(S)):\n        if(tmp == S[i]):\n            cnt += 1\n        else:\n            tmp = S[i]\n            if(cnt > 1):\n                lst.append(cnt)\n            cnt = 1   \n    if(cnt > 1):\n        lst.append(cnt)\n        \n    ans = 0\n    for i in lst:\n        ans += K*(i\/\/2)\n    if(S[0] != S[-1]):\n        print(ans)\n    else:\n        for i in range(len(S)):\n            if(tmp != S[i]):\n                break\n            a += 1\n        for i in S[::-1]:\n            if(tmp != i):\n                break\n            b += 1\n        print(ans+((a+b)\/\/2-(a\/\/2+b\/\/2))*(K-1))",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s331553777":{
    "code_string":"# coding: utf-8\nimport sys\n#from operator import itemgetter\nsysread = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\n#from heapq import heappop, heappush\n#from collections import defaultdict\nsys.setrecursionlimit(10**7)\nimport math\n#from itertools import product, accumulate, combinations, product\n#import bisect\nimport numpy as np\n#from copy import deepcopy\n#from collections import deque\n#from decimal import Decimal\nfrom numba import jit\n\nINF = 1 << 50\nEPS = 1e-8\n\n@jit\ndef solve(S):\n    N = S.shape[0]\n    ans = 0\n    for k in range(N):\n        #print(k, '-------------------')\n        seen = set()\n        seen.add(k)\n        merged = np.ones(N, dtype=np.int32) * (-1)\n        merged[0] = k\n        count = 0\n        while merged[0] > -1:\n            #print(merged)\n            count += 1\n            nexts = np.ones(N, dtype=np.int32) * (-1)\n            p = 0\n            for i in merged:\n                if i == -1:break\n                for j, e in enumerate(S[i]):\n                    if e and not j in seen:\n                        #print(j)\n                        nexts[p] = j\n                        p += 1\n                        seen.add(j)\n            # merge check\n            for i in range(N):\n                if nexts[i] == -1:break\n            checks = S[nexts[:i],:][:, nexts[:i]]\n            #print(checks)\n            if checks.sum() != 0:\n                seen = set()\n                break\n            merged = nexts\n        if len(seen) == N:\n            ans = max(ans, count)\n    if ans:\n        print(ans)\n    else:\n        print(-1)\n\n\ndef run():\n    N = int(sysread())\n    S = []\n    for i in range(N):\n        S.append(list(map(int, list(input()))))\n    S = np.array(S, dtype = np.int8)\n\n    solve(S)\n\n\nif __name__ == \"__main__\":\n    run()\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s506602582":{
    "code_string":"N=input()\nif N%2==0:\n  print(N\/2)\nelse:\n  print(int(N\/2))",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s520255741":{
    "code_string":"N=int(input())\nif N%2==0:\n  print('{:.06}'.format(N\/\/2))\nelse:\n  print('{:.06}'.format(N\/\/2+1))",
    "error_obj":"ValueError: Precision not allowed in integer format specifier"
  },
  "s072563914":{
    "code_string":"a = int(input())\n\nif a % 2 == 1: print( ((a-1)\/2 + 1)\/a )\nelse: print 0.5",
    "error_obj":"SyntaxError: Missing parentheses in call to 'print'. Did you mean print(0.5)?"
  },
  "s637949860":{
    "code_string":"N = int(input())\nif N % 2 =1:\n  n = int((N+1)\/2)\nelse:\n  n = int(N\/2)\nres = n\/N\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s757556595":{
    "code_string":"a=int(input())\nif a%2==0:\n    print(a\/2\/a)\nelse:\n    print((a\/\/2+1)a)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s125315767":{
    "code_string":"N = int(input())\n\nif N == 1:\n  print(1)\nelif N % 2 == 0:\n  print(0.5)\nelse:\n  print((N - (N\/\/2) \/ N)\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s809196630":{
    "code_string":"N, K = list(map(lambda n: int(n), input().split(\" \")))\nh = list(map(lambda x: int(n), input().split(\" \")))\nprint(len(list(filter(lambda height: height >= K, h))))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s693198378":{
    "code_string":"n,k=map(int,input().split())\nxlist =list(map(int,input().split()))\ncount = 0\nfor i in range(n):\n  if x[i]>=k:\n    count+=1\nprint(count)",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s972750518":{
    "code_string":"result = 0\n\nfor h in heights:\n    if h >= K:\n        result += 1\nprint(result)",
    "error_obj":"NameError: name 'heights' is not defined"
  },
  "s710004409":{
    "code_string":"N,K=map(int, input().split())\nd=list(map(int,input().split()))\nans=0\nfor i in range(N+1):\n    if d[i]>=K:\n        ans=ans+1\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s055460761":{
    "code_string":"def atc_142b(NK_input: str, hi_input: str) -> int:\n    N, K = map(int, NK_input.split(\" \"))\n    hi = [int(i) for i in hi_input.split(\" \")]\n    hi = sorted(hi)\n    for i in range(0, len(hi)):\n        if hi[i] >= K:\n            return len(hi) - i\n    return 0\n\nNK_input_value = input()\nhi_input_value = input()\npritn(atc_142b(NK_input_value, hi_input_value))\n",
    "error_obj":"NameError: name 'pritn' is not defined"
  },
  "s173251493":{
    "code_string":"N,K=map(int,input().split())\nH=list(map(int,input().split()))\ncount=0\nfor h in H:\n  if h>=K:\n  count=count+1\nprint(count)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s821142324":{
    "code_string":"n,k=map(int,input().split())\nh=list(map(int,input().split()))\nans=0\nfor i in h:\n    if h>=k:\n        ans+=1\nprint(ans)",
    "error_obj":"TypeError: '>=' not supported between instances of 'list' and 'int'"
  },
  "s448500284":{
    "code_string":"N, K = map(int, input().split())\nh = list(map(int, input().split()))\nfor i in h:\n  if i > K:\n    total+=1\nprint(total)    ",
    "error_obj":"NameError: name 'total' is not defined"
  },
  "s554961666":{
    "code_string":"N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    if A[i] >= K:\n        cnt += 1\n\nprint(ans)",
    "error_obj":"NameError: name 'cnt' is not defined"
  },
  "s616730587":{
    "code_string":"N,K = list(map(int,input().split()))\nH  = list(map(int,input().split()))\ncounter = 0\nfor h in H:\n  if h >= K:\n    couter += 1\n    \nprint(counter)",
    "error_obj":"NameError: name 'couter' is not defined"
  },
  "s360034428":{
    "code_string":"n,k = map(int,input().spilit())\nh = list(map(int,input().split()))\nans = 0\nfor a in h:\n  if a>=k:\n    ans += 1\nprint(ans)",
    "error_obj":"AttributeError: 'str' object has no attribute 'spilit'"
  },
  "s184020467":{
    "code_string":"# -*- coding: utf-8 -*-\n\nn, k = map(int, input().split())\ncnt = 0\n\nh = list(map(int, input().split()))\n\nfor high in h:\n    if h >= k:\n        cnt += 1\n\n\nprint(cnt)\n",
    "error_obj":"TypeError: '>=' not supported between instances of 'list' and 'int'"
  },
  "s236976647":{
    "code_string":"n,k=map(int,input())\na=list(map(int,input().split()))\ncnt=0\nfor i in range(n):\n  if(a[i]>=k):\n    cnt+=1\n    \nprint(cnt)  ",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s302238265":{
    "code_string":"A=B=int(input())\nN = list(int,input().split())\n\nc=0\n\nfor i in range(A):\n  if N[i] >= B:\n    c+=1\n  else:\n    pass\n  i+=1\nprint(c)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 150'"
  },
  "s274901282":{
    "code_string":"\nn,k = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(k):\n    if h[i] >= k:\n        cnt += 1\nprint(cnt)\n\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s975341991":{
    "code_string":"N,K = map(int,input().split())\nh = list(map(int,input().split()))\n\nans = 0\nfor i in h:\n  if h >= K:\n    ans += 1\nprint(ans)",
    "error_obj":"TypeError: '>=' not supported between instances of 'list' and 'int'"
  },
  "s799563686":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\nans = [0] * N\nfor i,val in enumerate(A):\n    ans[val-1] = i+1\nprint(' '.join(ans))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s866359453":{
    "code_string":"N = int(input())\nAlist = list(map(int, input().split()))\n\nAlist = [[idx+1, a] for (idx, a) in enumerate(Alist)]\n\nAlist.sort(key=lambda x:x[1])\n\nans = [a for a, _ in Alist]\nprint(\" \".join(ans))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s687216632":{
    "code_string":"N=int(input())\nAi=list(map(int,input().split()))\n\n# ans=[]\nans=[]*N\n\n# for i in range(1,N+1):\n    # a=Ai.index(i)+1\n    # ans.append(str(a))\nfor i in range (N):\n    ans[Ai[i]-1]=str(i+1)\n\nprint(' '.join(ans))\n",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s816401763":{
    "code_string":"import bisect,collections,copy,heapq,itertools,math,string\nimport numpy as np\nfrom numba import njit\nimport sys\nsys.setrecursionlimit(10**7)\n\ndef _S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\nN = I()\nA = LI()\n#AB = [LI() for _ in range(N)]\n#A,B = zip(*AB)\n#Ap = np.array(A)\n#C = np.zeros(N + 1)\n# index \u9806 \u8981\u7d20\u306eindex\n\nans = []\nfor i in range(N):\n    ans.append(A.index(i+1)+1)\nprint(*ans)",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s166763082":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=[0]*n\nfor i in range(n):\n  x=a[i]\n  b[x-1]=i+1\nc=\" \".join(b)\nprint(c)",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s027969486":{
    "code_string":"N=int(input())\nA=map(int, input().split())\nB=[0]*N\nC=''\n\nfor i in range(N):\n    B[A[i]-1]=i+1\n\nfor i in range(N):\n    C+=str(B[i])+' '\n\nprint(C[0:-1])",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s528278349":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\nans = 1\nX = []\nfor i in range(N):\n  if A[i] == ans:\n    ans += 1\n    X.append(i+1)\nL=' '.join(X)\nprint(X)\n",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s174524946":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\nans = [0]*n\nfor i in range(n):\n  ans[a.pop(i)-1] = i+1\nfor i in range(n):\n  print(ans,end=\" \")",
    "error_obj":"IndexError: pop index out of range"
  },
  "s007525037":{
    "code_string":"n = int(input())\nal = list(map(int,input().split()))\n\nlst = []*n\nfor i in range(1,n+1):\n  lst[al[i-1]-1] = i\nprint(*lst)\n  \n",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s625022353":{
    "code_string":"N = int(input())\nS = list(map(int, input().split()))\n\nans = [0]*N\nfor i in range(Nh):\n    ans[S[i]-1] = i+1\nprint(\" \".join(map(str, ans)))",
    "error_obj":"NameError: name 'Nh' is not defined"
  },
  "s465133200":{
    "code_string":"n = int(input())\nline = list(map(int, input().split()))\nans = [0 for i in range(n)]\nfor i in range(n):\n  ans[line[i-1]] = i+1\nprint(' '.join(ans))\n",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s634076050":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nans = [0 for i in range(N)]\nfor i in range(N):\n  ans[A[i]-1] = i+1\nprint(\" \".join(ans))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s268820893":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\nB = [0]*(N)\nfor i in range(N):\n    B[A[i]] = A[i]\nprint(B)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s806274546":{
    "code_string":"n=int(input())\nls=list(map(int,input().split()))\ncopy=[0]*n\nfor i in range(n):\n  copy[ls[i]-1=i+1\nfor i in copy:\n       print(i,end=\" \")\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s367733577":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\nalist = [0]*n\n\nfor i in range(1, n+1):\n    alist[a[i]-1] =str(i+1)\n\nprint(\" \".join(alist))",
    "error_obj":"IndexError: list index out of range"
  },
  "s659007785":{
    "code_string":"import sys\nn= int(input())\nan = list(map(int, sys.stdin.readline().split()))\nans = [0]*n\nfor i in range(n):\n    ans[an[i]-1] = i+1\n\nprint(' '.join(ans))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s770948765":{
    "code_string":"def main():\n    a,b=map(lambda x: set(prime_factorize(int(x))),input().split())\n    print(len(a&b)+1)\n\n@lru_cache(maxsize=None)\ndef primes(n:int) -> list:\n    '''n\u4ee5\u4e0b\u306e\u5168\u7d20\u6570\u3092list\u3067\u8fd4\u3059'''\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\n# \u7d20\u6570\u5224\u5b9a\uff08\u5358\u7d14\u306a\u7d20\u6570\u5224\u5b9a\u306a\u3089\u5341\u5206\u65e9\u3044\u3002\u5927\u91cf\u306b\u3084\u308b\u5834\u5408\u306fX in primes\u304c\u3088\u3055\u305d\u3046\uff09\n@lru_cache(maxsize=None)\ndef is_prime(n: int) -> bool:\n    '''\u5f15\u6570n\u304c\u7d20\u6570\u3067\u3042\u308c\u3070True\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070False\u3092\u8fd4\u3059'''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    \n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n# \u7d20\u56e0\u6570\u5206\u89e3\n@lru_cache(maxsize=None)\ndef prime_factorize(n: int) -> list:\n    '''\u5f15\u6570n\u306e\u7d20\u56e0\u6570\u5206\u89e3\u7d50\u679c\u306elist\u3092\u8fd4\u3059\u3002'''\n    arr = []\n    # 2\u3067\u5272\u308a\u7d9a\u3051\u5947\u6570\u307e\u3067\u9084\u5143\u3059\u308b\n    while n % 2 == 0:\n        arr.append(2)\n        n \/\/= 2\n    # sqrt(n)\u307e\u3067\u306e\u7d20\u6570\u3067\u8a66\u3057\u5272\n    for f in primes(int(n**0.5)):\n        while n % f == 0:\n            arr.append(f)\n            n \/\/= f\n    if n != 1:\n        arr.append(n)\n    return arr\n\n#\u7d04\u6570\u30ea\u30b9\u30c8\ndef make_divisors(n: int) -> list:\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n \/\/ i:\n                upper_divisors.append(n\/\/i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n        \nif __name__ == \"__main__\":\n    main()",
    "error_obj":"NameError: name 'lru_cache' is not defined"
  },
  "s443522270":{
    "code_string":"def divisor(n): \n    i = 1\n    table = []\n    while i * i <= n:\n        if n%i == 0:\n            table.append(i)\n            table.append(n\/\/i)\n        i += 1\n    table = list(set(table))\n    table = sorted(table)\n    return table\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\nA_list = set(divisor(A))\nB_list = set(divisor(B))\n\nlist = A_list & B_list\n\ncnt = 1\n\nfor i in list:\n    if is_prime(i):\n        cnt += 1\n\nprint(cnt)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s177829905":{
    "code_string":"import numpy as np\n\ndef divisor(n): \n    i = 1\n    table = []\n    while i * i <= n:\n        if n%i == 0:\n            table.append(i)\n            table.append(n\/\/i)\n        i += 1\n    table = list(set(table))\n    table = sorted(table)\n    return table\n\ndef make_prime(U):\n    is_prime = np.zeros(U,np.bool)\n    is_prime[2] = 1\n    is_prime[3::2] = 1\n    M = int(U**.5)+1\n    for p in range(3,M,2):\n        if is_prime[p]:\n            is_prime[p*p::p+p] = 0\n    return is_prime, is_prime.nonzero()[0]\nA, B = map(int, input().split())\n\nA_list = set(divisor(A))\nB_list = set(divisor(B))\n\nlist = A_list & B_list\n\n_, primes = make_prime(10**9)\n\ncnt = 1\n\nfor i in list:\n    if i in primes:\n        cnt += 1\n\nprint(cnt)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s252010776":{
    "code_string":"def gcd(a,b): #\u6700\u5927\u516c\u7d04\u6570\n    if a%b==0: return b\n    return gcd(b,a%b)\n\ndef ela(g):\n    s={}\n    i=2\n    while i*i<=g:\n        while g%i==0:\n            g\/\/=i\n            s.add(i)\n        i+=1\n    return s\n\na,b=map(int,input().split())\nG=gcd(max(a,b),min(a,b))\nprint(len(ela(G))+1)",
    "error_obj":"AttributeError: 'dict' object has no attribute 'add'"
  },
  "s654359580":{
    "code_string":"from math import *\n\ndef make_divisors(n):\n    divisors = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.add(i)\n            if i != n \/\/ i:\n                divisors.add(n\/\/i)\n    return divisors\n\ndef eratosthenes(n):\n    table = [0] * (n + 1)\n    prime_list = []\n    \n    for i in range(2, n + 1):\n        if table[i] == 0:\n            prime_list.append(i)\n            for j in range(i + i, n + 1, i):\n                table[j] = 1\n                \n    return prime_list\n\na,b = map(int,input().split())\nupper = 10**8\nans = set(eratosthenes(upper)) & make_divisors(a) & make_divisors(b)\nprint(len(ans) + 1)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s431992107":{
    "code_string":"# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\nclass Math():\n    @staticmethod\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return Math.gcd(b, a % b)\n\n    @staticmethod\n    def lcm(a, b):\n        return (a * b) \/\/ Math.gcd(a, b)\n\n    @staticmethod\n    def divisor(n):\n        lower, upper = [], []\n        i = 1\n        while i * i <= n:\n            if n % i == 0:\n                lower.append(i)\n                if i != n \/\/ i:\n                    upper.append(n \/\/ i)\n            i += 1\n        return lower + upper[::-1]\n\n    @staticmethod\n    def round_up(a, b):\n        return -(-a \/\/ b)\n\n    @staticmethod\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        d = int(n ** 0.5) + 1\n        for i in range(3, d + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    @staticmethod\n    def fact(N):\n        res = {}\n        tmp = N\n        for i in range(2, int(N ** 0.5 + 1) + 1):\n            cnt = 0\n            while tmp % i == 0:\n                cnt += 1\n                tmp \/\/= i\n            if cnt > 0:\n                res[i] = cnt\n        if tmp != 1:\n            res[tmp] = 1\n        if res == {}:\n            res[N] = 1\n        return res\n\n\ndef pop_count(x):\n    x = x - ((x >> 1) & 0x5555555555555555)\n    x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    x = x + (x >> 32)\n    return x & 0x0000007f\n\n\nMOD = int(1e09) + 7\nINF = int(1e15)\n\n\ndef solve():\n    A, B = Scanner.map_int()\n    div_A = Math.divisor(A)\n    div_B = Math.divisor(B)\n    X = set(div_A) & set(div_B)\n    ans = 0\n    for x in X:\n        if Math.is_prime(x):\n            ans += 1\n    print(ans + 1)\n\n\ndef main():\n    # sys.setrecursionlimit(1000000)\n    sys.stdin = open(\"sample.txt\")\n    # T = Scanner.int()\n    # for _ in range(T):\n    #     solve()\n    # print('YNeos'[not solve()::2])\n    solve()\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"FileNotFoundError: [Errno 2] No such file or directory: 'sample.txt'"
  },
  "s833094693":{
    "code_string":"import math\n\nd=math.gcd(a,b)\n\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n \/\/ i:\n                upper_divisors.append(n\/\/i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n  \nr=make_divisors(d)\nl=len(r)\nans=1\nw=[True]*l\nif l>=2:\n  for x in range(1,l):\n    if w[x]==True:\n      ans+=1\n      for y in range(x,l):\n        if r[y]%r[x]==0:\n          w[y]=False\n          \nprint(ans)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s140106909":{
    "code_string":"from collections import deque\n\nclass Graph(): #directed\n    def __init__(self, n, edge, indexed=1):\n        self.n = n\n        self.graph = [[] for _ in range(n)]\n        for e in edge:\n            self.graph[e[0] - indexed].append(e[1] - indexed)\n\nINF = 10**18\n\nN, M = map(int, input().split())\nedge = [tuple(map(int, input().split())) for _ in range(M)]\n\ng = Graph(N, edge)\n\nloopsize = INF\n\nfor i in range(N):\n    root = i\n    queue = deque([root])\n    dist = [INF for _ in range(N)]\n    dist[root] = 0\n    prev = [None for _ in range(N)]\n    while queue:\n        node = queue.popleft()\n        for adj in g.graph[node]:\n            if adj == root: #\u9589\u8def\u3092\u691c\u51fa\u3059\u308b\n                dist[root] = dist[node] + 1\n                prev[root] = node\n                break\n            if dist[adj] != INF:\n                continue\n            dist[adj] = dist[node] + 1\n            prev[adj] = node\n            queue.append(adj)\n        else:\n            continue\n        break\n    #\u6700\u5c0f\u306e\u9589\u8def\u306a\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\n    if loopsize > dist[root]:\n        loopsize = dist[root]\n        path = [root]\n        node = root\n        while prev[node] != root:\n            node = prev[node]\n            path.append(node)\n        res = path\n\nif loopsize != INF:\n    print(loopsize)\n    for node in res:\n        print(node + 1)\nelse:\n    print(-1)",
    "error_obj":"TypeError: list indices must be integers or slices, not NoneType"
  },
  "s068982670":{
    "code_string":"H, W, A, B = list(map(int, input().split()))\nfor _ in range(B):\n\u00a0\u00a0\u00a0\u00a0print('1'*  A+ '0' * (W - A) )\nfor _ in range(H - B):\n\u00a0\u00a0\u00a0\u00a0print('0' * A + '1'* (W - A) )",
    "error_obj":"SyntaxError: invalid non-printable character U+00A0"
  },
  "s742527459":{
    "code_string":"H,W,A,B = list(map(int,input().split()))\nM = [[0]*W for _ in range(H)]\n\n\n\nfor ih in range(H):\n    for iw in range(W):\n        if (ih<B and iw <S) or (ih>=B and iw >= A):\n            M[ih][iw] = 1\n    for i in range(H):\n        print(''.join(list(map(str,M[i]))))",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s514431418":{
    "code_string":"s = list(input())\nk = int(input())\n\nans = 0\n\nfor i in range(len(s)-1):\n    if s[i] == 0:\n        pass\n    elif s[i] == s[i+1]:\n        s[i+1] = 0\n        ans += 1\nans2 = 0\nif s[0] == s[-1]:\n    ans2 = 1\n    s[-1] = 0\nif len(s) == 1:\n    print(k\/\/2)\nelse:\n    print(ans*k + ans2*(k-1))\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s655887370":{
    "code_string":"s = input()\nif s == 'Sunny':\n    result = 'Cloudy'\nelif s == 'Cloudy':\n    result = 'Rainy':\nelse:\n    result = 'Sunny'\n\nprint(result)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s247742554":{
    "code_string":"S = input()\nif S = \"Sunny\":\n  print(\"Cloudy\")\nif S = \"Cloudy\":\n  print(\"Rainy\")\nelse:\n  print(\"Sunny\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s884416703":{
    "code_string":"s=input()\n\n\nif s==\"Sunny\":\n  print(\"Cloudy\")\nelif s==\"Cloudy\":\n  print(\"Rainy\")\nelif s==\"Rainy\":\n  print(\"Sunny)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s351725830":{
    "code_string":"S",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s150045999":{
    "code_string":"S = input()\n\nif S == 'Sunny':\n  print(Cloudy)\n  \nif S == 'Cloudy':\n  print(Rainy)\n  \nif S == 'Rainy':\n  print(Sunny)\n",
    "error_obj":"NameError: name 'Cloudy' is not defined"
  },
  "s343864953":{
    "code_string":"s = int(input())\nl = ['Sunny', 'Cloudy', 'Rainy', 'Sunny']\nprint(l[l.index(s)+1])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'Sunny'"
  },
  "s954123771":{
    "code_string":"S = input()\n\nif S == \"Sunny\"\n    print(\"Cloudy\")\nelif S == \"Cloudy\"\n    print(\"Rainy\")\nelse:\n    print(\"Sunny\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s029851886":{
    "code_string":"s = input()\na = ['Sunny', 'Cloudy', 'Rainy','Sunny', 'Cloudy', 'Rainy']\nprint(a[a.index(s)+1]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s603079103":{
    "code_string":"w=['Sunny', 'Cloudy', 'Rainy']\nprint(w[(w.index(input)+1)%3])",
    "error_obj":"ValueError: <built-in function input> is not in list"
  },
  "s353120916":{
    "code_string":"s=input()\nw=(Sunny,Cloudy,Rainy,Sunny)\nn=w.index(s)\nprint(w[n+1])",
    "error_obj":"NameError: name 'Sunny' is not defined"
  },
  "s665787221":{
    "code_string":"S=input()\nweather=['Sunny','Cloudy','Rainy','Sunny']\nprint(weather[weather.index(S)+1)",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s453193487":{
    "code_string":"# Sunny -> Cloudy -> Rainy -> Sunny ...\n# \u6a19\u6e96\u5165\u529bN\u306fSunny Cloudy Rainy\u306e\u3044\u305a\u308c\u304b\n\nN = input()\n\nif N == \"Sunny\":\n    print(\"Cloudy\"):\nelif N == \"Cloudy\":\n    print(\"Rainy\"):\nelif N == \"Rainy\":\n    print(\"Sunny\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s349321555":{
    "code_string":"S = input()\n\nif S == 'Sunny':\n    print('cloudy')\n\nelif S == 'cloudy':\n    print('Rainy')\n\nelif:\n    print('Sunny')\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s016864289":{
    "code_string":"weather = input()\n\nif weather == 'Sunny':\n    print 'Cloudy'\n\nif weather == 'Cloudy':\n    print 'Rainy'\n    \nif weather == 'Rainy':\n    print 'Sunny'",
    "error_obj":"SyntaxError: Missing parentheses in call to 'print'. Did you mean print('Cloudy')?"
  },
  "s923459924":{
    "code_string":"s = input()\nfor i in range(len(s)):\n  if ans != 0:\n    print('No')\n    exit()\n  if i % 2 == 0:\n    if s[i] == 'R':\n      ans += 1\n  else:\n    if s[i] == 'L':\n      ans += 1\nprint('Yes')\n    ",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s806036024":{
    "code_string":"str = input()\nans = \"Yes\"\nfor i in len(str):\n  if (i + 1) % 2 == 0 and str[i] not in ('L', 'U', 'D'):\n    ans = \"No\"\n  if (i + 1) % 2 == 1 and str[i] not in ('R', 'U', 'D'):\n    ans = \"No\"\n\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s210337856":{
    "code_string":"S = input()\nfor i in range(len(S)+1):\n  if i == len(S):\n    print('Yes')\n    break\n  if S[i] =='U' or S[i] =='D':\n    pass\n  else:\n    if S[i] % 2 ==0:\n      if S[i] == 'R':\n        pass\n      else:\n        print('No')\n        break\n    else:\n      if S[i]== 'L':\n        pass\n      else:\n        print('No')\n        break\n        \n      \n    \n",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s116148329":{
    "code_string":"import sys\nS = list(input())\nS_odd = S[::2]\nS_even = S[1::2]\neasy_odd = ['R','U','D']\neasy_even = ['L','U','D']\n\nprint('Yes') if set(S_odd).issubset(easy_odd) and set(S_even).issubset(easy_even) else \n    print('No'",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s733332310":{
    "code_string":"import sys\n\ns = input()\nfor i in len(s):\n  if i % 2 == 0:\n    if s[i] == \"R\":\n      print(\"No\")\n      sys.exit()\n  else:\n    if s[i] == \"L\":\n      print(\"No\")\n      sys.exit()\nprint(\"Yes\")",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s527388530":{
    "code_string":"S = input()\nO = ['R','U','D']\nE = ['L','U','D']\nng = False\nfor i in range(len(S)):\n  if i % 2 == 0:\n    if S[i] not in O:\n      ng = True\n      break\n  else:\n    if S[i] not in E:\n      ng = True\n      break\nprint('No') if ng print('Yes')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s735683066":{
    "code_string":"a=input()\nif a%2==0:\n  for i in range(int(len(a)\/2)):\n    if a[2*i]==\"R\" or a[2*i]==\"U\" or a[2*i]==\"D\":\n      b=b+1\n    if a[2*i+1]==\"L\" or a[2*i+1]==\"U\" or a[2*i+1]==\"D\":\n      b=b+1\n  if b=len(a):\n    print(\"Yes\")\n  else:\n    print(\"No\")\nif a%2==1:\n  for i in range(int(len(a)\/2)+1):\n    if a[2*i]==\"R\" or a[2*i]==\"U\" or a[2*i]==\"D\":\n      b=b+1\n  for i in range(int(len(a)\/2)):\n    if a[2*i+1]==\"L\" or a[2*i+1]==\"U\" or a[2*i+1]==\"D\":\n      b=b+1\n  if b=len(a):\n    print(\"Yes\")\n  else:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s558734917":{
    "code_string":"S = input()\n\ncheck = True\nfor i, s in enumerate(S):\n  if (i+1)%2 == 0:\n    if not(s == \"L\" or s == \"U\" or s == \"D\"):\n      check = False\n  else:\n    if not(s == \"R\" or s == \"U\" or s =\"D\"):\n      check = False\n\nif check:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s469436775":{
    "code_string":"S=input()\nprint(\"NYoe s\"[len(re.sub(\"[RUD]\",'',S[0::2]))==0==len(re.sub(\"[LUD]\",'',S[1::2]))::2])",
    "error_obj":"NameError: name 're' is not defined"
  },
  "s609788899":{
    "code_string":"odd='RUD'\neven='LUD'\ns=int(input())\nflag=0\nfor i in range(len(s)):\n  a=i+1\n  if a%2==0:\n    if s[i] not in even:\n      flag=1\n      break\n  else:\n    if s[i] not in odd:\n      flag=1\n      break\nif flag==1:\n  print ('No')\nelse:\n  print ('Yes')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'RUDLUDR'"
  },
  "s252124180":{
    "code_string":"S = input()\n\nN = len(S)\n# S\u306e\u5404\u6587\u5b57\u306f'L', 'R', 'U', 'D'\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\n# 1,3,...\u6587\u5b57\u76ee\u304c'L'\u3067\u306a\u304f\u3001\u5076\u6570\u6587\u5b57\u76ee\u304c'R'\u3067\u306a\u3044\u3068\u304d 'Yes'\u3068\u3059\u308b\nfor i in range(N):\n  if (i % 2 == 0 and S[i] == 'L') or (i % 2 == 1 and S[i] == 'R'):\n    ans = 'No'\n    break\n    \nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s382949857":{
    "code_string":"S = str(input())\n\nAns = True\nfor i in range(0, len(S)):\n  if i % 2 == 0:\n    if S[i] == 'L' or S[i] == 'U' or S[i] == 'D':\n    else:\n      Ans = False\n      break\n  if i % 2 != 0:\n    if S[i] == 'R' or S[i] == 'U' or S[i] == 'D':\n    else:\n      Ans = False\n      break\nelse:\n  print('Yes')\n  \nif Ans == False:\n  print('No')",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s655698005":{
    "code_string":"s=list(input())\nfor i in range(len(s)):\n  if i%2==0 and s[i]==\"L\":\n    print(\"No\")\n    sys.exit()\n  if i%2==1 and s[i]==\"R\":\n    print(\"No\")\n    sys.exit()\nprint(Yes)",
    "error_obj":"NameError: name 'Yes' is not defined"
  },
  "s127954112":{
    "code_string":"N, K, Q = list(map(lambda n: int(n), input().split(\" \")))\npoint = [K - Q] * N\nfor i in range(N):\n  c = int(input())\n  point[c - 1] += 1\n\nprint(\"\\n\".join([\"YES\" if p > 0 else \"NO\" for p in point]))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s206303007":{
    "code_string":"inp=list(map(int,input().split()))\nn=inp[0]\nk=inp[1]\nq=inp[2]\nif q<k:\n  for i in range(n):\n    print ('Yes')\nelse:\n  arr=[k-q]*(n)\n  z=[]\n  for i in range(n):\n    x=int(input())\n    arr[x-1]+=1\nfor i in range(len(arr)):\n  if arr[i]>0:\n    print ('Yes')\n  else:\n    print ('No')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s896372632":{
    "code_string":"def i():\n\treturn int(input())\ndef i2():\n\treturn map(int,input().split())\ndef s():\n\treturn str(input())\ndef l():\n\treturn list(input())\ndef intl():\n\treturn list(int(k) for k in input().split())\n\nn,k,q = i2()\nls = [k-q]*n \nfor _ in range(q):\n\ta = i()\n\tls[a-1] += 1 \n\nfor _ in range(n):\n\tif ls[j] > 0:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s798116675":{
    "code_string":"n,k,q = map(int, input().split())\n\n-----\nn\u3055\u3093\u304cc\u554f\u6b63\u89e3\u3057\u305f\u3068\u304d\u3001\u52dd\u3061\u629c\u3051\u308b\u306b\u306f\nq - c > k\n\n-----\n\na = [0] * n\n\nfor i in range(q):\n  A = int(input())\n  a[A-1] += 1\n\nfor i in a:\n  if q - i > k:\n    print('Yes')\n  else:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s069137752":{
    "code_string":"n, k, q = map(int, input().split())\nA = [int(i) for i in input().split()]\n\nstart = [k - q] * n\nfor i in range(q):\n    start[A[i]] += 1\n\nfor i in range(n):\n    if start[i] > 0:\n        print('Yes')\n    else:\n        print('No')",
    "error_obj":"IndexError: list index out of range"
  },
  "s093367025":{
    "code_string":"n, k, q = map(int, input().split())\npoint = [0] * (n+1)\nfor _ in range(n):\n  a = int(input())\n  point[a] += 1\n\nfor i in range(1, n+1):\n  if k + point[i] > q:\n    print('Yes')\n  else:\n    print('No')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s361929491":{
    "code_string":"\"\"\"\n- N players, K points each player has, Q correct answers\n- Substruct Q from K and add score to each players\n\"\"\"\n\nN,K,Q = map(int,input().split())\nA = (int(x) for x in open(0).input().split())\n\nscore = [K-Q] * (N+1) \nfor x in A:\n    score[x] += 1\n\nans = '\\n'.join('No' if x <= 0 else 'Yes' for x in score[1:])\nprint(ans)\n",
    "error_obj":"AttributeError: '_io.TextIOWrapper' object has no attribute 'input'"
  },
  "s772170499":{
    "code_string":"import sys\nimport numpy as np\n\n\ndef main(stdin):\n    N, K, Q = stdin[:3]\n    ans = np.full(N + 1, K - Q, dtype=np.int64)\n    for i in stdin[3:]:\n        ans[i] += 1\n    ans = np.where(ans > 0, 'Yes', 'No')\n    return ans[1:]\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    import numba\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('main', 'i8[:](i8[:],)')(main)\n    # b1: bool, i4: int32, i8: int64, double: f8, [:], [:, :]\n    cc.compile()\nelse:\n    from my_module import main\n    stdin = np.array([int(_) for _ in open(0).read().split()])\n    print(*main(stdin), sep='\\n')\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s454694782":{
    "code_string":"N, K, Q = map(int,input().split())\n\nif K > Q:\n    ans = [\"Yes\" for i in range(N)]\nprint(ans)\nexit()\n\nT = [0 for i in range(N)]\nt = Q - K\n\nfor i in range(Q):\n    a = int(input())\n    T[a] += 1\n\nfor i in range(N):\n    if T[i] > t:\n         print(\"Yes\")\n    else:\n        print(\"No\")",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s902498696":{
    "code_string":"eople,point,quiz = map(int,input().split())\nan = [int(input()) for _ in range(quiz)]\neach_p = [point-quiz] * people\n\nfor x in an:\n    each_p[x-1] += 1\n\nfor y in each_p:\n    if y <= 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n",
    "error_obj":"NameError: name 'people' is not defined"
  },
  "s189559664":{
    "code_string":"n,k,q=map(int,input().split())\n\nfor i in range(1,n+1):\n  ans=k\n  for j in range(q):\n    que=int(input())\n    if que!=i:\n      ans-=1\n    if ans<=0:\n      break\n  if ans<=0:\n    print(\"No\")\n  else:\n    print(\"Yes\")\n  \n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s332116113":{
    "code_string":"from heapq import heapify,heappush,heappop\n\ndef main():\n    N,M = map(int,input()split())\n    A = [-x for x in map(int,input().split())]\n    heapify(A)\n    for i in range(M):\n        tmp = heappop(A)\n        tmp2 = tmp\/\/2\n        heappush(A,tmp2)\n    ans = 0\n    for i in range(N):\n        ans += A[i]\n\n    ans = abs(ans)\n    return ans\n\nprint(main())    \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s419649103":{
    "code_string":"N, M = map(int, input().split())\nA = list(map(int, input().split()))\nfor i in range(0,M):\n    A[A.index(max)]=int(A[A.index(max)])\n\nprint(sum(A))",
    "error_obj":"ValueError: <built-in function max> is not in list"
  },
  "s150434166":{
    "code_string":"def main():\n    n, m = map(int, input().split())\n    a = [int(x)*-1 for x in input().split()]\n    ans = sum(a)*-1\n    diff = 0\n    \n    heapify(a)\n    for _ in range(1, m+1):\n        _h_a = heappop(a) * -1\n        diff += _h_a - _h_a \/\/ 2\n        heappush(a, (_h_a \/\/ 2)*-1)\n    ans -= diff\n    print(ans)\n    \nif __name__ == '__main__':\n    main()",
    "error_obj":"NameError: name 'heapify' is not defined"
  },
  "s122320881":{
    "code_string":"def getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\ndef rand_ints_nodup(ran1, ran2, rantime):\n  ns = []\n  while len(ns) < rantime:\n    n = random.randint(ran1, ran2)\n    if not n in ns:\n      ns.append(n)\n  return sorted(ns)\n\ndef rand_query(ran1, ran2, rantime):\n  r_query = []\n  while len(r_query) < rantime:\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n    if not n_q in r_query:\n      r_query.append(n_q)\n  return sorted(r_query)\n\nfrom collections import defaultdict, deque, Counter\nfrom sys import exit\nfrom decimal import *\nimport heapq\nimport math\nfrom fractions import gcd\nimport random\nimport string\nimport copy\nfrom itertools import combinations, permutations, product\nfrom operator import mul\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\nsys.setrecursionlimit(1000000000)\nmod = 10 ** 9 + 7\n\n\n#############\n# Main Code #\n#############\n\nN = getN()\nS = '0' + input()\n\nlista = defaultdict(int)\n\nfor i in range(N \/\/ 2, -1, -1):\n    for j in range(1, N - i + 1):\n        opt = S[j:i + j + 1]\n        if lista[opt] == 0:\n            lista[opt] = i + j\n        else:\n            if lista[opt] < j:\n                print(len(opt))\n                exit()\nprint(0)",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s539137160":{
    "code_string":"import sys\nimport numpy as np\nfrom numba import njit\n\ndef main(N, S, dp):\n    ans = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            dp[i,j] = min(j - i, dp[i - 1,j - 1] + 1) if S[i] == S[j] else 0\n        ans = max(ans, np.max(dp[i]))\n    return ans\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    import numba\n    from numba.pycc import CC\n    i8 = numba.int64\n    cc = CC('my_module')\n\n    def cc_export(f, signature):\n        cc.export(f.__name__, signature)(f)\n        return numba.njit(f)\n\n    main = cc.export(main, (i8,i8[:],i8[:,:],))\n    cc.compile()\n\nfrom my_module import main\n\nN = int(input())\nS = np.array([ord(_) for _ in input()])\ndp = np.zeros((N + 1, N + 1), dtype=int)\nprint(main(N, S, dp))\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s696037644":{
    "code_string":"import numpy as np\nimport numba\n@numba.jit\ndef solve(n,s):\n    dp=np.zeros((n+1,n+1),dtype=np.int16)\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i]==s[j]:\n                if dp[i][j]<j-i:\n                    dp[i+1][j+1]=dp[i][j]+1\n    print(np.amax(dp))\nn=int(input())\ns=input()\nsolve(n,s)",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s538721106":{
    "code_string":"import sys\nimport numpy as np\n\ndef main(N, S, dp):\n    ans = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            dp[i, j] = min(j - i, dp[i - 1, j - 1] + 1) if S[i] == S[j] else 0\n        ans = max(ans, np.max(dp[i]))\n    return ans\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    import numba\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('main', 'i8(i8,i8[:],i8[:,:])')(main)\n    # b1: bool, i4: int32, i8: int64, double: f8, [:], [:, :]\n    cc.compile()\nelse:\n    try:\n        from my_module import main\n    except:\n        1\n    dp = np.zeros((N + 1, N + 1), dtype=int)\n    N = int(input())\n    S = np.array([ord(_) for _ in input()])\n    print(main(N, S, dp))\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s099657832":{
    "code_string":"def numba_compile(numba_config):\n    import os, sys\n    if sys.argv[-1] == \"ONLINE_JUDGE\":\n        from numba import njit\n        from numba.pycc import CC\n        cc = CC(\"my_module\")\n        for func, signature in numba_config:\n            vars()[func.__name__] = njit(signature)(func)\n            cc.export(func.__name__, signature)(func)\n        cc.compile()\n        exit()\n    elif os.name == \"posix\":\n        exec(f\"from my_module import {','.join(func.__name__ for func, _ in numba_config)}\")\n        for func, _ in numba_config:\n            globals()[func.__name__] = vars()[func.__name__]\n    else:\n        from numba import njit\n        for func, signature in numba_config:\n            globals()[func.__name__] = njit(signature, cache=True)(func)\n        print(\"compiled!\", file=sys.stderr)\n\nimport sys\nimport numpy as np\n\ndef z_algo(S):  # [z_algo, \"i8[:](i8[:])\"],\n    # Z-algoirhm  O(n)\n    # Z[i] := S \u3068 S[i:] \u3067 prefix \u304c\u4f55\u6587\u5b57\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\n    # \u691c\u8a3c: https:\/\/atcoder.jp\/contests\/abc150\/submissions\/15829530\n    i, j, n = 1, 0, len(S)\n    Z = np.zeros(S.shape, dtype=np.int64)\n    Z[0] = n\n    while i < n:\n        while i+j < n and S[j] == S[i+j]:\n            j += 1\n        if j == 0:\n            i += 1\n            continue\n        Z[i] = j\n        d = 1\n        while i+d < n and d+Z[d] < j:\n            Z[i+d] = Z[d]\n            d += 1\n        i += d\n        j -= d\n    return Z\n\ndef solve(N, S):\n    ans = 0\n    for i in range(N):\n        Z = z_algo(S[i:])\n        for idx_Z, z in enumerate(Z):\n            an = min(z, idx_Z)\n            ans = max(ans, an)\n    return ans\n\nnumba_compile([\n    [z_algo, \"i8[:](u1[:])\"],\n    [solve, \"i8(i8,u1[:])\"]\n])\n\ndef main():\n    N = int(sys.stdin.buffer.readline())\n    S = np.frombuffer(sys.stdin.buffer.readline(), dtype=np.uint8).copy()\n    ans = solve(N, S)\n    print(ans)\n\nmain()\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s751679817":{
    "code_string":"from typing import List\n\n\nclass RollingHash:\n    __slots__ = [\"source\", \"length\", \"base\", \"mod\", \"hash\", \"power\"]\n\n    def __init__(self, source: str, base: int = 1007, mod: int = 10 ** 9 + 7):\n        self.source = source\n        self.length = len(source)\n        self.base = base\n        self.mod = mod\n        self.hash = self._get_hash_from_zero()\n        self.power = self._get_base_pow()\n\n    def _get_hash_from_zero(self) -> List[int]:\n        \"\"\"Compute hash of interval [0, right).\"\"\"\n        hash_from_zero = [0] * self.length\n        cur = 0\n        for i, c in enumerate(self.source):\n            cur = (cur * self.base + ord(c)) % self.mod\n            hash_from_zero[i] = cur\n        return hash_from_zero\n\n    def _get_base_pow(self) -> List[int]:\n        \"\"\"Compute mod of power of base.\"\"\"\n        power = [1] * self.length\n        cur = 1\n        for i in range(self.length):\n            cur *= self.base % self.mod\n            power[i] = cur\n        return power\n\n    def get_hash(self, left: int, right: int):\n        \"\"\"Compute hash of interval [left, right).\"\"\"\n        return (\n            self.hash[right] - self.hash[left] * self.power[right - left]\n        ) % self.mod\n\n\ndef abc141_e():\n    # https:\/\/atcoder.jp\/contests\/abc141\/tasks\/abc141_e\n    N = int(input())\n    S = input().rstrip()\n    rh = RollingHash(S)\n    ok, ng = 0, N \/\/ 2 + 1\n    while ng - ok > 1:\n        mid = (ok + ng) \/\/ 2\n        flg = False\n        memo = set()\n        for i in range(N - 2 * mid + 1):\n            memo.add(rh.get_hash(i, i + mid))\n            if rh.get_hash(i + mid, i + 2 * mid) in memo:\n                flg = True\n                break\n        if flg:\n            ok = mid  # next mid will be longer\n        else:\n            ng = mid  # next mid will be shorter\n    print(ok)  # max length of substrings appeared twice or more\n\n\nif __name__ == \"__main__\":\n    abc141_e()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s143675442":{
    "code_string":"print(int(input()**3))",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s344852892":{
    "code_string":"N = import()\noutput = N*N*N\nprint(output)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s300895730":{
    "code_string":"print((input())^3)",
    "error_obj":"TypeError: unsupported operand type(s) for ^: 'str' and 'int'"
  },
  "s226178625":{
    "code_string":"import itertools\n    N = int(input())\n    print(sum([1 for i,j,k in itertools.product(range(1,N+1),range(1,N+1),range(1,N+1))]))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s509503794":{
    "code_string":"print=(input()**3)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s670951804":{
    "code_string":"#C - Maximal Value\nN = int(input())\nB = list(map(int,input().split()))\nA = [B[0]]\nfor i in range(1,N-1):\n    if B[i] > B[i-1]:\n        A.append(B[i-1])\n    else:\n        A.append(B[i])\nA.append(B[-1])\nprint(sum(A))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s804830064":{
    "code_string":"s=int(input())\n\nprint(n**3)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s700170898":{
    "code_string":"print(int(input()**3))",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s922480019":{
    "code_string":"n = int(input)\nprint(n*n*n)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s250145116":{
    "code_string":"# -*- coding: utf-8 -*-\nfrom itertools import combination_with_replacement\n\nn = int(input())\nprint(len(list(combination_with_replacement(n, 3))))\n",
    "error_obj":"ImportError: cannot import name 'combination_with_replacement' from 'itertools' (unknown location)"
  },
  "s225346143":{
    "code_string":"N = input()\nprint(N ** 3)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s217578811":{
    "code_string":"prnt(int(input())**3)",
    "error_obj":"NameError: name 'prnt' is not defined"
  },
  "s832267241":{
    "code_string":"n=int(input())\nA=list(map(int,input().split()))\nB=list(map(int,input().split()))\nC=list(map(int,input().split()))\nd=sum(B)\nfor i in range(n-1):\n  if A[i+1]-A[i]==1:\n    d+=B[A[i-1]]\nprint(d)",
    "error_obj":"IndexError: list index out of range"
  },
  "s207312083":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\n\naddans=0\n\nfor i in range(1,n) :\n  if a[i-1]+1 == a[i] :\n    addans += c[a[i-2]]\n    print(addans)\nprint(sum(b)+addans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s392083695":{
    "code_string":"N = int(input())\nA = list(map(lambda a: int(a), input().split(\" \")))\nB = list(map(lambda b: int(b), input().split(\" \")))\nC = list(map(lambda c: int(c), input().split(\" \")))\n\nsatis = 0\n\nfor i in range(len(A)):\n  satis += B[A[i]]\n  if i >= 1 and A[i] - A[i-1] == 1:\n    satis += C[i-1]\n\nprint(satis)",
    "error_obj":"IndexError: list index out of range"
  },
  "s633651166":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\nB=list(map(int,input().split()))\nC=list(map(int,input().split()))\ns=0\nfor i in range(N):\n  s+=B[A[i]-1]\n  if i!=0 and A[i-1]+1==A[i]:\n    s+=C[i]\nprint(s)",
    "error_obj":"IndexError: list index out of range"
  },
  "s283112544":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\np=O\nfor i in range(n):\n  p+=b[a[i]-1]\n  if i>=1 and a[i]-a[i-1]==1:\n    p+=c[a[i-1]-1]\nprint(p)",
    "error_obj":"NameError: name 'O' is not defined"
  },
  "s894680848":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\nB=list(map(int,input().split()))\nC=list(map(int,input().split()))\n\n\nans=0\nfor i in range(N):\n  ans+=B[A[i]-1]\n  if(i>=1):\n    if(A[i]==A[i-1]+1):\n      ans+=C[i]\n      \nprint(ans)\n  \n",
    "error_obj":"IndexError: list index out of range"
  },
  "s772843733":{
    "code_string":"N = int(input())\nA = [int(input()) for i in range(N)]\nB = [int(input()) for i in range(N)]\nC = [int(input()) for i in range(N-1)]\n\nans = 0\n\nfor i in range(N):\n  ans += B[A[i]-1]\n  if i >0 and A[i] - A[i-1] ==1:\n    ans += C[A[i]-2]\n        \nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1 2'"
  },
  "s515464500":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nres = 0\nfor i in range(N - 1):\n    res += B[i]\n    if A[i] + 1 == A[i + 1]:\n\t\tres += C[A[i] - 1]\nprint(res)\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s941160653":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\n\nbef=a[0]-1\nman=b[0]\n\nfor i in a[1:]:\n  if i-1=bef+1:\n    man+=c[bef]\n  man+=b[i-1]\n  bef=i-1\nprint(man)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s730469120":{
    "code_string":"n = int(input())\na = map(int, input().split())\nb = sum(map(int, input().split()))\nc = map(int, input().split())\ns = 0\nfor i in range(n-1):\n  if a[i+1] - a[i] == 1:\n    s += c[a[i] - 1]\nprint(b + s)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s467964256":{
    "code_string":"def Input():\n    return mapt(int, input().split(\" \"))\n\ndef main():\n    n = int(input())\n    b = Input()\n    data = 0\n    for i in range(n-1):\n        if i == 0:\n            data += b[i]\n            continue\n        data += min(b[i], b[i-1])\n    data += b[-1]\n    print(data)\nmain()",
    "error_obj":"NameError: name 'mapt' is not defined"
  },
  "s603730300":{
    "code_string":"n=int(input())\nb=list(map(int,input().split()))\na=[b[0],b[n-2]]\nfor i in range(n-1):\n  a.append(min(a[i+1],a[i+2]))\nprint(sum(a))\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s038541310":{
    "code_string":"n = int(input())\nb = list(map(int,input().split()))\na = [b[0]]\n\nfor i in range(n - 1):\n    a.append(min(b[i],b[i+1]))\n\na.append(b[-1])\nprint(sum(a))",
    "error_obj":"IndexError: list index out of range"
  },
  "s803834017":{
    "code_string":"n = int(input())\nb = [int(i) for i in input().split()]\n\na =[b[0]]\n\nfor x in range(n-1):\n  s = min(b[x],b[x+1])\n  a.append(s)\n  \na.append(b[-1])\n\nprint(sum(a))",
    "error_obj":"IndexError: list index out of range"
  },
  "s959592153":{
    "code_string":"n=int(input())\nbb=list(map(int,input().split()))\naa=[0]*n\nfor i in range(n-1):\n  aa[i]=max(a[i],bb[i])\n  aa[i+1]=max(a[i+1],bb[i])\nprint(sum(aa))",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s899704355":{
    "code_string":"n = int(input())\n\nb = list(map(int, input().split()))\n\na[0]=b[0]\na[n-1]=b[n-2]\n\nfor i in range(1, n-1):\n  if b[i] >= b[i-1]:\n    a[i] = b[i-1]\n  else:\n    a[i] = b[i]\n\nc = 0\n\nfor i in range(n):\n  c += a[i]\nprint(c)\n  \n    \n  \n  ",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s537481711":{
    "code_string":"n = int(input())\nb = list(map(int,input().split()))\n\ndp = [10**8]*# NOTE:\n\nfor i in range(n-1):\n    if dp[i] > b[i] :\n        dp[i] = b[i]\n    if dp[i+1] > b[i] :\n        dp[i+1] = b[i]\n\nprint(sum(dp))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s766528498":{
    "code_string":"input_data = input().split(\"\\n\")\nN = int(input_data[0])\nls = [int(b) for b in input_data[1].split()]\nif len(ls) == 1:\n  print(ls[0]*2)\nelse:\n  first = ls[0]\n  als = [ls[0]]\n\n  for n in range(1, N-1):\n    als.append(min(ls[n-1], ls[n]))\n  als.append(ls[-1])\n  print(sum(als))",
    "error_obj":"IndexError: list index out of range"
  },
  "s131292799":{
    "code_string":"n = int(input())\nb = list(map(in,input().split()))\nans = b[0] + b[-1]\nfor i in range(n-2):\n  ans+=min(b[i],b[i-1])\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s342223233":{
    "code_string":"N, K = map(int,input().split())\nS = input()\n\n#\u30b0\u30eb\u30fc\u30d7\u306e\ncnt = 1\n\nfor i in range(N-1):\n    if S[i] != S[i+1]:\n        cnt += 1\n\n\nprint(N - max(1, cnt - 2*k))\n",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s935559002":{
    "code_string":"N,K = map(int,input().split())\nS = input()\n\nh = 0\nfor i in range(len(S)-1):\n  if s[i] == S[i+1]:\n    h += 1\nh += 2*K\nprint(min(N-1, h))\n",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s044503491":{
    "code_string":"n,k = map(int,input().split())\ns = list(input())\n\nans  = 0\ntran = 0\n\nfor i in range(n):\n    chk = s[i] + s[i+1]\n\n    if chk == 'LR' or chk == 'RL':\n        tran += 1\n    else:\n        ans += 1\n\nif k*2 >= tran:\n    print(n-1)\nelse:\n    print(tran+(k*2))",
    "error_obj":"IndexError: list index out of range"
  },
  "s672566355":{
    "code_string":"n, k = map(int, input().split())\ns = input()\npre = s[0]\nrsans = s[0]\nfirst = s[0]\n\nif s[0] == \"R\":\n    second = \"L\"\nelse:\n    second = \"R\"\n\nfor i in s[1:]:\n    if i == second and k > 0:\n        ans = ans + first\n        pre = i\n    elif i == first and pre == second:\n        k -= 1\n        ans = ans + i\n        pre = i\n    elif k == 0:\n        ans = ans + i\n    elif i == first and pre == first:\n        ans = ans + i\n\npre = \"0\"\ncnt = 0\n\nfor i in ans:\n    if i == pre:\n        cnt += 1\n    pre = i\n\nprint(cnt)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s058456808":{
    "code_string":"q_input = input()\n\na, b = map(int, q_input.split(' '))\n\nans = int((10-1+a-2)\/(a-1))\n\nprint(ans)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'CSS'"
  },
  "s850610189":{
    "code_string":"s = input()\nt = input()\nans = 0\nfor i in range(3):\nif s[i] == t[i]:\n  ans += 1\nprint(ans)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s125765216":{
    "code_string":"A, B = map(int, input().split())\n\ncount = 0\navail = 1\n\nwhile avail < B:\n  avail -= 1\n  count += 1\n  avail = +A\n\nprint(count)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'CSS'"
  },
  "s759808800":{
    "code_string":"s=input()\nt=input()\nfor i in range(3)\nans=0\nif s[i]==t[i]:\n  ans+=1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s747911511":{
    "code_string":"f = inout()\nr = input()\n\ncnt = 0\nfor i in range(3):\n  if f[i] == r[i]:\n    cnt += 1\nprint(cnt)",
    "error_obj":"NameError: name 'inout' is not defined"
  },
  "s694576581":{
    "code_string":"s = input().split()\nt = input().split()\n\nans = 0\nfor i in range(3):\n    if s[i] == t[i]:\n        ans += 1\n\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s079569065":{
    "code_string":"s=input()\nt=input()\nc=0\nfor i in (2):\n  if s[i]==t[i]:\n    c+=1\nprint(c)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s629868458":{
    "code_string":"perint(\"TEST\")",
    "error_obj":"NameError: name 'perint' is not defined"
  },
  "s391283757":{
    "code_string":"s = int(input())\nt = int(input())\ncount = 0\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        count += 1\n        \nprint(count)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'CSS'"
  },
  "s416733004":{
    "code_string":"#ABC090\ns = input()\nt = input()\nans = 0\nif s[0]=t[0]:\n    ans+=1\nif s[1]=t[1]:\n    ans+=1\nif s[2]=t[2]:\n    ans+=1\nprint(ans)    ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s225866356":{
    "code_string":"a=input().split()\nb=input().split()\ncount=0\nfor i in range(3):\n  if a[i]==b[i]:\n    count+=1\nprint(count)\n  ",
    "error_obj":"IndexError: list index out of range"
  },
  "s448823249":{
    "code_string":"s,t=input().split()\nans=0\nfor i in range(3):\n    if s[i]==t[i]:\n        ans+=1\nprint(ans)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s007926466":{
    "code_string":"#B - Power Socket\nA,B = list(map(int,input().split()))\n\ncount = 0\ntotal_plug = 1\nfor i in range(1,100):\n    count += 1\n    total_plug += (A - 1)\n    if B <= total_plug:\n        break\n        \nprint(count)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'CSS'"
  },
  "s451835147":{
    "code_string":"S=input()\nT=input()\n\nans=0\n\nfor in in range(3):\n    if S[i]==T[i]:\n        ans+=1\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s108933017":{
    "code_string":"s=input()\nt=input()\n\nans=0\ni=0\nwhile i<len(s):\n\n    if s[i]==t[i]:\n        ans+=1\n\nprint(ans)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s334396135":{
    "code_string":"days = list(str(input()))\ndays_real = list(str(input()))\nfor i in range(3):\n  if days[i] == days_real[i]:\n    count += 1\nprint(count)",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s409203214":{
    "code_string":"s = input()\nt = input()\nans = 0\n\nfor i in range(s):\n  ans += s[i] == t[i]\n\nprint(ans)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s324936819":{
    "code_string":"S=str(input())\nT=int(input())\nans=0\nfor i in range (3)\n\tif S[i]==T[i]:\n    \tans=ans+a\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s746830560":{
    "code_string":"a=input()\nb=input()\ncount=0\nfor i in range(3):\n  if a[i]=b[i]:\n    count+=1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s579953341":{
    "code_string":"import math\nN = int(input())\nprint(N*(N-1)\/2)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'CSS'"
  },
  "s238026936":{
    "code_string":"S = input()\nT = input()\ncnt = 0\nfor i in S:\n  if S[i] == T[i]:\n    cnt += 1\nprint(cnt)",
    "error_obj":"TypeError: string indices must be integers"
  },
  "s437562175":{
    "code_string":"S = input()\nT = input()\nans = 0\nfor i in range(N):\n  if S[i] == T[i]:\n    ans +=1\nprint(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s606270770":{
    "code_string":"A, B = map(int, input().split())\n\nans = 0\ntaps = 1\n\nwhile True:\n\tif taps >= B:\n\t\tprint(ans)\n\t\tbreak\n\ttaps += (A - 1)\n\tans += 1\nA, B = map(int, input().split())\n\nans = 0\ntaps = 1\n\nwhile True:\n\tif taps >= B:\n\t\tprint(ans)\n\t\tbreak\n\ttaps += (A - 1)\n\tans += 1\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s253034791":{
    "code_string":"A,B=map(int,input().split())\nprint(math.ceil((B-1)\/(A-1)))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s341936931":{
    "code_string":"A, B = map(int, split())\nnum = B \/ A\n\nif B == 0 or B == 1:\n  print(int(0))\nelif B % A == 0:\n  print(int(num))\nelse:\n  print(int(num + 1))",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s669555051":{
    "code_string":" = input().split()\nsyou = x[0] \/ x[1]\namari = x[0] % x[1]\n\nif(amari > 0 ):\n    print(syou+1)\nelse:\n    print(syou)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s668850735":{
    "code_string":"a,b=map(int,input().split())\nif b>a:if b%a>0:print(b\/\/a+1)\nelif b<=a:print(1)\nelse:print(b\/\/a)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s710196176":{
    "code_string":"a,b=map(int,input().split())\nans,num=0,1:\nwhile num<b:\n    num-=1\n    num+=a\n    ans+=1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s503734146":{
    "code_string":"a,b=input2()\ncount=1\n\nfor i in range(1,21):\n\tcount=count-1+a\n\tif count>=b:\n\t\tprint(i)\n\t\tbreak",
    "error_obj":"NameError: name 'input2' is not defined"
  },
  "s471649417":{
    "code_string":"#include <iostream>\nusing namespace std;\nint main(void){\n    int a,b;\n    cin>>a>>b;\n    int x=0;\n    while(x*(a-1)+1<b){\n        x++;\n    }\n    cout<<x<<endl;\n}\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s366409750":{
    "code_string":"import math\na,b = list(map(int, input().split())\nif a > b:\n\tprint(1)\nelse:\n\tprint(math.ceil(b\/a))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s229064829":{
    "code_string":"g = a - 1\nd, r = divmod(b - 1, g)\nif r == 0:\n    print(d)\nelse:\n    print(d + 1)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s652009067":{
    "code_string":"a, b = map(input().split(\" \"))\ni = 1\nwhile i >=1:\n  d = (a-1)*i +1\n  if d >= b:\n    print(i)\n    break",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s989875322":{
    "code_string":"A,B = int(input())\nif(A%B == 0):\n    print(B\/A)\nelse:\n    print(B\/\/A+1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 10'"
  },
  "s026536119":{
    "code_string":"a, b = map(int, input().split())\n\nwhile n*(a-1)+1 < b:\n  n += 1\n\nprint(n)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s408504754":{
    "code_string":"a, b = map(int, input().split())\nresult = 0\nwhile result * (a - 1) + 1 > b:\n  result ++\nprint(str(result))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s406489263":{
    "code_string":"A,B= map(int, input().split())\nnow_sum = A\nans = 1\nwhile True:\n     if now_sum >= B:\n         print(ans)\n     now_sum += A-1\n     ans += 1\nprint(ans)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s541484736":{
    "code_string":"a, b =map(int,input().split())\nanswer = 1\nnum = 0\nwhile (answer < b) :\n  anwer += a - 1\n  num += 1\n  \nprint(num)\n",
    "error_obj":"NameError: name 'anwer' is not defined"
  },
  "s162051471":{
    "code_string":"a,b=map(int,input().split())\nans=0\nfor i in rnage(0,b,a-1):\n  ans+=1\nprint(ans+1)",
    "error_obj":"NameError: name 'rnage' is not defined"
  },
  "s629095919":{
    "code_string":"import math\nA,B = map(int,input().split())\n\nprint(mach.ceil((B-1)\/(A-1)))",
    "error_obj":"NameError: name 'mach' is not defined"
  },
  "s169093229":{
    "code_string":"A, B = map(int, input().split())\n\n# \u96fb\u6e90\u30bf\u30c3\u30d7\u306e\u500b\u6570\u3092a, \u5dee\u8fbc\u53e3\u306e\u500b\u6570\u3092num\u3068\u304a\u304f \na = 0\nnum = 1\nwhile num < B:\n  num -= 1\n  num += a\n  ans += 1\n\nprint(a)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s868500307":{
    "code_string":"A,B=input().split()\nimport math\nprint(math.ceil((B-1)\/A))\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s189248075":{
    "code_string":"a, b = [int(i) for i in input().split()]\nif b == 1:\n    print(0)\n    return\nn = (b-2) \/ (a-1)\nprint(n+1)",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s842109962":{
    "code_string":"# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\na, b = map(int, input().split())\nx = ((1-b)\/\/(a-1))\n# \u51fa\u529b\nprint(\"{}\".format(-x)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s825542212":{
    "code_string":"inputs = input()\na, b = int(inputs.split(' '))\na * n - (n - 1) >= b\nprint(int((b + 1) \/ (a -1))\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s967156119":{
    "code_string":"a,b = map(int, input())\n\nb - 1 = x * (a - 1)\n\nif (b-1)%(a-1) == 0:\n  print((b-1)\/\/(a-1))\nelse:\n  print((b-1)\/\/(a-1) + 1)",
    "error_obj":"SyntaxError: cannot assign to operator"
  },
  "s089946023":{
    "code_string":"a,b=map(int,input().split())\n\nn=1\nwhile (a-1)n+1 <= b:\n  n+=1\n  \nprint(n)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s756450805":{
    "code_string":"def solve(a,b):\n  def needTaps(a,b,holes=1,res=0):\n    if holes >= b:\n      return res\n    elif:\n      return needTaps(a,b,holes+a-1,res+1)\n    \n  return needTaps(a,b)\n\na,b=map(int,input().split())\nprint(solve(a,b))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s174565188":{
    "code_string":"# coding: utf-8\nA, B = map(int, input().split())\nB = B-A\nfor i in range(20):\n\tif B<=0:\n    \tprint(i+1)\n    \tbreak()\n    B=B-A+1",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s773367881":{
    "code_string":"n = list(map(int, input().split(' '))\nprint(-(-n[1] + 1) \/\/ (n[0] -1))\n         ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s504988087":{
    "code_string":"A,B = map(int, input().split())\nif B==1:\n  print(0)\nelse if B<A:\n  print(1)\nelse:\n  print(B\/\/(A-1))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s229329815":{
    "code_string":"m, n = input().split()\nm, n = int(m), int(n)\n \ntot = 0\na = 1\nwhile a<n:\n  a-=1\n  a+=m\n  tot+=1\n \nprint(c)",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s778056778":{
    "code_string":"a,b = map(int,input().split())\nif b==1:\n  print(0)\n  exit()\nb -= a\nelif b%a == 0:\n  print(b\/\/a+1)\nelse:\n  print(b\/\/a + 2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s417857576":{
    "code_string":"min_tap = 0\nif B <= A:\n    min_tap = 1\nelse:\n    min_tap =math.ceil((B-A)\/(A-1))+1\nprint(int(min_tap))",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s816973708":{
    "code_string":"a,b = map(int. input().split())\nprint((b-0.1)\/\/a+1)",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s674735942":{
    "code_string":"N = int(input())\nH = map(int, input().split())\n\ncount = []\nfor i in range(len(H)-1):\n  count.append(0)\n  if H[i] > H[i+1]:\n    count[i] = 1\n    \nS = str(count).split('0')\nL = map(len, S)\nprint(max(L))",
    "error_obj":"TypeError: object of type 'map' has no len()"
  },
  "s049549459":{
    "code_string":"n = int(input())\nheights = list(map (int, input().split()))\n\ncnt_list = []\nfor i in range(len(heights)):\n  cnt = 0\n  while True:\n    j = i+1\n    if heights[j] <= heights[i]:\n      cnt += 1\n    else:\n      break\n  cnt_list.append(cnt)\n\ncnt_list.sort(reverse=True)\nans = cnt_list[0]\n\nprint(ans)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s244648840":{
    "code_string":"N=int(input())\nA=list(map(int,inpu().split()))\nbef=99999999999999\ncount=0\nfor i in range(N):\n  l=A.pop()\n  if l > bef:\n    count +=1\n  else:\n    count=0\n  if max<=count:\n    max=count\n  bef=l\nprint(max)\n    ",
    "error_obj":"NameError: name 'inpu' is not defined"
  },
  "s699784042":{
    "code_string":"N = int(input())\nN_List = list(map(int,input().split()))\nmaxct = 0\nfor i in range(N-1):\n    if N_List[i] >= N_List[i+1]:\n        ct += 1\n        if (i == N - 2) & (ct > maxct):\n            maxct  = ct\n    else:\n        if maxct < ct:\n            maxct = ct\n            ct = 0\n\nprint(maxct)\n",
    "error_obj":"NameError: name 'ct' is not defined"
  },
  "s601007290":{
    "code_string":"n = int(input())\nnums = list(map(int, input.split('')))\ncount = 0\ncount2 = count\nfor i in range(n-1):\n  if nums[i] >= nums[i+1]:\n    count += 1\n  else:\n    count2 = max([count, count2])\n    count = 0\nprint(max([count, count2]))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s684532298":{
    "code_string":"N = int(input())\nH = map(int,input().split())\nm = 0\nc = 0\nfor i in range(N-1):\n  if H[i] >= H[i+1]:\n    c+=1\n  else:\n    m = max(m,c)\n    c = 0\nprint(m)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s374852986":{
    "code_string":"def Input():\n    return map(int, input().split(\" \"))\n\n\ndef main():\n    n = int(input())\n    h = list(reversed(Input()))\n    count = 0\n    ans = 0\n    for i in range(n-1):\n        if h[i] <= h[i+1]:\n            count += 1\n        else:\n            ans = max(ans, count)\n            count = 0\n    print(ans)\nmain()",
    "error_obj":"TypeError: 'map' object is not reversible"
  },
  "s570609927":{
    "code_string":"input()\ntowers = list(map(int, input().split()))\n\nans = []\ncount = 0\nfor x in range(len(towers)-1):\n  if towers[x] >= towers[x+1]:\n    count+=1\n  else:\n    ans.append(count)\n    count = 0\n    \nprint(ans.max())",
    "error_obj":"AttributeError: 'list' object has no attribute 'max'"
  },
  "s645309482":{
    "code_string":"n=int(input())\nh=map(int, input().split())\ncur=[0]*n\nfor i in range(1,n):\n    if h[i]<=h[i-1]:\n        cur[i]=cur[i-1]+1\nprint(max(cur))\n",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s323674025":{
    "code_string":"xN=int(input())\nH=[int(x) for x in input().split()]\ncur=[0]*N\nfor i in range(N):\n    if H[i]<=H[i-1]:\n        cur[i]=cur[i-1]+1\nprint(max(cur))\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s562490719":{
    "code_string":"print((1+N)*(N\/2))\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s529577849":{
    "code_string":"N = int(input())\nprint(int(N*(N-1)\/\/2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s860747433":{
    "code_string":"from numba import njit\n\n@njit(cache=True)\ndef f(n):\n    #n = 10**9\n    ans = 0\n    for i,j in zip(range(1,n),range(2,n+1)):\n        #print(i,j)\n        ans += i%j\n    return ans\n\nif __name__ == \"__main__\":\n    n = int(input())\n    r = f(n)\n    print(r)",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s030619616":{
    "code_string":"package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar n int\n\tfmt.Scan(&n)\n\n\tans := 0\n\tfor i := 1; i < n; i++ {\n\t\tans += i\n\t}\n\n\tfmt.Println(ans)\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s342375203":{
    "code_string":"# E - League\nimport sys\nfrom collections import deque\nfrom typing import Deque, List\n\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readline\n\n\ndef main():\n    N = int(readline())\n    A: List[Deque[int]] = [deque()] + list(\n        deque(map(int, line.split())) for line in readlines()\n    )\n    matched_games_cnt = 0\n    next_games_opponent, last_games_day = [0] * (N + 1), [0] * (N + 1)\n    queue = deque(list(range(1, N + 1)))\n    while queue:\n        player = queue.popleft()\n        if not A[player]:  # The player has finished all games.\n            continue\n        opponent = A[player].popleft()\n\n        # The opponent will have another game before playing against x.\n        if next_games_opponent[opponent] != player:\n            next_games_opponent[player] = opponent\n            continue\n\n        # The opponent's next game is against the player and vice versa.\n        matched_games_cnt += 1\n        last_games_day[player] = last_games_day[opponent] = (\n            max(last_games_day[player], last_games_day[opponent]) + 1\n        )\n        # No next game is currently planned.\n        next_games_opponent[player] = next_games_opponent[opponent] = 0\n        queue.append(player), queue.append(opponent)\n\n    print(max(last_games_day) if matched_games_cnt == N * (N - 1) \/\/ 2 else -1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"AttributeError: 'int' object has no attribute 'split'"
  },
  "s199555877":{
    "code_string":"from collections import deque\nfrom typing import List, Optional, Tuple\n\n\ndef cycle_detectable_topological_sort(\n    graph: List[List[int]], in_degrees: List[int], first_index: int = 0\n) -> Tuple[Optional[List[int]], Optional[List[int]]]:\n    \"\"\"Topological sort that uses Kahn's algorithm and detects a loop (DAG or not).\n    Returns:\n        if the given graph is DAG, a list of sorted vertices and a list of depths of\n        each vertex is returned.\n        Otherwise, (None, None) is returned.\n    \"\"\"\n    V = len(graph) + first_index\n    order = []\n    depths = [-1] * V  # depths[i] := the length of the longest path to V_i\n    for i in range(first_index, V):\n        if not in_degrees[i]:\n            order.append(i)\n            depths[i] = 0\n\n    queue = deque(order)\n    while queue:\n        u = queue.popleft()\n        cur_depth = depths[u]\n        for v in graph[u]:\n            in_degrees[v] -= 1\n            if not in_degrees[v]:\n                depths[v] = max(depths[v], cur_depth + 1)\n                queue.append(v), order.append(v)\n    return (order, depths) if len(order) + first_index == V else (None, None)\n\n\ndef abc139_e():\n    N, *A = map(int, open(0).read().split())\n\n    ids = [[-1] * (N + 1) for _ in range(N + 1)]\n    cur_id = 0\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            ids[i][j] = ids[j][i] = cur_id\n            cur_id += 1\n\n    graph = [[] for _ in range(N * (N - 1) \/\/ 2)]\n    in_degrees = [0] * (N * (N - 1) \/\/ 2)\n    for i, a in enumerate(zip(*[iter(A)] * (N - 1)), 1):\n        prev_id = -1\n        for j in a:\n            cur_id = ids[i][j]\n            if prev_id != -1:\n                graph[prev_id].append(cur_id)\n                in_degrees[cur_id] += 1\n            prev_id = cur_id\n\n    _, depths = cycle_detectable_topological_sort(graph, in_degrees, 1)\n    print(max(depths) + 1 if depths is not None else -1)\n\n\nif __name__ == \"__main__\":\n    abc139_e()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s234240947":{
    "code_string":"m,d = map(int,input().split())\ncnt = 0\nfor i in range(d):\n  temp = str(i)\n  if int(temp[0]) >= 2 and int(temp[1]) >= 2 and int(temp[1]) * int(temp[1]) =< m:\n    cnt += 1\nprint(cnt)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s729738895":{
    "code_string":"import sys\nfrom functools import lru_cache\nsys.setrecursionlimit(10**9)\nMOD=10**9+7\nn,m=map(int,input().split())\na=set([int(input()) for _ in range(m)])\nif 1 in a:\n  ans=[1,0]\nelse:\n  ans=[1,1]\n\n@lru_cache(maxsize=None)\ndef cnt(x):\n  if x<2:\n    return ans[x]\n  if x in a:\n    return 0\n  else:\n    return (cnt(x-1)+cnt(x-2))%MOD\n\nprint(cnt(n))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 1'"
  },
  "s721688555":{
    "code_string":"n, k = map(int, input().split())\na = list(map(int, input().split()))\ntotal_1 = 0\nfor i in range (n - 1):\n    for j in range (i + 1, n):\n        if a[i] > a[j]:\n            total_1 += 1\ntotal_2 = 0\nfor i in range (n):\n    for j in range (n):\n        if a[i] > a[j]:\n            total_2 += 1\nprint((total_1 * k + (total_2 * k * (k - 1)) \/\/ 2) % (10 ** 9 + 7)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s813329113":{
    "code_string":"from collections import Counter\n\ndef main():\n    N = int(input())\n    A = tuple(map(int, input().split()))\n    \n    c = Counter(A).most_common()\n\n    if c[0][0] == \"0\" and c[0][1] == N:\n        print(\"Yes\")\n    elif len(c) == 2 and c[0][1] == 2*N\/\/3 and c[1][0] == \"0\" and c[1][1] == N\/\/3:\n        print(\"Yes\")\n    elif len(c) == 3 and int(c[0][0])^int(c[1][0]) == int(c[2][0]) and c[0][1] == c[1][1] and c[1][1] == c[2][1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 2'"
  },
  "s834652667":{
    "code_string":"N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ncnt = [0] * N\nex = [0] * N\nfor i in range(N):\n    for j in range(N):\n        if A[i] > A[j]:\n            cnt[i] += 1\nfor i in range(N):\n    for j in range(i):\n        if A[i] > A[j]:\n            ex[i] += 1\n\nans = 0\nfor i in range(N):\n    ans += cnt[i] * ((K + 1) * K \/\/ 2) % MOD\nfor i in range(N):\n    ans -= ex[i] * K\nprint(ans % MOD)",
    "error_obj":"NameError: name 'MOD' is not defined"
  },
  "s923082989":{
    "code_string":"a = input()\ns = input()\n\nif a >= 3200:\n    answer = (s)\nelif a < 3200:\n    answer = ('red')\n\nprint(answer)",
    "error_obj":"TypeError: '>=' not supported between instances of 'str' and 'int'"
  },
  "s348659492":{
    "code_string":"a=int(input())\nS=input()\n\nif a=>3200:\n  print(S)\nelse:\n  print(\"red\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s853107292":{
    "code_string":"a = int(input())\ns = int(input())\nif a >= 3200:\n    print('s')\nif a < 3200:\n    print('red')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'pink'"
  },
  "s541844757":{
    "code_string":"a=input()\ns=input()\nif a>=3200:\n  print(s)\nelse:\n  print(\"red\")",
    "error_obj":"TypeError: '>=' not supported between instances of 'str' and 'int'"
  },
  "s046212696":{
    "code_string":"a, s = input().split()\nprint(s if int(a) < 3200 else \"red\")",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s185885705":{
    "code_string":"a = int(input())\n\nS = input()\n\nif a >= 3200:\n    print(s)\n    \nelse:\n    print('red')\n",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s357224181":{
    "code_string":"if a >= 3200:\n  print(\"red\")\nelse:\n  print(\"pink\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s109373852":{
    "code_string":"a = int(input())\ns = input()\nif a>=3200:\n  print(s)\nelse\n  print(\"red\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s943037860":{
    "code_string":"a = int(input())\ns = input()\nif a >= 3200:\n\tpint(s)\nelse:\n\tprint('red')\n",
    "error_obj":"NameError: name 'pint' is not defined"
  },
  "s665499369":{
    "code_string":"a=int(input())\ns=int(input())\nif a<3200:\n  print(\"red\")\nelse:\n  print(s)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'pink'"
  },
  "s015171913":{
    "code_string":"a=int(input())\ns=int(input())\n\nif a >= 3200:\n    print(s)\nelse:\n    print(\"red\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'pink'"
  },
  "s319040437":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\nb = []\n\nfor x in a :\n  b.append(1\/x)\n  \nc = sum(b)\nans = 1\/c\nprint(ans)\n  ",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'pink'"
  },
  "s355068658":{
    "code_string":"a = int(input())\n\nS = input()\n\nif a >= 3200:\n    print(s)\n\nelif a < 3200:\n    print('red')",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s332386033":{
    "code_string":"a = int(input())\ns = input()\n\nif a>=3200:\n  print(s)\n else :\n   print(\"red\")\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s305254653":{
    "code_string":"a = input()\nif a >= 3200:\n    print(s)\nelse:\n    print(\"red\")\n",
    "error_obj":"TypeError: '>=' not supported between instances of 'str' and 'int'"
  },
  "s726927638":{
    "code_string":"# \u6570\u5024\u3068\u8272\u306e\u53d6\u5f97\na = int(input())\ns = input()\n \n# \u6570\u5024\u3067\u5224\u65ad\u3057\u3066\u6587\u5b57\u5217\u3092\u51fa\u529b\nif a >= 3200:\n    print(s)\nelif:\n    print(\"red\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s911758307":{
    "code_string":"a=int(input())\ns=int(input())\nif a>=3200:\n  print(s)\nelse:\n  print('red')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'pink'"
  },
  "s238285226":{
    "code_string":"if 3200 <= a:\n    print(input(s))\nif a < 3200:\n    print(\"red\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s425983839":{
    "code_string":"a = input()\n\nif a >= 3200:\n    print('pink')\n\nelif a < 3200:\n    print('red')",
    "error_obj":"TypeError: '>=' not supported between instances of 'str' and 'int'"
  },
  "s363785434":{
    "code_string":"a,s = map (int,input().split())\na = int(input())\ns = input()\n\nif a >= 3200 :\n    print(s)\nelse:\n    print('red')",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s340598188":{
    "code_string":"a = input()\ns = input()\n\nif a >= 3200:\n    print(s)\nelse:\n    print('red')",
    "error_obj":"TypeError: '>=' not supported between instances of 'str' and 'int'"
  },
  "s303319507":{
    "code_string":"X=int(input())\na=input()\nif x>=3200:\n  print(a)\nelse:\n  print('red')",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s891362073":{
    "code_string":"_=input()\nprint(1\/sum[1\/r for r in list(map(int,input().split()))])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s248053859":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nsum=0\nfor i in range(n):\n  sum=sum+1\/a[i]\nprint(1\/ans)\n\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s322898589":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\ntotal=0\nfor i in a:\n  total += 1\/a\nprint(1\/total)",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'int' and 'list'"
  },
  "s411058330":{
    "code_string":"input()\nl = list(map(int,input().split()))\ns = 0\ns += 1\/i for i in l\nprint(round(1\/s,3))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s119566171":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n  ans=ans+1\/a[i]\nans=1\/ans\n print(ans)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s623212573":{
    "code_string":"N=int(input())\nA_lis=list(map(int,input().split())\nx=0           \nfor i in A_lis:\n   x += 1\/i\nans = 1\/x\nprint(ans)           \n           \n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s575727527":{
    "code_string":"n = int(input())\nres = list(map(int, input().split()))\nans = 0 \nfor x in res:\n  ans += 1\/res\nprint(1\/ans)",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'int' and 'list'"
  },
  "s662597755":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\n\nfor i in range(N):\n  ans+=1\/A[i]\n\nprint(1\/ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s602675576":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nans = 0\nfor a in A:\n    ans += 1 \/ a\nprint(1 \/ ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s765583058":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\ns = 0\nfor i in a:\n  s += 1 \/ a\nprint(1 \/ s)\n  ",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'int' and 'list'"
  },
  "s290691749":{
    "code_string":"N=int(input())\nS=0\nA=list(map(int,input().split()))\nfor i in range(N):\n  S += 1\/i\nprint(1\/S)",
    "error_obj":"ZeroDivisionError: division by zero"
  },
  "s862397891":{
    "code_string":"a = int(input())\nb = list(map(int,input().split()))\nc = 0\nfor i in range(0,a-1):\n  c == c + 1\/b[i]\nprint(1\/c)",
    "error_obj":"ZeroDivisionError: division by zero"
  },
  "s083090982":{
    "code_string":"n = int(input())\n\nv = list(map(int,input().split()))\n\nv.sort(reverse = True)\n\nwhile len(v) > 1 :\n    v.append((v.pop(-1) + v.pop(-2))\/2)\n    v.sort(reverse = True)\n\nprint(v)\n",
    "error_obj":"IndexError: pop index out of range"
  },
  "s641864572":{
    "code_string":"N = int(input())\nv = sorted(map(int,input().split()))\nvalue=v[0]\nfor in range(1,N):\n  value = (value+ v[i])\/2\nprint(value)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s988957756":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nA = sorted(A)\nif N == 2:\n  print(sum(A)\/2)\nelse:\n  temp = (A[0]+A[1])\/2\n  for i in range(2, N):\n    temp = 1\/2*(A[i] + temp)\nprint(temp)",
    "error_obj":"NameError: name 'temp' is not defined"
  },
  "s621283972":{
    "code_string":"def Input():\n    return mapt(int, input().split(\" \"))\n\n\ndef main():\n    n = int(input())\n    a = sorted(Input())\n    while len(a) > 1:\n        x, y = a[0], a[1]\n        a[0:2] = [(x+y)\/2]\n\n    return a[0]\n\n\nprint(main())",
    "error_obj":"NameError: name 'mapt' is not defined"
  },
  "s835579221":{
    "code_string":"x = int(input())\na = [list(map(int,input().split()))]\nb = sorted(a)\ny = 0\nfor i in range(x):\n  y += b[i-0]*(2**i)\nprint(y\/\/(2**(x+1)))",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'list'"
  },
  "s138030878":{
    "code_string":"n=int(input())\nv=list(map(int,input().split()))\nv.sort(key=int)\nfor i in range(n-1):\n  z=(v[i]+v[i+1])\/2\n  v[i]=z\n  v[i+1]=z\nprint(v[n])",
    "error_obj":"IndexError: list index out of range"
  },
  "s794154334":{
    "code_string":"n = int(input())\nv = sorted(map(int, input().split()))\n\nans = v[0]\n\nfor i in range(1, N):\n    ans = (ans + v[i]) \/ 2\n\nprint(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s902060237":{
    "code_string":"from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\n\nn=int(input())\nv=lnii()\nv.sort()\n\nans=v[0]\nfor i in range(1,n):\n  ans=(ans+v[i])\/2\n\nprint(ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s426772260":{
    "code_string":"import sys\nsys.setrecursionlimit(10 ** 6)\n\n# to enable variable use in global\nglobal tree, point\n\n# v : current node, f : parent node \ndef dfs(v, f):\n    for next_v in tree[v]:\n        if next_v == f:\n            continue\n    \n        point[next_v] += point[v]\n        dfs(next_v, v)\n\nn , q = map(int, input().split())\ntree = [[] for _ in range(n)]\npoint = [0] * n\nfor _ in range(n - 1):\n    a , b = map(int,input().split())\n    tree[b - 1].append(a - 1)\n    tree[a - 1].append(b - 1)\n\nfor _ in range(Q):\n    p , x = map(int, input().split())\n    p = x - 1\n    point[p] += x\n\ndfs(0, 0)\nprint(*point)",
    "error_obj":"NameError: name 'Q' is not defined"
  },
  "s141255441":{
    "code_string":"n, q = map(int, input().split())\n\nroad = [[] for _ in range(n)]\ncnt = [0 for _ in range(n)]\n\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    road[a - 1].append(b - 1)\n    road[b - 1].append(a - 1)\n\nfor i in range(q):\n    idx, v = map(int, input().split())\n    cnt[idx - 1] += v\n\ndist = [-1] * n\nque = deque()\ndist[0] = 0\nque.append(0)\n\nwhile(len(que) != 0):\n    # BFS\/DFS\n    v = que.pop()\n    for r in road[v]:\n        if dist[r] != -1:\n            continue\n        # print(r, v)\n        dist[r] = dist[v] + 1\n        cnt[r] += cnt[v]\n        que.append(r)\nprint(*cnt)\n",
    "error_obj":"NameError: name 'deque' is not defined"
  },
  "s508819528":{
    "code_string":"#include<bits\/stdc++.h>\n#define rep(i, n) for (int i=0; i < n; i++)\ntypedef long long ll;\n#define repran(i, a,b) for (int i = a; i<b;i++)\n#define repd(i, n) for (int i = n-1; i > -1; i--)\n#define all(x) (x).begin(), (x).end()\nusing namespace std;\nusing LP = pair<ll,ll>;\nusing P = pair<int,ll>;\nint n;\nll inf = 1e18;\n\nint main()\n{\n    int n ,q;\n    cin >> n >> q;\n    vector<vector<int>> G(n, vector<int>());\n    rep(i, n-1){\n        int a, b;\n        cin >> a >> b;\n        --a;--b;\n        G[a].push_back(b);\n        G[b].push_back(a);\n    }\n    vector<ll> ans(n, 0);\n    vector<ll> acc(n, 0);\n    rep(i, q){\n        int p; ll x;\n        cin >> p >>x;\n        --p;\n        acc[p] += x;\n    }\n    \/\/dfs\n    deque<P> deq;\n    deq.emplace_back(0, acc[0]);\n    ans[0] = acc[0];\n    vector<int> parent(n, -1);\n    while(!deq.empty()){\n        P now = deq.back();deq.pop_back();\n        int node = now.first;\n        ll cost = now.second;\n        for (int child : G[node]){\n            if(child == parent[node]) continue;\n            parent[child] = node;\n            ans[child] = ans[node]+acc[child];\n            deq.emplace_back(child, acc[child]);\n        }\n\n    }\n    rep(i, n) cout << ans[i] << endl;\n\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s976088905":{
    "code_string":"import sys\nsys.setrecursionlimit(400000)\nn,q=map(int,input().split())\nans=[0]*(n+1) #\u7b54\u3048\nscore=[0]*(n+1) #x\u306e\u7dcf\u548c\ng=[[] for _ in range(n+1)] #\u30b0\u30e9\u30d5\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    g[a].append(b)\n    g[b].append(a)\nfor j in range(q):\n    p,x=map(int,input().split())\n    score[p]+=x\n\nvisited=[0]*(N+1)\ndef dfs(v):\n    visited[v] += 1\n    global ans\n    ans[v]+=score[v]\n    for i in range(len(g[v])):\n        if visited[g[v][i]] == 0:\n            ans[g[v][i]]+=ans[v]\n            dfs(g[v][i])\ndfs(1)\nprint(\" \".join(str, map(ans[1:])))\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s124241359":{
    "code_string":"from collections import deque\nN, Q = map(int, input().split())\nG = [[] * N]\nfor i in range(N-1):\n    a, b = map(int, input().split())\n    G[a-1].append(b-1)\n    G[b-1].append(a-1)\n\ncount = [0] * N\nfor j in range(Q):\n    p, x = map(int, input().split())\n    count[p-1] += x\n\nvisited = [False] * N\nque = deque([0])\n\nwhile que:\n    now = que.pop()\n    visited[now] = True\n    for nxt in G[now]:\n        if visited[nxt]:\n            continue\n        count[nxt] += count[now]\n        que.appendleft(nxt)\n\nprint(*count)",
    "error_obj":"IndexError: list index out of range"
  },
  "s525966875":{
    "code_string":"import numpy as np\nimport sys\ni4 = np.int32\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    adjacency_list = '''\nimport numpy as np\nfrom numba import njit\nfrom collections import namedtuple\n\nAdjacencyList = namedtuple('AdjacencyList', ['v', 'adj'])\n\n@njit\ndef adjacency_list(n, a):\n    \"\"\"\n    \u96a3\u63a5\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\n    :param n: vertex \u306e\u6570\n    :param a: 2d \u306e ndarray, \u5404\u884c\u306f\u3001[u, v] u: Edge \u306e\u59cb\u70b9\u3001v: Edge \u306e\u7d42\u70b9\n    :return: AdjacencyList\n    \"\"\"\n    v = np.zeros(n + 1, np.int32)\n    for i in range(a.shape[0]):\n        v[a[i, 0] + 1] += 1\n    for i in range(1, v.shape[0]):\n        v[i] += v[i - 1]\n    adj = np.empty(a.shape[0], np.int32)\n    temp = np.zeros(n, np.int32)\n    for i in range(a.shape[0]):\n        from_ = a[i, 0]\n        adj[v[from_] + temp[from_]] = a[i, 1]\n        temp[from_] += 1\n    return AdjacencyList(v, adj)\n\n\n@njit\ndef at(gc, n):\n    return gc.adj[gc.v[n]:gc.v[n + 1]]\n\n\n@njit\ndef iter(gc, n):\n    for i in range(gc.v[n], gc.v[n + 1]):\n        yield gc.adj[i]        \n    '''\n    import os\n    os.makedirs('nbacl\/graphs', exist_ok=True)\n    with open('nbacl\/graphs\/adjacency_list.py', 'w') as f:\n        f.write(adjacency_list)\n\n    abc138_d_numba = '''\nimport numpy as np\nimport nbacl.graphs.adjacency_list as tree\nfrom numba import njit\nfrom numba.types import Array, int32\nfrom numba.pycc import CC\ni4 = np.int32\ncc = CC('abc138_d_numba')\n\n\n# @njit((int32, int32, Array(int32, 1, 'C'), Array(int32, 1, 'C'), Array(int32, 1, 'C'), Array(int32, 1, 'C')))\n@njit\ndef dfs(d, prev, v, adj, u, val):\n    y = val[d]\n    for i in range(v[d], v[d + 1]):\n        x = adj[i]\n        if x == prev:\n            continue\n        val[x] = y + u[x]\n        dfs(x, d, v, adj, u, val)\n\n\n@cc.export('solve', (Array(int32, 2, 'C'), Array(int32, 2, 'C'), int32))\ndef solve(a, p, N):\n    tr = tree.adjacency_list(N, a)\n    u = np.zeros(N, i4)\n    val = np.zeros(N, i4)\n    for i in range(p.shape[0]):\n        u[p[i, 0] - 1] += p[i, 1]\n    val[0] = u[0]\n    dfs(0, -1, tr.v, tr.adj, u, val)\n    return val\n\n\nif __name__ == '__main__':\n    cc.compile()\n    '''\n    with open('abc138_d_numba.py', 'w') as f:\n        f.write(abc138_d_numba)\n    import subprocess\n    cmd = \"python3.8 abc138_d_numba.py\"\n    subprocess.run(cmd.split())\n    exit(0)\n\n\nfrom abc138_d_numba import solve\n\ndef main():\n    f = open(0)\n    N, Q = [int(x) for x in f.readline().split()]\n    ap = np.fromstring(f.read(), i4, sep=' ').reshape((-1, 2))\n    a = ap[:N - 1] - 1\n    a = np.concatenate((a, a[:, ::-1]))\n    p = ap[N - 1:]\n    val = solve(a, p, N)\n    print(*val.tolist())\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'abc138_d_numba'"
  },
  "s961880851":{
    "code_string":"n,q = map(int,input().split())\n\nroad = [[] for _ in range(n)]\ncnt  = [0 for _ in range(n)]\n\nfor i in range(n-1):\n    a,b = map(int,input().split())\n    road[a-1].append(b-1)\n    road[b-1].append(a-1)\n\nfor i in range(q):\n    idx,v = map(int,input().split())\n    cnt[idx-1] = v\n\ndist = [-1]*n\nque  = deque()\ndist[0] = 0\nque.append(0)\n\nwhile(len(que)!=0):\n    # BFS\/DFS\n    v = que.pop()\n    for r in road[v]:\n        if dist[r]!=-1:\n            continue\n        dist[r] = dist[v] + 1\n        cnt[r] += cnt[v]\n        que.append(r)\n\nprint(*cnt)",
    "error_obj":"NameError: name 'deque' is not defined"
  },
  "s530448436":{
    "code_string":"import sys\nsys.setrecursionlimit(10**7)\nn,q = map(int,input().split())\nki = [[] for i in range(n)]\nfor i in range(n-1):\n    a,b = map(int,input().split())\n    ki[a-1].append(b-1)\n    ki[b-1].append(a-1)\nscore = [0]*n\n\nfor i in range(q):\n    p,x = map(int,input().split()) \n    score[p-1] += x\n#print(ki,score)\nans = [0]*n\n\ndef dfs(v,p,value): #p:parent of v\n    value +=score(v)\n    #print(score[v],value)\n    ans[v] = value\n    for i in ki[v]:\n        if i == p:\n            continue\n        dfs(i,v,value)\ndfs(0,-1,0)\n\nprint(*ans)\n        ",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s356964986":{
    "code_string":"def main():\n    n,q=map(int,input().split())\n    ab=[list(map(int,input().split())) for _ in range(n-1)]\n    tree=[list() for _ in range(n)]\n    score=[0]*n\n    for a,b in ab:\n        a-=1\n        b-=1\n        tree[a].append(b)\n    px=[list(map(int,input().split())) for _ in range(q)]\n    for p,x in px:\n        p-=1\n        add(p,x,tree,score)\n    print(s)\n\ndef add(p,x,tree,score):\n    score[p] += x\n    s=tree[p][:]\n    while len(s)>0:\n        t = s.pop()\n        score[t] += x\n        for i in tree[t]:\n            s.append(i)\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s036479188":{
    "code_string":"import sys\nsys.setrecursionlimit(10 ** 7)\n\nn,q = map(int,input().split())\nab = [list(map(int,input().split()))for _ in range(n-1)]\npx = [list(map(int,input().split()))for _ in range(q)]\n\ngraph = [[] for _ in range(n+3)]\nfor a,b in ab:\n    graph[a].append(b)\n    graph[b].append(a)\n\nvalue = [0]*(n+1)\nfor p,x in px:\n    value[p] += x\n\ndef dfs(v,parent,add):\n    value[v] += add\n    for x in graph[v]:\n        if v == parent:\n            continue\n        dfs(x,v,value[v])\n\ndfs(1,0,0)\nprint(*value[1:],end=\"\\t\")\n",
    "error_obj":""
  },
  "s094834627":{
    "code_string":"import sys\nsys.setrecursionlimit(400000)\nn,q=map(int,input().split())\nans=[0]*(n+1) #\u7b54\u3048\nscore=[0]*(n+1) #x\u306e\u7dcf\u548c\ng=[[] for _ in range(n+1)] #\u30b0\u30e9\u30d5\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    g[a].append(b)\n    g[b].append(a)\nfor j in range(q):\n    p,x=map(int,input().split())\n    score[p]+=x\n\nvisited=[0]*(n+1)\ndef dfs(v):\n    visited[v]+=1\n    global ans\n    ans[v]+=score[v]\n    for i in range(len(g[v])):\n        ans[g[v][i]]+=ans[v]\n        dfs(g[v][i])\ndfs(1)\nprint(\" \".join(map(str, ans[1:])))",
    "error_obj":""
  },
  "s262091869":{
    "code_string":"# D - Ki TLE\nimport sys\nsys.setrecursionlimit(10**7)\nN,Q = map(int,input().split())\n\n# \u6709\u5411\u30b0\u30e9\u30d5\nG = [[] for _ in range(N)]\nroot = set()\nfor _ in range(N-1):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1\n    if not(b in root):\n        G[a].append(b)\n    # b \u306e\u65b9\u304c\u6839\u306b\u8fd1\u3044\u3068\u304d\n    else:\n        G[b].append(a)\n    root.add(b)\n\nlst = []\nfor _ in range(Q):\n    P,X = map(int,input().split())\n    P-=1\n    lst.append((P,X))\n\ncnt = [0]*N\nfor p,x in lst:\n    cnt[p] += x \n    \ndef dfs(v):\n    # v \u304b\u3089\u884c\u3051\u308b\u5404\u9802\u70b9 next_v \u306b\u3064\u3044\u3066\n    for next_v in G[v]:\n        # next_v \u304c\u63a2\u7d22\u6e08\u307f\u306a\u3089\u30b9\u30eb\u30fc\n        if seen[next_v] == True:\n             continue\n        cnt[next_v] += cnt[v] \n        dfs(next_v)\ndfs(0)\nprint(*cnt)",
    "error_obj":"NameError: name 'seen' is not defined"
  },
  "s891110768":{
    "code_string":"from sys import setrecursionlimit\n\nsetrecursionlimit(10 ** 6)\n\nN, Q = map(int, input().split())\n\ngraph   = [ [] for _ in range(N) ]\nqueries = { p: 0 for p in range(N) }\n\nfor _ in range(N - 1):\n    a, b = map(lambda x: int(x) - 1, input().split())\n\n    graph[a].append(b)\n    graph[b].append(a)\n\nfor _ in range(Q):\n    p, x = map(int, input().split())\n\n    queries[p - 1] += x\n\nanswer = [ 0 ] * N\n\ndef dfs(p, p_before, acc):\n    acc += queries[p]\n\n    answer[p] = acc\n\n    for child in graph[p]:\n        if child == p_before:\n            continue\n\n        dfs(child, acc)\n\ndfs(0, -1, 0)\n\nprint(*answer)",
    "error_obj":"TypeError: dfs() missing 1 required positional argument: 'acc'"
  },
  "s649520096":{
    "code_string":"n,q = map(int,input().split())\ngraph = [[] for i in range(n)]\nfor i in range(n-1):\n  a,b = map(int,input().split())\n  a -= 1\n  b -= 1\n  graph[a].append(b)\n  graph[b].append(a)\n\nweight = [0 for i in range(n)]\nfor i in range(q):\n  p,x = map(int,input().split())\n  weight[p-1] = x\n\nst = [0]\nvisit = [false for i in range(n)]\nwhile not len(st) == 0:\n  now = st.pop()\n  visit[now] = true\n  for e in graph[now]:\n    if visit[e]:\n      continue\n    weight[e] += weight[e]\n    st.push(e)\n    \nprint(' '.join(map(str,weight)))",
    "error_obj":"NameError: name 'false' is not defined"
  },
  "s027416660":{
    "code_string":"N, *A = map(int, open(0).read().split())\n\nA = [0] + A\nB = [0] * (N + 1)\nsum_B = 0\nfor i in range(N, 0, -1):\n    if sum(B[j] for j in range(i, N + 1, i)) % 2 != A[i]:\n        B[i] = 1\n        sum_B += 1\nprint(sum_B)\nprint(*[i for i, b in enumerate(B) if b])\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'contest'"
  },
  "s917931244":{
    "code_string":"s = input()\n\ni = 0\nlst = []\nfor j in range(1,len(s)+1):\n    if lst[-1] != s[i:j]:\n        lst.append(s[i:j])\n        i = j\n\nprint(len(lst))",
    "error_obj":"IndexError: list index out of range"
  },
  "s922501387":{
    "code_string":"s = input()\nt = s[0]\np = 1\ni = 1\nwhile i < len(s):\n    if s[i] == t:\n        i += 2\n    else:\n        i += 1\n    t = s[i-1]\n    p += 1\n\nprint(p)",
    "error_obj":"IndexError: string index out of range"
  },
  "s973067801":{
    "code_string":"A,B=maps(int,input().split())\nprint(max(max(A+B,A-B),A*B))",
    "error_obj":"NameError: name 'maps' is not defined"
  },
  "s263781982":{
    "code_string":"def Input():\n    return mapt(int, input().split(\" \"))\n\n  \ndef main():\n    a, b = Input()\n    return max(a*b, a-b, a+b)\n\n\nprint(main())",
    "error_obj":"NameError: name 'mapt' is not defined"
  },
  "s355178239":{
    "code_string":"map(int,input().split())\nprint(max(A+B,A-B,A*B))\n",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s669946258":{
    "code_string":"A,B = map(int,input().split())\n\np = A+B\nm = A-B\nM = A*B\n\nL = []\n\nL.append(p)\nL.append(m)\nL.append(M)\n\nprint(max(M))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s430401941":{
    "code_string":"a,b=int(input().split())\nprint(max(a+b,a-b,a*b))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s831426946":{
    "code_string":"a, b = map(int, input())\nprint(max(a+b, a-b, a*b))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '-'"
  },
  "s862026367":{
    "code_string":"s = input()\nl = [int(x) for x in input().split()]\na, b = l[0], l[1]\nprint(max(a+b, max(a-b, a*b)))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s947701341":{
    "code_string":"\na, b = map(int, input().split())\nx = a + b\ny = a - b\nz = a * b\nO = [x,y,z]\nO = sorted(O,reverse=1)\nprint(O[0]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s882033965":{
    "code_string":"A, B = map(int, input(), split())\n\nx = A + B\ny = A - B\nz = A * B\nprint(max(x, y, z))",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s235995942":{
    "code_string":"a, b = map(int, input().split())\ns = a+b\nt = a-b\nu = a*b\n\nif s >= t:\n    if t >= u:\n        print(s)\n    elif s <= u:\n        print(u)\nelse:\n    if s >= u:\n        print(t)\n    elif:\n        t <= u:\n        print(u)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s594273522":{
    "code_string":"a,b = map(int,input())\nlist_ab =[]\nlist_ab.append(a+b)\nlist_ab.append(a-b)\nlist_ab.append(a*b)\n\nprint(max(list_ab))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '-'"
  },
  "s187839296":{
    "code_string":"A,B=map(int(input().split()))\nl=[A+B,A-B,A*B]\nprint(max(l))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s939098653":{
    "code_string":"a,b = map(int,input().split())\nprint(max(max(a+b,a-b),a*b)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s093966350":{
    "code_string":"N, X=map(int, input().split())\nans=[]\nfor _ in range(X-N+1, X+N):\n  ans.append(_)\nprint(\" \".join(ans))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s614692712":{
    "code_string":"L = []\nfor i in range(k):\n    y = x + i\n    z = x - i\n    if y > 1000000:\n        y = x\n    L.append(y)\n    if z < -1000000:\n        z = x\n    L.append(z)\nI = set(L)\nfor s in I:\n    print(s,end = \"\")",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s759870300":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\na, b = rm()\nprint(*list(range(b-a+1:b+a)))\n\n\n\n\n\n\n\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s777105226":{
    "code_string":"k,x=map(int,input().split())\nprint(*[x for x in range(X-K+1,X+K)])",
    "error_obj":"NameError: name 'X' is not defined"
  },
  "s654060610":{
    "code_string":"\n\n\ndef fun(n,num,count):\n\n    if count == (num*2)-1:\n        return\n    print(n,end=\" \")\n    count +=1\n    fun(n+1,num,count)\nxnum=list(map(int,input().split()))\nx=xnum[0]\nnum=snum[1]\n\nm=x-(num-1)\n\nfun(m,num,0)\n",
    "error_obj":"NameError: name 'snum' is not defined"
  },
  "s228701718":{
    "code_string":"K,X = map(int,input().split())\n\nfor i in range(max(-1000000,X-K+1), min(X+K,1000000):\n    print(i, end=' ')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s518523138":{
    "code_string":"a,b=map(int,input().split())\nx=[]\nfor i in range(b-a+1,b+a):\n  x.append(i)\nprint(''.join(x),sep=' ')",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s136879202":{
    "code_string":"k,y=map(int,input().split())\nfor i in range(x-y+1,x+y):\n    print(i,end=\" \")",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s359082055":{
    "code_string":"k,n=map(int,input().split())\nfor i in range(n):\n  print(-n+1+i)\nprint(0)\nfor i in range(n):\n  printf(i)",
    "error_obj":"NameError: name 'printf' is not defined"
  },
  "s594239446":{
    "code_string":"k,x = map(int,input().split())\na = [x]\nfor i in range(1,k):\n  a.append(x+i)\n  a.append(x-i)\n  \nprint(\" \".join(sorted(a)))\n  \n",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s612727361":{
    "code_string":"k,x = map(int,input().split())\n\nmin_ans = x-k+1\nmax_ans = x+K-1\n\nfor x in range(min_ans,max_ans+1):\n  print(x, end=\" \")\n  ",
    "error_obj":"NameError: name 'K' is not defined"
  },
  "s468370435":{
    "code_string":"N,X = map(int, input().split())\n\nfor i in range(X-K+1,X+K):\n\tprint(i,end = \" \")",
    "error_obj":"NameError: name 'K' is not defined"
  },
  "s710718236":{
    "code_string":"K, X = list(map(lambda n: int(n), input().split(\" \")))\nprint(\" \".join(list(range(K - X + 1, K + X - 1))))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s634576528":{
    "code_string":"K,X=map(int,input().split())\nprint(*list(range[X-K+1:X+K]))",
    "error_obj":"TypeError: 'type' object is not subscriptable"
  },
  "s028151971":{
    "code_string":"import collections\nN = int(input())\ns = [\"\".join(sorted(input())) for _ in range(N)]\nprint(A)\nB = collections.Counter(s)\nprint(sum(i*(i-1)\/\/2 for i in B.values()))",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s476914155":{
    "code_string":"#\u4ed6\u306e\u4eba\u306e\u56de\u7b54\nimport collections\n\nN = int(input())\ns = [\"\".join(sorted(input())) for _ in range(N)]\u3000#sorted\u3067\u30ea\u30b9\u30c8\u306b\u306a\u3063\u305f\u6587\u5b57\u5217\u3092join\u3067\u3082\u3046\u4e00\u5ea6\u6587\u5b57\u5217\u306b\nc = collections.Counter(s)\u3000\u3000#c\u306f\u8f9e\u66f8\u306e\u5f62\u3092\u3068\u308b\nans = 0\nfor si in set(s):\u3000# s\u304b\u3089\u91cd\u8907\u3092\u7121\u304f\u3059\n    n = c[si]\n    ans += n * (n - 1) \/\/ 2   # n C 2\u3092\u8a08\u7b97\nprint(ans)",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s229077088":{
    "code_string":"from collections import Counter\n\n\ndef main():\n    n = int(input())\n    cnt = Counter()\n    ans = 0\n    for i in range(n):\n        s = sorted(input())\n\n        if cnt[s] == 0:\n            cnt[s] = 1\n        else:\n            ans += cnt[s]\n            cnt[s] += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s564140838":{
    "code_string":"S=[]\ncho=[0]\np=0\nn = int(input())\nfor i in range(n):\n    s=sorted(input())\n    if s in S:\n        cho[p]+=1\n        p+=1\n    S.append(s)\nimport collections\nfrom scipy.special import comb\na=0\nSd=list(set(S))\nc = collections.Counter(S)\nfor p in  range(len(Sd)):\n    if c[Sd[p]] >=2:\n        a  += comb(c[Sd[p]], 2, exact=True)\nprint(a)",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s944373669":{
    "code_string":"N=int(input())\nA={}\nans=0\nfor i in range(N):\n    s=input()\n    s=sorted(s)\n    if A.get(s,\"Not\")==\"Not\":\n        A[s]=1\n    else:\n        ans+=A[s]\n        A[s]+=1\nprint(ans)",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s651046759":{
    "code_string":"n=int(input())\nprint(len(set([sorted(i) for i in [input() for i in range(n)]])))",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s515869067":{
    "code_string":"import collections\n\nN = int(input())\nS = [(sorted(input()))for _ in range(N)]\nc = collections.Counter(S)\nans = 0\nprint(S)\n\nfor i in set(S):\n    n = c[i]\n    ans += n*(n-1)\/\/2\nprint(ans)",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s469423751":{
    "code_string":"counter={}\nans=0\nfor i in range(n):\n\tss = sorted(s[i])\n\tss=(\"\").join(ss)\n\tif ss not in counter:\n\t\tcounter[ss]=0\n\telse:\n\t\tcounter[ss]+=1\n\t\tans+=counter[ss]\n\nprint(ans)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s709831410":{
    "code_string":"import math\ndef combinations_count(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\nN = int(input())\ndic_s = {}\nfor i in range(N):\n    s = \"\".join(sorted(input()))\n    if s in dic_s:\n        dic_s[s] += 1\n    else:\n        dic_s[s] = 1\ncounter = 0\nfor key,value in dic_s.items():\n    counter += combinations_count(value,2)\nprint(counter)",
    "error_obj":"ValueError: factorial() not defined for negative values"
  },
  "s583697104":{
    "code_string":"import math\n\ndef comb(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\nN = int(input())\na = [input() for _ in range(N)]\n\nd = dict()\nfor x in a:\n  s = ''.join(sorted(x))\n  if s not in d.keys():\n    d[s] = 1\n  else:\n    d[s] += 1\n\nprint(sum([comb(i, 2) for i in d.values()]))",
    "error_obj":"ValueError: factorial() not defined for negative values"
  },
  "s867503949":{
    "code_string":"N = int(input())\ns = [input() for _ in range(N)]\n\nfor i in range(N):\n  s[i] = list(set(s[i]))\n  \nprint(len(set(s)))",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s235261393":{
    "code_string":"def resolve():\n    n = int(input())\n    words = []\n    for _ in range(n):\n        words.append(str(sorted(list(input()))))\n    a = collections.Counter(words)\n    ans = 0\n    for i in a.values():\n        ans += i*(i-1)\/\/2\n    print(ans)\nresolve()",
    "error_obj":"NameError: name 'collections' is not defined"
  },
  "s994982713":{
    "code_string":"import sys\ninput = sys.stdin.readline\n\nn = int(input())\nsn = [input().strip('\\n') for _ in range(n)]\n\nmod = 10**7 + 7\nhs = [[0, ''] for _ in range(mod)]\n\ndef hypo(s, Mod):\n    h_num = 1\n    for i in s:\n        h_num = h_num * ord(i) % Mod\n    return h_num\n\nfor s in sn:\n    s = ''.join(sorted(s))\n    h = hypo(s, mod)\n    while True:\n        if h >= mod :\n            h = 0\n        if hs[h][0] == 0:\n            hs[h][0] += 1\n            hs[h][1] += s\n            break\n        if hs[h][1] == s:\n            hs[h][0] += 1\n            break\n        h += 1\n\nans = 0\nfor j, t in hs:\n    if j >= 2:\n        ans += j * (j-1) \/ 2\n\nprint(int(ans))\n\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s192533778":{
    "code_string":"import collections\ndef main4():\n    dd = collections.defaultdict(int)\n    n = int(input())\n    res = 0\n    for i in range(n):\n        s = input()\n        s.sort()\n        dd[''.join(s)]+=1\n    for i in dd.values():\n        res += (i*(i-1))\/\/2\n    print(res)\n\nif __name__ == '__main__':\n    main4()",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s073140106":{
    "code_string":"import itertools,math\nn = int(input())\nword = [input() for _ in range(n)]\ncount = 0\n\ndef combinations_count(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\nfor i in range(n):\n    word[i] = sorted(word[i])\n\nnew_word = list(sorted(word))\n\nx = 1\n\nfor i in range(n-1):\n    if new_word[i] == new_word[i+1]:\n        x += 1\n    else:\n        count += combinations_count(x,2)\n        x = 1\nif x >= 2:\n    count +=  combinations_count(x,2)\n    \nprint(count)",
    "error_obj":"ValueError: factorial() not defined for negative values"
  },
  "s051126034":{
    "code_string":"import collections\n\nN = int(input())\nS = [(sorted(input())) for _ in range(N)]\nc = collections.Counter(S)\nans = 0\nfor i in set(S):\n    n = c[i]\n    ans += n*(n-1)\/\/2\nprint(ans)",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s119737285":{
    "code_string":"from collections import Counter\n\nN=int(input())\ndic\uff1d{}\n\nans=0\n\nfor i in range(N):\n    si=input()\n    # ci=Counter(si)\n    # c=sorted(ci.elements())\n    # c=sorted(Counter(si).elements())\n    sorted_s=''.join(sorted(Counter(si).elements()))\n    if sorted_s in dic:\n        ans+=dic[sorted_s]\n        dic[sorted_s]+=1\n    else:\n        dic[sorted_s]=1\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid character '\uff1d' (U+FF1D)"
  },
  "s097487435":{
    "code_string":"n = input()\ns = [''.join(sorted(input())) for i in range(n)]\ncount = 0\nfor i in range(n):\n  for j in range(i+1,n):\n    if s[j][0]==s[i][0]:\n      count+=1\nprint(count)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s726961236":{
    "code_string":"n = int(input())\ns = [list(input()) for _ in range(n)]\nans = 0\nsd = dict([])\n\nfor i in s:\n    key = ''.join(sorted(i))\n    sd.setdefault(key, 0)\n    sd[key] += 1\n    \nfor v in s_dict.values():\n    ans += v * (v - 1) \/\/ 2\nprint(ans)",
    "error_obj":"NameError: name 's_dict' is not defined"
  },
  "s731253908":{
    "code_string":"K,X = map(int,input().split())\n\nl = max(X-K+1,-1000000)\nr = min(X+K-1,1000000)\n\nans = []\n\nfor i in range(l,r+1):\n    ans.append(str(i))\n\nans = \" \".join(ans)\n\nprint(ans)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s829800402":{
    "code_string":"n = int(input())\ns = [\"\".join(sorted(list(input()))) for _ in range(n)]\ns.sort()\ncnt=0\nfor i in range(n-1):\n    if s[i]==s[i+1]:\n    cnt +=1\nprint(cnt)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s322369330":{
    "code_string":"n=int(input())\narr=[]\nfrom collections import Counter\nc=Counter([])\nfor _ in range n:\n  s=input()\n  z=[item for item in s]\n  z.sort()\n  z=tuple(z)\n  c[z]+=1\nans=0\nfor item in c.values():\n  ans+=(item*(item-1))\/\/2\nprint (ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s148137302":{
    "code_string":"from sys import stdin\nimport copy\n\nn = int(input())\nS = [stdin.readline()[:-1] for i in [0]*(n-1)]\nS.append(stdin.readline())\ns = []\nfor i in S:\n    s.append(\"\".join(sorted(i)))\ns.sort()\narr = []\ntemp = 1\nfor i in range(n-1):\n    if temp>1 and s[i]!=s[i+1]:\n        arr.append(temp)\n        temp = 1\n    if s[i]==s[i+1]:\n        temp += 1\nif temp>1:\n    arr.append(temp)\narr.sort()\nfactorial = [1]\nfor i in range(arr[-1]+1):\n    factorial.append(factorial[i]*(i+1))\ncomb = [0,0]\nfor i in range(2,arr[-1]+1):\n    comb.append(factorial[i]\/(2*factorial[i-2]))\nans = 0\nfor i in arr:\n    ans += comb[i]\nprint(int(ans))",
    "error_obj":"IndexError: list index out of range"
  },
  "s773719513":{
    "code_string":"n=int(input())\ns={}\nfor i in range(n):\n  tmp=list(input().strip()).sort()\n  tmp=\"\".join(tmp)\n  s[tmp]=s.get(tmp,0)+1\n  \nans=0\nfor key in s.keys():\n  v=s[key]\n  if v<2:\n    continue\n  cmb=v*(v-1)\n  cmb=cmb\/\/2\n  ans+=cmb\nprint(ans)",
    "error_obj":"TypeError: can only join an iterable"
  },
  "s115462982":{
    "code_string":"from collections import Counter\nfrom math import factorial\nn = int(input())\ns = [''.join(sorted(list(input()))) for _ in range(n)]\n\ndef combination(i):\n    return factorial(i) \/\/ (factorial(i-2) * factorial(2))\n\ncnt = Counter(s)\nprint(cnt)\nans = 0\nfor i in cnt.values():\n    print(i)\n    ans += combination(i)\n\nprint(ans)",
    "error_obj":"ValueError: factorial() not defined for negative values"
  },
  "s561727516":{
    "code_string":"from heapq import*\n(N, M), *t = [map(int, s.split()) for s in open(0)]\nq, z = [], 0\nv = [q for _ in [None] * 10**5]\nfor a, b in t:\n    v[a - 1] += b,\nfor i in v[:M]:\n    for j in i:\n        heappush(q, -j)\n    if q:\n        z += -heappop(q)\nprint(z)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s967320083":{
    "code_string":"#\u5165\u529b:N,M(int:\u6574\u6570)\ndef input2():\n\treturn map(int,input().split())\n\nn,m=input2()\nAB=[[] for _ in range(m)]\n\n\nfor i in range(n):\n\ta,b=input2()\n\tif a-1 < m: #\u5831\u916c\u53d7\u53d6\u65e5\u304cm\u3092\u8d85\u3048\u308b\u4ed5\u4e8b\u306f\u9664\u5916\u3059\u308b\n\t\tAB[a-1].append(-b) #heapq\u306e\u4ed5\u69d8\u306e\u305f\u3081\uff0c-\u3092\u8ffd\u52a0\n\nans=0\nheap=[]\nfor i in range(m):\n\tfor b in AB[i]:\n\t\theapq.heappush(heap,b)\n\t#\u6700\u5927\u5024\u3092heap\u304b\u3089\u53d6\u308a\u51fa\u3057\n\tif len(heap)>0:\n\t\tMAX=heapq.heappop(heap)\n\t\tans+= -MAX\nprint(ans)",
    "error_obj":"NameError: name 'heapq' is not defined"
  },
  "s667128447":{
    "code_string":"mport heapq\nn,m=map(int,input().split())\nlist=[[] for i in range(m)]\nh=[]\nfor i in range(n):\n  a,b=map(int,input().split())\n  if a<=m:\n    list[a-1].append(-b)\nans=0\nfor i in range(m):\n  for j in list[i]:\n    heapq.heappush(h,j)\n  if h:\n    ans+=-heapq.heappop(h)\n  else:\n    continue\nprint(ans)  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s134973257":{
    "code_string":"from heapq import*\n(N, M), *t = [map(int, s.split()) for s in open(0)]\nq, z = [], 0\nv = [q for _ in [0] * 10**5]\nfor a, b in t:\n    v[a - 1] += b,\nfor i in v[:M]:\n    for j in i:\n        heappush(q, -j)\n    z += -heappop(q)\nprint(z)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s376393973":{
    "code_string":"a, b, c = map(int, input().split())\nwater = c-(a-b)\nprint(water if water > 0 else 0",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s198664763":{
    "code_string":"a,b,c=map(int,input().split())\nprint(max(c-(a-b)),0)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s624581332":{
    "code_string":"a, b, c = map(int,input().split())\nprint(max(0,c - (a - b))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s388568591":{
    "code_string":"a,b,c=map(int,input().split)\nprint(max(0,c-a+b))\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s974658301":{
    "code_string":"import sys\nA,B,C = map(int,input().split())\nif not ( 1 <= B <= 20 and B <= A <= 20 ): sys.exit()\nif not ( 1 <= C <= 20 ): sys.exit()\n\nres =  C - (A - B)\nprint(res) if res >= 0 else: print(0) ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s764004619":{
    "code_string":"A = int(input(\"A\"))\nB = int(input(\"B\"))\nC = int(input(\"C\"))\n\nif A >= B + C:\n    print(0)\nelse:\n    print((B + C) - A)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '6 4 3'"
  },
  "s358599380":{
    "code_string":"\n\n    a,b,c=map(int,input().split())\n    print(max(0,c-max(0,a-b)))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s645390132":{
    "code_string":"A,B,C = map(int,input().split())\nif C-A+B>0:\n    print(C=A+B)\nelse:\n    print(0)\n",
    "error_obj":"TypeError: 'C' is an invalid keyword argument for print()"
  },
  "s947184711":{
    "code_string":"A,B,C=map(int,sinput().split())\nif(C>=A-B):\n  print(C-(A-B))\nelse:\n  print(0)",
    "error_obj":"NameError: name 'sinput' is not defined"
  },
  "s484875399":{
    "code_string":"a, b, c = map(int,input().split())\nprint(max(c-a-b),0)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s584701003":{
    "code_string":"list(a,b,c)=map(int,input().split())\n\nprint(max(c - (a-b), 0))",
    "error_obj":"SyntaxError: cannot assign to function call"
  },
  "s638169030":{
    "code_string":"a, b, c = map(int,input().split())\n\nprint(mak(0,c-(a-b)))\n",
    "error_obj":"NameError: name 'mak' is not defined"
  },
  "s441361248":{
    "code_string":"a,b,cmap(int,input().split())\nif a-b>=c:\n    print(0)\nelse:\n    print(c-a+b)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s167350027":{
    "code_string":"a = list(map(int.input().split()))\nprint(max(0,a[2]-(a[0]-a[1])))",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s673632754":{
    "code_string":"a,b,c = int(input().split())\n\nif (a-b) <= c:\n  print(str(c - (a - b)))\nelse:\n  print(\"0\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s536470692":{
    "code_string":"#c-(a-b)\nprint(max(-1*int(input())+int(input())+int(input()),0))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '6 4 3'"
  },
  "s293029545":{
    "code_string":"a,b,c = map(int,input().split())\nq = a-b\nans = c - ans\n\nif ans < 0:\n  ans = 0\n  \nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s141574068":{
    "code_string":"a, b, c = map(int,input()split())\nans = c - (a - b)\nif(ans < 0):\n  print(0)\nelse:\n  print(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s181681964":{
    "code_string":"n=int(input())\nans=0\nfor i in range(1,n+1):\n  if len(i)%2==1:\n    ans=ans+1\nprint(ans)\n",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s889253806":{
    "code_string":"N=int(input())\nl=[]\n\nif N%2==0:\n  for i in range(0,N+1,2):\n    n=len(str(i))\n    if n%2==1:\n      l.append(n)\nprint(len(l))\n\nElse:\n  for j in range(1,N+1,2):\n    n=len(str(i))\n    if n%2==1:\n      l.append(n)\nprint(len(l))\n  \n  \n\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s131353675":{
    "code_string":"n = int(input())\nans = 0\nfor i in range(1,n+1):\n  if (len(i) % 2) != 0:\n    ans += 1\nprint(ans)",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s293319714":{
    "code_string":"N = input()\n\ncount = 0\nfor i in range(1,N+1):\n  if len(str(i)) % 2 != 0:\n    count += 1\n\nprint(count)\n  \n  ",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s412057837":{
    "code_string":"N = input()\n\ncnt=0\n\nfor i in range(1,N+1):\n    if len(str(i)) %2 != 0:\n        cnt+=1\nprint(cnt)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s729080135":{
    "code_string":"for i in range(1, int(input())+1):\n\tif len(str(i))%2==1:\n\t\tprint(len[i])  ",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s797959226":{
    "code_string":"n=int(input())\n \nr=0\n \nfor i in range(1,n+1)\n\tif len(str(i))%2==1:\n    \tr+=1\nprint(r)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s845834603":{
    "code_string":"a = int(input())\nfor i in range(1, a + 1):\n  if len(str(i)) % 2 ==1: ans+=1   \nprint(ans)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s999638482":{
    "code_string":"n = int(input())\nres = 0\nfor i in range(n + 1):\n  if str(i) % 2 == 1:\n    res += 1\nprint(res0\n    ",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s747694085":{
    "code_string":"n=int(input())\nif len(n)==1:\n    print(n)\nelif len(n)==2:\n    print(9)\nelif len(n)==3:\n    print(n-90)\nelif len(n)==4:\n    print('909')\nelif len(n)==5:\n    print(n-9090)\nelse:\n    print('90909')",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s316818388":{
    "code_string":"import sys    #\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3084\u5b9f\u884c\u74b0\u5883\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nimport os     #\u30d5\u30a9\u30eb\u30c0\u3084\u30d5\u30a1\u30a4\u30eb\u3092\u64cd\u4f5c\nimport math\n\nN=input()\ncount=0\n\nfor i in range(N):\n    if i==0:\n        continue\n    if i<10:\n        count +=1\n    elif i<1000:\n        count +=1\n    elif i<100000:\n        count+=1\n\nprint(count)\ninput()\n\n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s300998319":{
    "code_string":"n = input()\ncount = 0\nfor i in range(n+1):\n  if len(i)%2 == 1:\n    count += 1\n    \nprint(count)\n",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s405097966":{
    "code_string":"N = int(input())\nans = 0\nfor n in range(1,N+1):\n    if len(str(n)) % 2 == 1:\n    ans += 1\nprint(ans)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s584978592":{
    "code_string":"ans=0\nfor i in range(1,n+1):\n  if len(str(i))%2:\n    ans+=1\nprint(ans)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s967450542":{
    "code_string":"#<B>\nN = input()\nans = 0\nfor i in range(1, int(N + 1)):\n    if len(str(i)) % 2 != 0:\n        ans += 1\n\nprint(ans)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s677767951":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\n \nans = 'Yes'\nfor i in range(N-1, 0, -1):\n  if A[i] > A[i-1]: A[i-1] -= 1\n    if A[i] > A[i-1]:\n      ans = 'No'\n      break\n\nprint(ans)\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s556452296":{
    "code_string":"N=int(input())\nH=list(map(int,input()))\np,a=True,0\nfor h in H:\n  if h>a:\n    a=h-1\n  elif a>h:\n    p=False\n    break\nprint(\"Yes\" if p else \"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s981704906":{
    "code_string":"n = int(input())\nh = list(map(int, input().split()))\n\njudge = 0\nfor i in range(n):\n  if a[i] < judge:\n    print(\"No\")\n    break\n  judge = max(judge, a[i]-1)\nelse:\n  print(\"Yes\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s383441573":{
    "code_string":"import bisect,collections,copy,heapq,itertools,math,string\nfrom collections import defaultdict as D\nfrom functools import reduce\nimport numpy as np\nimport sys\nimport os\nfrom operator import mul\n\nsys.setrecursionlimit(10**7)\n\ndef _S(): return sys.stdin.readline().rstrip()\ndef I(): return int(_S())\ndef LS(): return list(_S().split())\ndef LI(): return list(map(int,LS()))\n\nif os.getenv(\"LOCAL\"):\n    inputFile = basename_without_ext = os.path.splitext(os.path.basename(__file__))[0]+'.txt'\n    sys.stdin = open(inputFile, \"r\")\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353    \n\nN = I()\nH = LI()\n\n# \u77ed\u8abf\u975e\u6e1b\u5c11 H[i] <= H[i+1]\n\nif N ==1:\n    print('Yes')\n    break\nans = True\nfor i in range(N-1):\n    if H[i] <= H[i+1]:\n        # print(i,'1')\n        continue\n    elif (not i==0) and H[i]-1 == H[i+1]:\n        if not H[i-1] == H[i]:\n            H[i] -= 1\n            # print(i,'2')\n            continue\n    # print(i,'3')\n    ans = False\n    break\n\nif ans:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"SyntaxError: 'break' outside loop"
  },
  "s060021826":{
    "code_string":"N=int(input())\nH=map(int,input().split())\n\np1=p2=0\nfor i in H:\n   print(prv,i,i<prv-1,prv<=i, prv-1<=i)\n   if i<max(p2,p1-1):\n    #print('No')\n    break\n   if i<p1:\n    p2=p1-1\n   else:\n    p2=p1\n   p1=i\nelse:\n    print('Yes')",
    "error_obj":"NameError: name 'prv' is not defined"
  },
  "s429041697":{
    "code_string":"import sys\nn=int(input())\nh=list(map(int,input().split()))\nif h[0]>0:\n  h[0]-=1\nfor i in range(1,n):\n  if h[i-1]==h[i]:\n    sonomama=1\n  elif h[i]>[i-1]:\n    h[i]-=1\n  else:\n    print(\"No\")\n\tsys.exit()\nprint(\"Yes\")\n    ",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s134284744":{
    "code_string":"N = int(input())\nH = list(map(int, input().split()))\nans = True\nlis = {}\nfor i in H:\n  if i in lis:\n    lis[i] += 1\n  else:\n    lis[i] = 1\nmine = min(H)\ntimes = lis[mine]\nfor i in range(N):\n  if mine < H[i]-1:\n    ans = False\n    break\n  else:\n    if H[i] == mine:\n      times -= 1\n    if times == 0 and i != N-1:\n      del lis[mine]\n      lis = sorted(lis)\n      mine = next(iter(lis))\n      times = lis[next(iter(lis))]\nif ans:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s427656383":{
    "code_string":"n = int(input())\nx\uff1d[list(map(int,input().split()))]\ny = []\nfor i in x:\n  if x[i]>x[i+1]:\n    y.append(x[i]-1)\n  else:\n    y.append(x[i])\nfor j in y:\n  if y[j]>y[j+1]:\n    print(\"No\")\n    exit()\nprint(\"Yes\")",
    "error_obj":"SyntaxError: invalid character '\uff1d' (U+FF1D)"
  },
  "s315903139":{
    "code_string":"N=int(input())\nL=list(int(input()) for _ in range(N))\nM=L[::-1]\nfor i in range(N-1):\n    if M[i]+1<M[i+1]:\n        print('No')\n        break\n    elif M[i]+1==M[i+1]:\n        M[i+1]=M[i]\nelse:print('Yes')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 2 1 1 3'"
  },
  "s968561610":{
    "code_string":"N=int(input())\nH=list(map(int,input().split()))\n\nif N==1:\n    print('Yes')\nelse:\n    for i in range(N-1):\n        if H[N-i-2]>= H[N-i-1]+2:\n            print('No')\n            exit()\n        elif H[N-i-2]==H[N-i-1]+1:\n            H[[N-i-2]-=1\n    \n    for j in range(N-1):\n        if  H[i]>H[i+1]:\n            print('No')\n            exit()\n    print('Yes')\n            ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s328579033":{
    "code_string":"# -*- coding: utf-8 -*-\nn = int(input())\nh = reversed(list(map(int, input().split())))\n\ncnt = 0\nfor i in range(n-1):\n    if h[i+1] - h[i] > 1:\n        print('No')\n        exit(0)\n    elif h[i+1] - h[i] == 1:\n        h[i+1] -= 1\n\nprint('Yes')\n",
    "error_obj":"TypeError: 'list_reverseiterator' object is not subscriptable"
  },
  "s975846755":{
    "code_string":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn = I()\nH = readInts()\nma = H[0]\nfor i in range(1,n):\n    if ma < H[i]:\n        A[i] -= 1\n    if ma <= H[i]:\n        ma =  H[i]\n    else:\n        print('No')\n        exit()\nprint('Yes')\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s111029732":{
    "code_string":"n = int(input())\nh = list(map(int,input().split()))\n\nfor i in range(1,n-1):\n    if h[i-1] <= h[i] <= h[i+1]:\n        continue\n    else:\n        if h[i]>h[i+1]:\n            h[i] -= 1\n            if h[i]< h[i-1]:\n                print('No')\n                exit()\n\nfor i in range(1,n-1):\n    if not h[i-1]=<h[i] <= h[i+1]:\n        print('No')\n        exit()\n\nprint('Yes')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s647090784":{
    "code_string":"S = input()\n\ncounter = []\ncnt_dict = {'R':0, 'L':0}\nfor i in range(len(S)):\n    l = S[i]\n    if l == 'R':\n        if cnt_dict['L'] == 0:\n            cnt_dict[l] += 1\n        else :\n            counter.append(cnt_dict)\n            cnt_dict = {'R':0, 'L':0}\n            cnt_dict[l] += 1\n    else :\n        cnt_dict[l] += 1\ncounter.append(cnt_dict)\n        \noutput = []\nfor c in counter:\n    block_R = [0 for _ in range(c['R'])]\n    block_L = [0 for _ in range(c['L'])]\n    q, r = divmod((c['R'] + c['L']), 2)\n    if r == 0:\n        block_R[-1] = q\n        block_L[0] = q\n    else :\n        if c['R'] % 2 == 0:\n            block_R[-1] = q\n            blcok_L[0] = q + r\n        else :\n            block_R[-1] = q + r\n            block_L[0] = q\n    \n    \n    output += block_R\n    output += block_L\n    \nprint(' '.join(map(str,output)))\n",
    "error_obj":"NameError: name 'blcok_L' is not defined"
  },
  "s560861282":{
    "code_string":"import sys\nfrom operator import itemgetter\n\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef lmi(): return list(map(int, input().split()))\ndef lmif(n): return [list(map(int, input().split())) for _ in range(n)]\ndef ss(): return input().split()\n\ndef main():\n    s = input()\n    children = [0] * len(s)\n    s += \"E\"\n    start = 0\n    now = 0\n    while now < len(s)-1:\n        r = 0\n        l = 0\n        while s[now] == \"R\":\n            r += 1\n            now += 1\n        er = now - 1\n        sl = now\n        while s[now] == \"L\":\n            l += 1\n            now += 1\n        count = now - start\n        if count % 2 == 0:\n            children[er] = count \/\/ 2\n            children[sl] = count \/\/ 2\n        else:\n            if r % 2 == 1:\n                children[er] = count \/\/ 2 + 1\n                children[sl] = count \/\/ 2\n            else:\n                children[er] = count \/\/ 2\n                children[sl] = count \/\/ 2 + 1\n        start = now\n\n    print(*children)\n\n    return\n\nmain()\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s974892349":{
    "code_string":"l,r=list(map(int,input().split()))\ns=[]\nif r-l>2050:\n  print(0)\nelse:\n  for i in range(l,r+1):\n    s.append(i%2019)\n  s.sort()\n  print(s[0]*s[1])\n  \n  ",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'RRLRL'"
  },
  "s007675187":{
    "code_string":"S = input()\nN = len(S)\nans = [0] * N\ni = 0\nwhile i < N:\n  count = 1\n  while S[i+count] == S[i]:\n    count += 1\n    if count == N-1-i:\n      break\n  if S[i] == 'R':\n    ans[i+count] += (count+1)\/\/2\n    ans[i+count-1] += count\/\/2\n  else:\n    ans[i] += (count+1)\/\/2\n    ans[i-1] += count\/\/2\n  i += count\nprint(*ans)",
    "error_obj":"IndexError: string index out of range"
  },
  "s937724362":{
    "code_string":"N,M=map(int,input().split())\nif (N+M)%2==0:\n  print((N+M)\/2)\n else:\n  print(\"IMPOSSIBLE\")",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s670022580":{
    "code_string":"m, n = map(int, input.split())\ntotal = m + n\nif total % 2 == 0:\n  print(total \/\/ 2)\nelse:\n  print('IMPOSSIBLE')",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s842451821":{
    "code_string":"a, b = map(int,input().split())\nif (a - b) % 2 == 0:\n  print(a-(a-b\/\/2)\nelse:\n  print(\"IMPOSSIBLE\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s385829086":{
    "code_string":"\ndef Input():\n    return mapt(int, input().split(\" \"))\n\n\ndef main():\n    a, b = Input()\n    if a % 2 !=  b % 2:\n        print(\"IMPOSSIBLE\")\n    else:\n        print((a+b)\/\/2)\n\nmain()",
    "error_obj":"NameError: name 'mapt' is not defined"
  },
  "s857659942":{
    "code_string":"A, B = map(int, input().split())\nprint((A + B) \/\/ 2) if A % 2 == B % 2 else print(\"IMPOSSIBLE)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s666210577":{
    "code_string":"a, b = map(int, input().split( ))\ns = a + b\nif s %2 ==1:\n  print('IMPOSSIBLE')\nelse;\nprint(s\/\/2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s592675708":{
    "code_string":"N=int(input())\n\nstep = sum([90*100**i for i in range(len(str(N))\/\/2)])\ndance_floor = sum([9*100**i for i in range(len(str(N))\/\/2)])\n\nans = len(str(N))%2 * (N-step)  +  -1*(len(str(N))%2-1) * dance_floor\nprint(ans)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 16'"
  },
  "s797876002":{
    "code_string":"a,b = map(int,input().split())                                    \u2502abc136  abc138  abc140  abc142  abc144  abc146  abc148\nk = a+b                                                           \u2502abc137  abc139  abc141  abc143  abc145  abc147  python\nif k%2:                                                           \u2502(base) rrif@rrif-dynabook-T65-EG:~\/document\/atcoder$ mkdir abc 13\n    print('INPOSSIBLE')                                           \u25025\nelse:                                                             \u2502(base) rrif@rrif-dynabook-T65-EG:~\/document\/atcoder$ rm -r abc\n    print(k\/\/2) ",
    "error_obj":"SyntaxError: invalid character '\u2502' (U+2502)"
  },
  "s299428449":{
    "code_string":"ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"Yes\") if fl else print(\"No\")\nimport collections\nimport math\nimport itertools\nimport heapq as hq\na,b = ma()\nk2 = abs(b-a)\nif k%2==1:\n    print(k2\/\/2+min(b,a))\nelse:\n    print(\"IMPOSSIBLE\")\n",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s329284671":{
    "code_string":"length = int(input())\nlist_p = list(map(int,input().split()))\n#list_p.sort()\ncount = 0\nfor i in range(length):\n  if list_p[i] != (i+1):\n    count += 1\n \nif count <= 2 :\n  print (\"YES\")\nelse :\n  print (\"NO\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 16'"
  },
  "s096599990":{
    "code_string":"a,b=map(int,input().split())\nif (a+b)\/2.is_integer():\n  print((a+b)\/\/2)\nelse:\n  print(\"IMPOSSIBLE\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s607242192":{
    "code_string":"a, b = map(Int,input().split())\nif (a + b) % 2 == 0:\n  print((a + b)\/\/2)\nelse:\n  print('IMPOSSIBLE')",
    "error_obj":"NameError: name 'Int' is not defined"
  },
  "s969784951":{
    "code_string":"a, b = map(int,input().split())\nx = a + b\nif x % 2 == 0:\n    print(s \/ 2)\nelse:\n    print('IMPOSSIBLE')",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s331405109":{
    "code_string":"a,b=list(map(int,input().split()))\nif (a+b)%2==0:\n  print(int((a+b)\/2))\nelse:\n  print('IMPOSSIBLE'",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s004066743":{
    "code_string":"A, B = map(int(input()))\nif (A+B) % 2 == 0:\n  print((A+B)\/\/2)\nelse:\n  print('IMPOSSIBLE')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 16'"
  },
  "s191422493":{
    "code_string":"A, B = map(int, input())\n\nif (A+B) %2 == 0: print((A+B) \/\/ 2)\nelse: print('IMPOSSIBLE')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s927784865":{
    "code_string":"if (A+B)%2==0:\n\tprint((A+B)\/\/2)\nelse:\n\tprint(\"IMPOSSIBLE\")",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s642363921":{
    "code_string":"a, b = map(int, input().split())\nif (a + b) % 2 == 0 :\n  print ((a + b) \/ 2)\nelse :\n  print (\"IMPOSSIBLE)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s665280003":{
    "code_string":"n = int(input())\np = list(map(int,input().split()))\ncnt = 0\nfor i in range(n):\n  if p[i] != (i+1):\n    cnt += 1\nprint(\"YES\" if cnt == 0 or cnt == 2 else \"NO\") ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 16'"
  },
  "s013256924":{
    "code_string":"import sys, os, math, bisect, itertools, collections, heapq, queue\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\nfrom decimal import Decimal\nfrom collections import defaultdict, deque\n\n# import fractions\n\nsys.setrecursionlimit(10000000)\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\nfl = lambda: list(map(float, sys.stdin.buffer.readline().split()))\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\n\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\nsl = lambda: list(map(str, sys.stdin.buffer.readline().decode().split()))\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\nlcm = lambda x, y: (x * y) \/\/ math.gcd(x, y)\n# lcm = lambda x, y: (x * y) \/\/ fractions.gcd(x, y)\n\nMOD = 10 ** 9 + 7\nMAX = float('inf')\n\n\ndef main():\n    if os.getenv(\"LOCAL\"):\n        sys.stdin = open(\"input.txt\", \"r\")\n\n    N = ii()\n    P = il()\n    cnt = 0\n    for n in range(N):\n        if P[n] != n + 1:\n            cnt += 1\n        if P[P[n]] != n+1:\n            print('NO')\n            exit()\n    print('NO' if cnt > 3 else 'YES')\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s366569162":{
    "code_string":"\nn=int(input())\np=list(map(int,input().split()))\nnew_p=p.sort()\ncnt=0\n\nfor i in range(n):\n    if p[i] != new_p[i]:\n        cnt += 1\n        \nif cnt > 2:\n    print('NO')\nelse:\n    print('YES')",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s251369470":{
    "code_string":"n = int(input())\np = list(map(int, input().split()))\nanswer = 0\nfor i in range(n):\n  if p[i] + 1 != p[i + 1]:\n  \tanswer += 1\n  if answer <= 2:\n    print('Yes')\n  else:\n    print('No')",
    "error_obj":"IndexError: list index out of range"
  },
  "s845259768":{
    "code_string":"n = int(input())\na = [int(i) for in input().split()]\nt = 0\nfor i in range(n):\n for j in range(i+1,n):\n  t += a[i] > a[j]\nprint(\"YES\" if t < 2 else \"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s118913043":{
    "code_string":"N = int(input())\nP = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(1, N+1):\n    if P[i] != i:\n        cnt += 1\n        \nprint('YES' if cnt == 2 else 'NO')",
    "error_obj":"IndexError: list index out of range"
  },
  "s365478496":{
    "code_string":"n = int(intput())\nA = list(map(int,input().split()))\nB = A.sorted()\ndif = 0\nfor i in range(n):\n  if A[i]!=B[i]:\n    dif+=1\nif dif==0 or dif==2:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s960386334":{
    "code_string":"N=int(input)\nList = list(map(int, input().split()))\nmid = -1\nflag = True\nfor i in range(N):\n  if List[i] == i+1:\n    pass\n  else:\n    flag = False\n    if mid == -1:\n      mid = List[i]\n    else:\n      if mid == List[i]:\n        print(\"YES\")\n      else:\n        print(\"NO\")\nif flag:\n  print(\"YES\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s536884367":{
    "code_string":"N = int(input())\nS = list(map(int, input().split()))\nMin_S = min(S)\nMin_idx = S.index(Min_S)\n\n\nS[0], S[Min_idx] = S[Min_idx], S[0]\nif S == Sort_S:\n    print('YES')\nelse:\n    print('NO')",
    "error_obj":"NameError: name 'Sort_S' is not defined"
  },
  "s506248875":{
    "code_string":"def check(n, list1): \n    new = [] \n    for i in range(n): \n        new.append(list1[i]) \n          \n    new.sort() \n      \n    # Check if 0 or 1 swap required  \n    # to get the sorted array  \n    swaps = 0\n    for i in range(n): \n        if list1[i] != new[i]: \n            swaps += 1\n              \n    if swaps == 0 or swaps == 2: \n        return True\n    else: \n        return False\n  \nn = int(input())\nnumbers=[]\nfor i in range(n):\n    numbers.append(int(input()))\n\nif check(n, numbers): \n    print(\"YES\")\nelse:\n    print(\"NO\") \n\n ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 2 3 4 1'"
  },
  "s037988765":{
    "code_string":"#!\/usr\/bin\/env python\n# coding: utf-8\n\n# In[26]:\n\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n\n# In[27]:\n\n\nans = 0\nfor i in range(N):\n    ans += min(A[i], B[i])\n    B[i] = max(B[i]-A[i])\n\n\n# In[ ]:\n\n\n\n\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s780477801":{
    "code_string":"# coding: utf-8\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    for i in range(N):\n        b = int(input())\n        tmp = A[i] - b\n        if tmp < 0:\n            ans += A[i]\n            if A[i + 1] < -tmp:\n                ans += A[i + 1]\n                A[i + 1] = 0\n            else:\n                ans += -tmp\n                A[i + 1] += tmp\n        else:\n            ans += b\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 5'"
  },
  "s750754741":{
    "code_string":"def solv():\n    n = int(input())\n    A = list(map(int,input().split()))\n    B = list(map(int,input().split()))\n    ans = 0\n\n    for i in range(n):\n        x = A[i] + A[i+1]\n        ans += min(x,B[i])\n        A[i+1] = min(A[i+1],max(x-B[i+1],0))\n    return print(ans)\n\nsolv()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s505706047":{
    "code_string":" = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = 0\n\nfor i in range(n):\n  if a[i] < b[i]:\n    ab = b[i] - a[i]\n    if a[i+1] > ab:\n      ans += b[i]\n      a[i+1] -= ab\n    else:\n      ans += a[i] + a[i+1]\n      a[i+1] = 0\n  else:\n    ans += b[i]\n\nprint(ans)\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s704226215":{
    "code_string":"import sys\nimport math\n\nread = sys.stdin.read\nreadline = sys.stdin.buffer.readline\n\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    S = int(input())\n    x1 = math.ceil(S**0.5)\n    x2 = X1**2 -S\n    print(0, 0, x1, 1, x2, x1)\n\n\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"NameError: name 'X1' is not defined"
  },
  "s045986263":{
    "code_string":"r = input()\n\nprint(3*r**2)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s666389252":{
    "code_string":"print(a*int(input())**2)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s470908944":{
    "code_string":"print (3 * input() * input())",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s297244220":{
    "code_string":"# -*- coding: utf-8 -*-\nprint(3*int(input)**2)\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s378745863":{
    "code_string":"r = int(input())\nprint(3 * a * a)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s201466465":{
    "code_string":"r=int(input())\nprint(3r**2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s249754824":{
    "code_string":"r=int(input())\nprint(3*a*a)\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s866514221":{
    "code_string":"n=int(input())\na = [int(input()) for _ in range(n)]\nb = max(a)\nc = a.index(b)\nfor i in range(n):\n        if i == c:\n                print(max(sorted(a)[:n-1]))\n        else:\n                print(b)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s755363826":{
    "code_string":"r=int(input())\nprint(int(3*r**))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s499394540":{
    "code_string":"print(3*a**2)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s681745304":{
    "code_string":"r = input()\nprint (3 * r ** 2)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s851032833":{
    "code_string":"from math import ceil\n\na,b=map(int,input().split())\n\nprint(math.ceil(a\/\/(2*b+1)))\n",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s779884593":{
    "code_string":"a, b=list(map(int, input()))\nprint((a-1)\/(2*b + 1)\/1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s646108729":{
    "code_string":"n,d = map(int, input().split())\nprint(n \/\/ (2d + 1) + 1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s461477097":{
    "code_string":"n,d=map(int,inpit().split())\nx=2*d+1\nprint((d+x-1)\/\/x)",
    "error_obj":"NameError: name 'inpit' is not defined"
  },
  "s682240641":{
    "code_string":"n,d = map(int,input().split())\np = n\/(2d+1)\nif p % 1 ==0:\n  print(p)\nelse:\n  print((p\/\/1)+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s026806867":{
    "code_string":"N, D = map(int, input().split())\n\n# \u524d\u304b\u3089\u6700\u9069\u306b\u914d\u7f6e\u305b\u3088\n# \u4e00\u4eba\u76ee\u306f, 1,...,D, D+1, D+2,...,2D+1 \u3092\u76e3\u8996\n# \u4e8c\u4eba\u76ee\u306f, 2D+2,..., 3D+2, ...,4D+2 \u3092\u76e3\u8996\n# x\u4eba\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3068\u30011,...,x(2D+1)\u307e\u3067\u76e3\u8996\u3067\u304d\u308b\n\n# x(2D+1) > N \u3092\u6e80\u305f\u3059\u6700\u5c0f\u306ex\u306f\uff1f\n# x_min = ceil(N\/(2D+1))\n\nprint(-(-N\/\/(2D+1)))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s533244238":{
    "code_string":"n, d = map(int, input().split())\nprint(math.ceil(n \/ (2*d +1)))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s217120857":{
    "code_string":"import math \nn,d=map(int,input().split())\nprint(math.ceil(n\/(s*2+1)))\n",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s651909418":{
    "code_string":"N,D=map(int,input().split())\nprint(math.ceil(N\/(2*D+1)))\n",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s735836863":{
    "code_string":"import math\na,b=map(int,input().split())\nprint(math.ceil(a\/(2b+1)))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s582225671":{
    "code_string":"N = int(input())\nA = [int(input()) for _ in range(N)]\n \n# M_list = index(max(A_1,...,A_N))\n# M = max(A)\n# sub_M = sub_max(A)\n\n# i\u304cM_list\u306b\u542b\u307e\u308c\u308b\u3068\u304d\u306b\u306fsub_M\u3092\u51fa\u529b\n# \u305d\u308c\u4ee5\u5916\u3067\u306fM\u3092\u51fa\u529b\n\nM = max(A)\nsub_M = 0\nfor i in range(N):\n  if i not in M_list:\n    sub_M = max(sub_M, A[i])\n    \nM_list = []\nfor i in range(N):\n  if A[i] == M: M_list.append(i)\n    \nfor i in range(N):\n  if i in M_list: print(sub_M)\n  else: print(M)",
    "error_obj":"NameError: name 'M_list' is not defined"
  },
  "s818108968":{
    "code_string":"sn = int(input())\narr = [int(input()) for _ in range(n)]\narr.sort()\nmx = arr[-1]\nsc = arr[-2]\n\nfor ele in arr:\n    if ele == mx:\n        print(sc)\n    else:\n        print(mx)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s755827063":{
    "code_string":"n = int(input())\na = [int(input()) for i in range(n)]\nsa = a.sort()\nam, asl = sa[-1], sa[-2]\nfor i in range(n):\n    print(asl if a[i] == am else am)",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s511962650":{
    "code_string":"n = int(input())\na = [int(input()) for _ in range(n)]\n\nb = sorted(a)\n\nfor i in a:\n    if i = b[-1]:\n        print(b[-2])\n    else:\n        print(b[-1])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s142452371":{
    "code_string":"a_l = [ int(input()) for _ in range(n)]\n\nl = []\nr = []\nl_max = 0\nr_max = 0\nfor i in range(n):\n    l_max = max(l_max, a_l[i])\n    r_max = max(r_max, a_l[-i-1])\n    l.append(l_max)\n    r.append(r_max)\nfor i in range(n):\n    if i == 0:\n        t_l = 0\n    else:\n        t_l = l[i-1]\n    if i == n-1:\n        t_r = 0\n    else:\n        t_r = r[-i-2]\n    print(max([t_l,t_r]))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s024121392":{
    "code_string":"n=int(input())\na = [int(input()) for _ in range(n)]\nb = max(l)\nc = a.index(b)\nfor i in range(n):\n        if i == c:\n                print(max(sorted(a)[:n-1]))\n        else:\n                print(b)",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s088467280":{
    "code_string":"n = int(input())\na = [int(input()) for i in range(n)]\nq = set(sorted(a))\n\nfor i in range(n):\n  if a[i] != q[-1]:\n    print(q[-1])\n  else:\n    print(q[-2])",
    "error_obj":"TypeError: 'set' object is not subscriptable"
  },
  "s676665442":{
    "code_string":"n = int(input())\n\nmax_1 = 0\nmax_2 = 0\nmax_index = 0\n\nfor i in range(n):\n\titem = int(input())\n    if item >= max_1:\n        max_1, max_2 = item, max_1\n        max_index = i\n    elif item > max_2:\n        max_2 = item\n\nfor i in range(n):\n    ans = max_2 if i == max_index else max_1\n    print(ans)\n\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s668124630":{
    "code_string":"N = int(input())\nA = [int(input()) for _ in range(N)]\n\nm1, m2 = sorted(A, reversed=True)[0:2]\nfor a in A:\n    print(m2 if a == m1 else m1)",
    "error_obj":"TypeError: 'reversed' is an invalid keyword argument for sort()"
  },
  "s299478725":{
    "code_string":"N, D = map(int, input().split())\n \n# \u524d\u304b\u3089\u6700\u9069\u306b\u914d\u7f6e\u305b\u3088\n# \u4e00\u4eba\u76ee\u306f, 1,...,D, D+1, D+2,...,2D+1 \u3092\u76e3\u8996\n# \u4e8c\u4eba\u76ee\u306f, 2D+2,..., 3D+2, ...,4D+2 \u3092\u76e3\u8996\n# x\u4eba\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3068\u30011,...,x(2D+1)\u307e\u3067\u76e3\u8996\u3067\u304d\u308b\n \n# x(2D+1) > N \u3092\u6e80\u305f\u3059\u6700\u5c0f\u306ex\u306f\uff1f\n# x_min = ceil(N\/(2D+1))\n \n# ceil(B\/A) = floor((A+B-1)\/A)\nprint((N+2*D) \/\/ (2*D+1))",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s046291030":{
    "code_string":"n=int(input())\na=[]\nb=sorted(a)\nmx=b[-1]\nmx2=b[-2]\nfor i in a:\n    if i==mx:\n        print(mx2)\n    else:\n        print(mx)",
    "error_obj":"IndexError: list index out of range"
  },
  "s417848398":{
    "code_string":"N=int(input())\nl=[]\nl.append(int(input()))\nl.append(int(input()))\nm1=max(l)\nmx=min(l)\nfor _ in range(N-2):\n  l.append(int(input()))\n  if l[-1] >= m1:\n    m2 = m1\n    m1 = l[-1]\n  elif l[-1] > m2:\n    m2 = l[-1]\nfor i in range(N):\n  if l[i] == m1:\n    print(m2)\n  else:\n    print(m1)",
    "error_obj":"NameError: name 'm2' is not defined"
  },
  "s624034831":{
    "code_string":"a = [int(input()) for i in range(n)]\nm = max(a)\np = a.index(m)\ns = max(a)\nfor i in range(n):\n    if i != p:\n        print(m)\n    else:\n        print(s)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s970797186":{
    "code_string":"N=int(input())\na=list(map(int,input().split()))\nbox=[0]*N\nfor i in range(N, 0,-1):\n    sm = 0\n    for j in range(i, N+1, i):\n        sm += box[j-1]\n    print(i, sm)\n    box[i-1] = (sm % 2) ^ a[i-1]\nprint(sum(box))\nprint(*sum)",
    "error_obj":"TypeError: print() argument after * must be an iterable, not builtin_function_or_method"
  },
  "s276654907":{
    "code_string":"import sys\ninput = sys.stdin.readline\nimport numpy as np\nfrom numba import njit\n\n\ndef read():\n    N = int(input().strip())\n    A = [int(input().strip()) for _ in range(N)]\n    return N, A\n\n\n@njit\ndef segtree_init(size, init_value=10**8, dtype=np.int32):\n    \"\"\"\u521d\u671f\u5316\"\"\"\n    n = 1\n    while size > 1:\n        size >>= 1\n        n += 1\n    treesize = n * 2\n    st = np.full(treesize, init_value, dtype=dtype)\n    st_idx = np.arange(treesize, dtype=dtype)\n    offset = st.shape[0] \/\/ 2\n    return st, st_idx, offset\n\n@njit\ndef segtree_update(st, st_idx, offset, key, value, init_value=10**8):\n    \"\"\"\u5024\u306e\u66f4\u65b0\"\"\"\n    k = offset + key\n    st[k] = value\n    k >>= 1\n    while k > 0:\n        if st[k * 2] <= st[k * 2 + 1]:\n            st[k] = st[k * 2]\n            st_idx[k] = st_idx[k * 2]\n        else:\n            st[k] = st[k * 2 + 1]\n            st_idx[k] = st_idx[k * 2 + 1]\n        k >>= 1\n\n    \n@njit\ndef _segtree_find_le(st, st_idx, offset, value, k=1, init_value=10**8):\n    \"\"\"value\u4ee5\u4e0b\u306e\u6700\u5927\u306e\u5024\u3092\u691c\u7d22\u3057\u3001(index, value)\u306e\u7d44\u3092\u8fd4\u3059\n    k: \u7740\u76ee\u3057\u3066\u3044\u308b\u30ce\u30fc\u30c9 (1-indexed)\n    l: \u63a2\u7d22\u533a\u9593 st[l, r) \u306e\u5de6\u7aef (0-indexed)\n    r: \u63a2\u7d22\u533a\u9593 st[l, r) \u306e\u53f3\u7aef (0-indexed)\n    \"\"\"\n    if value < st[k]:\n        return (st.shape[0], -init_value)\n    elif value == st[k] or k >= offset:\n        return (st_idx[k], st[k])\n    else:\n        li, lv = _segtree_find_le(st, st_idx, offset, value, k * 2, init_value=init_value)\n        ri, rv = _segtree_find_le(st, st_idx, offset, value, k * 2 + 1,  init_value=init_value)\n        mi = li if lv >= rv else ri\n        mv = lv if lv >= rv else rv\n        if mi < st.shape[0]:\n            return (mi, mv)\n        else:\n            return (st.shape[0], -init_value)\n    \n@njit\ndef segtree_find_le(st, st_idx, offset, value, init_value=10**8):\n    \"\"\"value\u4ee5\u4e0b\u306e\u6700\u5927\u5024\u3092\u691c\u7d22\u3057\u3001(index, value)\u306e\u7d44\u30921\u3064\u8fd4\u3059\n    \u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f-1\u3092\u8fd4\u3059\n    \"\"\"\n    i, v = _segtree_find_le(st, st_idx, offset, value, k=1, init_value=init_value)\n    if i == st.shape[0]:\n        return (-1, init_value)\n    else:\n        return (i - offset, v)\n\n\ndef solve(N, A, INF=10**9+1):\n    st, st_idx, offset = segtree_init(N)\n    l = 0\n    for a in A[::-1]:\n        k, v = segtree_find_le(st, st_idx, offset, -a-1)  # \u4ee5\u4e0b\u3092\u672a\u6e80\u306b\u3059\u308b\u305f\u3081-1\n        if k == -1:\n            segtree_update(st, st_idx, offset, l, -a)\n            l += 1\n        else:\n            segtree_update(st, st_idx, offset, k, -a)\n    return l\n\n\nif __name__ == '__main__':\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print(\"%s\" % str(outputs))\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s610067404":{
    "code_string":"from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\ncnt = Counter(a)\nif set(a) == set(0):\n    print('Yes')\n    exit()\n    \nif n % 3 != 0 or len(cnt) != 3:\n    print('No')\nelse:\n    key = []\n    num = []\n    for i, j in cnt.items():\n        key.append(i)\n        num.append(j)\n    if len(set(num)) != 1:\n        print('No')\n    else:\n        if key[0]^key[1] == key[2]:print('Yes')\n        else:print('No')",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s403709057":{
    "code_string":"from collections import Counter\n\nN = int(input())\n\nA = list(map(int, input().split()))\nc = Counter(A)\na = list(set(A))\n\n\nif len(a) >= 4:\n    ans = False\n\nelif len(a) == 3:\n    a, b, d = a\n    if c[a] == c[b] == c[d] and a^b = c and c^b == a and a^c == b:\n        ans = True\n    else:\n        ans = False\n\nelif len(a) == 2:\n    a, b = sorted(a)\n    if a == 0 and c[a] == N\/3 and c[b] == (N\/3)*2:\n        ans = True\n    else:\n        ans = False\n\nelif len(a) == 1:\n    if sum(a) == 0:\n        ans = True\n    else:\n        ans = False\n\nprint(\"Yes\" if ans else \"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s865062294":{
    "code_string":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\nimport sys\nsys.setrecursionlimit(10000000)\n#mod = 10**9 + 7\n#mod = 9982443453\nmod = 998244353\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn = I()\nli = list(map(int,input().split()))\nse = set(li)\nif len(se) == 1:\n    if sum(se) == 0:\n        print('Yes')\n    else:\n        priont('No')\nelif len(se) == 2:\n    a,b = sorted(se)\n    if a == 0:\n        if li.count(a) * 3 == n:\n            print('Yes') # 0 count is equal 1\n        else:\n            print('No')\n    else:\n        print('No')\nelif len(se) == 3:\n    a,b,c = se\n    if li.count(a) == li.count(b) == li.count(c):\n        if a^b == c:\n            print('Yes')\n        else:\n            print('No') # a xor b xor c = 0 is ok\n    else:\n        print('No')\nelse:\n    print('No')\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s749978966":{
    "code_string":"#!\/usr\/bin\/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nA = list(map(int, input().split()))\nn = N \/\/ 3\ndic = {}\n\nfor a in A:\n    if a in dic:\n        dic[a] += 1\n    else:\n        dic[a] = 1\n\nans = True\n\nif len(dic) > 3:\n    ans = False\n\nelif len(dic) == 3:\n    keys = dic.keys()\n    for k in keys:\n        if dic[k] != n:\n            ans = False\n\n    if (keys[0] ^ keys[1]) != keys[2]:\n        ans = False\n\nelif len(dic) == 2:\n    for k in dic:\n        if k == 0:\n            if dic[k] != n:\n                ans = False\n        else:\n            if dic[k] != n * 2:\n                ans = False\n\nelse:\n    keys = dic.keys()\n    if not 0 in keys:\n        ans = False\n\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: 'dict_keys' object is not subscriptable"
  },
  "s905811017":{
    "code_string":"n = int(input())\nl = list(map(int, input().split()))\nu = list(set(l))\nif len(u)==1 and u[0]==0:\n  print(\"Yes\")\nelif n%3==0:\n  if len(u)==2:\n  \tx = l.count(u[0])\n  \ty = l.count(u[1])\n    if (x==2*n\/3 and y==n\/3) or (y==2*n\/3 and x==n\/3):\n      print(\"Yes\")\n    else:\n      print(\"No\")\n  elif len(u)==3:\n    x = l.count(u[0])\n  \ty = l.count(u[1])\n    z = l.count(u[2])\n    if x==n\/3 and y==n\/3 and z==n\/3:\n      print(\"Yes\")\n    else:\n      print(\"No\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s031751128":{
    "code_string":"def get_caps(a):\n  dic = dict()\n\n  for ai in a:\n    dic.setdefault(ai, 0)\n    dic[ai] += 1\n\n  return dic\n\n\ndef is_match(caps):\n  global N\n\n  if 0 in caps.keys():\n    if caps[0] == N:\n      return True\n  \n  if N % 3 == 0:\n    if 0 in caps.keys() and len(caps) == 2:\n      if caps[0] == N\/\/3:\n        return True\n    elif len(caps) == 3:\n      x, y, z = caps.keys()\n    \n      if x ^ y ^ z == 0:\n        if caps[x] == caps[y] == caps[z] == N\/\/3:\n        return True\n\n\n# A - XOR Circle\nN = int(input())\na = list(map(int, input().split()))\n\n# \u5e3d\u5b50\u306e\u60c5\u5831\u3092dict\u306b\u5165\u308c\u308b\ncaps = get_caps(a)\n\nif is_match(caps):\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s893921827":{
    "code_string":"from collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = Counter(a)\ns = set(a)\nl = len(s)\n\nif l == 1 and a[0] == 0:\n    print('Yes')\nelif len(a) % 3 == 0:\n    if l == 2 and c[0] == n \/\/ 3:\n        print('Yes')\n    elif l == 3:\n        if s[0] ^ s[1] ^ s[2] == 0:\n            tmp = c[a[0]]\n            if all(x == tmp for x in c.values()):\n                print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')\n",
    "error_obj":"TypeError: 'set' object is not subscriptable"
  },
  "s454696788":{
    "code_string":"n,k,i,v=int(input()),1,2,n+1\np=print\nwhile k*2<v:k*=2\nif-n&k:p(\"No\");exit()\np(\"Yes\",v,3)\nwhile i<n:p(1,i,i,i+1,1,v+i,v+i,n+i);i+=2\nif~n&1:p(n,v+k,n+n,n^k)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s390639089":{
    "code_string":"N, A, B = map(int,input().split())\nt = N*A\nif t > B:\n  print(B)\nelif t < B:\n  print(t)\nelif t = B:\n  print(B)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s161379243":{
    "code_string":"def Input():\n    return mapt(int, input().split(\" \"))\n\n\ndef main():\n    n, a, b = Input()\n    ans = min(n*a, b)\n    print(ans)\n\n\nmain()",
    "error_obj":"NameError: name 'mapt' is not defined"
  },
  "s058362381":{
    "code_string":"list=list(map(int,input().split()))\nprint(min(list[1]*N, list[2]*N))",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s179461215":{
    "code_string":"A, B = map(int, input().split())\n\nprint(min(A*N, B))",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s756910754":{
    "code_string":"N,A,B = (int(x) for x in input(),split())\nprint(min(N*A,B))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s907364240":{
    "code_string":"inport numpy as np\n\nN,A,B = map(int,input().split(\" \"))\ncosts = A*N , B\n\nprint(min(costs))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s751552297":{
    "code_string":"inp = list(map(int, input().split()))\nif (inp[0] * inp[1]) <= ip[2] : \n\tprint (inp[0] * inp[1])\nelse :\n    print (inp[2])",
    "error_obj":"NameError: name 'ip' is not defined"
  },
  "s631993457":{
    "code_string":"n,a,b = map(int,input().split())\n\nc = n*a\nif c >= b:\nprint(b)\nelse:\nprint(c)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s763035171":{
    "code_string":"a = list(map(int,input().split()))\nif a[0]*a[1]<=a[2]:\n  prnit(a[0]*a[1])\nelse:\n  print(a[2])\n",
    "error_obj":"NameError: name 'prnit' is not defined"
  },
  "s985942585":{
    "code_string":"A, B, N = map(int, input().split())\n\ntotal_price = A + (N * B)\n\nprint(total_price - max(total_price))\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s939821166":{
    "code_string":"n, a, b = map(int, input.split())\n\nprint(min(n*a, b))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s621900975":{
    "code_string":"n,a,b=map(int,input().split()\nif n*a >= b:\n  print(b)\nelse:\n  print(n*a)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s010391755":{
    "code_string":"S_list = list(map(int,input().split()))\nn,a,b = S_list\nprint(min(n * a ,b)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s897414327":{
    "code_string":"a, b, c = list(map(intl, input().split()))\nif a * b >= c:\n  print(c)\nelse:\n  print(a * b)",
    "error_obj":"NameError: name 'intl' is not defined"
  },
  "s001481784":{
    "code_string":"n,d=map(int, readline().rstrip().split())\nm=[]\nfor _ in range(n):\n    arr=list(map(int, readline().rstrip().split()))\n    m.append(arr)\nans=0\nfor i in range(n-1):\n    for j in range(i+1,n):\n        a = 0\n        for k in range(d):\n            a += (m[i][k] - m[j][k])**2\n        x = int(a**(1\/2))\n        if x*2 == a:\n            ans+=1\nprint(ans)\n        \n        ",
    "error_obj":"NameError: name 'readline' is not defined"
  },
  "s254807825":{
    "code_string":"n, d = map(int, input().split())\nlst = []\nfor _ in range(n):\n  x = list(map(int, input().split()))\nans = 0\nfor i in range(n-1):\n  for j in range(i+1, n):\n    dist = 0\n    for k in range(d):\n      dist += (lst[i][k] - lst[j][k])**2\n    j = 1\n    while j**2 <= dist:\n      if j**2 == dist:\n        ans += 1\n        break\n      j += 1\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s972342492":{
    "code_string":"Thank you for your comment.\nWhen I run the above code, it just displays the text \"Loading....\" and doesn't jump to the \"login\" or \"home\" page.\nI'm not sure which part of the code is the cause, but I'm wondering if initState wasn't called",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s718614555":{
    "code_string":"from math import sqrt\nn,d = map(int, input().split())\n\nvs = []\nfor i in range(n):\n  v = list(map(int,input().split()))\n  vs.append(vs)\n\ndef ds(a,b):\n  s = 0\n  for i in range(d):\n    s += (b[i] - a[i])**2\n  return sqrt(s)\n\nans = 0\nfor i in range(n):\n  for j in range(i+1,n):\n    d = ds(vs[i], vs[j])\n    if d == int(d):\n      ans += 1\n      \nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'list'"
  },
  "s003707574":{
    "code_string":"#\u5165\u529b:N,M(int:\u6574\u6570)\ndef input2():\n\treturn map(int,input().split())\n\n#\u5165\u529b:[n1,n2,...nk](int:\u6574\u6570\u914d\u5217)\ndef input_array():\n\treturn list(map(int,input().split()))\n  \ndef euclid(y,z,d):\n\tresult=0\n\tfor i in range(d):\n\t\tresult+=(y[i]-z[i])**2\n\treturn math.sqrt(result)\n\n\nn,d=input2()\nX=[input_array() for _ in range(n)]\n\ncount=0\nfor i in range(n):\n\tfor j in range(i+1,n):\n\t\tdistance=euclid(X[i],X[j],d)\n\t\tif (distance%1) == 0:\n\t\t\tcount+=1\nprint(count)",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s143351162":{
    "code_string":"N, D = [int(n) for n in input().split()]\nX = []\nfor i in range(N):\n    X.append([int(m) for m in input().split()])\n\ndef get_distance(p1, p2):\n    d2 = 0\n    for i in range(D):\n        d2 += (p1[i] - p2[i])**2\n    return math.sqrt(d2)\n\ncount = 0\nfor i, j in itertools.combinations(range(N), 2):\n    if get_distance(X[i], X[j]).is_integer():\n        count += 1\n\nprint(count)",
    "error_obj":"NameError: name 'itertools' is not defined"
  },
  "s820331613":{
    "code_string":"import math\nn,d=map(int,input().split())\nx=[list(map(int,input().split())) for _ in range(n)]\ncnt=0\nfor i in range(n):\n  for j in range(i+1,n):\n    sum=0\n    for k in range(n):\n      sum+=(x[i][k]-x[j][k])**2\n    z=pow(sum,0.5)\n    if math.ceil(z)==math.floor(z):\n      cnt+=1\nprint(cnt)",
    "error_obj":"IndexError: list index out of range"
  },
  "s389073327":{
    "code_string":"import math\n \ndef gooddistance(l1, l2):\n    calc = []\n    \n    for i in range(len(l1)):\n        calc.append((l1[i] - l2[i])**2)\n \n    if math.sqrt(sum(calc)).is_integer():\n        return 1\n    else:\n        return 0\n \n n, d = map(int, input().split())\nlst = [list(map(int, input().split())) for _ in range(n)]\ncount = 0\n \nfor i in range(n):\n    for j in range(i+1,n):\n       count += gooddistance(lst[i],lst[j])\n \n print(count)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s576988193":{
    "code_string":"import sys\nimport numpy as np\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\n\ncnt = 0\nfor i in range(n):\n  for j in range(i):\n    a = sum((li[i] - li[j]) ** 2)**0.5\n    if a - a\/\/1 == 0:\n      cnt += 1\nprint(cnt)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s293160344":{
    "code_string":"import math\n\nn, d = map(int, input().split())\nx = [list(int, input().split()) for i in range(n)]\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(d):\n            dis = 0\n            dis += (x[i][k]-x[j][k])**2\n            if math.sqrt(dis) % 1 == 0:\n                cnt += 1\nprint(cnt)",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s244399638":{
    "code_string":"n, d = map(int, input().split())\nx_l = [list(map(int, input().split)) for _ in range(n)]\n\nans = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        tmp = 0\n        for k in range(d):\n            tmp += (x_l[j][k] - x_l[i][k]) ** 2\n        if tmp**0.5%1 == 0:\n            ans += 1\n\nprint(ans)\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s420118398":{
    "code_string":"import math\nN, D = map(int, input().split())\na = []\nans = 0\nfor _ in range(N):\n  tmp = list(map(int, input().split()))\n  a.append(tmp)\nfor n in range(N):\n  for m in range(n+1,N):\n \tdis = 0\n    for d in range(D):\n      dis += (a[n][d]-a[m][d])**2\n    if math.sqrt(dis) == int(math.sqrt(dis)):\n      ans += 1\nprint(ans)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s139351494":{
    "code_string":"import math\n\nN,D=map(int,input().split())\nX=[]\nfor _ in range(N):\n  X.append(list(map(int, input().split())))\ncount=0\nfor i in range(N-1):\n  for j in range(i+1,N):\n    a=0\n    for k in range(D):\n      a+=(X[i][k]-X[j][k])**2\n    if math.sqrt(a).is_integer():\n      coutn+=1\nprint(count)",
    "error_obj":"NameError: name 'coutn' is not defined"
  },
  "s378897442":{
    "code_string":"import math\n\nN, D = map(int, input().split())\nX = [list(map(int, input().split())) for _ in range(N))]\ncnt = 0\n\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n    tmp = 0\n    for k in range(D):\n        tmp += ((X[i][k] - X[j][k])** 2)\n    tmp = math.sqrt(tmp)\n    if tmp.is_integer:\n        cnt += 1\n\nprint(cnt)\n",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s692829502":{
    "code_string":"n, d = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(list(map(int, input().split())))\ncount = 0\nimport math\nfor i in range(n):\n    for j in range(n):\n        sum  = 0\n        for i in range(d):\n            sum += (l[i][d] -l[i][d]) ** 2\n        dis = sqrt(sum)\n        if dis % 1 == 0:\n            count += 1\nprint(count)",
    "error_obj":"IndexError: list index out of range"
  },
  "s830557133":{
    "code_string":"import sys\nimport itertoolsy\nN,D = map(int,input().split())\narray = [ list(map(int,input().split())) for x in range(N) ]\n\nif not ( 2 <= N <= 10 and 1 <= D <= 10 ): sys.exit()\nfor I in array:\n    if not ( -20 <= min(I) and max(I) <= 20 ): sys.exit()\n\ncount = 0\nfor I in list(itertools.combinations(array,2)):\n    tmp_distance = 0\n    for J in range(D):\n        tmp_distance += abs(I[0][J] - I[1][J]) ** 2\n    distance = tmp_distance ** 0.5 \n    if distance.is_integer(): count += 1\n\nprint(count)",
    "error_obj":"ModuleNotFoundError: No module named 'itertoolsy'"
  },
  "s863601525":{
    "code_string":"n,d =map(int,input().split())\nl= [list(map(int, input().split())) for i in range(N)]\na = 0\nans +=1\nfor i in range(n):\n    for j in range(i+1,n):\n        for k in range(d):\n            a += l[i][k]**2 - l[j][k]**2\n            a **=0.5\n            if a.is_integer:\n                ans +=1\nprint(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s796011258":{
    "code_string":"N,D = map(int,input().split())\nimport numpy as np\nxlist = [list(map(int,input().split())) for i in range(n)]\nxarray = np.array(xlist)\nans = 0\nfor i in range(n):\n  for j in range(i+1,n):\n    if np.linalg.norm(xarray[i]-xarray[j])==int(np.linalg.norm(xarray[i]-xarray[j])):\n      ans+=1\nprint(ans)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s189420428":{
    "code_string":"N,D = (int(x) for x in input().split())\nX = []*N\nfor i in range(N):\n  X[i] = [float(x) for x in input().split()]\ncount = 0\nfor i in range(N-1):\n  for j in range(i+1,N):\n    sq = [(X[i][k]-X[j][k])**2 for k in range(D)]\n    if isinstance(sum(sq)**0.5 , int):\n      count += 1\nprint(count)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s044328482":{
    "code_string":"n, d = map(int, input().split())\nx = [list(map(int, input().split())) for i in range(n)]\ncnt = 0\nfor i in range(n):\n  for j in range(i+1, n):\n    a = x[i]\n    b = x[j]\n    z = 0\n    for k in range(d):\n      z += (a[k] - b[k]) ** 2\n    if math.sqrt(z) % 1 == 0:\n      cnt += 1\nprint(cnt)",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s951355269":{
    "code_string":"#! python3\n#  solve_133B.py\n\nimport math\n\ndef dis(Y,Z):\n    ans = 0\n    for i in range(len(Y)):\n        ans += (Y[i] - Z[i])**2\n    return math.sqrt(ans)\n\n\nN,D = map(int,input(().split()))\nX = []\nans = 0\n\nfor i in range(N):\n    X.append(list(map(int,input().split())))\n\nfor i in range(N):\n    for j in range(i,N):\n       if dis(i,j) % 1 == 0:\n           ans += 1\n\nprint(ans)",
    "error_obj":"AttributeError: 'tuple' object has no attribute 'split'"
  },
  "s999160059":{
    "code_string":"L,R = map(int,input().split())\n \nif R - L >=2019:\n  print(0)\nelse:\n  ans = 2019\n  for i in range(L,R-1):\n    for j in range(i+1,R):\n    ans = min(ans,(i*j)%2019)\n  print(ans)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s995707594":{
    "code_string":"l,r = map(int,input().split())\nif r-l >=2019:\n    print(0)\nelse:\n    ans = 2019\n    for i in raneg(l,r):\n        for j in range(i+1,r+1):\n            ans = min(ans,i*j%2019)\n    print(ans)",
    "error_obj":"NameError: name 'raneg' is not defined"
  },
  "s482714098":{
    "code_string":"l, r = map(int, input().split())\n\nrem_l = l%2019\nrem_r = r%2019\n\nans = -1\n\nif r - l >= 2019:\n    ans = 0\n\nelif rem_l >= rem_r:\n    ans = 0\n\nelse:\n    ans = float('INF')\n    for i in range(l, r):\n        for j in raneg(i, r):\n            temp = (i * j) % 2019\n            if temp < ans:\n                ans = temp\n\nprint(ans)\n",
    "error_obj":"NameError: name 'raneg' is not defined"
  },
  "s927397142":{
    "code_string":"L, R = map(int, input().split())\nR = min(R, L+2019)\nprint(min([i * j % 2019 for i in range(L, R+1) for jj in range(i+1, R+1)]))\n",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s521525735":{
    "code_string":"L.R=map(int,input().split())\nans=float('inf')\nfor i in range(L,R+1):\n  for j in range(L,R+1):\n    s=(i*j)%2019\n    if s==0:\n      print(0)\n      exit()\n    else:\n      ans=min(s,ans)\n      \nprint(ans)\n    ",
    "error_obj":"NameError: name 'L' is not defined"
  },
  "s310233396":{
    "code_string":"l,r=map(int,input().split())\nimport sys\nmod=2019\nans=float('inf')\n\nfor i in range(l,r+1):\n  for j in range(j+1,r+1):\n    ans=min((i*j)%mod,ans)\n    if ans==0:\n      print(0)\n      sys.exit()\nprint(ans)",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s571924059":{
    "code_string":"l,r = map(int, input().split())\n\nif r\/\/673 > (l-1)\/\/673 and r-l = 2:\n  print('0')\n\nelse:\n    print((l%2019) * ((l+1)%2019))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s076870914":{
    "code_string":"#ABC133 C\n\nL,R = map(int,input().split())\nA = []\nif R - L > 2019:\n    print(0)\nelif 2 <= R - L and R - L <= 2019:\n    for i in range(L,R):\n        for j in range(i+1,R+1):\n            A.append((i*j)%2019)\n    print(min(A))\nelif R - L = 1:\n    print((R*L)%2019)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s472768311":{
    "code_string":"l.r = map(int,input().split())\n\nmod = 2019\na = l%2019\nb = l%2019\n\nif r-l >= 2018:\n  print(0)\n\nelse:\n  if a < b:\n    print(a*a+1)\n  else:\n    print(0)",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s723073377":{
    "code_string":"from collections import Counter\ninp=list(map(int,input().split()))\nl=inp[0]\nr=inp[1]\nc=Counter([])\narr=[]\nfor i in range(l,r+1):\n  if c[i]==0:\n    c[i]+=1\n    arr.append(i)\n    continue\n  else:\n    break\nif c[0]!=0:\n  print (0)\nans=99999999999\nfor i in range(len(arr)):\n  for j in range(i+1,len(arr)):\n    ans=min(ans,(i*j)%2019)\n   \tif ans==0:\n      break\n  if ans==0:\n    break\nprint (ans)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s254088927":{
    "code_string":"L, R = map(int, input().split())\na=[]\n\nif R-L>=2019:\n  ans=0\nelse:\n  l, r = L%2019, R%2019\n  for i in range(l,r):\n    for j in range(l+1,r+1):\n        k = (i*j) % 2019\n        ans = min(ans,k)\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s956764965":{
    "code_string":"l,r=map(int,input().split())\nm,ans=2019,2018\nr=min(r,l+2019*2)\nfor i in range(l,r+1):\n  for j in range(i+1,r+1):\n    i%=m\n    j%=m\n    ans=min(ans,(i*j)%m)\nprint(ans)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s677346903":{
    "code_string":"def main():\n s = input()\n if s[0] == s[4] and s[1] == s[2] and s[2] != s[3]:\n     print('Yes')\n else:\n     print('No')\nmain()",
    "error_obj":"IndexError: string index out of range"
  },
  "s848213106":{
    "code_string":"print('Yes' if len(set(input()))==2 and S.count(S[0])==2 else 'No')",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s935177886":{
    "code_string":"s = input()\nfor i in s:\n  if s.counter(i) != 2:\n    print('No')\n    exit()\nprint('Yes')",
    "error_obj":"AttributeError: 'str' object has no attribute 'counter'"
  },
  "s881545983":{
    "code_string":"from collections import Counter as C\n\nS = input()\n\nc = C(S)\nif len(c.keys())==2:\n  if c.values[0]==2:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s030204327":{
    "code_string":"s = input()\nt = set(s)\nif len(t) == 2 and s.count(list(t[0])) == 2:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: 'set' object is not subscriptable"
  },
  "s042779652":{
    "code_string":"s=input()\nprint(\"Yes\" if (sorted(s[:2])==sorted(s[2:]) and len(sorted(s[:2))==2) else \"No\")\n",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s367834234":{
    "code_string":"#ABC132 A\n\nS = str(input())\nT = [S[0],S[1],S[2],S[3]]\nT.sort()\nif T[0] == T[1] and T[2] == T[3] and T[1] != T[2]\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s173622424":{
    "code_string":"s=sort(input())\nif (s[0]==s[1]) and (s[2]==s[3])\u3000and (s[0]!=s[2]):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s569254146":{
    "code_string":"if len(set(input())) ==2: print(\"Yes)\nelse: print(\"No\")                                ",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s532374972":{
    "code_string":"s = input()\nif((s[0]==s[1] and s[2]==s[3] and s[0]!=s[2]) or (s[0]==s[2] and s[1] ==s[3] and s[0]!=s[1])\n   and (s[0]===s[3] and s[1]==s[2] and s[0]!=s[1])):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s533183783":{
    "code_string":"s = input()\nd = {}\nfor i in range(4):\n  t = s[i:i+1]\n  try:\n    d[t] += 1\n  except:\n    d[t] = 1\nif(len(d) == 2):\n  frag = True\n  for i in range(2):\n    if(d[i] != 2):\n      frag = False\n  if(frag):\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")",
    "error_obj":"KeyError: 0"
  },
  "s955726698":{
    "code_string":"from collections import defaultdict\nS = input()\nt = defaultdict(int)\nfor i in s:\n  t[i] += 1\nif len(t.keys()) == 2:\n  for i in t.values():\n    if i != 2:\n      print(\"No\")\n      break\n  else:\n    print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s667690285":{
    "code_string":"s=list(input())\na=len(set(s)\nif a==2:\n\tb=len([t for t in s if t==s[0]])\n\tif b==2:\n      \tprint('Yes')\n    else:\n      \tprint('No')\nelse:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s083794078":{
    "code_string":"a=input()\na.sort()\nif a[0]==a[1] and a[2]==a[3]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s458322628":{
    "code_string":"s = input()\ns1 = set(input())\nif len(s1)==2:\n  if s.count(list(s1)[0])==2 and s.count(list(s1)[1])==2: print('YES')\n  else: print('NO')\nelse: print('NO')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s298365382":{
    "code_string":"from collections import defaultdict\ns = str(input())\nd = defaultdict(int)\nfor x in s:\n  d[x]+=1\nif len(d)==2:\n  for key,value in d:\n    if value!=2:\n      print(\"No\")\n      exit()\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  \n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s235653214":{
    "code_string":"s = input()\nif s[0] == s[1] == s[2] == s[3]:\n  print('No')\nelse:\n  if s[0] == s[1]:\n      if s[2] == s[3]:\n        print('Yes')\n      else:\n        print('No')\n    elif s[0] == s[2]:\n      if s[1] == s[3]:\n        print('Yes')\n      else:\n        print('No')\n    elif s[0] == s[3]:\n      if s[1] == s[2]:\n        print('Yes')\n      else:\n        print('No')",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s807198949":{
    "code_string":"\ndef main():\n    s = input()\n    s_ = list(set(s))\n    if s.count(s_[0]) == 2 and len(s_) == 2i:\n        print('Yes')\n    else:\n        print('No')\n   \n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s738259797":{
    "code_string":"s=list(input())\nif len(set(s))==2 and list(s).count(s[0])==2:\n  print(\"Yes\")\nelse:\n  print(\"No)\n",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s156576520":{
    "code_string":"S = input()\nS.sort()\nif S[0]==S[1] and S[2]==S[3] and S[1]!=S[2]:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s985786430":{
    "code_string":"S = sorted(list(map(int, input().split())))\nprint('Yes' if X[0]==X[1] and X[2]==X[3] else 'No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'ASSA'"
  },
  "s082240959":{
    "code_string":"# Vicfred\n# https:\/\/atcoder.jp\/contests\/abc132\/tasks\/abc132_b\n# implementation\nn = int(input())\np = list(map(int,input()))\n\nanswer = 0\nfor i in range(1, n-1):\n    if p[i-1] < p[i] < p[1+1] or p[i-1] > p[i] > p[i+1]:\n        answer += 1\n\nprint(answer)\n\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s670418911":{
    "code_string":"n = int(input())\np = map(int,input().split())\n\nans = 0\n\nfor i in range(1,n-1):\n  if p[i-1]<p[i]<p[i+1] or p[i+1]<p[i]<p[i-1]:\n    ans += 1\n    \nprint(ans)\n    ",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s400580882":{
    "code_string":"n = int(input())\narr = [map(int, input().split())]\nprint(sum([1 for i in range(len(arr)) if (((arr[i] < arr[i+1]) and (arr[i] > arr[i-1])) or ((arr[i] > arr[i+1]) and (arr[i] < arr[i-1])))]))\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s778210882":{
    "code_string":"n = int(input())\na = [int(k) for k in input().split()]\ncnt = 0\nfor i in range(n-3):\n  if a[i] < a[i+1] and a[i+1] < a[i+2]:cnt + =1\nprint(cnt)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s857025962":{
    "code_string":"n=int(input())\np=map(int,input().split())\ncount=0\nfor i in range(0,n-2):\n    if (p[i]<p[i+1] and p[i+1]<p[i+2]) or (p[i]>p[i+1] and p[i+1]>p[i+2]):\n        count += 1\nprint(count)\n",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s835587240":{
    "code_string":"N = int(input())\nP = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(N-2):\n  if P[i] > P[i+1] and P[i+1] > P[i+2] or P[i] < P[i+1] and P[i+1] < P[i+2] or :\n    ans += 1\n\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s870291199":{
    "code_string":"n = int(input())\np = list(map(int, input().split()))\n \nans = 0\nfor i in range(1, n-1):\n  if p[i] >= p[i-1] and p[i] =< p[i+1]: ans += 1\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s543945480":{
    "code_string":"n = int(input())\np = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(1, n):\n    if (p[i] - p[i - 1] > 0 and p[i + 1] - p[i] >= 0) or (p[i] - p[i - 1] <= 0 and p[i + 1] - p[i] < 0):\n        cnt += 1\nprint(cnt)",
    "error_obj":"IndexError: list index out of range"
  },
  "s443628705":{
    "code_string":"n, a* = map(int, open(0).read().split())\nt = 0\nfor i in range(1, n-1):\n  if sorted(a[i-1:i+2]).index(a[i]) == 1:\n    t += 1\nprint(t)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s439211592":{
    "code_string":"n=int(input())\np=list(map(int,input().split()))\n\nfor i in range(1,n-1):\n  if p[i-1]<p[i] and p[i]<p[i+1]:\n    cnt+=1\n  elif p[i+1]<p[i] and p[i]<p[i-1]:\n    cnt+=1\nprint(cnt)",
    "error_obj":"NameError: name 'cnt' is not defined"
  },
  "s978305733":{
    "code_string":"#ABC132 B\n\nn = int(input())\nK = 0\nfor i in range(n-2):\n    if (P[i]<P[i+1] and P[i+1] < P[i+2]) or (P[i+2]<P[i+1] and P[i+1]<P[i]):\n        K += 1\n        \nprint(K)",
    "error_obj":"NameError: name 'P' is not defined"
  },
  "s038081499":{
    "code_string":"n=int(input())\np=list( map(int, input().split()))\nans=0\nfor i in range(0,n):\n    if (p[i-1]<p[i]<p[i+1]) or (p[i-1]>p[i]>p[i+1]):\n        ans=ans+1\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s945240595":{
    "code_string":"N = int(input())\nP = sorted(list(map(int, input().split())))\n\nprint(L[N\/\/2]-L[N\/\/2-1])",
    "error_obj":"NameError: name 'L' is not defined"
  },
  "s540869912":{
    "code_string":"N=int(input())\nl=[int(i) for i in input().split()]\nl.sort()\nprint(max(0,l[int(N\/2)] - l[int(N\/2)-1])\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s805493999":{
    "code_string":"n=int(input())\nl=list(map(int,input().split()))\nl.sort()\na=n\/2\ns=l.index(a-1)\nt=l.index(a)\nif s==t:\n  print(\"0\")\nelse:\n  ans=t-s\n  print(ans)",
    "error_obj":"ValueError: 2.0 is not in list"
  },
  "s679168509":{
    "code_string":"n=int(input())\narr=list(map(int, input().rstrip().split()))\narr.sort()\n\nif arr[n\/\/2-1] == arr[n\/\/2]:\n  print(0)\n  return\nprint(arr[n\/\/2]-arr[n\/\/2-1])",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s139386959":{
    "code_string":"N = int(input().split())\nd = list(map(int, input().split()))\n\nd.sort()\nresult = d[int(N\/2)]-d[int((N-1)\/2)]\nprint(result)\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s415846615":{
    "code_string":"n = input()\ndl = list(map(int,input().split()))\ndl.sort()\n\nif n % 2 != 0:\n  print(0)\n  exit()\n\n  \nleft = dl[(n\/\/2)-1]\nright = dl[(n\/\/2)]\n\nprint(right-left)\n",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s114902881":{
    "code_string":"14\n99592 10342 29105 78532 83018 11639 92015 77204 30914 21912 34519 80835 100000 1",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s935154120":{
    "code_string":"N = int(input())\nA = list(int, input().split())\nA.sort()\nl = A[N\/\/2-1]\nh = A[N\/\/2]\nprint(h-l)",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s594777897":{
    "code_string":"99592 10342 29105 78532 83018 11639 92015 77204 30914 21912 34519 80835 100000 1",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s970032319":{
    "code_string":"N=int(input())\nd=list(map(int, input().split()))\n\nd=sorted(d)\nans=0\n \nfor i in range(10**7):\n    if d[int(N\/2-1)] < i and i <= d[int(N\/2)]:\n        ans +=1\n \nprint(ans)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s828110916":{
    "code_string":"n=int(input())\nd=list(map(int,input().split()))\nd.sorted()\nprint(d[n\/2]-d[n\/2-1])",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s205844920":{
    "code_string":"a=int(input())\nb=list(map(int,input().split()))\nb.sort()\nif b[(a\/2)-1]==b[(a\/2)]:\n  print(0)\nelse:\n  print(b[(a\/2)]-b[(a\/2)-1]-1)",
    "error_obj":"TypeError: list indices must be integers or slices, not float"
  },
  "s312181382":{
    "code_string":"# coding: utf-8\n\ndef main():\n    N = int(input())\n    d = sorted(list(map(int, input().split())))\n    ans = 0\n    if d[N \/ 2] != d[N \/ 2 - 1]:\n        ans = d[N \/ 2] - d[N \/ 2 - 1]\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: list indices must be integers or slices, not float"
  },
  "s581019497":{
    "code_string":"from scipy.misc import comb\n\nn, k = map(int, input().split())\n\nfor i in range(k):\n    print(int(comb(n - k + 1, i + 1) * comb(k - 1, i) % MOD))",
    "error_obj":"ImportError: cannot import name 'comb' from 'scipy.misc' (\/home\/alex\/.local\/lib\/python3.9\/site-packages\/scipy\/misc\/__init__.py)"
  },
  "s001795664":{
    "code_string":"import math\na,b,c,d = map(int,input().split())\n\n#c\u3067\u5272\u308a\u5207\u308c\u308b\u6570+d\u3067\u5272\u308a\u5207\u308c\u308b\u6570-gcd(c,d)\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\nans=(b\/\/c+b\/\/d-b\/\/(c*d\/\/math.gcd(c,d)))-((a-1)\/\/c+(a-1)\/\/d-(a-1)\/\/(c*d\/\/math.gcd(c,d)))\n\nprint(b-a+1-ans)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s569913254":{
    "code_string":"def split(word): \n    return [char for char in word]  \ninp=input()\nlist=split(inp)\ncount=0\nx=1\nstr=\"Good\"\nfor i in range(len(3):\n    if list[count]==list[count+1]:\n        str=\"Bad\"\n    count=count+1\nprint(str)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s181217912":{
    "code_string":"from itertools import groupby\nimport sys\nrr = lambda: sys.stdin.readline().rstrip()\ns = rr()\nprint('Good' if len(groupby(s)) == 4 else 'Bad')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "error_obj":"TypeError: object of type 'itertools.groupby' has no len()"
  },
  "s716971354":{
    "code_string":"arr = list(map(int, input().split()))\nfor k in range(len(arr)):\n  if arr[k] == arr[k+1]:\n    print(\"Bad\")\n    exit()\nprint(\"Good\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s816672870":{
    "code_string":"S = input()\n\nanswer = \"Good\"\nprev_s = s[0]\nfor s in S[1:]:\n  if prev_s == s:\n    answer = \"Bad\"\n    break\n  prev_s = s\n\nprint(answer)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s928721624":{
    "code_string":"s=int(input())\nans='Good'\nfor i in range(3):\n  if s[i]==s[i+1]:\n    ans='Bad'\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s596298006":{
    "code_string":"inp = input()\ninp = list(inp)\nhard = 0\nfor number in range(0, 3) :\n  if inp[number] == inp[number + 1] :\n    hard = 1\n    \nif hard == 0 :\n  print (\"Good\")\nelse :\n  print (\"Bad)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s955758582":{
    "code_string":"a=list(input())\ncount=0\nfor i in range(4):\n  if a[i]==a[i+1] and i==2:\n    count+=1\nprint(count)",
    "error_obj":"IndexError: list index out of range"
  },
  "s084303439":{
    "code_string":"str = input()\n\nflag = False\nfor i in range(len(str)) - 1:\n  if str[i] == str[i+1]:\n    flag = True\n\nprint(\"Bad\") if flag else print(\"Good\")",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'range' and 'int'"
  },
  "s420217188":{
    "code_string":"num=input()\nc=False\nfor i in range(1,len(num)+1):\n  if num[i]==num[i-1]:\n    c=True\n    \nif c==True:\n  print(\"Bad\")\nelse:\n  print(\"Good\")",
    "error_obj":"IndexError: string index out of range"
  },
  "s286630526":{
    "code_string":"s=str(input())\nif s[0]==s[1] or s[1]==s[2] or s[2]==s[3]:\n\tprint('Bad')\n    else:\n    \tprint('Good')",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s364997613":{
    "code_string":"s=list(int(input()))\nf=True\nfor i in range(1,4):\n\tif s[i-1]==s[i]:\n\t\tf=False\n\t\tbreak\n\telse:\n\t\tcontinue\nif f:\n\tprint(\"Good\")\nelse:\n\tprint(\"Bad\")",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s729435316":{
    "code_string":"s = input()\nflag = False\nfor i in range(3):\n  if List[i] == List[i+1]:\n    flag = True\nif flag:\n  print(\"Bad\")\nelse:\n  print(\"Good\")\n  ",
    "error_obj":"NameError: name 'List' is not defined"
  },
  "s965655745":{
    "code_string":"a = int(input())\nprint(\"Bad\" if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] else \"Good\")",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s126026428":{
    "code_string":"s = list(input())\nfor i in range(3):\n  \tif(s[i] == s[i+1]):\n  \t\tprint('Bad')\n \t\texit()\nelse:\n  print('Good')\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s743781721":{
    "code_string":"import math\n\nA, B, C, D = map(int, input().split(' '))\n\nnum_C_baisu = B\/\/C - (A-1)\/\/C #(math.ceil(A\/C) - 1)\n\nnum_D_baisu = B\/\/D - (A-1)\/\/D #(math.ceil(A\/D) - 1)\n\nCD = int(C*D\/math.gcd(C,D))\n\nnum_CD_baisu = B\/\/CD - (A-1)\/\/CD #(math.ceil(A\/CD) - 1)\n\nbaisu_num = num_C_baisu + num_D_baisu - num_CD_baisu\n\nprint(B-A+1-baisu_num)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s138829439":{
    "code_string":"s=int(input())\n\nfor i in range(3):\n  if s[i] == s[i+1]:\n    print(\"Bad\")\n    exit()\nelse:\n  print(\"Good\")",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s902452789":{
    "code_string":"s=input()\nprint(\"Good\" if len(s)=len(set(s)) else \"Bad\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s841097692":{
    "code_string":"a = range(1, 8 + 1)\n    b = range(1, 8 + 1)\n    c = range(1, 8 + 1)\n    d = range(1, 8 + 1)\n\n    if a == b or b == c or c == d:\n        return ('Bad')\n    else:\n        return ('Good')",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s550359007":{
    "code_string":"pass = input()\nif pass[0] == pass[1] or pass[1] == pass[2] or pass[2] == pass[3]: print(\"Bad\")\nelse: print(\"Good\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s714928287":{
    "code_string":"S=input()\np = a\nfor s in S:\n  if p == s:\n    p = a\n    break\n  else:\n    p = s\nprint(\"Bad\" if p == a else \"Good\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s449528113":{
    "code_string":"s = input()\nl = len(s)\nans = 0\n\nfor i in range(l):\n    for k in range(i,k) :\n        if s[i] == s[k]:\n            ans += 1\n\nif ans == 0:\n    print('Good')\nif ans !=0:\n    print('Bad')",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s571259944":{
    "code_string":"S = input()\nflag = False\nfor s in S:\n  if flag:\n    if temp = s:\n      print(\"Bad\")\n      quit()\n  temp = s\n  flag = True\nprint(\"Good\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s769985374":{
    "code_string":"s = int(input())\nans = \"Good\"\nfor i in range(10):\n  k = str(i)+str(i)\n  if(k in s):\n    ans = \"Bad\"\n    break\nprint(ans)",
    "error_obj":"TypeError: argument of type 'int' is not iterable"
  },
  "s425662018":{
    "code_string":"a,b=map(int,input().split())\ntotal=a*(a+2*b-1)\/\/2\nx=b\ny=a+b-1\nif (abs(x)<abs(y):\n  z=x\nelse:\n  z=y\nif x<=0 and y>=0:\n  print(total)\nelse:\n  print(total-z)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s744796285":{
    "code_string":"n.l=map(int,input().split())\n\n# l ~ l+n-1\n\nmin_abs=99999999999\nmin_abs_i=-1\nn_aji=0\nfor i in range(1,n+1):\n  aji=l+i-1\n  aji_abs=abs(aji)\n  if aji_abs < min_abs:\n    min_abs = aji_abs\n    aji_abs_i = i\n  n_aji+=aji\n\nprint(n_aji-(l+aji_abs_i-1))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s414713006":{
    "code_string":"N,L = map(int,input().split())\na = []\nfor i in range(1,N+1):\n  a.append(L+i-1)\nb = []\nfor i in a:\n  b.append(abs(i))\nfor i in range(1,N+!):\n  if abs(L+i-1) == min(b):\n    print(sum(a)-L-i+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s533526318":{
    "code_string":"N,L=map(int,input().split())\nli=[]\nfor i in range(N):\n    li.append(L+i+1-1)\nA=True\nli.sort()\nfor j in range(N-1):\n    if abs(li[j])<=abs(li[j+1]):\n        S-=li[j]\n        A=False\n        break\n\nif A==True:\n    S-=li[N-1]\n\nprint(S)\n",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s238452450":{
    "code_string":"N,L = map(int,input())\nA = list()\nfor i in range(N):\n  A.append(L+i)\nA.sort()\nS = sum(A)\nif min(A)*max(A)<=0:\n  print(S)\nelse:\n  if L>=0:\n    print(S-min(A))\n  else:\n    print(S-max(A))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s441402929":{
    "code_string":"N, L = map(int, input().split())\nA = []\nfor i in range(N):\n  A.append(L+i)\ni = 0\nfor k in A:\n  if i == 0:\n    x = 0\n  else:\n    x, y = abs(i), -abs(i)\n  i += 1\n  for \n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s738180140":{
    "code_string":"n,l=map(int,input().split())\na=list(range(l,l+n,1))\nx=sum(a)\nif(a in 0):\n  a.remove(0)\n  print(sum(a))\nelif(x<0):\n  a.remove(max(a))\n  print(sum(a))\nelif(x>0):\n  a.remove(min(a))\n  print(sum(a))",
    "error_obj":"TypeError: argument of type 'int' is not iterable"
  },
  "s227995500":{
    "code_string":"# -*- coding: utf-8 -*-\ndef pop_min_abs(l):\n    abs = map(abs, l)\n    return l.pop(abs.index(min(abs)))\n\n\n\nn, l = map(int, input().split())\n\napples = [l+i-1 for i in range(1,n+1)]\nprint(sum(pop_min_abs(apples)))\n",
    "error_obj":"UnboundLocalError: local variable 'abs' referenced before assignment"
  },
  "s777766838":{
    "code_string":"N,L = map(int,input().split())\n\napples = [i+L-1 for i in range(1,N+1)]\n\nans = float(\"inf\")\n\nfor apple in apples:\n  ans = min(ans,abs(apples))\n  \nprint(ans)",
    "error_obj":"TypeError: bad operand type for abs(): 'list'"
  },
  "s911724554":{
    "code_string":"n,l=map(int,input().split())\nc=0\nm=100000\nfor i in range(1,n+1):\n  c+=l+i-1\n  m=min(m,abs(l+i-1))\nif l<0 and a-n<=0:\n  print(c+d)\nelse:\n  print(c-d)",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s391433225":{
    "code_string":"n,l= map(int,input().split())\naj=[l + i  for i in range(n)]\najs = sum(aj)\nresl = []\nfor i in range(n):\n    aj2 = aj\n    del aj2[i]\n    resl += [sum(aj2)]\nresl2 = [abs(ajs-resl[i]) for i in range(n)]\nx = resl2.index(min(resl2))\nprint(aj[x])",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s921710190":{
    "code_string":"n.l = map(int,input().split())\nal = [l+i for i in range(n)]\na = min(al,key=abs)\nal.remove(a)\nprint(sum(al))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s361115578":{
    "code_string":"n,l = int(input())\ntastes = [(i + l) for i in range(n)]\nt = tastes.copy()\nfor j in range(n):\n    t[j] = abs(t[j])\ndel tastes[t.index(min(t))]\nprint(sum(tastes))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 2'"
  },
  "s939386509":{
    "code_string":"n,l = map(int,input().split())\n\nD=[]\nfor i in range(n):\n    d = l+i\n    D.append(d)\n\nif l>-1 :\n    mind = D[0]\nelif l+n<0:\n    mind = D[n-1]\nelse:\n    mind = 0\n\n\nans = sum(D)-mind\nprint(ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s279442376":{
    "code_string":"L, L+1, L+2, ..., L+N-1\nN, L = list(map(lambda x: int(x), input().split(\" \")))\n\nS = int(N * (N-1) \/ 2) + L * N\n\nif L >= 0:\n  print(S - L)\nelif L + N - 1 <= 0:\n  print(S - L - N + 1)\nelse:\n  print(S)",
    "error_obj":"NameError: name 'L' is not defined"
  },
  "s460837810":{
    "code_string":"n, l = map(int, input().split())\nt = list(map(lambda x: l + x, range(n)))\nr = sum(t)\nfor i in range(n):\n    tmp = sum(t[:i] + t[i + 1:])\n    dif_t = abs(r - tmp)\n    if i == 0:\n        dif = dif_t\n    if dif_t < dif:\n        ans = tmp\n        dif = dif_t\nprint(ans)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s290042232":{
    "code_string":"n,l=map(int,input().split())\nls=[]\nfor i in range(1,n+1):\n  ls.append(abs(l-1+i))\nmi=l.index(min(ls))\nprint(n*(l-1)+sum(range(1,n+1))-l-mi)",
    "error_obj":"AttributeError: 'int' object has no attribute 'index'"
  },
  "s476440953":{
    "code_string":"N, L = map(int, input().split())\n\n# \u5143\u3005\u306e\u5473\ns = (N-1)*(2*L+N-1) \/\/ 2\nl = [abs(s - (L+i)) for i in range(N)]\nm = min(l)\nprint(s - (L + [l.index(m)]))",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'list'"
  },
  "s904486773":{
    "code_string":"N, L = map(int, input().split())\n#L, L+N-1 => sum: (2L+N-1)*N \/\/ 2\nA = (2L+N-1)*N \/\/ 2\nif L*(L+N-1) <= 0:\n  print( A )\nelif L+N-1 < 0:\n  print( A - (L+N-1) )\nelse:\n  print( A - L )",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s304438157":{
    "code_string":"n, l = map(int, input().split())\na = sorted([l + i for i in range(n)], key=abs)\nprint(sum(s[1:]))\n\n",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s009648967":{
    "code_string":"N,L=map(int,input().split())\ns = N*L+sum(1,N+1)-N\nK=[]\nfor i in range(1,N+1):  \n    K.append(L+i-1)\nif 0 <= K[0]:\n    s -= K[0]\nelif K[0]<0 and K[N-1]>0:\n    s = s\nelse:\n    s -= K[N-1]\nprint(s)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s218908576":{
    "code_string":"N, L = map(int, input().split())\ns = []\nfor i in N:\n  s.append(i+L)\nt = abs(s)\ndel s[t.index(min(s))]\nprint(sum(s))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s260912469":{
    "code_string":"import math\n\nA, B, C ,D = map(int, input().split())\n\n\nC_multiple = B \/\/ C - A \/\/ C\nD_multiple = B \/\/ D - A \/\/ D \n\nif A % C == 0:\n    C_multiple += 1\nif A % D == 0:\n    D_multiple += 1\n        \n\nCD_gcd = C * D \/ math.gcd(C,D) \nCD_multiple = B \/\/ CD_gcd - A\/\/ CD_gcd \nif A % CD_gcd == 0:\n    CD_multiple += 1\n***\nprint(C_multiple)\nprint(D_multiple)\nprint(CD_gcd)\nprint(CD_multiple)\n***\nans = ( B - A + 1 ) - (C_multiple + D_multiple - CD_multiple)\nprint(int(ans))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s705465711":{
    "code_string":"import math\n\n\n# def calc(n, c, d):\n#     return n-(math.floor(n \/ c) +\n#               math.floor(n \/ d) - math.floor(n \/ (c * d \/ math.gcd(c, d))))\ndef calc(n, c, d):\n    return n-(n \/ c +\n              n \/ d - n \/ (c * d \/ gcd(c, d)))\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n\n    print(calc(b, c, d)-calc(a-1, c, d))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"NameError: name 'gcd' is not defined"
  },
  "s776668959":{
    "code_string":"import numpy as np\nimport fractions\n \nA,B,C,D = map(int,input().split())\nBA = np.arange(A, B+1)\nBA_C = BA % C\nBA_D = BA % D\nBA_CD = BA % (C * D\/\/fractions.gcd(C, D))\n \nC_count = np.count_nonzero(BA_C == 0)\nD_count = np.count_nonzero(BA_D == 0)\nCD_count = np.count_nonzero(BA_CD == 0)\n \nprint(len(BA)-(C_count+D_count-CD_count))",
    "error_obj":"AttributeError: module 'fractions' has no attribute 'gcd'"
  },
  "s228017603":{
    "code_string":"l=[]\nfor i in range(1,n+1):\n  l.append(abs(l-1+i))\nmi=l.index(min(l))\nprint(n*(l-1)+sum(range(1,n+1))-l-mi)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s372224978":{
    "code_string":"import math\ndef lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n\nA,B,C,D = list(map(int,input().split()))\nC_bai = list(range(A-(A%C)+C,B,C+1))\nD_bai = list(range(A-(A%D)+D,B,D+1))\nE = lcm(C,D)\nCD_bai = list(range(A-(A%E)+E,B,E+1))\nprint(B-A+1-len(C_bai)-len(D_bai)+CD_bai)\n    ",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'list'"
  },
  "s754280663":{
    "code_string":"from math\na,b,c,d=list(map(int,input().split()))\na-=1\ndef calculation(x,c,d):\n\tx=x-(x\/\/c)-(x\/\/d)+(x\/\/((c*d)\/\/math.gcd(c,d)))\n\treturn x\n\t\nprint(calculation(b,c,d)-calculation(a,c,d))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s734735055":{
    "code_string":"N = int(input())\n\nA = []\nfor i in range(N):\n    A.append(list(map(int, input().split())))\n\nA.sort(lambda x: x[1], x[0])\n\ngokei = 0\nfor i in A:\n    gokei += i[0]\n    if gokei > i[1]:\n        print(\"No\")\nelse:\n    print(\"Yes\")",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s775990128":{
    "code_string":"N = int(input())\nAB = [list(map(int,input().split())) for i in range(N)]\n\nsort_AB = sorted(AB, key= lambda x: x[1])\nans = 'Yes'\ntmp = 0\n\nfor i in range(N):\n    tmp += sortedAB[i][0]\n    if tmp > sortedAB[i][1]:\n        ans = 'No'\n        break\n        \nprint(ans)",
    "error_obj":"NameError: name 'sortedAB' is not defined"
  },
  "s946767618":{
    "code_string":"#35 C - Anti-Division\u3000\nimport math\nA,B,C,D = map(int,input().split())\n\n# C \u3068 D \u306e\u6700\u5c0f\u516c\u500d\u6570\u306e\u500b\u6570\nlcm = C*D\/\/math.gcd(C,D)\ncnt_lcm = B\/\/lcm - A\/\/lcm\n\n# C \u306e\u500d\u6570\u306e\u500b\u6570\ncnt_C = B\/\/C - (A-1)\/\/C \n\n# D \u306e\u500d\u6570\u306e\u500b\u6570\ncnt_D = B\/\/D - (A-1)\/\/D\n\n# (\u7bc4\u56f2\u5185\u306e\u6574\u6570) - (C \u306e\u500d\u6570 + D \u306e\u500d\u6570 - C,D \u306e\u516c\u500d\u6570)\nans = (B - A + 1) - (cnt_C + cnt_D - cnt_lcm)\n\n# \u7bc4\u56f2\u304c 1 \u3057\u304b\u306a\u3044\u3068\u304d\nif A == B:\n    # C \u3067\u3082 D \u3067\u3082\u5272\u308a\u5207\u308c\u308b\u3068\u304d\n    if A%C == 0 and A%D == 0:\n        print(0)\n    else:\n        print(1)\nelse:\n    print(ans)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s413554121":{
    "code_string":"n = int(input())\nwork = [list(map(int,input().split())) for _ in range(n)]\nwork = sorted(work,key = lambda x:x[1])\na = [0] * n\na[0] = work[0][0]\nfor i in range(1,N):\n    a[i] = a[i-1] + work[i][0]\nans = 'Yes'\nfor j in range(N):\n    if a[j] > work[j][1]:\n        ans = 'No'\n        break\nprint(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s967725790":{
    "code_string":"def main():\n    n =  int(input())\n    ls = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        ls.append([b,a])\n    ls = ls.sort()\n    t=0\n    for i in ls:\n        t += i[1]\n        if t > i[0]:\n            print('No')\n            exit(0)\n    print('Yes')\nif __name__ == '__main__':\n    main()",
    "error_obj":"TypeError: 'NoneType' object is not iterable"
  },
  "s425767020":{
    "code_string":"5\n2 4\n1 9\n1 8\n4 9\n3 12",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s904121924":{
    "code_string":"from e import resolve\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5 3\"\"\"\n        output = \"\"\"5\n4 3\n1 2\n3 1\n4 5\n2 3\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5 8\"\"\"\n        output = \"\"\"-1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"5 1\"\"\"\n        output = \"\"\"-1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"5 0\"\"\"\n        output = \"\"\"-1\"\"\"\n        self.assertIO(input, output)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'e'"
  },
  "s267209062":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.buffer.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.buffer.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nprint(10 if ri() >= ri() else 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 5\\n'"
  },
  "s719701697":{
    "code_string":"X,A=map(int(input().split()))\nif X<A:\n    print(0)\nelse:\n    print(10)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s617746778":{
    "code_string":"x,a = map(int,input())\n\nprint('0') if x<a else print('10')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s184981287":{
    "code_string":"x,a=map(int,input().split())\nif x<a:\n  print('0')\n  else:\n    print('10')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s894838716":{
    "code_string":"x, a = map(int, input().split())\nif s < a:\n    print(0)\nelse:\n    print(10)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s953315228":{
    "code_string":"def Input():\n    return mapt(int, input().split(\" \"))\n\ndef main():\n    a, b = Input()\n    print(0 if a < b else 10)\n\nmain()",
    "error_obj":"NameError: name 'mapt' is not defined"
  },
  "s599292659":{
    "code_string":"W,H,x,y = map(int,input().split())\nflg = 0\nif W\/2 == x and H\/2 ==y:\n    ans = (W*H)\/2\n    flg = 1\nelif W\/2 == x or H\/2 ==y:\n    ans = (W*H)\/2\n    flg = 0\nelse:\n    tatemax = min(W-x,x)*H\n    yokomax = min(H-y,y)*W\n    if tatemax == yokomax:\n        ans = tatemax\n        flg =1\n    else:\n        ans = max(tatemax,yokomax)\n        flg =0\nprint(str(ans)+ \" \" + str(flg))",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 2)"
  },
  "s644539551":{
    "code_string":"x, a = map(int, input())\nif 0 < a < x:\n  print(0)\nelse:\n  print(10)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s212188076":{
    "code_string":"\ndef main():\n    x, a = map(int, input().split())\n    if x < a:\n        print(0)\n    else:\n        print(10i)\n   \n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s378369234":{
    "code_string":"x,a = map(int,input().split())\npritn(0 if x < a else 10)",
    "error_obj":"NameError: name 'pritn' is not defined"
  },
  "s217350486":{
    "code_string":"a, b = map(int, input().split())\nif a[0] < b[1] :\n  print (0)\nelse:\n  print (10)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s514485171":{
    "code_string":"a, b = map(int, input().split())\nif x < a:\n  print(0)\nelse:\n  print(10)",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s085465469":{
    "code_string":"a,x=map(int,input().split())\nprint(10 if A>=X else 10)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s308499861":{
    "code_string":"X,A=int(input())\nif X<A:\n  print(0)\nelse:\n  print(10)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 5'"
  },
  "s588901900":{
    "code_string":"x,a = map(int,input())\nif x<a:\n  print(0)\nelse:\n  print(10)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s947229710":{
    "code_string":"x, a = map(int, input())\nif x < a:\n    print(0)\nelse:\n    print(10)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s217585944":{
    "code_string":"a,b = int(input().split())\n#lis = list(map(int,input().split()))\nif a<b:\n    print(\"0\")\nelse:\n    print(\"10\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s209027136":{
    "code_string":"n, x = map(int, input().split())\na = list(map(int, input().split()))\nl = [0] * (n+1)\nfor i in range(n):\n  L[i+1] = l[i] + a[i]\nans = 0\nfor i in l:\n  if i <= x:\n    ans += 1\nprint(ans)",
    "error_obj":"NameError: name 'L' is not defined"
  },
  "s675194591":{
    "code_string":"n,x=map(int,input().split())\narr=list(map(int,input().split()))\nd=0\nans=1\nfor a in arr:\n  d+=arr\n  if d <= x:\n    ans+=1\nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'list'"
  },
  "s313469596":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nc=list(map(int,input().split()))\nd=0\nfor i in range(a):\n  while d<b:\n    d=d+b[i]\n  print(d)\n  break",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s741259488":{
    "code_string":"n, x = map(int, input().split())\nl = [int(x) for x in input().split()]\nans = 0\nd = 0\nfor i in l:\n    d += i\n    ans += 1\n    if d > x:\n        print(ans)\n        exit(1)\n\n",
    "error_obj":""
  },
  "s321555394":{
    "code_string":"LI = lambda: list(map(int, input().split()))\n\nN, X = LI()\nL = LI()\n\n\ndef main():\n    ans = X \/\/ L\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'int' and 'list'"
  },
  "s979593589":{
    "code_string":"n,x=map(int, input().split())\nl=list(map(int, input().split()))\ncnt=0\nfor i in range(n):\n  if cnt+l[i]<=x:\n    cnt+=1\n    cnt+=l[i]\n  else:\n    break\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s369264591":{
    "code_string":"# n\u306f\u8df3\u306d\u308b\u56de\u6570\u3000d1 = 1 dn+1 = dn + ln\n\nn,x = map(int,input().split())\nl = list(map(int,input().split()))\n\nd = 1\ncount = 1\n\nfor y in range(n):\n  d = d + l[n]\n  if d <= x:\n    count += 1\n  else:\n    break\n    \nprint(count)\n  \n\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s262628790":{
    "code_string":"n,x = map(int,input().split())\nl = list(map(int,input().split()))\nd = 0\ncount=1\nfor i in range(n):\n  d += n[i]\n  if d<=x:\n    count+=1\nprint(count)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s346129219":{
    "code_string":"n, x = map(int,input().split())\nl = list(map(int, input().split()))\ns = 0\ncount = 1\nfor i in L:\n    s += i\n    if s > x:\n        break\n    count += 1\nprint(count)",
    "error_obj":"NameError: name 'L' is not defined"
  },
  "s046498978":{
    "code_string":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn,x = readInts()\nL = readInts()\ncnt = 0\nnow = 0\nwhile now <= x:\n    cnt += 1\n    now += L[cnt-1]\nprint(cnt)\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s870873373":{
    "code_string":"N,X = map(int,input().split())\nl=[0]\nl.append(list(map(int,input().split())))\n\nsum=0\nfor i in range(N+1):\n    sum += l[i]\n    if sum>X:\n        print(i)\n        exit()\nprint(N+1)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'list'"
  },
  "s897020607":{
    "code_string":"n,x = map(int.input().split())\nl = list(map(int,input().split()))\nsum = 0\nans = 0\nfor i in l:\n  sum += i\n  if sum <= x:\n    ans += 1\n    \n  ",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s121663404":{
    "code_string":"W,H,x,y = map(int,input().split())\n\n#print(W,H,x,y)\nif x ==W\/2 and y == H\/2:\n    area =  \"{0:.6f}\".format(float(x*H))\n    print(area,1)\nelse:\n    area =\"{0:.6f}\".format(float(min(W-x)*H,x*H))\n    print(area,0)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s039379487":{
    "code_string":"import bisect\nN, K = map(int, input().split())\nA = tuple(map(int, input().split()))\n\ns = [0] * (N + 1)\nfor i in range(N):\n    s[i+1] = s[i] + A[i]\nans = 0\nfor b in range(N):\n    i = bisect.bisect_left(s, K + s[b], b)\n    ans += (N + 1 - i)\nprint(ans)\n",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s154195157":{
    "code_string":"w,h,x,y=map(int,input()split())\narea=w*h\/2\nif x==w\/2 and y==h\/2:\n  print(area, '1')\nelse:\n  print(area, '0')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s442982008":{
    "code_string":"W,H,x,y = map(int,input().split())\nif y == H*x\/W or y == H - H*x\/W:\n    print(W*H,1.split())\nelse:\n    print(W*H,0.split())",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s806654849":{
    "code_string":"w,h,x,y=map(int,input().split())\nprint((w*h)\/2,(2x==w)&(2y==h))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s720286094":{
    "code_string":"W, H, x, y = list(map(lambda n: int(n), input().split(\" \")))\n\nS = W * H \/ 2\nflag = 1 if W == 2 * x and H == 2 * y else flag = 0\nprint(S, end=\" \")\nprint(flag)",
    "error_obj":"SyntaxError: cannot assign to conditional expression"
  },
  "s057560810":{
    "code_string":"W, H, x, y = map(int, input().split())\nans1 = W * H \/ 2\ncen_x, cen_y = W\/2, H\/2\nif cen_x == x and cen_y == y:\n  ans2 = 1\nelse:\n  ans2 = 0\nprint(ans1 + \" \" + ans2)\n",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'float' and 'str'"
  },
  "s561264131":{
    "code_string":"# -*- coding: utf-8 -*-\n\nw, h, x, y = map(int, input().split())\n\ncore = (w\/2, h\/2)\nbase = h\/w\nslope = (core[1]-y)\/(core[0]-x)\n\nmulti = (base >= slope and y == core[1]) or (base < slope and x == core[0])\n\nprint(w*h\/2, 1 if multi else 0)\n",
    "error_obj":"ZeroDivisionError: float division by zero"
  },
  "s546383881":{
    "code_string":"w,h,x,y=map(int,input().split())\ncandi=[x,y,w-x,h-y]\ncnt=0\nif min(candi)==x:\n  res= x*h\n  cnt+=1\nif min(candi)==y:\n  res= w*y\n  cnt+=1\nif min(candi)==w-x:\n  res=(w-x)*h\n  cnt+=1\nif min(candi)=h-y:\n  res=w*(h-y)\n  cnt+=1\nif cnt>0:\n  cnt=1\nprint(res,cnt)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s663323729":{
    "code_string":"import sys\nsys.setrecursionlimit(10**6)\n\nw, h, x, y = map(int, input().split())\n\narea = max(min(w*y, w*(h-y)), min(x*h, (w-x)*h))\nis_multi = 0\n\nif x == w\/\/2 and y == h\/\/2\n    is_multi = 1\n    \nprint(area, is_multi)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s189736047":{
    "code_string":"W, H, x, y = map(int, input().split())\n\nif W == 0 or H == 0:\n\nelif x == W \/ 2 and y == H \/ 2:\n    print(W * H \/ 2, 1)\nelse:\n    print(W * H \/ 2, 0)\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s985914034":{
    "code_string":" \ns = w*h\n \nif (w-x)*h > (h-y)*w:\n    print(float((w-x))*h,end = \" \")\n    print(0)\nelif (w-x)*h == (h-y)*w:\n    print(float((w-x))*h,end = \" \")\n    print(1)\nelse:\n    print(float((h-y))*w,end = \" \")\n    print(0)\n",
    "error_obj":"NameError: name 'w' is not defined"
  },
  "s294441333":{
    "code_string":"w, h, x, y = map(int, input().split())\n\njudge = (w == 2 * x and h == 2 * y)\ns = w * h \/ 2\nprint(area, 1 if judge else 0)\n",
    "error_obj":"NameError: name 'area' is not defined"
  },
  "s495893605":{
    "code_string":"T,Y,x,y=map(int,input().split())\na='0'\nif T\/2==x & Y\/2==y:\n  a='1'\nprint(T*Y\/2,a)\n",
    "error_obj":"TypeError: unsupported operand type(s) for &: 'int' and 'float'"
  },
  "s557284152":{
    "code_string":"w,h,x,y=map(int,input().split())\na = 0\nif(h==2*x and w ==2*y)\na +=1\nprint(w*h\/2,a)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s377212120":{
    "code_string":"import collections\nW,H,x,y = map(int,input().split())\ntmp = []\n\nif W==x*2:\n    print(x*H,1)\nelif H==y*2:\n    print(W*y,1)\nelse:\n    tmp.append(min(H*x,H*(W-x)))\n    tmp.append(min(W*y,W*(H-y)))\n\ntmp_cnt = collections.Counter(tmp)\nprint(tmp_cnt)\n\nif len(tmp_cnt)==1:\n    print(max(tmp_cnt.keys()),1)\nelse:\n    print(max(tmp_cnt.keys()),0)\n",
    "error_obj":"ValueError: max() arg is an empty sequence"
  },
  "s332423110":{
    "code_string":"W,H,x,y = list(map(float,input().split()))\n\nans = W * H\nans = float(float(ans) \/ 2.0)\nans2 = 0\nif x == float(float(W) \/ 2) and y == float(float(H) \/ 2):\n    ans2 = 1\n\nprint(ans + \" \" + ans2)",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'float' and 'str'"
  },
  "s728850286":{
    "code_string":"W,H,x,y = map(int,input().split())\nprint(W*H*0.5, int(x=W*0.5 and y=H*0.5))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s277451120":{
    "code_string":"w,h=map(int,input().split())\ncx,cy=w\/2,h\/2\nx,y=map(int,input().split())\nif x==cx and y==cy:\n    print(w*h\/2,1);exit()\nelse:\n    print(w*h\/2,0)\n    exit()\n    ",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s898710847":{
    "code_string":"from numba import njit\n\nMOD = 10 ** 9 + 7\n\nN, M = map(int, input().split())\nS = list(map(int, input().split()))\nT = list(map(int, input().split()))\n\n@njit\ndef solve(N, M, S, T):\n    dp = [[1] * (M+1) for _ in range(N+1)]\n    for i, s in enumerate(S):\n        for j, t in enumerate(T):\n            dp[i+1][j+1] = dp[i+1][j] + dp[i][j+1]\n            if s != t:\n                dp[i+1][j+1] -= dp[i][j]\n            dp[i+1][j+1] %= MOD\n    return dp[M][N]\n    \nprint(solve(N, M, S, T))",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s579996337":{
    "code_string":"n,k = map(int,input().split())\nif k==1:\n  print(0)\nelse\n  print(n-k)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s139998391":{
    "code_string":"n,k=map(int,input().split())\n\nif k=1:\n    print('0')\n\nelse:\n\n    ans=n-k\n    print(ans)\t",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s108610312":{
    "code_string":"n=int(input())\nxy=[lnii() for i in range(n)]\nxy.sort(key=lambda x:x[0])\n\nans=n\n\npq=[]\nfor i in range(n-1):\n  for j in range(i+1,n):\n    t_p=xy[j][0]-xy[i][0]\n    t_q=xy[j][1]-xy[i][1]\n    pq.append([t_p,t_q])\n\nfor p,q in pq:\n  cnt=0\n#  for x,y in xy:\n#    if [x+p,y+q] in xy:\n#      cnt+=1\n  for i in range(n):\n    for j in range(n):\n      if i==j:\n        continue\n      x1,y1=xy[i]\n      x2,y2=xy[j]\n      if (x2-x1)==p and (y2-y1)==q:\n        cnt+=1\n  ans=min(ans,n-cnt)\nprint(ans)",
    "error_obj":"NameError: name 'lnii' is not defined"
  },
  "s942020436":{
    "code_string":"from collections import defaultdict, deque\nimport sys\n#input = sys.stdin.readline\ndef inpl(): return list(map(int, input().split()))\nN = int(input())\nA = sorted(inpl())\n\nprint(a[-1] - sum(map(abs, A[1:-1])) - A[0])\nfor i in range(N-2, 0, -1):\n\ta = A[i]\n\tif a > 0:\n    \tprint(A[0], a)\n    \tA[0] -= a\n    else:\n    \tprint(A[-1], a)\n    \tA[-1] -= a\n    \tprint(A[-1], A[0])",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s774126831":{
    "code_string":"a, b, c = map(int, input().split())\nprint(min(min(a+b,b+c),a+c)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s240085160":{
    "code_string":"a, b, c= map(int, input().split())\nprint( sum(a, b, c) - max(a, b, c))",
    "error_obj":"TypeError: sum() takes at most 2 arguments (3 given)"
  },
  "s157717607":{
    "code_string":"a,b,c = map(input().split())\n\nprint(min(a+b,a+c,b+c))",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s087061981":{
    "code_string":"ary = list(map(lambda n: int(n), input().split(\" \"))).sort(reverse=True)\n\nprint(ary[0] + ary[1])",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s602448349":{
    "code_string":"*A = map(int,input().split())\nA.sort()\nprint(A[0]+A[1])",
    "error_obj":"SyntaxError: starred assignment target must be in a list or tuple"
  },
  "s963953736":{
    "code_string":"p, q, r = map(int, input().split())\n\nprint(sum[p, q, r] - max[p, q, r])\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s672662446":{
    "code_string":"p=int(input())\nq=int(input())\nr=int(input())\nif p+q<q+r and p+q<p+r:\n    print(p+q)\nif p+r<p+q and p+r<q+r:\n    print(p+r)\nif q+r<p+r and q+r<p+q:\n    print(q+r)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 3 4'"
  },
  "s167916577":{
    "code_string":"print(sum(sorted(list(map(int,input().split())[:2]))))",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s490253085":{
    "code_string":"def main():\n    a,b,c=map(int,input().split(' '))\n    print(sum([a,b,c])-,max(a,b,c))\n\nmain()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s469277738":{
    "code_string":"a=list(map(int,input().split()))\nb=a.sorted()\nprint(int(b[0])+int(b[1]))",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s749046435":{
    "code_string":"p,g,r=map(int,input().split())\nprint(min(p+q,q+r,r+p))",
    "error_obj":"NameError: name 'q' is not defined"
  },
  "s987127793":{
    "code_string":"def main():\n    p, q, r = map(int, input().split)\n    min_time = min([p+q, q+r, r+p])\n    print(min_time)\n\nif __name__ == '__main__':\n\tmain()",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s685432463":{
    "code_string":"is=list(map(int,input().split()))\nprint(sorted(lis)[0]+sorted(lis)[1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s233173023":{
    "code_string":"N = int(input())\nW = [int(i) for i in input().split()]\n\nans = sum(W)\ns = ans\nt = 0\nfor i in range(N):\n  s -= W[i]\n  t += W[i]\n  ans = min(abs(s-t))\n  \nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s722742212":{
    "code_string":"count = int(input())\narr = input().split()\ns1 = 0\ns2 = 0\nfor i in arr:\n  s2 += int(i)\nminimum_diff = s2\nfor i in range(0, count):\n  s1 += arr[i]\n  s2 -= arr[i]\n  minimum_diff = min(minimum_diff, abs(s1-s2))\n  ",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s769650762":{
    "code_string":"N=input()\nW=list(map(int, input().split()))\n\nsum1,sum2=0,0\nans=0\ndif=1000\n\nfor i in range(N):\n    sum1=sum(W[0:i])\n    sum2=sum(W[i:])\n    now = abs(sum1-sum2)\n    if dif > now:\n        dif =now\n\nprint(dif)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s477963228":{
    "code_string":"N = int(input())\nW = list(map(int, input().split()))\n\nm = 10**10\nfor i in range(1, W):\n  m = min(m, abs(sum(W[:i]), sum(W[i:])))\n\nprint(m)",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s110556137":{
    "code_string":"N = int(input())\narr = list(map(int,input().split()))\nres = []\nfor i in range(N-1):\n    res.append(abs(sum(arr[:i+1])-arr(W[i+1:])))\nprint(min(res))",
    "error_obj":"NameError: name 'W' is not defined"
  },
  "s329610461":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nn, li = ri(), rl()\nmin_ = inf\nfor i in range(1, n):\n  min_ = min(abs(sum(li[0:i] - li[i:])))\nprint(min_)\n\n\n\n\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'list'"
  },
  "s567904061":{
    "code_string":"N = int(input())\n*W, = map(int, input().split())\n\ns1, s2 = 0, sum[W]\nans = sum[W]\n\nfor i in range(N):\n  s1 += W[i]\n  s2 -= W[i]\n  ans = min(ans, abs(s1 - s2))\nprint(ans)",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s613228465":{
    "code_string":"N=int(input())\nS=list(map(int, input().split()))\nA=[]\nfor i in range(1,N-1):\n  A.append(abs(S[:i]-S[i:]))\nprint(min(A))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'list'"
  },
  "s857082134":{
    "code_string":"n = int(input())\nmlist = list(map(int,input().split()))\nnlist =[]\nfor i in range(n):\n  nlist.append(abs(mlist[:i]-mlist[i:]))\nprint(min(nlist))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'list'"
  },
  "s842624358":{
    "code_string":"N = int(input())\nW = list(map(int,input().split()))\nL = []\nfor i in range(1,N):\n  L.append(abs(sum(N[:i])-sum(N[i:])))\nprint(min(L))\n",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s896185763":{
    "code_string":"n = int(input())\nlist1 = list(map(int, input().split()))\ngreat = 9999999\nfor i in range(n - 1):\n  temp = int(abs(sum(list1[:i + 1]) - sum(list1[i + 1:])))\n  if temp < great:\n    great = temp\nprint(samin)\n",
    "error_obj":"NameError: name 'samin' is not defined"
  },
  "s828420294":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(1, n):\n  s.append(abs(a[:i] - a[i:]))\nprint(min(s))\n  ",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'list'"
  },
  "s820795013":{
    "code_string":"from itertools import product\n\ndef mat2_mul(X, Y):\n\tz = [[0, 0], [0, 0]]\n\tfor (i, j, k) in product(range(2), range(2), range(2)):\n\t\tz[i][j] += X[i][k] * Y[k][j]\n\treturn z\n\ndef mat2_pow(X, n):\n\tif n == 0:\n\t\treturn [[1, 0], [0, 1]]\n\telif n % 2:\n\t\treturn mat2_mul(X, mat2_pow(X, n - 1))\n\telse:\n\t\thalf_pow = mat2_pow(X, n \/ 2)\n\t\treturn mat2_mul(half_pow, half_pow)\n\ndef fib(n):\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\tf = [[0, 1], [1, 1]]\n\treturn mat2_pow(f, n - 1)[1][1]\n\ndef main():\n    n, m = map(int,input().split())\n    mlis = []\n    for _ in range(m):\n        a = int(input())\n        mlis.append(a)\n    ans = 1\n    mae = 0\n\n   infi = 10 **9 + 7\n   for num in mlis:\n       ans *= fibona(num-mae)\n       ans %= infi\n       mae = num + 1\n\n    nobori = n - mae + 1\n    ans *= fibona(nobori) \n    ans %= infi\n    print(int(ans))\n    \n\n\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s742862906":{
    "code_string":"import sys\nfrom collections import defaultdict\n\nstairs = []\nsteps = []\nMOD = 1000000007\n\nn, m = int(input()), int((input()))\nstairs = {int(input()):True for i in range(m)}\n\nstep = defaultdict(int)\nstep[0] = 1\n\nfor i in range(n):\n    if i in stairs.keys():\n        step[i] = 0\n    else:\n        step[i+1] = (step[i] + step[i+1]) % MOD\n        step[i+2] = (step[i] + step[i+2]) % MOD\n\nprint(step[n])\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '6 1'"
  },
  "s240773335":{
    "code_string":"n,m = map(int,input().split())\nlis = [0]*n+1\na = []\nfor i in range(m):\n    a.append(int(input()))\n    \nmod = 10**9+7\nans = 0\nif n==1:\n    print(1)\nelif n==2:\n    if m==1:\n        print(1)\n    else:\n        print(2)\nelse:\n    if 1 in a and 2 in a:\n        print(0)\n    elif 1 in a:\n        lis[1] = 1\n    elif 2 in a:\n        lis[0] = 1\n    else:\n        lis[0] = 1\n        lis[1] = 2\n    \n    for j in range(3,n+1):\n        if j in a:\n            lis[0] = lis[1]\n            lis[1] = 0\n        else:\n            ans = lis[0]%mod + lis[1]%mod\n            lis[0] = lis[1]\n            lis[1] = ans\n        \n        if lis[0] == 0 and lis[1] == 0:\n            ans = 0\n            break\n        \n\n    print(ans%mod)",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s072643841":{
    "code_string":"import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\ndef gcd(*numbers): reduce(math.gcd, numbers)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncount = 0\nans = 0\ninf = float(\"inf\")\n\ndef dpp(n):\n    for i in range(2,n+1):\n        if a[i] = 0:\n            dp[i] = 0\n        else:\n            dp[i] = dp[i-1]+dp[i-2]\n    return dp[n]\n\nN,M = I()\na = [1]*(N +1)\nfor i in range(M):\n    x = k()\n    a[x] = 0\n\ndp = [0]*(N+1)\nif 1 in a:\n    dp[1] = 0\n    dp[0] = 1\nelse:\n    dp[0] = dp[1] =1\n\nprint(dpp(N) % mod)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s421872675":{
    "code_string":"N, M = map(int, input().split())\na = [int(input()) for _ in range(M)]\nMOD = 10**9 + 7\n\ndp = [0] * (N+1)\ndp[0] = 1\ndp[1] = 1 if 1 not in a else 0\n\na = list(set(range(2, N+2)) - set(a))\nfor i in a:\n    dp[i] = (dp[i-1] + dp[i-2]) % MOD\nprint(dp[N] % MOD)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s166563831":{
    "code_string":"n,m=map(int,input().split())\na=set([int(input()) for j in range(m)])\ndp=[0]*(n+1)\ndp[0]=1\nif not a[0]==1:\n    dp[1]=1\nelse:\n    dp[1]=0\nfor i in range(n-1):\n    if i+2 in a:\n        dp[i+2]=0\n    else:\n        dp[i+2]=(dp[i+1]+dp[i])%(10**9+7)\nprint(dp[n])",
    "error_obj":"TypeError: 'set' object is not subscriptable"
  },
  "s682543745":{
    "code_string":"n, m = map(int, input().split())\nissafe = [True] * n + 1\nfor _ in range(m):\n    a = int(input())\n    issafe[a] = False\n \ndp = [0] * n +1\ndp[0] = 1\nif issafe[1]:\n    dp[1] = 1\n \nfor i in range(2, n + 1):\n    if  issafe[i - 1]:\n        dp[i] = dp[i] + dp[i - 1]\n    if issafe[i -  2]:\n        dp[i] = dp[i - 2] + dp[i] \n    \n    dp[i] %= 1000000007\n    \nprint(dp[n])",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s132012032":{
    "code_string":"n, m = map(int, input().split())\na = [int(input()) for _ in range(m)]\nans = 1\nMOD = 10**9+7\nMAX = 10**5+1\nfact = [1] * MAX\n\nfor i, j in zip(a[:m-1], a[1:]):\n    if j - i == 1:\n        print(0)\n        exit()\n\ndef comb_init():\n    fact[0], fact[1] = 1, 1\n    for i in range(2, MAX):\n        fact[i] = fact[i-1] * i\n\ndef comb(n, r):\n    return (fact[n]%MOD) * pow(fact[r], -1, MOD) * pow(fact[n-r], -1, MOD) \n\ndef f(k):\n    idx = k \/\/ 2\n    num = 0\n    for i in range(1, idx+1):\n        num += comb(k-i, i)\n        num %= MOD\n    return num+1\n\ncomb_init()\nfor i in range(m+1):\n    left = 0 if i == 0 else a[i-1] + 1\n    right = n if i == m else a[i] - 1\n    between = right - left\n    ans *= f(between)\n    ans %= MOD\nprint(ans)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s078861602":{
    "code_string":"n, m = map(int,input().split())\na = list(int(input()) for _ in range(m))\ndp = [[] for _ in range(n + 1)]\ndp[0] = 1\n# j = 0\nif m = 0:\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n    print(dp[n])\n    exit()\nif a[0] == 1:\n    dp[1] = 0\n    j = 1\nelse:\n    dp[1] = 1\n    j = 0\nfor i in range(2, n + 1):\n    # print(i, dp)\n    if j < m:\n        if a[j]  == i:\n            dp[i] = 0\n            j += 1\n            continue\n    dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\nprint(dp[n])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s978066298":{
    "code_string":"n, m = map(int, input().split())\nA = [True] * n\nfor _ in range(m):\n  a = int(input())\n  A[a] = False\n\nmod = 10**9 + 7\ndp = [0] * (n + 1)\ndp[0] = 1\nif A[1]:\n  dp[1] = 1\n\nfor i in range(2, n+1):\n  if A[i]:\n    dp[i] = dp[i-1] + dp[i-2]\n    dp[i] %= mod\n\nprint(dp[n])\n\n  \n",
    "error_obj":"IndexError: list index out of range"
  },
  "s597192185":{
    "code_string":"import sys\nimport numpy as np\n\n\ndef read():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    h, w = map(int, read().split())\n    s = np.array([[i == \".\" for i in read()] for _ in range(h)], dtype=int)\n    left = s.copy()\n    right = s.copy\n    up = s.copy\n    down = s.copy\n    for i in range(w - 1):\n        left[:, i + 1] = (left[:, i] + 1) * s[:, i + 1]\n        right[:, -i - 2] = (right[:, -i - 1] + 1) * s[:, -i - 2]\n    for i in range(h - 1):\n        up[i + 1] = (up[i] + 1) * s[i + 1]\n        down[-i - 2] = (down[-i - 1] + 1) * s[-i - 2]\n    print((left + right + up + down).max() - 3)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s620013821":{
    "code_string":"n,a,b,c,d = map(int,input().split())\nS = list(input())\nS = ['#'].expand(S)\nprint(S)\n\nflg = 1\nfor i in range(a-1,c-2):\n    if S[i:i+2] == ['#','#']:\n        flg *= 0\n\nfor i in range(b-1,d-2):\n    if S[i:i+2] == ['#','#']:\n        flg *= 0\n\nif c>d:\n    flg2 = 0\n    for i in range(b-1,d):\n        if S[i-1:i+2] == ['.','.','.']:\n            flg2 = 1\n    flg *= flg2\n\nif flg == 0:\n    print('No')\nelse:\n    print('Yes')",
    "error_obj":"AttributeError: 'list' object has no attribute 'expand'"
  },
  "s471947620":{
    "code_string":"import bisect,copy,heapq,itertools,string\nfrom collections import *\nfrom math import *\nimport sys\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn, a, b, c, d = MAP()\ns = input()\n\nflag = 0\nfor i in range(min(a,b)+1,max(c,d)):\n        if (a < i < c or b < i < d) and s[i] == s[i-1] == '#':\n                print(\"No\")\n                exit()       \n        elif max(a,b) <= i <= min(c,d) and s[i-1] == s[i] == s[i+1] == '.':\n                flag = 1\n\nif c > d and flag == 0:\n        print(\"No\")\nelse:\n        print(\"Yes\")",
    "error_obj":"IndexError: string index out of range"
  },
  "s919050184":{
    "code_string":"N, A, B, C, D = map(int, input().split())\nN-=1\nA-=1\nB-=1\nC-=1\nD-=1\nS = input()\n\nmassesExist = True\novertakeFlag = False if C > D else True\nproceedableFlag = True\n\nif max(A, B, C, D) > N:\n    massesExist = False\n\nfor i in range(B, D+1):\n    if S[i-1] == \".\" and S[i] == \".\" and S[i+1] == \".\":\n        overtakeFlag = True\n\nfor i in range(A, max(C, D)-1):\n    if S[i]==\"#\" and S[i+1]==\"#\":\n        proceedableFlag = False\n\nif overtakeFlag and proceedableFlag and massesExist:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s549568923":{
    "code_string":"s=[0]+list(input())\nif c<d:\n    for i in range(a,d):\n        if s[i]==s[i+1]==\"#\":\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\nelse:\n    for j in range(a,c):\n        if s[j]==s[j+1]==\"#\":\n            print(\"No\")\n            break\n    else:\n        for k in range(b-1,d-2):\n            if s[k]==s[k+1]==s[k+2]==\".\":\n                    print(\"Yes\")\n                    break\n        else:\n            print(\"No\")",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s624860546":{
    "code_string":"from collections import defaultdict\nfrom collections import deque\nfrom collections import Counter\nimport itertools\nimport math\n\ndef readInt():\n\treturn int(input())\ndef readInts():\n\treturn list(map(int, input().split()))\ndef readChar():\n\treturn input()\ndef readChars():\n\treturn input().split()\n\nn,a,b,c,d = readInts()\ns = readChar()\nif (a-b)*(c-d)<0:\n\tif \"...\" in s[max(a,b)-1:] and \"##\" not in s[min(a,b)]:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\nelif c<b:\n\tif \"##\" not in s[a:c] and \"##\" not in s[b:d]:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\nelse:\n\tif \"##\" not in s[min(a,b):]:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n\traise Exception",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p03017\/Python\/s624860546.py\", line 33, in <module>\n    raise Exception\nException\n"
  },
  "s628163579":{
    "code_string":"N,A,B,C,D=map(int,input().split())\nS=input()\n\nc1=S[B-2:C].count('...')\nc2=S[A-1:D].count('##')\n\nif c2>=1:\n    print('No')\n    exit()\nelse:\n    pass\n\nif C>D:\n    if c1==0:\n    print('No')\n    exit()\n    else:\n        print('Yes')\n        exit()",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s153344357":{
    "code_string":"from numba import jit\ns = list(input())\nn = len(s)\nans = 0\n@jit\ndef p(ans):\n    for i in range(0, n-2):\n        b = True\n        if s[i:i+3] == ['A', 'B', 'C']:\n            s[i] = 'B'\n            s[i+1] = 'C'\n            s[i+2] = 'A'\n            ans += 1\n            b = False\n        \n    return ans, b\nwhile True:\n    ans, b = p(ans)\n    if not b:\n        break\nprint(ans)\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s766948303":{
    "code_string":"n = int(input())\nprint(n\uff0a180 - 360)",
    "error_obj":"SyntaxError: invalid character '\uff0a' (U+FF0A)"
  },
  "s513668583":{
    "code_string":"n = int(input())\n\nprint(180*r-360)",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s183703242":{
    "code_string":"print(180*(int(input()-2))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s984484745":{
    "code_string":"print((int(input()-2)*180)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s425769454":{
    "code_string":"def solve():\n    s = list(input())\n    if s.count(\"o\") >= 8:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return 0\n\nif __name__ == \"__main__\":\n    solve()\n,",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s728196003":{
    "code_string":"S=input()\ncnt=0\nfor c in S:\n   cnt+=c=='o'\nif cnt\uff1e=8:\n   print('YES')\nelse:\n  print('NO')",
    "error_obj":"SyntaxError: invalid character '\uff1e' (U+FF1E)"
  },
  "s641466833":{
    "code_string":"from collections import deque\n\nn = int(input())\n\ng = [[] for _ in range(n)]\nfor i in range(n-1):\n    a, b = map(int, input().split())\n    g[a-1].append(b-1)\n    g[b-1].append(a-1)\n\nc = list(map(int, input().split()))\nc.sort()\n\nans = []\ns = [0] * n\nque = deque([0])\nwhile que:\n    t = que.popleft()\n    ans.append(c.pop())\n    s[t] = 1\n    for e in g[t]:\n        if not s[e]:\n            que.append(e)\n\nprint(sum(c) - max(c))\nprint(*ans)\n",
    "error_obj":"ValueError: max() arg is an empty sequence"
  },
  "s726574973":{
    "code_string":"a\uff64b= map(int,input().split())\napple_pie = (a*3 + b) \/\/2\nprint(apple_pie)",
    "error_obj":"SyntaxError: invalid character '\uff64' (U+FF64)"
  },
  "s468284782":{
    "code_string":"#\u5165\u529b:N,M(int:\u6574\u6570)\ndef input2():\n\treturn map(int,input().split())\n  \na,p=input2()\nans=((A*3)+p)\/\/2\nprint(ans)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s046853533":{
    "code_string":"a,b=map(input().split())\nprint((3*a+b)\/2)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s650003499":{
    "code_string":"a,p = map(int, input().spilit())\nprint((3*a+p)\/2-(3*a+p%2))\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'spilit'"
  },
  "s739132555":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nprint(int((a*3+b)\/2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s551993855":{
    "code_string":"a,p = map(int,input().split())\nprint((a*b+p)\/\/2)",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s158079004":{
    "code_string":"a,p=map(int,input().split())\nprint((a*3+p)\/\/2))",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s575630790":{
    "code_string":"A,P=map(int,input().split())\nprint((3A+P)\/\/2)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s528387216":{
    "code_string":"a,p = map(int,input().split())\na == a*3*p\na + p == int,ap\nprint(ap)\n",
    "error_obj":"NameError: name 'ap' is not defined"
  },
  "s409942711":{
    "code_string":"a,p=map(int,inputy().split())\nprint((3*a+p)\/\/2)\n",
    "error_obj":"NameError: name 'inputy' is not defined"
  },
  "s112242375":{
    "code_string":"n = int(input())\nlst = []\nfor i in range(n):\n  s, p = input().split()\n  p = int(p)\n  lst.append((s, p, i+1))\nlst_sorted = sorted(lst, key:lambda x: (x[0], -x[1], x[2]))\nfor _, _, num in lst_sorted:\n  print(num)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s978913514":{
    "code_string":"N = int(input())\nshops = []\nfor i in range(N):\n    S, P = input().split()\n    shops.append([S, int(P), i])\nshops.sort(key=1)\nshops.sort()\nfor shop in shops:\n    print(shop[2])",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s482058046":{
    "code_string":"N = int(input())\nA = []\nfor i in range(N):\n    S, P = map(str, input().split())\n    P = int(p)\n    A.append([S, -P])\nA.sort()\nfor i in A:\n    print(A.index(i)+1)\n",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s536407877":{
    "code_string":"n=int(input())\nres=[]\nfor i in range(n):\n    s,p=max(str,input().split())\n    res.append([s,int(p)])\nres1=res\nres=sorted(res,key=lambda x:(x[0], -x[1]))\nfor i in range(n):\n\tprint(res1.index(res[i])+1)",
    "error_obj":"TypeError: '>' not supported between instances of 'list' and 'type'"
  },
  "s802536617":{
    "code_string":"n = int(input())\nsp = []\nfor i in range(n):\n  s, p = map(int,input().split())\n  sp.append([s, int(p), i+1])\nsp.sort(key=lambda x:x[1], reverse = True)\nsp.sort(key=lambda x:x[0])\nfor e in sp:\n  print(e[2])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'khabarovsk'"
  },
  "s218741678":{
    "code_string":"n = int(input)\nfor i in range(n):\n    std_in = input().split()\n    dat.append([std_in[0], int(std_in[1])])\n\nfor i, e in enumerate(dat, start=1):\n    e[1] = -e[1]  # \u70b9\u6570\u3092\u964d\u9806\u30bd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u70b9\u6570\u3092\u30de\u30a4\u30ca\u30b9\u306b\u3059\u308b\u3002\n    e.append(i)  # \u30bd\u30fc\u30c8\u524d\u306e\u9806\u5e8f\n \n    sorted_list = sorted(dat)  # \u90fd\u5e02\u540d\u3068\u70b9\u6570\u306e\u30de\u30a4\u30ca\u30b9\u5024\u3067\u6607\u9806\u30bd\u30fc\u30c8\n \nfor i, s in enumerate(sorted_list):\n    # \u9806\u5e8f\u3092\u51fa\u529b\n    print(sorted_list[i][2])\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s170212142":{
    "code_string":"list = []\nN = int(input())\nfor i in range(N):\n  S, P = map(str, input().split())\n  list.append((i+1, S, int(P)))\nlist = sorted(lst, key=lambda x:(x[1], -x[2]))\n \nfor l in list:\n  print(l[0])",
    "error_obj":"NameError: name 'lst' is not defined"
  },
  "s804698637":{
    "code_string":"N = int(input())\nlis = [(input() + \" \" + str(i+1)).split() for i in range(N)]\n \nlis = [k for k in lis]\n \nlis.sort(key=lambda k: int(k[1]). reverse=True)\nlis.sort(key=lambda k: k[0])\n \n \nfor i in lis:\n    print(i[2])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s496771760":{
    "code_string":"# n, m, l = map(int, input().split())\n\n# list_n = list(map(int, input().split()))\n\n# n = input()\n# list = [input() for i in range(N)\n\n# list = [[i for i in range(N)] for _ in range(M)]\n\nimport sys\ninput = sys.stdin.readline\n\nN = int(input())\nL = []\nfor i in range(N):\n    c, p = input().split()\n    p = int(p)\n    L.append([i+1, c, p])\nL = sorted(L, lambda x: (x[1], -x[2]))\nfor i in range(N):\n    print(L[i][0])\n",
    "error_obj":"TypeError: sorted expected 1 argument, got 2"
  },
  "s035464660":{
    "code_string":"n=int(input())\nres=[]\nfor i in range(n):\n\ts,p=max(str,input().split())\n    res.append([s,int(p)])\nres1=res\nres=sorted(res,key=lambda x:(x[0], -x[1]))\nfor i in range(n):\n\tprint(res1.index(res[i])+1)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s943038164":{
    "code_string":"n = int(input())\nl = []\nfor i in range(n):\n    sp = input().split()\n    l.append((sp[0], int(sp[1]), i+1))\n\na = sorted(l, key=lambda i: (i[0], -l[1]))\n\nfor i in range(n):\n    print(a[i][2])",
    "error_obj":"TypeError: bad operand type for unary -: 'tuple'"
  },
  "s548293759":{
    "code_string":"my_list = []\nfor i in range(1,N+1):\n    l = list((input().split()))\n    l.append(i)\n    my_list.append(l)\n\nmy_list2 = sorted(my_list, key=lambda x:(x[0],-int(x[1])))\nfor i in my_list2:\n  print(i[2])\n\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s498543636":{
    "code_string":"N = int(input())\nlis = [(input() + \" \" + str(i+1)).split() for i in range(N)]\n\nlis = [k for k in lis]\n\nlis.sort(key=lambda k: int(k[1]), reverse=True)\nlis.sort(key=lambda k: k[0])\n\n\nfor j in lis:\n    print(j[2])\nN = int(input())\nlis = [(input() + \" \" + str(i+1)).split() for i in range(N)]\n\nlis = [k for k in lis]\n\nlis.sort(key=lambda k: int(k[1]), reverse=True)\nlis.sort(key=lambda k: k[0])\n\n\nfor j in lis:\n    print(j[2])\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s736676257":{
    "code_string":"n = int(input())\nL=[]\nfor i in range(n):\n  s,p=input()\n  L.append([s,int(p),i+1])\nlist.sort(L,reverse=True)\nfor i in range(n):\n  print(L[i][2])",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s412648164":{
    "code_string":"n = int(input())\nlist = []\nfor xi in range(n):\n    add1, add2 = input().split()\n    add = [add2, add1, xi+1]\n    list.append(add)\nlist.sort(key=lambda list2: list2[1])\n\n\nname = list[0][1]\nlist2 = [list[0]]\ncount = 1\nfor xi in range(1,n):\n    if name == list[xi][1]:\n        list2.append(list[xi])\n        count += 1\n    else:\n        list2.sort(key=int, reverse=True)\n        for yi in range(count-1,-1,-1):\n            print(list2[yi][2])\n        name = list[xi][1]\n        list2 = [list[xi]]\n        count = 1\n\nif len(list2)<n:\n    list2.sort(key=int, reverse=True)\nfor yi in range(count-1,-1,-1):\n    print(list2[yi][2])\nname = list[xi][1]\nlist2 = [list[xi]]\ncount = 1\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s469305833":{
    "code_string":"N=int(input())\ndata=[input().split() for i in range(N)]\ndata_name=[]\nfor i in range(N):\n    if data[i][0] in data_name:\n        continue\n    else:\n        data_name.append(data[i][0])\ndata_name_sort=sorted(data_name)\ndata_point=[]\nfor i in range(N):\n    num=0\n    for j in range(len(data_name_sort)):\n        if data[i][0]==data_name_sort[j]:\n            num+=(len(data_name)-j)*200+int(data[i][1])\n        else:\n            continue\n    data_point.append(num)\ndata_sort=[i for i, _ in sorted(enumerate(data_point), key=lambda x:x[1])][::-1]\nfor i in range(N):\n    ans=int(data_sort(i))+1\n    print(ans)",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s185803379":{
    "code_string":"n = int(input())\nr = []\nfor i in range(n):\n    s,p = input().split()\n    p = int(p)\n    r.append([s,p,i])\na = sorted(r)\nfor i in range(n):\n    print(a[i][3]+1)",
    "error_obj":"IndexError: list index out of range"
  },
  "s649734823":{
    "code_string":"n = input()\nx = []\nfor i in range(n):\n  s,p=input().split()\n  x.append([s,int(p),i+1])\nx.sort(key=lambda x:(x[0],-x[1]))\nfor i in x:\n  print(i[2])",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s228416892":{
    "code_string":"n = int(input())\ns = list(list(input().split()) for _ in range(n))\nans = [s.index(i)+1 for i in sorted(s, key=lambda x:(x[0], -int(x[1])))]\nprint(i) for i in ans\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s350939405":{
    "code_string":"n = int(input())\nrestaurant = [input().split() for i in range(n)]\nrestaurant_sorted = sorted(restaurant)\n\nfor i in range(n):\n    print(restaurant.index((restaurant_sorted[i]))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s685770413":{
    "code_string":"\"\"\"\n\u30d3\u30c3\u30c8\u5168\u63a2\u7d22\n\"\"\"\nn, m = map(int, input().split())\nlamps = [list(map(lambda x:int(x)-1, input().split()))[1:] for _ in range(m)]\np = list(map(int, input().split()))\n\n#\u30d3\u30c3\u30c8\u5168\u63a2\u7d22\nfor i in range(2**n) :\n    for r in range(m) :\n        on = 0\n        for j in range(n) :\n            #j\u6841\u76ee\u304c1\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\n            #j\u304cs\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\n            if (i>>j) & 1 == 1 and j in lamps[r] :\n                on += 1\n        if on % 2 != p[r] :\n            break\n    else :\n        ans += 1\nprint(ans)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s600003848":{
    "code_string":"N, M = map(int, input().split())\nA = []\nfor _ in range(M):\n    A.append(tuple(map(int, input().split())))\nP = tuple(map(int, input().split()))\nimport itertools\ndef hantei(A, RETU, P):\n    for i in range(len(A)):\n        count = 0\n        for k in RETU:\n            if k in A[i][1:]:\n                count += 1\n        if not count % 2 == P[i]:\n            return False\n    return True\nans = 0\nfor i in range(1, N + 1):\n    for k in itertools.combinations(range(1, N + 1), i):\n        if hantei(A, k, P):\n            ans += 1\nif hantei(A, 0, P):\n    ans += 1\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s903718769":{
    "code_string":"n,m = map(int,input().split())\nq = [list(map(int, input().split())) for i in range(m)]\nans = 0\n\nfor s in range(2**n): #\u30b9\u30a4\u30c3\u30c1\u306eon\/off\u306e\u72b6\u614b\u306e\u7dcf\u5f53\u305f\u308a\uff082**n\u901a\u308a\uff09\n    judge = True\n    for i in range(m): #\u96fb\u74031\u3064\u305a\u3064\u306b\u5bfe\u3057\u3066\n        cnt=0\n        for j in range(1,len(q[i])): #s\u306e\u7dcf\u5f53\u305f\u308a\u3067q\u306b\u5f53\u3066\u306f\u307e\u308b\u3082\u306e\u3092\u63a2\u3059\u3002k\u306ffor\u30921\u304b\u3089\u306b\u3059\u308c\u3070\u7121\u8996\u3067\u304d\u308b\u3002\n            w=q[i][j]\n            if s >> (w-1) &1 ==1: #s\u3092w-1\u56de\u30b7\u30d5\u30c8\u3055\u305b\u3066(w-1)\u500b\u76ee\u306e\u30b9\u30a4\u30c3\u30c1\u304con\u304b\u5224\u5b9a\n                cnt+=1 #on\u306b\u306a\u3063\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n        if cnt % 2 != p[i]: #\u30b9\u30a4\u30c3\u30c1\u306e\u500b\u6570\u30922\u3067\u5272\u3063\u305f\u4f59\u308a\u304cpi\u306b\u7b49\u3057\u3044\u304b\u5224\u5b9a\n            judge = False\n    if judge:\n        ans += 1\n\nprint(ans)",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s478465824":{
    "code_string":"n,m=map(int,input().split())\ndenkyu_switch=[]\nres=0\nfor i in range(m):\n    denkyu_switch+=[list(map(int, input().split()))[1:]]\np=list(map(int, input().split()))\nfor i in range(2**n):\n    denkyu = [0] * m\n    for j in range(n):\n        if i>>j & 1:\n            for k in denkyu_switch:\n                if j in k:\n                    denkyu[k]+=1\n    if p==denkyu:\n        res+=1\nprint(res)\n",
    "error_obj":"TypeError: list indices must be integers or slices, not list"
  },
  "s953269932":{
    "code_string":"#!\/usr\/bin\/env python\n\n# input\nn, m = map(int, input().split())\nt = [list(map(int, input().split())) for _ in range(m)]\np = list(map(int, input().split()))\nk = [t[i][0] for i in range(m)]\ns = [t[i][1:] for i in range(m)]\n\n# calc\n# bit full search\nans = 0 \nfor i in range(2**n):\n    tmp = i \n    sw = []\n    if i == 0:\n        sw = [0] \n    while tmp > 0:\n        sw.append(tmp&1)\n        tmp = tmp>>1\n    while len(sw) < n:\n        sw.append(0)\n\n    #print('sw =', sw)\n    \n    # check whether current sw satisfies the condision.\n    ok = True\n    # light bulb j\n    for j in range(m):\n        tmp = 0 \n        for a in range(k[j]):\n            tmp += sw[a+1]\n        if tmp%2 != p[j]%2:\n            ok = False\n            break\n    if ok: \n        # print('sw =', sw)\n        ans += 1\n\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s656360289":{
    "code_string":"ans = 0\nfor bit in range(1<<N):\n    count = [0]*M\n    for i in range(N):\n        if (bit >> i) & 1:\n            for a in range(M):\n                if i in ks[a][1:]:\n                    count[a] +=1\n    a = 0\n    for i in range(M):\n        if count[i] % 2 == p[i]:\n            a += 1\n            if a == M:\n                ans += 1\n\nprint(ans)\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s356407834":{
    "code_string":"n, m = map(int,input().split())\ns = list(list(map(int, input().split())) for _ in range(m)) \np = list(map(int,input().split()))\nans = 0\nfor i in range(1<<n):\n    # \u5168switch(n)\u306eon\/off\u30d1\u30bf\u30fc\u30f3\u6570\n    sw = [False]*m\n    # \u5404\u96fb\u7403\u306e\u70b9\u706f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n    for j in range(M):\n        # \u5404\u96fb\u7403\u306b\u3064\u3044\u3066\n        cnt = 0\n        for k in range(1,len(s[j])):\n            if i>>s[j][k]-1&1:\n                cnt += 1\n\n        if cnt%2==p[j]:\n            sw[j]=True\n    if all(sw):\n        ans+=1\nprint(ans)",
    "error_obj":"NameError: name 'M' is not defined"
  },
  "s244176269":{
    "code_string":"n,m=map(int,input().split())\nsw=[[]*m]\nfor _ in range(m):\n    temp=list(map(int,input().split()))\n    sw[_]=temp[1:]\np=list(map(int,input().split()))\nans=0\nfor i in range(2**n):\n    temp=[0]*n\n    for j in range(n):\n        if i&1: temp[j]=1\n        i>>=1\n    flag=1\n    for l,s in enumerate(sw):\n        cnt=0\n        for k in s:\n            if temp[k-1]==1: cnt+=1\n        if p[l]!=cnt%2:\n            flag=0\n            break\n    if flag: ans+=1\nprint(ans)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s179487392":{
    "code_string":"n, m = map(int, input().split())\nq = list()\nfor i in range(m):\n    q.append(list(map(int, input().split())))\np = list(map(int, input().split()))\n\nans = 0\n\nfor s in range(2**n):\n    judge = True\n    for i in range(m):\n        cnt = 0\n        for j in range(1, len(q[i]):\n            w = q[i][j]\n            if s >>(w-1) & 1 == 1:\n                cnt += 1\n        if cnt % 2 != p[i]:\n            judge = False\n    if judge:\n        ans += 1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s823151828":{
    "code_string":"n,m = map(int,input().split())\ncard =[[0]*n for _ in range(m)]\nfor i in range(m):\n    switch = list(map(int,input().split()))[1:]\n    for k in switch:\n        card[i][k-1] = 1\n##\u3069\u3053\u306b\u7e4b\u304c\u3063\u3066\u3044\u308b\u304b\u3092\u914d\u5217\u3067\u8868\u73fe\n\n#print(card)\n\n\nans =list(map(int,input().split()))\ncnt=0\nfrom itertools import combinations\n##\u5168\u901a\u308a\u3092\u8abf\u3079\u308b\nfor epoch in range(1,n+1):\n    \n    for j in combinations(range(1,n+1),epoch):\n        sco =[]\n        for lisa in card:##\u4e00\u3064\u305a\u3064\u306e\u7167\u660e\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\n            score =0\n            for l in j:\n                score += lisa[l-1]\n                \n            sco.append(score)\n        #print(sco)\n        if list(np.array(sco)%2) == ans:\n            cnt+=1\n            \nprint(cnt)",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s694199001":{
    "code_string":"N,M = map(int,input())\nK = []\nS = []\nfor i in range(M):\n    list = input().split()\n    K.append(int(list[0]))\n    S.append(map(int,list[1::]))\np = list(map(int,input().split()))\nanss = 0\nfor i in range(2**n):\n    for j in range(M):\n        ans = 0\n        for k in range(N):\n            if i >> k & 1 and k in K[j]:\n                ans += 1\n        if ans % 2 != p[j]:\n            break\n        else:\n            anss += 1\nprint(ans) \n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s388386481":{
    "code_string":"import sys\ndef dfs(A):\n    global cnt\n\n    if len(A) == n:\n        ans = [0 for i in range(m)]\n        print(A)\n        for i, a in enumerate(A):\n            if a:\n                for j in range(m):\n                    if i+1 in s[j]:\n                        ans[j] += 1\n        print(ans)\n        for x, y in zip(p, ans):\n            if x != y%2:\n                break\n        else:\n            cnt += 1\n        return\n    for v in range(2):\n        A.append(v)\n        dfs(A)\n        A.pop()\n\nn, m = map(int, input().split())\ns = [list(map(int, x.split()))[1:]  for x in sys.stdin.readlines()]\np = list(map(int, input().split()))\ncnt = 0\ndfs([])\nprint(cnt)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s806022599":{
    "code_string":"from itertools import product\nN,M = map(int,input().split())\ncc = []\nfor i in range(M):\n  ll = list(map(int,input().split()))\n  cc.append(ll)\np = list(map(int,input().split()))\ncount = 0\nfor i in product('01',repeat = N):\n  on = 0\n  bulb = 0\n  for j in range(M):\n    for k in range(cc[j][0]):\n      if i[cc[m][l+1]-1] == 1:\n        on += 1\n    if on % 2 == p[j]:\n      bulb += 1\n  if bulb == M:\n    count += 1\nprint(count)\n    \n      \n  \n",
    "error_obj":"NameError: name 'm' is not defined"
  },
  "s312027714":{
    "code_string":"from itertools import product\nn, m = map(int, input().split())\nswitch = []\nfor _ in range(m):\n    k, *s = map(lambda x: int(x)-1, input().split())\n    switch.append(s)\np = map(int, input().split())\n\nans = 0\nfor subset in product((0, 1), n):\n    for j in range(m):\n        on_cnt = sum(subset[s] for s in switch[j])\n        if on_cnt % 2 != p[j]:\n            break\n    else:\n        ans += 1\nprint(ans)\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s097149618":{
    "code_string":"from itertools import product\n\nn, m = map(int, input().split())\nks = [list(map(int, input().split())) for _ in range(m)]\np = list(map(int, input().split()))\n\ncnt = 0\nfor pat in product([0, 1], repeat=n):\n    for ksi, pi in zip(ks, pi):\n        tmp = sum(pat[ksij - 1] for ksij in ksi[1:])\n        if  tmp % 2 != pi:\n            break\n    else:\n        cnt += 1\nprint(cnt)\n",
    "error_obj":"NameError: name 'pi' is not defined"
  },
  "s063700443":{
    "code_string":"import itertools\n \nN, M = map(int, input().split())\nlights = []\nfor m in range(M):\n  \n  interpools mpzp(input())\n    tmp = list(map(int, input().split()))\n    lights.append(tmp[1:])\n \n \nP = list(map(int, input().split()))\n \nans = 0\nfor product in list(itertools.product([0, 1], repeat=N)):\n    for light in range(len(lights)):\n        cnt = 0\n        for l in lights[light]:\n            cnt += product[l-1]\n        if cnt % 2 != P[light]:\n            break\n        if light == len(lights) - 1:\n            ans += 1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s585973870":{
    "code_string":"N, M = map(int,input().split())\nstate = []\nfor _ in range(M):\n  lst = list(map(int, input().split()))\n  state.append(lst[1:])#switch numbers each denkyu\np = list(map(int, input().split()))#numbers switches on %2 == pi \nans = 0\nfor i in rage(2**n):\n  total = 0\n  for j in range(m):\n    cnt = 0\n    for s in state[j]:\n      s -= 1\n      if (i >> s) & 1:#\u5168\u30b9\u30a4\u30c3\u30c1\u306e\u30d1\u30bf\u30fc\u30f3\u4e00\u3064\u4e00\u3064\u306b\u3064\u3044\u3066\u3001\u5404\u96fb\u7403\u306e\u5404\u30b9\u30a4\u30c3\u30c1\u304c\u30aa\u30f3\u306b\u306a\u3063\u3066\u3044\u308b\u304b\n        cnt += 1\n    cnt %= 2\n    if cnt == p[j]:\n      total += 1\n  if total == m:\n    ans += 1\nprint(ans)",
    "error_obj":"NameError: name 'rage' is not defined"
  },
  "s624295028":{
    "code_string":"N, K = map(int, input().split())\nV = [int(i) for i in input().split()]\nans = 0\nfor M in range(K+1):\n    for m in range(M+1):\n        ls = []\n        cur1 = 0\n        for i, x in enumerate(V):\n            if i < m:\n                ls.append(x)\n                cur += 1\n        cur2 = 0\n        for i, x in enumerate(V[::-1]):\n            if i < min(M-m, N-cur1):\n                ls.append(x)\n                cur2 += 1\n        ls.sort()\n        s = sum(ls)\n        for i, x in enumerate(ls):\n            if i < K-(cur1+cur2):\n                s -= x\n        ans = max(ans, s)\nprint(ans)",
    "error_obj":"NameError: name 'cur' is not defined"
  },
  "s212482585":{
    "code_string":"import sys\nfrom heapq import *\ninput = sys.stdin.readline\n\ndef main():\n    n, q = map(int, input().split())\n    \n    key = []\n    for i in range(n):\n        s, t, x = map(int, input().split())\n        l, r = max(0, s-x), max(0, t-x)\n        key.append((l, -1, x))\n        key.append((r, 1, x))\n\n    key.sort()\n    judge = []\n    now = set()\n    already = dict()\n    search = []\n    \n    for i in range(n*2):\n        s, j, x = key[i]\n        \n        if j == -1:\n            heappush(judge, x)\n            now.add(x)\n        else:\n            now.remove(x)\n            if x in already:\n                already[x] += 1\n            else:\n                already[x] = 1\n        \n        if i == n*2-1 or key[i][0] != key[i+1][0]:\n            while judge:\n                if judge[0] in already and already[judge[0]] > 0:\n                    already[judge[0]] -= 1\n                    heappop(judge)\n                else:\n                    break\n            if judge:\n                search.append((s, judge[0]))\n            else:\n                search.append((s, -1))\n\n    size = len(search)\n    index = 0\n    answer = []\n    for i in range(q):\n        d = int(input())\n        while index < size-1:\n            if search[index+1][0] <= d:\n                index += 1\n            else:\n                break\n        print(search[index][1])\n\n    \nif __name__ == \"__main__\":\n    main()\n\n\n\n",
    "error_obj":"KeyError: 2"
  },
  "s767622552":{
    "code_string":"import heapq\nn, q = map(int, input().split())\nevent = []\nfor _ in range(n):\n    s, t, x = map(int, input().split())\n    event.append((s-x, 1, x))\n    event.append((t-x, -1, x))\n\nevent.sort()\nheap = []\nxs = set([])\n\nd = [int(input()) for _ in range(q)]\nans = [-1] * q\nindex = 0\nfor t, query, x in event:\n    if d[index] < t:\n        if not xs:\n            pass\n        else:\n            while heap:\n                tmp = heapq.heappop(heap)\n                if tmp in xs:\n                    heapq.heappush(heap, tmp)\n                    ans[index] = tmp\n                    break\n        index += 1\n        if index == q:\n            break\n\n    if query == 1:\n        xs.add(x)\n        heapq.heappush(heap, x)\n    else:\n        xs.remove(x)\n\n    cnt[t] -= 1\n\nwhile index < q:\n    while heap:\n        tmp = heapq.heappop(heap)\n        if tmp in xs:\n            heapq.heappush(heap, tmp)\n            ans[index] = tmp\n            break\n    index += 1\n\nprint(\"\\n\".join(map(str, ans)))\n\n\n\n",
    "error_obj":"NameError: name 'cnt' is not defined"
  },
  "s249606109":{
    "code_string":"age,cost =list(map(int, input().split()))\nif age<=5:\n  print('0')\nelif age>=6 and age<=12:\n  print(a\/\/2)\nelif age>=13:\n  print(a)\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s075678859":{
    "code_string":"A,B = map(int,input().split())\nif 13<=A:\n    ans=B\nelif 6<=A:\n    ans=B\/2S\nelse:\n    ans = 0\n\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s257051270":{
    "code_string":"a,b=map(int,input().split())\nprint([[0,b\/\/2][a>5,b][a>12])",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s833224212":{
    "code_string":"A,B = map(int,input().split())\n\nif 13 <= A:\n    print(B)\nelif 6 <= A:\n    print(int(B\/2))\nelse :\n    print(0",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s553906048":{
    "code_string":"A,B = map(int(input()).split())\n\nif A >= 13:\n  print(B)\nelif 6<=A<=12:\n  print(B\/2)\nelse:\n  print(0)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '30 100'"
  },
  "s368089841":{
    "code_string":"a,b = map(int, input().split(\" \"))\nif a => 13 :\n  print(b)\nelif a >= 6 and a <= 12 :\n  print(b\/2)\nelse:\n  print(0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s699636249":{
    "code_string":"a,b= map(int,input().split())\nif A >= 13:\n    print(b)\nelif 6<=A:\n    print(b\/2)\nelse:\n    print(0)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s485903098":{
    "code_string":"a,b=map(int,input())\nif a>12:\n    print(b)\nelif 13>a>5:\n    print(b\/2)\nelse:\n    print(0)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s349240411":{
    "code_string":"a,b=map(input().split())\nif a>=13:\n  print(b)\nelif 12<=a<=6:\n  print(b\/\/2)\nelse:\n  print(0)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s561282699":{
    "code_string":"a = int(input())\nb = int(input())\nif a >= 13 :\n  print(b)\nelif a >= 6 :\n  print(b\/\/2)\nelse :\n  print(0)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '30 100'"
  },
  "s799675664":{
    "code_string":"if a>=13:\n  print(b)\nelif a>=6 and a<=12:\n  print(int(b\/2))\nelse:\n  print(0)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s042788833":{
    "code_string":"A,B = map(int,input().split())\n\nprint(int(B) if A >= 13 else 0 if A <= 5 else int(B\/\/2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s764621524":{
    "code_string":"A,B = map(int,input().sprit())\nif A<=5:\n  print(0)\nelif A<=12:\n  print(B\/\/2)\nelse:\n  print(B)",
    "error_obj":"AttributeError: 'str' object has no attribute 'sprit'"
  },
  "s703074375":{
    "code_string":"\ndef main():\n    a, b = map(int, input())\n    if a >= 13:\n        print(b)\n    elif 6 <= a <= 12:\n        print(b \/\/ 2)\n    else:\n        print(0)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s955999395":{
    "code_string":"a, b = int(input))\nif a <= 5:\n    print(0)\nelif a <= 12:\n    print(b\/\/2)\nelse:\n    print(b)",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s297608276":{
    "code_string":"#ABC127 A\n\nA, B = map(int,input(),split())\nif A >= 13:\n    print(B)\nelif 6 <= A <= 12:\n    print(B\/2)\nelif A <= 5:\n    print(0)",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s047538372":{
    "code_string":"A = int(input())\nB = int(input())\n\nif A >= 13:\n  print(B)\nelif A >= 6:\n  half_b = B\/2\n  print(half_b)\nelse:\n  print(int(0))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '30 100'"
  },
  "s852364064":{
    "code_string":"A, B = input().split() \n\nif A < 5:\n  print(0)\nelif A < 12:\n  C = B \/ 2\n  print(C)\nelse :\n  print(B)",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s270549222":{
    "code_string":"a,b = map(int,input().split())\nif a<=5:\n    print(0)\nelif 6<=a and a<=12:\n    print(int(b\/2)a)\nelse:\n    print(b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s348333963":{
    "code_string":"a = int(input(\"\")\nb = int(input(\"\")\nif b%2==0:\n        if a>=13:\n          print(b)\n        elif 6<=a<=12:\n          print(b\/2)\n        elif a<=5:\n          print(0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s142986109":{
    "code_string":"a,b = map(int,input().sprit())\nif a >= 13:\n  print(b)\nelif 6 <= a <= 12:\n  print(b\/\/2)\nelse:\n  print(0)",
    "error_obj":"AttributeError: 'str' object has no attribute 'sprit'"
  },
  "s317190350":{
    "code_string":"a,b,c=input().split()\na=int(a)\nb=int(b)\nc=int(c)\nd=c\nwhile i<10:\nd=a*d-b\nprint(d)\ni=i+1",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s878323249":{
    "code_string":"r,D,x =map(int,input().split())\n\nfor i in range(10)\n\tx = r*x-D\n  \tprint(x)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s133885301":{
    "code_string":"arr = input.split()\nr = int(arr[0])\nd = int(arr[1])\nx = int(arr[2])\n\nfor i in range(0,10):\n  x = r*x - d\n  print(x)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s886442519":{
    "code_string":"r,d,x=map(int,input().split())\n\nfor i inrange(1,11):\n  x=r*x-d\n  print(x)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s838022602":{
    "code_string":"#! python3\n#  solve127A.py\n\nage,cost = map(int,input().split())\n\nif age <= 5:\n    cost = 0\nelif 6 <= age <= 12:\n    cost = cost\/\/2\nelif 7 <= age:\n    cost = cost\n\nprint(cost)",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s367104715":{
    "code_string":"r, d, x = map(int, input().split())\nfor i in range(10):\n\tx = r * x - d\n    print(x)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s770301709":{
    "code_string":"r,D,x=map(int,input().split())\n\ntmp=x\nfor i in range(10):\n  tmp=tmp*r-d\n  print(tmp)",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s683427094":{
    "code_string":"x,D,xx=map(int,input().split())\nfor i for range(10):\n  xx = x*xx-D\n  print(xx)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s002138508":{
    "code_string":"N, M = map(int, input().split())\nlmax = 0\nrmin = 10**5\nfor i in range(M):\n    L, R = map(int, input().split())\n    lmax = max(lmax, L)\n    rmin = min(rmin, R)\nans = rmin - lmax\nif ans >= 0:\n    print(ans + 1)\nelse:\n    print(0)",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s699492892":{
    "code_string":"N,M=map(int, input().split())\nL = []\nR = []\nfor i in range(M):\n    l, r = input().split()\n    L.append(int(l))\n    R.append(r)\n\n\nx = min(R)-max(L)\n\n\nprint(0 if x <0 else x+1)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s030338718":{
    "code_string":"n,m=map(int,input().split())\nl=1\nr=n\nfor i in range(m):\n  li,ri=map(int,input().split())\n  l = max(l,li)\n  r = min(r,ri)\nprint(max(r-l,0)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s614158005":{
    "code_string":"n,m =map(int,input().split())\na =[]*m\nb =[]*m\nfor i in range(n):\n        l,r =map(int,input().split())\n        a.append(l)\n        b.append(r)\n\nif max(a) <=min(b):\n        print(min(b)-max(a)+1)\nelse:\n        print(0)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s352798113":{
    "code_string":"# abc127_c.py\n# https:\/\/atcoder.jp\/contests\/abc127\/tasks\/abc127_c\n\n# C - Prison \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 300\u70b9\n\n# \u554f\u984c\u6587\n# N\u679a\u306e ID \u30ab\u30fc\u30c9\u3068 M\u500b\u306e\u30b2\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\n# i\u756a\u76ee\u306e\u30b2\u30fc\u30c8\u306f Li,Li+1,...,Ri \u756a\u76ee\u306e ID \u30ab\u30fc\u30c9\u306e\u3046\u3061\u3069\u308c\u304b 1\u679a\u3092\u6301\u3063\u3066\u3044\u308c\u3070\u901a\u904e\u3067\u304d\u307e\u3059\u3002\n# 1\u679a\u3060\u3051\u3067\u5168\u3066\u306e\u30b2\u30fc\u30c8\u3092\u901a\u904e\u3067\u304d\u308b ID \u30ab\u30fc\u30c9\u306f\u4f55\u679a\u3042\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\n# \u5236\u7d04\n#     \u5165\u529b\u306f\u5168\u3066\u6574\u6570\u3067\u3042\u308b\u3002\n#     1\u2264N\u2264105\n#     1\u2264M\u2264105\n#     1\u2264Li\u2264Ri\u2264N\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# N M\n# L1 R1\n# L2 R2\n# \u22ee\n# LM RM\n\n# \u51fa\u529b\n# 1\u679a\u3060\u3051\u3067\u5168\u3066\u306e\u30b2\u30fc\u30c8\u3092\u901a\u904e\u3067\u304d\u308b ID \u30ab\u30fc\u30c9\u306e\u679a\u6570\u3092\u51fa\u529b\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 4 2\n# 1 3\n# 2 4\n\n# \u51fa\u529b\u4f8b 1\n# 2\n\n# \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30011\n# \u679a\u3060\u3051\u3067\u5168\u3066\u306e\u30b2\u30fc\u30c8\u3092\u901a\u904e\u3067\u304d\u308b ID \u30ab\u30fc\u30c9\u306f 2\u679a\u3067\u3059\u3002\n#     1\u756a\u76ee\u306e ID \u30ab\u30fc\u30c9\u3067\u306f 2\u756a\u76ee\u306e\u30b2\u30fc\u30c8\u3092\u901a\u904e\u3067\u304d\u307e\u305b\u3093\u3002\n#     2\u756a\u76ee\u306e ID \u30ab\u30fc\u30c9\u3067\u306f\u5168\u3066\u306e\u30b2\u30fc\u30c8\u3092\u901a\u904e\u3067\u304d\u307e\u3059\u3002\n#     3\u756a\u76ee\u306e ID \u30ab\u30fc\u30c9\u3067\u306f\u5168\u3066\u306e\u30b2\u30fc\u30c8\u3092\u901a\u904e\u3067\u304d\u307e\u3059\u3002\n#     4\u756a\u76ee\u306e ID \u30ab\u30fc\u30c9\u3067\u306f 1\u756a\u76ee\u306e\u30b2\u30fc\u30c8\u3092\u901a\u904e\u3067\u304d\u307e\u305b\u3093\u3002\n\n# \u5165\u529b\u4f8b 2\n# 10 3\n# 3 6\n# 5 7\n# 6 9\n\n# \u51fa\u529b\u4f8b 2\n# 1\n\n# \u5165\u529b\u4f8b 3\n# 100000 1\n# 1 100000\n\n# \u51fa\u529b\u4f8b 3\n# 100000\n\n\nglobal FLAG_LOG\nFLAG_LOG = False\n\n\ndef log(value):\n    # FLAG_LOG = True\n    FLAG_LOG = False\n    if FLAG_LOG:\n        print(str(value))\n\n\ndef calculation(lines):\n    # S = lines[0]\n    # N = int(lines[0])\n    N, M = list(map(int, lines[0].split()))\n    # values = list(map(int, lines[1].split()))\n    # values = list(map(int, lines[2].split()))\n    # values = list()\n    # for i in range(6):\n    #     values.append(int(lines[i]))\n    valueses = list()\n    for i in range(M):\n        valueses.append(list(map(int, lines[i+1].split())))\n\n    ll = None\n    rr = None\n\n    log(f'valueses=[{valueses}]')\n\n    for i in range(M):\n        l = valueses[i][0]\n        r = valueses[i][1]\n        if ll is None:\n            ll = l\n        elif ll < l:\n            ll = l\n        else:\n            log(f'll=[{l}], l=[{l}]')\n        if rr is None:\n            rr = r\n        elif rr > r:\n            rr = r\n        else:\n            log(f'rr=[{rr}], r=[{r}]')\n\n    log(f'l=[{l}]')\n    log(f'r=[{r}]')\n\n    return [max(rr-ll+1, 0)]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines():\n    lins = input()\n    N, M = list(map(int, line.split()))\n    lines = list()\n    lines.append(line)\n    for _ in range(M):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['4 2', '1 3', '2 4']\n        lines_export = [2]\n    if pattern == 2:\n        lines_input = ['10 3','3 6', '5 7', '6 9']\n        lines_export = [1]\n    if pattern == 3:\n        lines_input = ['100000 1', '1 100000']\n        lines_export = [100000]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    global FLAG_LOG\n    if len(args) == 1:\n        mode = 0\n        FLAG_LOG = False\n    else:\n        mode = int(args[1])\n        FLAG_LOG = True\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines()\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"NameError: name 'line' is not defined"
  },
  "s200901288":{
    "code_string":"r=input().split()\nN=int(r[0])\nM=int(r[1])\ndata=[[int(s) for s in input().split()] for i in range(M)]\nleft=[]\nright=[]\nfor i in range(M):\n    left.append(data[i][0])\n    right.append(data[i][1])\nif min(right)-max(left)+1=<0:\n    print(0)\nelse:\n    print(min(right)-max(left)+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s934665358":{
    "code_string":"n, m = map(int, input().split())\nl, r = [], []\n\nfor _ in range(m):\n    s, t = map(int, input().split())\n    l.append(s)\n    r.append(t)\n\nans = min(r) - max(s) + 1\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s281500521":{
    "code_string":"#n=int(input())\n#s,t=input().split()\nn,m = map(int, input().split())\n#l=list(map(int, input().split()))\nl=[0]*100005\nr=[1000005]*100005\nz=1000010\nfor i in range(m):\n   l[i],r[i]=map(int,input().split()) \nmi=max(l)\nma=min(r)\n\n\n\nif mi>ma:\n    print(0)\nelse\n    print(ma-mi+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s296756876":{
    "code_string":"#\u5165\u529b:N,M(int:\u6574\u6570)\ndef input2():\n\treturn map(int,input().split())\n\nN,M=input2()\nL,R=[],[]\nfor i in range(M):\n\tl,r=input2()\n\tL.append(l)\n\tR.append(r)\n\nMIN=0\nMAX=N\n\nfor j in range(M):\n\tif L[j]>MIN and :\n\t\tMIN=L[j]\n\tif R[j]<MAX:\n\t\tMAX=R[j]\n\nif MAX<MIN:\n\tprint(0)\nelse:\n\tprint((MAX-MIN)+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s368316574":{
    "code_string":"n,m = map(int,input().split())\nlr = [[map(int,input().split())] for i in range(m)]\n\nmax = 0\nmin = n+1\nfor i in range(m):\n    if lr[i][0] > max :\n        max = lr[i][0]\n    if lr[i][1] < min :\n        min = lr[i][1]\n\nprint(min-max+1)\n",
    "error_obj":"TypeError: '>' not supported between instances of 'map' and 'int'"
  },
  "s163710467":{
    "code_string":"n,m = map(int,input().split())\nl_max=0\nr_min=n \nfor i in range(n):\n  l,r = map(int,input().split())\n  l_max = max(l_max,l)\n  r_min = min(r_min,r)\nprint(r_min - l_max)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s375911936":{
    "code_string":"N, M = map(int, input().split())\n\n\nL, R = map(int, input().split())\nar = [i for i in range(L, R+1)]\nfor i in range(M-1):\n      L, R = map(int, input.split())\n      if ar[-1] < L or ar[0] > R:\n        break\n      else:\n        if ar[0] < L < ar[-1]:\n          ar = [x for x in range(L, ar[-1]+1)]\n        elif ar[0] < R <ar[-1]:\n          ar = [x for x in range(ar[0], R+1)]\nprint(len(ar))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s483009421":{
    "code_string":"n, m = map(int, input().split())\nans = [i for i in range(1, n + 1)]\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    tmp = [i for i in range(x, y + 1)]\n    for ele in tmp:\n        ans.remove(ele)\nprint(n - len(ans))",
    "error_obj":"ValueError: list.remove(x): x not in list"
  },
  "s143395625":{
    "code_string":"import heapq\n\nn, m = list(map(int, input().split()))\ncards = list(map(int, input().split()))\ncards.sort()\n\nqueries = []\nfor i in range(m):\n    q = list(map(int, input().split()))\n    queries.append(q)\nqueries.sort(key=lambda x: x[1])\nqueries.reverse()\n\nans = 0\npos = 0\nfor q in queries:\n    b, c = q\n    if cards[min(pos+b-1, n-1)] < c:\n        # print('a')\n        pos = pos + b\n        ans += c * b\n        if pos >= n:\n            break\n    else:\n        for i in range(b):\n            if cards[pos+i, n-1] < c:\n                # print('b')\n                ans += c\n            else:\n                # print('c')\n                pos += i\n                for j in range(pos, n):\n                    ans += cards[j]\n\n                pos = n\n                break\n        break\n\nif pos < n:\n    for j in range(pos, n):\n        ans += cards[j]\n\nprint(ans)\n\n",
    "error_obj":"TypeError: list indices must be integers or slices, not tuple"
  },
  "s154099034":{
    "code_string":"import numpy as np\nfrom heapq import heapify,heapreplace\ndef solve(stdin):\n    n,m = stdin[:2]\n    A = stdin[2:2+n].tolist()\n    BC = stdin[2+n:].reshape(-1,2)\n\n    heapify(A)\n\n    BC = sorted(BC,key=lambda x:(x[1]),reverse=True)\n    for b,c in BC:\n        if c<A[0]:\n            break\n        for i in range(b):\n            if A[0]>c:\n                break\n            heapreplace(A,c)\n        \n    #print(A)\n    return sum(A)\n \ndef main():   \n    stdin = np.fromstring(open(0).read(), dtype=np.int64, sep=' ')\n    print(solve(stdin))\n \ndef cc_export():\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('solve', '(i8[:],)')(solve)\n    cc.compile()\n \nif __name__ == '__main__':\n    import sys\n    if sys.argv[-1] == 'ONLINE_JUDGE':\n        cc_export()\n        exit(0)\n    from my_module import solve\n    main()",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s730299300":{
    "code_string":"N,M=map(int,input().split())\narr=[int(x) for x in input().split()]\ns=[list(map(int,input().split())) for y in range(M)]\ns(key=lambda z: z[1], reverse=True)\n\nsum_a=0\nfor a,b in s:\n    arr+=[b]*a\n    sum_a+=a\n    if sum_a>=N:\n        break\n\nlst=sorted(arr)\nans=sum(lst[-N:])\nprint(ans)",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s984751520":{
    "code_string":"icase=0\nif icase==0:\n    n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    d=[]\n    cb=[[0]*2 for i in range(m)]\n    for i in range(m):\n        bi,ci=map(int,input().split())\n        cb[i]=[ci,bi]\nelif icase==2:\n    n,m=10,3\n    a=[1, 4, 5, 5, 7, 8, 13, 33, 52, 100]\n    cb=[[30, 4], [10, 3], [4, 1]]\n\na.sort()\ncb.sort(reverse=True)\n\nif cb[0][0]<=a[0]:\n    print(sum(a))\n    sys.exit()\n    \nasum=0\nisum=0\nisumm=0\nfor i in range(m):\n    isum+=cb[i][1]\n    if isum>n:\n        if a[-1]<=cb[i][0]:\n            asum+=cb[i][0]*(n-isumm)\n            print(asum)\n            sys.exit()\n        else:\n            ii=bisect_right(a,cb[i][0])\n            asum+=cb[i][0]*(ii-isumm)\n            asum+=sum(a[ii:])\n            print(asum)\n            sys.exit()\n    if a[isum-1]<=cb[i][0]:\n        asum+=cb[i][0]*cb[i][1]\n        isumm=isum\n        continue\n    else:\n        ii=bisect_right(a,cb[i][0])\n        asum+=cb[i][0]*(ii-isumm)\n        asum+=sum(a[ii:])\n        print(asum)\n        sys.exit()\n    isumm=isum\n    \nasum+=sum(a[isumm:])\n        \nprint(asum)\n",
    "error_obj":"NameError: name 'bisect_right' is not defined"
  },
  "s151722879":{
    "code_string":"n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\nlist = [list(map(int, input().split())) for x in range(m)]\nlist.sort(list, key=lambda x: x[1], reverse=True) # \uff11\u756a\u306e\u8981\u7d20\u3067\u964d\u9806\u30bd\u30fc\u30c8\n\napp_count = 0\nfor i in list:\n    a += [i[1]]*i[0]\n    app_count += i[0]\n    if app_count>n:\n        break\n\na.sort(reverse=True)\n\nprint(a[:n])",
    "error_obj":"TypeError: sort() takes at most 2 arguments (3 given)"
  },
  "s144175701":{
    "code_string":"     N,M=map(int,input().split())\nimport heapq\nA=list(map(int,input().split()))\nheapq.heapify(A)\nBC=[]\nfor i in range(M):\n  B,C=map(int,input().split())\n  BC.append((B,C))\nBC.sort(key=lambda x:x[1],reverse=True)\nimport bisect\nA.sort()\nnow=0\nD=[0]*N\nfor i in range(M):\n  B=BC[i][0]\n  C=BC[i][1]\n  for j in range(now,min(now+B,N)):\n    D[j]=C\n  now+=B\n  if now>N-1:\n    break\n\nfor i in range(N):\n  a=A[i]\n  d=D[i]\n  if d>a:\n    A[i]=d\n  else:\n    break\nprint(sum(A))\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s523399419":{
    "code_string":"import heapq\nn, m = map(int, input().split())\naas = list(map(int, input().split())).sort()\nhq = []\nfor i in range(m):\n    b, c = map(int, input().split())\n    heapq.heappush(hq,(-c,b))\ni = 0\nwhile hq:\n    -c, b = heapq.heappop(hq)\n    for j in range(i,min(n,i+b)):\n        if aas[j] < c:\n            aas[j] = c\n        else:\n            print(sum(aas))\n            exit()\n    i = j + 1\nprint(sum(aas))",
    "error_obj":"SyntaxError: cannot assign to operator"
  },
  "s672420736":{
    "code_string":"import heapq\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nheapq.heapify(a)\nbc = [list(map(int, input().split())) for _ in range(m)]\nbc.sort(key = lambda x: x[1], reverse = True)\n\nfor i in range(m):\n    if a[b-1] >= bc[i][1]:\n        break\n    else:\n        cnt = 0\n        while cnt < bc[i][0]:\n            heapq.heapreplace(a, bc[i][1])\n            cnt += 1\n\nprint(sum(a))",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s387523381":{
    "code_string":"n,k=map(int,input().split())\na = input()\n \na = list(a)\na[k - 1] = a[k-1].lower()\na = \"\".join(a)\nprint(a)\n \n127\na,b = map(int, input().split(\" \"))\nif a >= 13 :\n  print(b)\nelif a >= 6 :\n  print(b\/\/2)\nelse:\n  print(0)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s664402106":{
    "code_string":"a,b=map(int,input().split())\ns=input()\nprint(s[:k-1]+s[k-1].lower()+s[k:])",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s394146750":{
    "code_string":"n,k = [int(x) for x in input().split()]\ns = input()\n\nk -= 1\n\nif s[k] == \"A\":\n  s[k] = \"a\"\nelif s[k] == \"B\":\n  s[k] = \"b\"\nelif s[k] == \"C\":\n  s[k] = \"c\"\n\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s234335764":{
    "code_string":"n, k = map(int, input().split())\ns = list(input().split())\n\nprint(join(s[k-1].swapcase()))",
    "error_obj":"NameError: name 'join' is not defined"
  },
  "s831217704":{
    "code_string":"N, K = map(int, input().split())\nS = str()\nif(S[K] = 'A'):\n  S[K] = 'a'\nelif(S[K] = 'B'):\n  S[K-1] = 'b'\nelif(S[K] = 'C'):\n  S[K] = 'c'",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s644134166":{
    "code_string":"s = int(input())\na = s % 100\nb = ((s-a) % 100)\nif a <= 31 and b <= 12:\n  print(\"YYMM\")\nelif a <= 12 and b <= 31:\n  print(\"MMYY\")\nelif  a <= 12 and b <= 31 and a <= 31 and b <= 12:\n  print(\"AMBIGUOUS\")\nelse:\n  print(\"NA\")\n   ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1'"
  },
  "s996792055":{
    "code_string":"S = int(input())\na = S % 100\nb = (S- (S % 100))\/100\nif   b <= 12 and  a<=12 and a!=0 and b!= 0:\n       print(\"AMBIGUOUS\")\nelif b <= 12 and a!=0 :\n       print(\"MMYY\")\nelif a<=12 and a!=0  :\n       print(\"YYMM\")\nelse :\n      print(\"NA\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1'"
  },
  "s383501058":{
    "code_string":"n,k=map(int,input().split())\ns=input()\nprint(s[:k-1]+s[k-1].lower+s[k:])",
    "error_obj":"TypeError: can only concatenate str (not \"builtin_function_or_method\") to str"
  },
  "s341287507":{
    "code_string":"word_S = input().split(\" \")[-1]\nS = list(word_S)\nchange_K = int(input())\nword1 = \"\"\nfor i in range(change_K - 1):\n    word1 = word1 + S[i]\nword2 = S[change_K - 1]\nword3 = \"\"\ncount = 0\nwhile True:\n    try:\n        word3 = word3 + S[change_K + count]\n        count += 1\n    except IndexError:\n        break\nword2 = word2.swapcase()\nprint(word1+word2+word3)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'ABC'"
  },
  "s683014974":{
    "code_string":"x = input().split(\" \")\ncommand = x[1]\nN = x[0]\nN += command.lower(x[1])\nprint(N)",
    "error_obj":"TypeError: str.lower() takes no arguments (1 given)"
  },
  "s374447250":{
    "code_string":"n,k=map(int,input().split())\ns=input()\ns[k-1] = chr(ord(s[k-1]) - ord('A') + ord('a'))\nfor c in s:\n\tprint(c, end=\"\")",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s613059728":{
    "code_string":"N,K = map(int,input().split())\nS = []\nS[K-1] = S[K-1].lower()\nprint(S)",
    "error_obj":"IndexError: list index out of range"
  },
  "s917867018":{
    "code_string":"n,k=map(int,input().split())\ns=str(input())\nif s[k-1]==\"A\":\n    s[k-1]=\"a\"\nelif s[k-1]==\"B\":\n    s[k-1]=\"b\"\nelif s[k-1]==\"C\":\n    s[k-1]=\"c\"\nprint(s)\n",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s536335308":{
    "code_string":"b=int(input())\nc=input()\nc=c.replace(c[b-1],c[b-1].lower())\nprint(c)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1'"
  },
  "s609383154":{
    "code_string":"n,k=tuple(int,input().split())\ns=list(input())\ns[k-1]=s[k-1].lower()\nprint(\"\".join(s))\n",
    "error_obj":"TypeError: tuple expected at most 1 argument, got 2"
  },
  "s676765406":{
    "code_string":"N, K = map(int, input().split())\nS = list(input())\nS[K-1] = S[K-1].lower()\nprint(sum(S))",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s067787375":{
    "code_string":"n,k=map(int, input(\"\").split(' '))\ns=input('')\nif len(s)=n:\n  slist=lis((s))\n  swapcase(slist[k-1])\n \nfor i in range(0,len(slist)-1):\n  print(slist[i], end=' ')\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s552575666":{
    "code_string":"N=int(input(\"\"))\nK=int(input(\"\"))\ns=str(input(\"\"))\nprint(s[0:K-1]+s[K-1].lower()+s[K:])",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1'"
  },
  "s016656623":{
    "code_string":"N, K = map(int, input().split())\n\nif S[K-1] == 'A': rep = 'a'\nelif S[K-1] == 'B': rep = 'b'\nelse: rep = 'c'\n  \nprint(S[:K] + rep + S[K+1:])\n  ",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s616305081":{
    "code_string":"n,k=input().split()\ns = input()\n \ns = list(s)\ns[k - 1] = s[k-1].lower()\ns = \"\".join(s)\nprint(s)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s939359892":{
    "code_string":"small = ['a', 'b', 'c']\ncapital = ['A', 'B', 'C']\n\ntmp = input().split(\" \")\nN = int(tmp[0])\nK = int(tmp[1])\nstr = input()\n\nstr[K] = small[capital.index(str[K])]\n\nprint(str)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s764159467":{
    "code_string":"N,K = map(int,input().split())\nS = input()\n\nS[K-1]=S[k-1].lower()\nprint(S)",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s027467603":{
    "code_string":"n,k = map(int, input().split())\ns = list(map(str, input().split()))\nk = k-1\n\nfor i in range(n):\n  if i != k:\n    print(s[i],end=\"\")\n  else:\n    x = s[i].lower()\n    print(x,end=\"\")\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s150401107":{
    "code_string":"n,k = map(int,input().split())\ns = input()\n\nprint(s[:k-1]+s.upper[k-1]+s[k:])",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s063552360":{
    "code_string":"s = input()\ns_f = int(s[0]+s[1])\ns_b = int(s[2]+s[3])\n\n#print(s_f)\n#print(s_b)\nif s_f==0 or s_b==0:\n    print('NA')\nelif s_f<=12 and s_b<=12:\n    print(\"AMBIGUOUS\")\nelif s_f<=12 and s_b>12:\n    print('MMYY')\nelif s_f>12 and s_b<=12:\n    print('YYMM')\nelif s_f>12 and s_b>12\n    print('NA')\n    \n    ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s722142352":{
    "code_string":"S = input()\nf = int(S[0]+S[1])\nb = int(S[2]+S[3])\n\ndef judge(int):\n    if 1 <= int <= 12\n        return 0\n    else:\n        return 1\nref = [judge(f), judge(b)]\n\nif ref == [1, 1]:\n    print(\"NA\")\nelif ref == [0, 1]:\n    print(\"MMYY\")\nelif ref == [1, 0]:\n    print(\"YYMM\")\nelse:\n    print(\"AMBIGUOUS\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s114089265":{
    "code_string":"YYMM = False\nMMYY = False\nf = input()\nh1 = f[0] + f[1]\nh2 = f[2] + f[3]\n\nif 1 <= h2 <= 12:\n  YYMM = True\nif 1 <= h1 <= 12:\n  MMYY = True\n\ndef ret(c1,c2):\n  if c1 and c2:\n    return \"AMBIGUOUS\"\n  elif c1:\n    return \"YYMM\"\n  elif c2:\n    return \"MMYY\"\n  else:\n    return \"NA\"\n  \nprint(ret(YYMM,MMYY))",
    "error_obj":"TypeError: '<=' not supported between instances of 'int' and 'str'"
  },
  "s244161751":{
    "code_string":"s = input()\nn1 = int(s[:2])\nn2 = int(s[2:])\nif 1 <= n1 <= 12 and 1 <= n2 <= 12:\n  print(\"AMBIGUOUS)\nelif (n1 > 12 or n1 == 0) and 1 <= n2 <= 12:\n  print(\"YYMM\")\nelif (n2 > 12 or n2 == 0) and 1 <= n1 <= 12:\n  print(\"MMYY\")\nelse:\n  print(\"NA\")",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s555062433":{
    "code_string":"try:\n    s1=(input(''))\n    if len(s1)>=4:\n        raise ValueError\n    \n    check=list((s1))\n    assert bool(int(check[0]+check[1])<=12) != bool(int(check[2]+check[3])<=12)\n    if int(check[0]+check[1])<=12:\n        print(\"MMYY\")\n    elif int(check[2]+check[3])<=12:\n        print(\"YYMM\")\nexcept AssertionError:\n    if int(check[0]+check[1])<=12 and int(check[2]+check[3])<=12:\n        print(\"AMBIGUOUS\")\n    else:\n        print(\"NA\")\n\n",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p03042\/Python\/s555062433.py\", line 4, in <module>\n    raise ValueError\nValueError\n"
  },
  "s552189461":{
    "code_string":"a=input(a)\nb=int(a[0]+a[1])\nc=int(a[2]+a[3])\nif 1<=b<=12 and 1<=c<=12:\n  print(\"AMBIGUOUS\")\nelif b>12:\n  if c>12:\n    print(\"Na\")\n  elif 1<=c<=12:\n    print(\"YYMM\")\nelif c>12:\n  if b>12:\n    print(\"Na\")\n  elif 1<=b<=12:\n    print(\"MMYY\")\nelse:\n  print(\"NA\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s696347905":{
    "code_string":"\nn1,n2=int(n[:2]),int(n[2:])\nif (n1>12 and n2>12) or (n1==0 and n2==0):\n    print(\"NA\")\nelif (n1!=0 and n1<=12) and (n2!=0 and n2<=12):\n    print(\"AMBIGUOUS\")\nelif n1!=0 and n1<=12:\n    print(\"MMYY\")\nelif n2!=0 and n2<=12:\n    print(\"YYMM\")\nelse:\n    print(\"errer\")\n\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s697585583":{
    "code_string":"s = raw_input()\n\na = int(s[:2])\nb = int(s[2:])\n\nif 0<a<13:\n    if 0<b<13:\n        print(\"AMBIGUOUS\")\n    else:\n        print(\"MMYY\")\nelse:\n    if -1<b<13:\n        print(\"YYMM\")\n    else:\n        print(\"NA\")\n",
    "error_obj":"NameError: name 'raw_input' is not defined"
  },
  "s956100966":{
    "code_string":"#k = int(input())\n#s = input()\n#a, b = map(int, input().split())\n#s, t = map(str, input().split())\n#l = list(map(int, input().split()))\n#l = [list(map(int,input().split())) for i in range(n)]\n\nn = int(input())\na = []\nfor i in range(n):\n    s, p = map(str, input().split())\n    p = int(p)\n    a.append((s,p,i+1))\n# \u8981\u7d20[1]\u3092\u9006\u30bd\u30fc\u30c8\na.sort(key=lambda x:x[1], reverse=True)\n# \u8981\u7d20[0]\u3092\u9806\u30bd\u30fc\u30c8\na.sort(key=lambda x:x[0])\n\nfor i in range(n):\n    print(a[i][2])\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s828569360":{
    "code_string":"s = input()\n\nb = int(s[:2])\na = int(s[2:])\n\nprint(b)\nprint(a)\n\ndef yorm(i):\n    flag = 'none'\n    if 0<i<12:\n        flag = 'MM'\n    elif i<100:\n        flag = 'YY'\n    return flag\n   \nans = bf+af\nif len(ans) != 4:\n    ans = 'NA'\nif ans == 'MMMM':\n    ans = 'AMBIGUOUS'\nif ans == 'YYYY':\n    ans = 'NA'\nprint(ans)",
    "error_obj":"NameError: name 'bf' is not defined"
  },
  "s349365459":{
    "code_string":"S=int(input())\na=s\/\/100\nb=s%100\nif a>0 and a<=12:\n  if b>0 and b<=12:\n    print(\"AMBIGUOUS\")\n  else:\n    print(\"MMYY\")\nelse:\n  if b>0 and b<=12:\n    print(\"YYMM\")\n  else:\n    print(\"NA\")",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s618923460":{
    "code_string":"def f(y, m):\n\tif y in range(1, 13) and m in range(1, 13):\n      return \"AMBIGUOUS\"\n    if m in range(1, 13):\n      return \"YYMM\"\n    if y in range(1, 13):\n      return \"MMYY\"\n    return \"NA\"\n  \nS = input()\ny, m = int(S[:2]), int(S[2:])\nprint(f(y, m))\n  ",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s999971803":{
    "code_string":"N = int(input())\nK = int(input())\nresult = 0\nfor i in range(1,N+1):\n    prob = 1\n    count = i \n    while count < K:\n        prob *= 0.5\n        count *= 2\n    result += prob \/N\nprint(result)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 10'"
  },
  "s111324022":{
    "code_string":"D = int(input())\nP = int(input())\nans = 0.0\ndef func(i):\n    t = 0\n    while(i < P):\n        i *= 2\n        t += 1\n    return t\n\nfor i in range(1, D + 1):\n    ans += float((1\/D)) * float(((1 \/ 2) ** func(i)))\n\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 10'"
  },
  "s412058591":{
    "code_string":"n,k = map(int,input().strip().split())\nc = 0\nfor i in range(1,n+1):\n  if n>k:\n    c+=1\/n\n  else:\n    cnt=0\n    while i<k:\n      i*=2\n      cnt+=1\n    c+=1\/N*(1\/2)**cnt\nprint(c)\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s808647121":{
    "code_string":"n, k = map(int, input().split())\np = 0\nfor i in range(1, n + 1):\n    if i < k:\n        count = 1\n        while i * count < k:\n            count += 1\n        p += 0.5 ^ float(count)\n    else:\n        p += 1\nprint(p\/n)\n",
    "error_obj":"TypeError: unsupported operand type(s) for ^: 'float' and 'float'"
  },
  "s214868444":{
    "code_string":"n,k=map(int,input().split())\n\nans = 0\n\nfor i in range(1,n-1):\n  p = i\n  r = 1\n  while < k:\n    p*=2\n    r\/=2\n  ans+=r\n\nans\/=n\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s532943060":{
    "code_string":"N, K = list(map(int,input().rstrip().split()))\nans = 0\nfor i in range(1,N+1):\n    p = 1\/N\n    if j<K:\n        while i<K:\n            i *= 2\n            p *= 0.5\n    ans += p\nprint(ans)",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s104567294":{
    "code_string":"n,k = map(int,input().split())\nans = 0\nfor i in range(1,n+1):\n    j =0\n    if i < k:\n        while i *(2**j) < k:\n            j += 1\n        ans +=(1\/n)*\/(2**j)\n    else:\n        ans += (1\/n)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s077016203":{
    "code_string":"from collections import deque\n\nN = int(input())\n\n\nvlist = [[]] * N\n\nfor i in range(N-1):\n    a,b,w = map(int, input().split())\n    a -= 1\n    b -= 1\n    vlist[a].append(b,w)\n    vlist[b].append(a,w)\n\nans = [-1] * N\nq = deque()\n\nans[0] = 0\nq.append(0)\n\nwhile q:\n    new = q.popleft()\n    for node, weight in vlist[new]:\n        if ans[node] != -1:\n            continue\n        ans[node] = (ans[new] + weight) % 2\n        q.append(node)\n    \nfor i in ans:\n    print(i)",
    "error_obj":"TypeError: list.append() takes exactly one argument (2 given)"
  },
  "s113709906":{
    "code_string":"from collections import deque\n\nN = int(input())\ngraph = [[] for _ in range(N)]\nfor _ in range(N - 1):\n    u, v, w = map(int, input().split())\n    u, v, w = u - 1, v - 1, w % 2\n    graph[u].append([v, w])\n    graph[v].append([u, w])\n\ncolors = [-1 for _ in range(N)]\nstack = deque()\nstack.append(0)\ncolors[0] = 0\n\nwhile stack:\n    n = stack.pop()\n    for _next, w in graph[n]:\n        if colors[_next] != -1:\n            continue\n        colors[_next] = (colors[n] + w) % 2\n        stack.append([_next])\n\nfor c in colors:\n    print(c)\n",
    "error_obj":"TypeError: list indices must be integers or slices, not list"
  },
  "s587328367":{
    "code_string":"(n,),*t=[map(int,t,split())for t in open(0)]\n*e,=eval('[],'*-~n)\nq=[(1,0)]\nf=[-1]*n\nfor v,w,c in t=:e[v]+=(w,c),;e[w]+=(v,c),\nfor v,c in q:\n f[v-1]=c%2\n for w,d in e[v]:q+=[(w,c+d)]*(f[w-1]<0)\nprint(*f)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s484101899":{
    "code_string":"import sys\nsys.setrecursionlimit(10**7)\nN = int(input())\n\nGraph = [[] for _ in range(N)]\ndist  = []*(N)\n\nfor i in range(N-1):\n\tu,v,w = map(int,input().split())\n\tu-=1\n\tv-=1\n\tGraph[u].append((v,w))\n\tGraph[v].append((u,w))\n\n\ndef func(fromE,now,length):\n\tdist[now] = length\n\t\n\tfor i in range(len(Graph[now])):\n\t\ttarget = Graph[now][i][0]\n\t\tlengt  = Graph[now][i][1]\n\n\t\tif target == fromE:\n\t\t\tcontinue\n\n\t\tfunc(now,target,dist[now]+lengt)\n\nfunc(-1,0,0)\n\nfor i in range(N):\n\tif dist[i]%2 == 0:\n\t\tprint(0)\n\telse:\n\t\tprint(1)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s019644153":{
    "code_string":"from collections import deque\n\ngraph=[[] for _ in range(N+1)]\n\nN,M=list(map(int,input().split()))\n\nfor _ in range(M):\n    a,b,c=map(int,input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n    \n#seen[i]\u306f\u3001\u9802\u70b9i\u3092\u8a2a\u554f\u6e08\u307f\u306e\u5834\u5408\u306fTrue\u3001\u672a\u8a2a\u554f\u306e\u5834\u5408\u306fFalse\nseen=[False]*(N+1)\n\n\ncount=0\n\nfor i in range(1,N+1):\n    if seen[i]==False:\n        seen[i]=True\n        S=deque([i])\n        \n        while S:\n            v=S.popleft()\n            #\u8a2a\u554f\u6e08\u307f\u306e\u9802\u70b9\u3092True\u306b\u3059\u308b\n            for i in graph[v]:\n                if seen[i]==False:\n                    seen[i]=True\n                    S.append(i)\n        count+=1\n\nprint(count)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s033785139":{
    "code_string":"N, M = map(int,input().split())\npar = [i for i in range(N+1)]\nsize = [1 for _ in range(N+1)]\n\ndef find(x):\n    if par[x] == x:\n        return x\n    else:\n        par[x] = find(par[x])\n        return par[x]\n\ndef unite(x,y):\n    x = find(x)\n    y = find(y)\n    if x == y:\n        continue\n    par[x] = y\n    size[y] += size[x]\n    size[x] = 0\n\nfor i in range(M):\n    x, y, z= map(int,input().split())\n    unite(x,y)\n\nAns =0\nfor j in size[1:]:\n    if j != 0:\n        Ans +=1\nprint(Ans)\n",
    "error_obj":"SyntaxError: 'continue' not properly in loop"
  },
  "s733413312":{
    "code_string":"class UnionFind():\n    def __init__(self, n):\n        self.par = [i for i in range(n)]\n        self.rank = [0] * n\n\n    def root(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.root(self.par[x])\n            return self.par[x]\n\n    def union(self, x, y):\n        x = self.root(x)\n        y = self.root(y)\n        if x != y:\n            if self.rank[x] < self.rank[y]:\n                self.par[x] = y\n            else:\n                self.par[y] = x\n                if self.rank[x] == self.rank[y]:\n                    self.rank[x] += 1\n\n    def samegrp(self, x, y):\n        return self.root(x) == self.root(y)\n\nfrom mymodules.somedatastrs import UnionFind\n\nn, m = [int(x) for x in input().split()]\nA = UnionFind(n)\nans = n\nfor i in range(m):\n    x, y, _ = [int(z) - 1 for z in input().split()]\n    if not A.samegrp(x, y):\n        ans -=1\n    A.union(x, y)\n\nprint(ans)",
    "error_obj":"ModuleNotFoundError: No module named 'mymodules'"
  },
  "s011914992":{
    "code_string":"N,K = map(int,input().split())\nans = 0\nif N == K:\n  print(1)\n  exit()\nfor _ in range(N-K):\n  ans++\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s662129087":{
    "code_string":"a,b = map(in,input().split())\nprint(a-b+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s429393398":{
    "code_string":"print(int(input())+1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 2'"
  },
  "s749664778":{
    "code_string":"[N,K]=L()\n\ndef L():\n    return list(map(int, input().split()))\nprint(N-K+1)",
    "error_obj":"NameError: name 'L' is not defined"
  },
  "s046903258":{
    "code_string":"a,b=map(int,input())\nprint(a-b+1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s989169225":{
    "code_string":"cnt = 0\nfor r in range(N\/\/R+1):\n    for g in range(N\/\/G+1):\n        if  (N - r*R - g*G) < 0:\n            break\n        if  (N - r*R - g*G)%B == 0 :\n            cnt +=1\n            #print(r,g,(N - r*R - g*G)\/\/B)\nprint(cnt)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s064491631":{
    "code_string":"R,G,B,N = list(map(int, input().split()))\n\nans = 0\nfor r in range(N\/\/R+1):\n    for g in range(tmp\/\/G+1):\n        check = (tmp - R*r - G*g)\n        if check%B == 0 and check > 0:\n            ans += 1\n\nprint(ans)",
    "error_obj":"NameError: name 'tmp' is not defined"
  },
  "s708566885":{
    "code_string":"n = int(input())\ns = [input() for i in range(n)]\n\nab = 0\nba = 0\nc2 = 0\nc3 = 0\nfor x in s:\n    if 'AB' in x:\n        ab += x.count('AB')    \n    if x[-1] == 'A' and x[0] == 'B':\n        ba = 1\n    if x[-1] == 'A' and x[0] != 'B':\n        c2 += 1\n    if x[-1] != 'A' and x[0] == 'B':\n        c3 += 1\nif ba > 0:\n    if c2 + c3 > 0:\n        ans = ab + ba + min(c2, c3)\n    else: # c2 = c3 =0\n        ans = ab + ba - 1\nprint(ans)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s894071625":{
    "code_string":"N = int(input())\nS = [input() for _ in range(N)]\n\n# \u6587\u5b57\u5217\u306bAB\u304c\u5165\u3063\u3066\u308b\u6570 + \u7d44\u307f\u5408\u308f\u305b\u3066\u5165\u308b\u6570\n# \u6587\u5b57\u5217\u306bAB\u304c\u5165\u3063\u3066\u308b\u6570 + f(A\u3067\u7d42\u308f\u308b\u6570, B\u3067\u59cb\u307e\u308b\u6570, B\u3067\u59cb\u307e\u308aA\u3067\u7d42\u308f\u308b\u6570)\ninclude = 0\nsb = 0\nfa = 0\nsbfa = 0\nfor s in S:\n    if 'AB' in s:\n        include += 1\n    if s[0] == 'B' and s[-1] == 'A':\n        sbfa += 1\n    elif s[0] == 'B':\n        sb += 1\n    elif s[-1] == 'A':\n        fa += 1\n\ndef calc_comb(sb, fa, sbfa):\n    ans = 0\n    if sbfa > 0:\n        ans += sbfa-1\n        if sb > 0:\n            sb -= 1\n            ans += 1\n        if fa > 0:\n            fa -= 1\n            ans += 1\n    ans += min(sb, fa)\n\nprint(include + calc_comb(sb, fa, sbfa))\n",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'"
  },
  "s320442263":{
    "code_string":"n = int(input())\n\nans = 0\nfor i in range(1, int(n ** 0.5) + 1):\n    if n % i == 0 and n \/\/ (i - 1) == n % (i - 1):\n        ans += i - 1\n    m = n \/\/ i - 1\n    if m > 0 and n % i == 0 and n \/\/ m == n % m:\n        ans += m\nprint(ans)\n",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s883966238":{
    "code_string":"N = int(input())\nans = 0\nfor i in range(1,1250000):\n    if(((N-i)\/i).is_integer() and N\/\/((N-i)\/i) == N%((N-i)\/i)):\n        # print((N-i)\/\/i,i)\n        ans += ((N-i)\/\/i)\n        # if(i == 800000):\n        #     print(ans)\n    # print(i)\nprint(ans)",
    "error_obj":"ZeroDivisionError: float floor division by zero"
  },
  "s639088460":{
    "code_string":"from collections import deque\n\ndef main():\nh, w = map(int,input().split())\nA = [list(input()) for _ in range(h)]\n    B = []\n\n    for i,a in enumerate(A):\n        for j,b in enumerate(a):\n            if b == \"#\":\n                B.append((i,j))\n\n    dxy = [[1,0],[-1,0],[0,1],[0,-1]]\n\n    stack = deque(B)\n    darked = len(stack)\n    targetd = h*w\n    count = 0\n\n    while darked < targetd:\n        nextd = deque([])\n\n        while stack:\n            x, y = stack.popleft()\n            for dx,dy in dxy:\n                X = x + dx\n                Y = y + dy\n                if not(0 <= X < h) or not(0 <= Y < w):\n                    continue\n                if A[X][Y]==\".\":\n                    A[X][Y]=\"#\"\n                    nextd.append((X,Y))\n        count += 1\n        stack = nextd\n        darked += len(stack)\n    print(count)\n    \nmain()\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s501709279":{
    "code_string":"a,b,t=map(int,input().split())\nprint(int(((t+0.5)\/\/a*b))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s003760066":{
    "code_string":"a, b, t = map(int, input().split())\nprint(t\/\/a*b)\ndebug_pri",
    "error_obj":"NameError: name 'debug_pri' is not defined"
  },
  "s209326456":{
    "code_string":"a,b,t = map(int,input().split())\nans = 0\nT = A\nwhile(T<=t):\n  ans += B\n  T += A\nprint(ans)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s376684644":{
    "code_string":"using System;\nusing System.Runtime.InteropServices;\n\nnamespace ConsoleApp2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int a, b, t;\n            string[] str =Console.ReadLine().Split(' ');\n            a = int.Parse(str[0]);\n            b = int.Parse(str[1]);\n            t = int.Parse(str[2]);\n            Console.WriteLine(b * (t \/ a));\n        }\n    }\n}\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s752294296":{
    "code_string":"a,b,t = map(int(input().split()))\nn = int(t\/a)\nprint(n*b)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s266582098":{
    "code_string":"A,B,T = map(input().split())\nprint(T\/\/A*B)\n",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s770675271":{
    "code_string":"a,b,t = map(int,input().split)\n\nprint(b*(a\/\/t))",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s698606040":{
    "code_string":"n = input().split()\nans = int( int(n[2]+0.5) \/ n[1]   ) * n[1]\nprint(ans)",
    "error_obj":"TypeError: can only concatenate str (not \"float\") to str"
  },
  "s867650388":{
    "code_string":"a,b,t=map(int,input(),split())\nprint(((t+1\/2)\/\/a)*b)\n",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s821338913":{
    "code_string":"def main():\n    a,b,t = map(int,input().split())\n    ans = 0\n    for i in range(t + 0.51, 1):\n        if i % a == 0:\n            ans += b\n    print(ans)\nmain()",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s132383845":{
    "code_string":"n=int(input())\nv=[]\nc=[]\nx=[]\nfor i in range(n):\n  v[i]=int(input())\nfor i in range(n):\n  c[i]=int(input())\n  x[i]=v[i]-c[i]\n\nans=0\nwhile x[i]>0:\n  ans+=x[i]\n  \nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '10 2 5'"
  },
  "s562792158":{
    "code_string":"input()\nv=list(map(int,input().split())\nc=list(map(int,input().split())\na=[max(0,i-j) for i,j in zip(v,c)]\nprint(sum(a))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s495836856":{
    "code_string":"n = int(input())\nv = list(map(int, input().split()))\nc = list(map(int, input().split())\n\nm = 0\n\nfor i in range(len(v)):\n  if v[i] > c[i]:\n    m += v[i] - c[i]\n\nprint(m)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s130352006":{
    "code_string":"n=int(input())\nk=0\nv=[map(int,input().split())]\nc=[map(int,input().split())]\nfor i in range(n):\n    if (v[i]-c[i])>0:\n        k += (v[i]-c[i])\nprint(k)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'map' and 'map'"
  },
  "s954296970":{
    "code_string":"N = int(input())\nv = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nans = 0\nfor _ in range(N):\n    if v[i] > c[i]:\n        ans += v[i] - c[i]\nprint(ans)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s486531350":{
    "code_string":"# Segment tree (GCD)\nfrom fractions import gcd\n\n\nclass SegmentTree():\n    _data = []\n    _offset = 0\n    _size = 0\n\n    def __init__(self, size):\n        _size = size\n        t = 1\n        while t < size:\n            t *= 2\n        self._offset = t - 1\n        self._data = [0] * (t * 2 - 1)\n\n    def update_all(self, iterable):\n        self._data[self._offset:self._offset+self._size] = iterable\n        for i in range(self._offset - 1, -1, -1):\n            self._data[i] = gcd(self._data[i * 2 + 1], self._data[i * 2 + 2])\n\n    def update(self, index, value):\n        i = self._offset + index\n        self._data[i] = value\n        while i >= 1:\n            i = (i - 1) \/\/ 2\n            self._data[i] = gcd(self._data[i * 2 + 1], self._data[i * 2 + 2])\n\n    def query(self, start, stop):\n        result = 0\n        l = start + self._offset\n        r = stop + self._offset\n        while l < r:\n            if l & 1 == 0:\n                result = gcd(result, self._data[l])\n            if r & 1 == 0:\n                result = gcd(result, self._data[r - 1])\n            l = l \/\/ 2\n            r = (r - 1) \/\/ 2\n        return result\n\n\nN = int(input())\nA = list(map(int, input().split()))\n\nst = SegmentTree(N)\nst.update_all(A)\n\nresult = st.query(1, N)\nfor i in range(1, N - 1):\n    result = max(result, gcd(st.query(0, i), st.query(i + 1, N)))\nresult = max(result, st.query(0, N - 1))\nprint(result)\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s956113402":{
    "code_string":"import math\nfrom functools import reduce\n\ndef gcd(numbers):\n    return reduce(math.gcdm numbers)\n\nN = int(input())\nA = list(map(int, input().split()))\n\nans = []\n\nif len(A) == 1:\n    ans.append(A[0])\nelse:\n    ans.append(gcd(A[1:]))\n    ans.append(gcd(A[:N]))\n\n    for i in range(1, N-1):\n        l = []\n        l.append(gcd(A[:i]))\n        l.append(gcd(A[i+1:]))\n        ans.append(gcd(l))\n\nprint(max(ans))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s704543426":{
    "code_string":"import math\nfrom itertools import accumulate\n\nn = int(input())\na = list(map(int, input().split()))\n\nfromleft = list(accumulate(a, math.gcd))\nfromright = list(accumulate(a[::-1], math.gcd)).reverse()\n\ngcd = []\n\ngcd.append(fromright[1])\nfor i in range(1, n-1):\n    gcd.append(math.gcd(fromleft[i-1], fromright[i+1]))\ngcd.append(fromleft[n-2])\n\nprint(max(gcd))\n",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s498591093":{
    "code_string":"import collections\n\nN =int(input())\n\nAs = [int(item) for item in input().split()]\n\ncnt = 0\n\nBs = collections.deque()\n\nmin1 = 1000000000000\n\nfor i in As:\n\n\tif As < 0:\n      cnt +=1\n\n\tBs.append(abs(i))\n\n\tmim1=min(min1, abs(i))\n\n\t\n\nif cnt % 2 =0:\n\n\tprint(sum(list(Bs)))\n\nelse:\n\n\tprint(sum(list(Bs))-min1*2)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s898314873":{
    "code_string":"from bisect import bisect_left,bisect,bisect_right\nimport sys\n\nicase=1\nif icase==0:\n    n=int(input())\n    a=list(map(int,input().split()))\n\na.sort()\nii=bisect(a,0)\n\nif ii==n:\n    if ii%2==0:\n        asum=-sum(a)\n    else:    \n        asum=-sum(a[0:ii-1])+a[ii-1]\n    print(asum)\n    sys.exit()\n\nif ii%2==0:\n    asum=-sum(a[0:ii])+sum(a[ii:])\nelse:\n    if -a[ii-1]<a[ii]:\n        d=a[ii-1]+a[ii]\n    else:\n        d=-a[ii-1]-a[ii]\n    asum=-sum(a[0:ii-1])+d+sum(a[ii+1:])\n\nprint(asum)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s538766559":{
    "code_string":"import sys\nsys.setrecursionlimit(10**6)\n\nn = int(input())\nA = list(map(int, input().split()))\nINF = 10**9\n\ndp = [[0]*2 for _ in range(n+1)]\u3000# dp[i][0]\u304ci\u3092\u9078\u3093\u3067\u53cd\u8ee2\u3055\u305b\u306a\u3044\u5834\u5408\u306e\u6700\u5927\u5024, dp[i][1]\u304ci\u3092\u9078\u3093\u3067\u53cd\u8ee2\u3055\u305b\u305f\u5834\u5408\u306e\u6700\u5927\u5024\n\ndp[0][0] = 0 \ndp[0][1] = -INF\n\nfor i in range(1,n+1):\n    dp[i][0] = max(dp[i-1][0]+A[i-1], dp[i-1][1]-A[i-1]) # i\u3092\u9078\u3093\u3067\u53cd\u8ee2\u3055\u305b\u306a\u3044\u6642\u3001 i-1\u3092\u9078\u3093\u3067\u53cd\u8ee2\u3055\u305b\u3066\u3044\u306a\u304b\u3063\u305f\u3089i\u306f\u305d\u306e\u307e\u307e\u3067\u3001i-1\u3092\u53cd\u8ee2\u3055\u305b\u3066\u3044\u305f\u3089i\u306f\u53cd\u8ee2\u3059\u308b\n    dp[i][1] = max(dp[i-1][0]-A[i-1], dp[i-1][1]+A[i-1]) # i\u3092\u9078\u3093\u3067\u53cd\u8ee2\u3055\u305b\u308b\u6642\u3001i-1\u3092\u9078\u3093\u3067\u53cd\u8ee2\u3055\u305b\u3066\u3044\u306a\u304b\u3063\u305f\u3089i\u306f\u53cd\u8ee2\u3057\u3066\u3044\u3066\u3001i-1\u3092\u53cd\u8ee2\u3055\u305b\u3066\u3044\u305f\u3089i\u306f\u305d\u306e\u307e\u307e\n\nprint(dp[n][0]) # n\u3092\u9078\u3076\u3053\u3068\u306f\u3067\u304d\u306a\u3044\uff08n+1\u304c\u5b58\u5728\u3057\u306a\u3044\uff09\u305f\u3081\u3001\u7b54\u3048\u306fdp[n][0]",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s042221635":{
    "code_string":"def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s, cnt = [0]*n, 0\n    for i in a:\n        s[i] = abs(i)\n        if i < 0:\n            cnt += 1\n    if cnt%2:\n        print(sum(s) - 2*min(s))\n    else:\n        print(sum(s))\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s388404110":{
    "code_string":"A, B = map(int,input().split())\n\nprint('Yay!' if A <= 8 and B <= 8 else':(')\n",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s448282354":{
    "code_string":"a,b,c=map(int,input.rstrip().split(' '))\nif (a<c<b) or (b<c<a):\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'rstrip'"
  },
  "s278836693":{
    "code_string":"n = int(input())\ns = str(input())\nk = int(input())\nwordn = \"\"\nw = s[k-1]\nfor i in s:\n    if w != i:\n        word += \"*\"\n    else:\n        word += w\nprint(word)",
    "error_obj":"NameError: name 'word' is not defined"
  },
  "s786209739":{
    "code_string":"n = input()\ns = input()\ni = input()\n \nl = []\nfor i, c in enumerate(s):\n  l.append(* if c != s[i-1] else c)\n    \n''.join(l)\n \nprint(l)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s522840257":{
    "code_string":"N = int(input())\nS = list(input())\nK = int(input())\nfor i in S:\n  if s[i - 1] != s[k]:\n    s[i - i] = \"*\"\nprint(S)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s751367325":{
    "code_string":"n=int(input())\ns=input()\nk=int(input())\nss = s[k-1]\nfor i in range(1,n):\n  if s[i] != ss:\n    s[i]='*'\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s774157591":{
    "code_string":"_ = input()\nS = input().lstrip('.').rstrip('#')\nn = len(S)\n\nx = 0\ny = S.count('.')\nc = min(n-y, y)\nfor i in range(n):\n  t = S[i]=='#':\n  x += t\n  y -= not t\n  c = min(c, x+y)\nprint(c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s506868105":{
    "code_string":"_ = input()\nS = input().lstrip('.').rstrip('#')\nn = len(S)\n\nx = 0\ny = S.count('.')\nc = min(n-y, y)\nfor i in range(n):\n  if S[i] == '#':\n    x += 1\n  else:\n    y -= 1\n  c = min(ans, x+y)\nprint(c)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s527637844":{
    "code_string":"N = int(input())\nS = input()\na = 0\nb = S.count('.')\nnum = min(N - y, y)\nfor i in range(N):\n  x = S[i] =='#'\n  a += x\n  b -= 1-x\n  num = num(num, a+b)\nprint(num)\n",
    "error_obj":"NameError: name 'y' is not defined"
  },
  "s291851753":{
    "code_string":"def main():\n  N = map(int,input.split())\n  S = input()\n  black = S.count('#')\n  white = S.count('.')\n\n  if black == N or white == N:\n    print(0)\n    return \n \t\n  B = [0]*(N+1)\n  W = [0]*(N+1)\n  for i in range(N):\n    if S[i] == '#':\n      B[i+1] = 1\n    elif W[i] == '.':\n      W[i+1] = 1\n  \n  for i in range(1,N+1):\n    B[i]+=B[i-1]\n    W[i]+=W[i-1]\n  ans = float('inf')\n  for i in range(1,N+1):\n    ans = min(ans, B[i]+white-W[i])\n  \nmain()",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s509876266":{
    "code_string":"N,S = open(0).read().split()\nN=int(N)\nS=list(S)\n\ndef calc():\n    group = [] if S[0] == '.' else [0]\n    n = 0\n    mark = S[0]\n    for s in S:\n        if s == mark:\n            n += 1\n        else:\n            mark = s\n            group.append(n)\n            n = 1\n    if n > 0:\n        group.append(n)\n    if S[-1] == '#':\n        group.pop()\n\n    cnt = 0\n    i = 1\n    j = len(group) - 1\n    while i <= j:\n        l = group[i]\n        r = group[j]\n        if l < r:\n            cnt += l\n            i += 2\n        else:\n            cnt += r\n            j -= 2\n    return cnt\n\nall_w = sum([1 if s == '#' else 0 for s in S])\nall_b = sum([1 if s == '.' else 0 for s in S])\nlwrb = calc()\nprint(min(all_w, all_b, lwrb)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s974433761":{
    "code_string":"a,b = map(int,input())\nprint(max(a,b)*2 -1)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s720664729":{
    "code_string":"n=list(int(input().split()))\nif n[0]==n[1]:\n    print(n[0]*2)\nelse:\n    print(max(n)*2-1)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s238671136":{
    "code_string":"m=input()\nm=m.split(\" \")\na=m[0]\nb=m[1]\n\nprint(max(a+a-1,b+b-1,a+b))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s928054672":{
    "code_string":"a,b=input().split()\nM=max(a,b)\nm=min(a,b)\n\nn=0\nn+=M\nM-=1\n\nn+=max(M,m)\n\nprint(n)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s402165910":{
    "code_string":"n,a,b,=map(int,input().split())\nif a*n>b:\n    print(b)\nif a*n<b:\n    print(a*n)\nif a*n==b:\n    print(a*n)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s011874167":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nif a-b>=2:\n  print(2a-1)\nif b-a>=2:\n  print(2b-1)\nelse:\n  print(a+b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s846568125":{
    "code_string":"a,b = map(int,input())\npoint = 0\npoint += max(a,b)\n\nif max(a,b) == a:\n  point += max(a-1,b)\n  print(point)\nelse:\n  point += max(a,b-1)\n  print(point)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s425834465":{
    "code_string":"A = int(input())\nB = int(input())\nif A > B:\n    print(2 * A - 1)\nelif A < B:\n    print(2 * B - 1)\nelse:\n    print(2 * A)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 3'"
  },
  "s748673424":{
    "code_string":"A, B = map(input().split())\n\nans = 0\nfor i in range(2):\n    if A >= B:\n        ans += A\n        A -= 1\n    else:\n        ans += B\n        B -= 1\nprint(ans)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s984437240":{
    "code_string":"a=int(input())\ns=input()\nif a>=3200:\n   print(s)\nif a<3200:\n   print(\"red\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 3'"
  },
  "s800747602":{
    "code_string":"a,b=map(int,input().split())\nif a==b:print(a*2)\nelse print(max(a,b)*2-1)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s168338509":{
    "code_string":"a,b = map(int,input().split())\nans = 0\nfor i in range(N):\n  if a>=b:\n    ans += a\n    a -= 1\n  else:\n    ans += b\n    b -= 1\nprint(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s889716305":{
    "code_string":"a,b = map(int,input())\nif a==b:\n  print(2*b)\nelse:\n  x = max(a,b)\n  print(2*x-1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s970285739":{
    "code_string":"(a,b) = map(int,input().split())\nprint(max(a,b)+max(max(a,b)-1,min(a,b))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s589848757":{
    "code_string":"import numpy as np\nimport math\nimport collections\nimport fractions\nimport itertools\n\ndef solve():\n    n = int(input())\n    h = list(map(int, input().split()))\n    m = h[0]\n    ans = 0\n    for i in range(1,h-1):\n        if h[i] >= m:\n            ans += 1\n            m = h[i]\n    print(ans)\n    return 0\n\nif __name__ == '__main__':\n    solve()",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'int'"
  },
  "s191679566":{
    "code_string":"n = int(input())\nh = list(map(int, input().split()))\n\nc = 0\n\nfor i in h:\n  t = True\n  for j in range(i):\n    if h[j] >= h[i]:\n      t = False\n      break\n   c += 1",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s930437432":{
    "code_string":"n=int(input())\nH=list(map(int,input()))\nans=0\nm=-1000\nfor i in range(n):\n  if m<=H[i]:\n    m=H[i]\n    ans+=1\nprint(ans)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s102864776":{
    "code_string":"a=int(input())\nb=[int(input()) for i in range(a)]\nc=0\nd=0\nfor i in range(a):\n  if c<b[i]:\n    c=b[i]\n    d=d+1\nprint(d)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '6 5 6 8'"
  },
  "s247303792":{
    "code_string":"n=int(input())\na=int(input())\ncnt=1\nfor i in range(n-1):\n  b=int(input())\n  if a<=b:\n    cnt++\n    a=b\n\nprint(cnt)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s695464464":{
    "code_string":"N = int(input())\nH = [int(n) for n in input().split()]\nans = 0\nfor i in range(1, N+1):\n  t = max(H[:i])\n  if t <= H[i]:\n    ans += 1\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s801558751":{
    "code_string":"s = int(input())\n\nstart0 = 0\nstart1 = 0\nfor i in range(len(s)):\n  if i % 2 == 0:\n    if s[i] == \"0\":\n      start1 += 1\n    elif s[i] == \"1\":\n      start0 += 1\n  elif i % 2 == 1:\n    if s[i] == \"0\":\n      start0 += 1\n    elif s[i] == \"1\":\n      start1 += 1\n\nprint(min([start0, start1]))",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s297848563":{
    "code_string":"\u30fc\u30b9\u30b3\u30fc\u30c9 \n\nCopy\nCopy\n#\u53c2\u8003 \uff1a AtCoder # 14682107\ns = input()\nlen = len(s)\n \nif len == 1:\n    print(0)\n    exit()\n \neven = s[::2]\nodd = s[1::2]\n \n#\u5076\u6570\u756a\u76ee\u306b0\u304c\u4e26\u3076\u3068\u4eee\u5b9a\u3057\u305f\u3068\u304d\u306e\u7570\u7269\u306e\u6570\n# 0101...\nodd_zero = odd.count(\"0\")\neven_one = even.count(\"1\")\n \n \n#\u5947\u6570\u756a\u76ee\u306b0\u304c\u4e26\u3076\u3068\u4eee\u5b9a\u3057\u305f\u3068\u304d\u306e\u7570\u7269\u306e\u6570\n# 1010...\nodd_one = odd.count(\"1\")\neven_zero = even.count(\"0\")\n \nprint(min(odd_zero + even_one, odd_one + even_zero))",
    "error_obj":"NameError: name '\u30fc\u30b9\u30b3\u30fc\u30c9' is not defined"
  },
  "s352684200":{
    "code_string":"n = input()\n\ncounta = 0\ncountb = 0\nif N%2==0:\n  for i in range(0,len(n)-2,2):\n    if n[i]==\"0\":\n      counta+=1\n    elif n[i]==\"1\":\n      countb+=1\n  for i in range(1,len(n)-1,2):\n    if n[i]==\"1\":\n      counta+=1\n    elif n[i]==\"0\":\n      countb+=1\n  print(min(counta,countb))\n\ncounta = 0\ncountb = 0\nif N%2==1:\n  for i in range(0,len(n)-1,2):\n    if n[i]==\"0\":\n      counta+=1\n    elif n[i]==\"1\":\n      countb+=1\n  for i in range(1,len(n)-2,2):\n    if n[i]==\"1\":\n      counta+=1\n    elif n[i]==\"0\":\n      countb+=1\n  print(min(counta,countb))",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s605546782":{
    "code_string":"a=input()\nb=int(len(a))\nc=0\nd=0\nfor i in range(b):\n  if a[2*i]==1:\n    c=c+1\n  if a[2*1+1]==0:\n    c=c+1\nfor i in range(b):\n  if a[2*i]==0:\n    d=d+1\n  if a[2*1+1]==1:\n    d=d+1\nif c>d:\n  print(d)\nelse:\n  print(c)",
    "error_obj":"IndexError: string index out of range"
  },
  "s487487501":{
    "code_string":"\"\"\"\nkeyword: \u5c3a\u53d6\u6cd5\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nn, k = map(int, input().split())\ns = input()\n\nnums = []\nnow = 1 # \u4eca\u898b\u3066\u3044\u308b\u6570\ncnt = 0 # now\u304c\u3044\u304f\u3064\u4e26\u3093\u3067\u3044\u308b\u304b\n\nfor i in range(n):\n    if s[i] == str(now):\n        cnt += 1\n    else:\n        nums.append(cnt)\n        now ^= 1 # 0\u30681\u3092\u5207\u308a\u66ff\u3048\u308b\n        cnt = 1 # \u65b0\u3057\u3044\u306e\u3092\u30ab\u30a6\u30f3\u30c8\nif cnt != 0:\n    nums.append(cnt)\n\n# 1-0-1-0-1-0-1\u3063\u3066\u611f\u3058\u306e\u914d\u5217\u304c\u6b32\u3057\u3044\n# 1-0-1-0\u307f\u305f\u3044\u306b0\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u9069\u5f53\u306b1\u3064\u8db3\u3059\n# \u88dc\u8db3\uff1a1-0-1-0-1\u3068\u3044\u3046\u306e\u306f\u30011\u304c0\u500b\u30010\u304c2\u500b\u30011\u304c1\u500b\u3001\u3001\u3001\u306a\u3069\u3068\u4e26\u3093\u3067\u3044\u308b\u3068\u3044\u3046\u610f\u5473\u3002\u3053\u306e\u3068\u304d1\u3064\u76ee\u306e0\u3092\u3072\u3063\u304f\u308a\u8fd4\u3059\u30681-1-1\u3068\u9023\u7d9a\u3059\u308b\u30021-...-1\u3068\u9023\u7d9a\u3057\u3066\u3044\u308b\u6570\u304c\u6c42\u3081\u308b\u5024\u306a\u306e\u3067\u3001\u5de6\u7aef\u3068\u53f3\u7aef\u306f1\u306b\u3057\u305f\u3044\nif len(nums)%2 == 0:\n    nums.append(0)\n    \nadd = 2*k+1\n\n# \u7d2f\u7a4d\u548c\u3092\u4f5c\u308b\ntot = [0]*(len(nums)+1)\nfor i in range(len(tot)):\n    tot[i+1] = tot[i]+nums[i]\n\nans = 0\n\n# 1-0-1...\u306e\u30011\u304b\u3089\u59cb\u307e\u308a1\u3067\u7d42\u308f\u308b\u7bc4\u56f2\u3092\u898b\u308b\u306e\u3067\u3001\u5076\u6570\u756a\u76ee\u3060\u3051\u898b\u308b\nfor i in range(0, len(nums), 2):\n    \n    # \u6b21\u306eleft, right\u3092\u8a08\u7b97\u3059\u308b\n    left = i\n    right = min(i+add, len(nums))\n    tmp = tot[right] - tot[left]\n    \n    ans = max(tmp, ans)\n    \nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s700723674":{
    "code_string":"n,k = map(int,input().split())\ns = []\ncount = 0\nlast = 1\nfor i in input():\n    if i=='1':\n        if last==1:\n            count+=1\n        else:\n            s.append(count)\n            count=1\n        last = 1\n    else:\n        if last==0:\n            count+=1\n        else:\n            s.append(count)\n            count=1\n        last = 0\ns.append(count)\nif last=='0':\n    s.append(0)\n\nk = min(k,len(s)\/\/2)\nans = 0\n\nfor j in range(len(s)\/\/2-k+1):\n    if j==0:\n        now = sum(s[:k*2+1])\n        ans = now\n    else:\n        now = now-s[j*2-1]-s[j*2-2]+s[(j+k)*2]+s[(j+k)*2-1]\n        ans = max(ans,now) \nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s656077010":{
    "code_string":"n, k = map(int, input().split())\ns = input()\nl = [0]\nfor i in range(n - 1):\n    if s[i] != s[i + 1]:\n        l.append(i + 1)\nl += [n]\nle = len(l)\nans = 0\nfor i in range(le - 1):\n    if s[l[i]] == \"0\":\n        ans = max(ans, l[min(le, k * 2 + i)] - l[i])\n    else:\n        ans = max(ans, l[min(le, k * 2 + i + 1)] - l[i])\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s612343356":{
    "code_string":"a,b,c,d,e = [int(input()) for _ in range(4)]\nk = int(input())\n\nif abs(a-b) >k or abs(a-c) >k or abs(a-d) >k or abs(a-e) >k or abs(b-c) >k or abs(b-d) >k or abs(e-b) >k or abs(c-d) >k or abs(c-e) >k or abs(d-e) >k :\n  print(\":(\")\nelse:\n  print(\"Yay!\")",
    "error_obj":"ValueError: not enough values to unpack (expected 5, got 4)"
  },
  "s121503087":{
    "code_string":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    A, B, C, D, E = map(int, readline().split())\n\n    if E - A > K:\n        print(':(')\n    else:\n        print('Yay!')\n\n    return\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 5, got 1)"
  },
  "s731800990":{
    "code_string":"# coding: utf-8\n# Your code here!\na=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\ne=int(input())\nk=int(input())\nif e-a<=k\n    print(\"Yay!\")\nelse:\n    print(\":(\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s732033634":{
    "code_string":"l = [int(input()) for i in range(4)]\n\nfor i in range(4):\n  for j in range(4):\n    if l[i]*l[j]>l[4]:\n      print(\":(\")\n      break\n    else:\n      print(\"Yay!\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s984517790":{
    "code_string":"a,b,c,d,e = map(int,input().split())\nk = int(input())\nprint(\"Yay!\" if e-a<= k else \":(\")",
    "error_obj":"ValueError: not enough values to unpack (expected 5, got 1)"
  },
  "s922079902":{
    "code_string":"aas = [int(input()) for _ in range(5)]\nk = int(input())\nfor i in range(1,5):\n  if aas[i]-aas[i-1]>k:\n    print(':(')\n    exit()\nprint('Yay!)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s715290561":{
    "code_string":"a = []\nfor i in range(5):\n  a.append(int(input()))\na.sort()\nj = int(input)\nk = a[4] - a[0]\nif k <= j:\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s843287376":{
    "code_string":"a[0]=int(input())\na[1]=int(input())\na[2]=int(input())\na[3]=int(input())\na[4]=int(input())\nk=int(input())\nfor i in range(5):\n  for j in range(i+1,5):\n    if a[j]-a[i]>k :\n      print(\":(\")\n      sys.exit()\nprint(\"Yay!\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s713059504":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nk = int(input())\n\nl = []\nl.append(a)\nl.append(b)\nl.append(c)\nl.append(d)\nl.append(e)\nans = 0\nfor i in range(5):\n    for j in range(i+1,5):\n        if l[j] - l[i] > k :\n            ans += 1\n\nif ans = 0 :\n    print(\"Yay!\")\nelse :\n    print(\":(\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s812912777":{
    "code_string":"antena = []\nfor i in range(5):\n  antena[i] = int(input())\n  \nk = int(input())\n\nfor i in range(len(antena)):\n  if antena[-1]-antena[i]>k:\n    print(\":(\")\nelse:\n  print(\"Yay!\")",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s205882118":{
    "code_string":"for i in range(5):\n    I=list(map(int,input()))\nk=int(input())\nif I[4]-I[0]<=k:\n    print(\"Yay!\")\nelse:\n    print(\":(\")\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s207534195":{
    "code_string":"for i in range(6):\n  A[i]=int(input())\n  \nisOK=True\nfor i in range(5):\n  for j in range(5):\n    if(abs(A[i]-A[j]) > A[6]):\n      isOK=False\n      \nif(isOK):\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s235612167":{
    "code_string":"a,b,c,d,e,k=map(int,input().split())\nif e-a>k:print(\":(\")\nelse:print(\"Yey!\")",
    "error_obj":"ValueError: not enough values to unpack (expected 6, got 1)"
  },
  "s183336227":{
    "code_string":"s = []\nfor i in range(5):\n    s.apppend(int(input())\nk = int(input())\nfor i in range(4):\n    if s[i+1]-s[i] >k:\n        print(\":(\")\n        break\nelse:\n    print(\"Yay!\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s897221417":{
    "code_string":"a=int(input()\nb=int(input()\nc=int(input()\nd=int(input()\ne=int(input()\nx=int(input()\nls=[a,b,c,d,e]\nls.sort()\nif (ls[1]-ls[0])<=x and (ls[2]-ls[1])<=x and (ls[3]-ls[2])<=x and (ls[4]-ls[3])<=x:\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s309142854":{
    "code_string":"a=[]\nb=[]\nori=[]\nans=0\nfor i in range(5):\n  c=int(input())\n  ori.append(c)\n  a.append((c\/\/10+1)*10)\n  \n  if c%10==0:\n    b.append(100)\n  else:\n    b.append(c%10)\na.pop(b.index(min(b)))\nprint(ori[b.index(min(b))]+a.sum())",
    "error_obj":"AttributeError: 'list' object has no attribute 'sum'"
  },
  "s449510722":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nli = [ri() for _ in range(5)]\nlis = [math.ceil(i\/10)*10 for i in li]\nans = inf\nfor i in range(5):\n  ans = min(sum(lis[:i])+li[i]+sum(lis[i+1:]))\nprint(ans)\n  \n    \n\n\n\n\n\n\n\n\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s935074257":{
    "code_string":"import numpuy as np\ndishes = [int(input()) for _ in range(5)]\ndishes = sorted(dishes, key=lambda x: x % 10)\nminutes = 0\nfirst = True\nfor i in dishes:\n    if i % 10 == 0:\n        minutes += i\n    else:\n        if first:\n            minutes += i\n            first = False\n        else:\n            minutes += int(np.ceil(i\/10)*10)\nprint(minutes)",
    "error_obj":"ModuleNotFoundError: No module named 'numpuy'"
  },
  "s229204693":{
    "code_string":"nums = [int(input()) for _ in range(5)]\nmn = float('inf')\n\nfor i in nums:\n    if i%10!=0:\n        mn = min(mn, i%10)\nif mn == float('inf'):\n    mn = 0\n\nprint(sum(list(map(lambda x: int(math.ceil(x\/10)*10), nums)))-10+mn)\n",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s748074438":{
    "code_string":"dish=[int(input()) for _ in range(5)]\ncount={str(i%10):[] for i in range(10,-1,-1)}\nfor t in dish:\n\tone=t%10\n\tcount[str(one)].append(t)\n\nans=0\nd=0\nfor k,v in count.items():\n\tif v!=[]:\n\t\tfor c in v:\n\t\t\tif d>3:\n\t\t\t\tans+=c\n\t\t\telse:\n\t\t\t\tans+=math.ceil(c\/10)*10\n\t\t\t\td+=1\nprint(int(ans))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s708883459":{
    "code_string":"import sys\ninput=sys.stdin.read\n*x,=map(int, input().split(\"\\n\"))\ntmp=100\nfor i in range(5):\n    if x[i]%10:\n        tmp = min(tmp,x[i]%10)\n        x[i]\/\/=10\n        x[i]*= 10\n        x[i]+=10\nans= sum(x)\nif tmp<100:\n    ans-=10\n    ans+=tmp\nprint(ans)\n    \n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ''"
  },
  "s889835703":{
    "code_string":"a=[]\nfor i in range(5):\n    a.append(int(input()))\n\nzako=9\nswitch=0\nfor i in range(5):\n    b=a[i]%10\n    if b<=zako and b!=0:\n        zako=b\n        memory=i\n        switch=1\n\nif switch=0:\n    memory=1\nx=a.pop(memory)\n\nlst=[]\n\nfor i in range(4):\n    c=a[i]\/\/10\n    c=c*10\n    if a[i]%10!=0:\n        c+=10\n    lst.append(c)\n\nprint(x+sum(lst))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s079378171":{
    "code_string":"sum = 0\nr =[]\nfor i in range(5):\n  if a[i] % 10 ==0:\n    sum+=a[i]\n  elif a[i] % 10 !=0:\n    sum+= (10*math.ceil(a[i]\/10))\n    r.append(int(a[i]%10))\nprint(sum-10+min(r))",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s859702217":{
    "code_string":"l = []\nfor i in range(5):\n    l.append(int(input()))\namari = []\nfor i in range(5):\n    amari.append(10-l[i]%10)\njikan = []\nfor i in range(5):\n    jikan.append(l[i] + amari[i])\nprint(sum[jikan]-max(amari))\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s302932036":{
    "code_string":"N = int(input())\nCap = [int(input()) for X in range(0,5)]\nprint(int(math.ceil(N\/min(Cap))+4))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s110617178":{
    "code_string":"N = int(input())\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nE = int(input())\nX = min(A, B, C, D, E)\nif X >= N:\n  print(5)\nelse:\n  if N%X == 0:\n    print(4+N\/\/X)\n  elese:\n    print(5+N\/\/X)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s156763467":{
    "code_string":"import math\nn = int(input())\nl=[int(input) for i in range(5)]\nprint(math.ceil(n\/min(l))+4)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s011249715":{
    "code_string":"import math\nn=int(input())\nl=[int(input()) for i in range(5)]\nprint(mat.ceil(n\/min(l))+4)",
    "error_obj":"NameError: name 'mat' is not defined"
  },
  "s916897985":{
    "code_string":"n = int(input().split())\nx = [int(input()) for i in range(5)]\nd = n \/\/ min(x)\nprint(d+5)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s935826790":{
    "code_string":"def main():\n    n = int(input())\n    data = [int(input()) for i in range(5)]\n    quo, rem = divmod(n, min(data))\n\tprint(4 + quo + bool(rem))\n\nmain()",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s899951298":{
    "code_string":"import math\nn=int(input())\nl=[input() for i in range(5)]\nprint(math.ceil(n\/min(l))+4)",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'int' and 'str'"
  },
  "s874078492":{
    "code_string":"N = int(input())\ntransport = [int(input()) for _ in range(5)]\nprint(int(N \/ np.min(transport) + 5))",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s350292330":{
    "code_string":"from itertools import product\nfrom heapq import *\n\nX,Y,Z,K,*f = map(int, open(0).read().split())\nA = f[:X]\nB = f[X:X+Y]\nC = f[X+Y:]\nA.sort(reverse=True)\nB.sort(reverse=True)\nC.sort(reverse=True)\nAB = [sum(x) * (-1) for x in product(A,B)]\nheapify(AB)\nAB_picked = []\nfor i in range(K):\n    AB_picked.append(heappop(AB)*(-1))\nABC = [sum(x) * (-1) for x in product(AB_picked,C)]\nheapify(ABC)\nfor i in range(K):\n    print(heappop(ABC)*(-1))",
    "error_obj":"IndexError: index out of range"
  },
  "s232880653":{
    "code_string":"A = list(map(int,input().split()))\nB = list(map(int,input().split()))\nC = list(map(int,input().split()))\nA.sort(reverse=True)\nB.sort(reverse=True)\nC.sort(reverse=True)\nabc = [(-(A[0]+B[0]+C[0]), 0,0,0)]\nused = set((0,0,0))\nwhile K > 0:\n    K -= 1\n    p,i,j,k = hq.heappop(abc)\n    print(-p)\n    for a,b,c in [(i+1,j,k), (i,j+1,k), (i,j,k+1)]:\n        if a < x and b < y and c < z and (a,b,c) not in used:\n            used.add((a,b,c))\n            hq.heappush(abc, (-(A[a]+B[b]+C[c]), a,b,c))\n",
    "error_obj":"NameError: name 'K' is not defined"
  },
  "s045910651":{
    "code_string":"X, Y, Z, K  = list(map(int, input().split()))\nA = sorted(list(map(int, input().split())))\nB = sorted(list(map(int, input().split())))\nC = sorted(list(map(int, input().split())))\n\nl = []\nfor a in A:\n    for b in B:\n        l.append(a+b)\nl = sorted(l, reverse = True)[:K]\n\nans = []\nfor c in C:\n    for k in l:\n        ans.append(c + k)\n        \nans = sorted(ans, reverse = True)\nprint(*ans[:K], seq=\"\\n\")",
    "error_obj":"TypeError: 'seq' is an invalid keyword argument for print()"
  },
  "s890152342":{
    "code_string":"a,b,c=map(int, nput().split())\nprint(\"Yes\"if a==b==c else\"No\")",
    "error_obj":"NameError: name 'nput' is not defined"
  },
  "s883201309":{
    "code_string":"a,b,c=map(int,input().split())\nif a==b && b==c:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s791298789":{
    "code_string":"A = list(map(int,input().split()))\nsort(A)\nif A[0]+A[1] > A[2]:\n  print('Yes')\nelse:\n  print('No')  ",
    "error_obj":"NameError: name 'sort' is not defined"
  },
  "s725751945":{
    "code_string":"inp = input().split(\" \")\n\nprint(inp[0] == inp[1] and inp[0] == inp[2] and 1 <= inp[0] <= 100)",
    "error_obj":"TypeError: '<=' not supported between instances of 'int' and 'str'"
  },
  "s140508754":{
    "code_string":"a,b,c=int(input())\n\nif a==b and b==c and c==a:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 2 2'"
  },
  "s025367784":{
    "code_string":"if a[0] == a[1] and a[1] == a[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s144930925":{
    "code_string":"N = int(input())\nS = input()\nprint(\"Yes\" if S.count(B) > S.count(R) else \"No\")",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s835002771":{
    "code_string":"a = input()\nif a = A:\n  print(T)\nelif a = T:\n  print(A)\nelif a = G:\n  print(C)\nelse:\n  print(G)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s049869596":{
    "code_string":"d = {\"A\":\"T\", \"T\":\"A\", \"G\":\"C\", \"C\",\"G\"}\nprint(d[input()])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s396685298":{
    "code_string":"b=input()\n\nif b=='A':\n    print('T')\nelif b=='C':\n    print('G')\nelif b==('G')\n    print('C')\nelse:\n    print('A')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s959497471":{
    "code_string":"b=input()\nif b=A:\n  print(\"T\")\nelif b=T:\n  print(\"A\")\nelif b=C:\n  print(\"G\")\nelse:\n  print(\"C\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s035151006":{
    "code_string":"b = input()\nif b = \"A\":\n  b = \"T\"\nelif b = \"T\":\n  b = \"A\"\nelif b = \"C\":\n  b = \"G\"\nelif b = \"G\":\n  b = \"C\"\nprint(b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s444421086":{
    "code_string":"1 b = input()\n2 c = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n3 print(c[b])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s253985684":{
    "code_string":"b = input()\nprint(\"A\" if b==T else \"T\" if b==A else \"G\" if b==C else \"C\")",
    "error_obj":"NameError: name 'T' is not defined"
  },
  "s031442178":{
    "code_string":"b = input()\n\nif b==A:\n  print('T')\nelif b==T:\n  print('A')\nelif b==G:\n  print('C')\nelse:\n  print('G')",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s096876767":{
    "code_string":"b = str(input())\n\nif b == A:\n    print(\"T\")\nif b == T:\n    print(\"A\")\nif b == C:\n    print(\"G\")\nif b == G:\n    print(\"C\")",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s342287751":{
    "code_string":"a = input()\nprint(\"A\" if a = \"T\" else \"T\" if a =\"A\" else \"G\" if a =\"C\" else \"C\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s601635313":{
    "code_string":"b = list(input())\n\nfor i in len(b):\n  if b[i] == \"A\":\n    b[i] = \"T\"\n  elif b[i] == \"T\":\n    b[i] = \"A\"\n  elif b[i] == \"C\":\n    b[i] = \"G\"\n  else:\n    b[i] = \"C\"\n    \nprint(b)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s643716093":{
    "code_string":"if b == \"A\":\n    print(\"T\")\nelif b == \"T\":\n    print(\"A\")\nelif b == \"C\":\n    print(\"G\")\nelif b == \"G\":\n    print(\"C\")",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s499762766":{
    "code_string":"X = int(input())\nif X == \"A\":\n  \tprint(\"T\")\nelif X == \"T\":\n  \tprint(\"A\")\nelif X == \"C\":\n  \tprint(\"G\")\nelif X == \"G\":\n\tprint(\"C\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s945615571":{
    "code_string":"# \u5869\u57fa A, C, G, T \u304c\u5b58\u5728\u3057\u3001A \u3068 T\u3001C \u3068 G \u304c\u305d\u308c\u305e\u308c\u5bfe\n\nb = input()\n\nif b == ('A'):\n    print(T)\n\nif b == ('C'):\n    print(G)\n\nif b == ('T'):\n    print(A)\n\nif b == ('G'):\n    print(C)",
    "error_obj":"NameError: name 'T' is not defined"
  },
  "s761897649":{
    "code_string":"s = int(input())\n\nif s == 'A':\n    print('T')\nelif s == 'T':\n    print('A')\nelif s == 'G':\n    print('C')\nelif s == 'C':\n    print('G')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s719715257":{
    "code_string":"n = int(input())\n\nif n == \"A\":\n    print(\"T\")\nelif n == \"T\":\n    print(\"A\")\nelif n == \"C\":\n    print(\"G\")\nelse:\n    print(\"C\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s803844491":{
    "code_string":"x=input()\nif x=\"A\":\n  print(\"T\")\nif x=\"T\":\n  print(\"A\")\nif x=\"G\":\n  print(\"C\")\nelse:\n  print(\"G\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s916913656":{
    "code_string":"b=int(input())\nprint('A' if b=='T' else 'T' if b=='A' else 'G' if b=='C' else 'C')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s341240834":{
    "code_string":"count = 0\ntmp = 0\nfor i in range(len(s)):\n    if s[i] == \"A\" or s[i] == \"C\" or s[i] == \"G\" or s[i] == \"T\":\n        tmp += 1\n    else:    \n        tmp = 0\n    count = max(tmp,count)\nprint(count)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s659891390":{
    "code_string":"s=input()\ntemp=0\nans=0\ntar=\"ACGT\"\nfor ch in s:\n  if ch in tar:\n    temp+=1\n  else:\n    if ans=<temp:\n      ans=temp\n    temp=0\n\nprint(ans)\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s272123231":{
    "code_string":"import sys\nimport re\nS = input()\nif not ( 1 <= len(S) <= 10 ): sys.exit()\nif not S.isupper: sys.exit()\n\nmax = max(re.findall('[A|T|G|C]+', S)) if re.findall('[A|T|G|C]+', S) else 0\nif max > 0:max\nprint(max)",
    "error_obj":"TypeError: '>' not supported between instances of 'str' and 'int'"
  },
  "s025142550":{
    "code_string":"l = ('A', 'T', 'C', 'G')\nS = input()\n\nans = [0]\nfor i in range(len(S)):\n    if S[i] in l:\n        res += 1\n    elif res != 0:\n        ans.append(res)\n        res = 0\n\nprint(max(ans))",
    "error_obj":"NameError: name 'res' is not defined"
  },
  "s185628458":{
    "code_string":"n= input()\nans,temp = 0,0\nfor x in S:\n    if x in 'ACGT':\n        temp += 1\n    else:\n        temp = 0\n    ans = max(ans,temp)\nprint(ans)",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s491718434":{
    "code_string":"s = input()\ncount = 0\nlens = []\n\nfor i, _ in enumerate(s):\n  for c in s[i:]:\n    if c in ['A', 'G', 'C', 'T']:\n      count += 1\n  \telse:\n      break\n  lens.append(count)\n  count = 0\n  \nprint(max(lens))\n  ",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s448976448":{
    "code_string":"S = input()\nmax = 0\ncount = 0\nfor x in S :\n    if x in \"ATGC\" :\n        count += 1\n    else :\n        max = max(max, count)\n        count = 0\nmax = max(max, count)\nprint(max)\n",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s216391743":{
    "code_string":"n = input()\ncount=0\nm = 0\nfor i in n:\n  if s ==\"A\" or s == \"C\" or s == \"G\" or s== \"T\" :\n    count+=1\n  else:\n    m =max(m,count)\n    count=0\nprint(m)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s022006949":{
    "code_string":"ACGT = ['A', 'C', 'G', 'T']\nS = input()\ncnt = 0\nmax_cnt = 0\nfor s in S:\n    if s in ACGT:\n        cnt += 1\n        cntList.append(cnt)\n    else:\n        max_cnt = max(cnt, max_cnt)\n        cnt = 0\nprint(max_cnt)",
    "error_obj":"NameError: name 'cntList' is not defined"
  },
  "s850015394":{
    "code_string":"n = int(input())\nl = list(map(int,input().split()))\nl.sort(reverse = True)\n\nif l[0] < sum(l[1:n]):\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'ATCODER'"
  },
  "s721365031":{
    "code_string":"cnt,ans = 0,[]\nagct = [\"A\",\"G\",\"C\",\"T\"]\nfor i in range(len(s)):\n    if s[i] in agct:\n        cnt += 1\n    else:\n         ans.append(cnt)\n         cnt = 0\nif ans == []:\n    ans.append(0)\nprint(max(ans))",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s739342163":{
    "code_string":"S = input()\ns = {\"A\", \"C\", \"G\", \"T\"}\nans = 0\nfor i in S:\n  if i in s:\n    tmp += 1\n    ans = max(ans, tmp)\n  else:\n    tmp = 0\nprint(ans)",
    "error_obj":"NameError: name 'tmp' is not defined"
  },
  "s093308279":{
    "code_string":"s=str(input())\nans=0\ncnt=0\nfor i in range(len(s)):\n  if s[i]=='A' or 'G' or 'C' or 'T':\n    cnt++\n  else:\n    ans=max(ans, cnt)\n    cnt=0\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s169516735":{
    "code_string":"s = str(input())\nmx = 0\nfor i in range(n):\n    for j in range(i+1,n+1):\n        cnt = j-i-1\n        p = 0\n        for k in list(s[i:j]):\n            if k in [\"A\",\"C\",\"G\",\"T\"]:\n                p += 1\n        if p == cnt:\n            if p > mx:\n                mx = p\nprint(mx)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s065425931":{
    "code_string":"S=input()\n\nl=len(S)\n\nans=0\nans_list=()\n\nfor i in range(l):\n    if S[i] in (\"A\",\"G\",\"C\",\"T\"):\n        ans+=1\n    else:\n        ans_list.append(ans)\n        ans=0\nans_list.append(ans)\nprint(ans)\n    ",
    "error_obj":"AttributeError: 'tuple' object has no attribute 'append'"
  },
  "s896851666":{
    "code_string":"S = input()\nans = 0\nfor i in range(len(S)):\n  for j in range(i+1, len(S)+1):\n\tif all('ACTG'.count(c)==1 for c in S[i:j+1]):\n      ans = max(ans, j+1-i)\nprint(ans)\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s046028862":{
    "code_string":"N,K = map(int,input().split())\nmoji = str(input())\nans = [0]\nfor i in range(N-1):\n    if moji[i] == \"A\" and moji[i+1] == \"C\":\n        ans.append(ans[i]+1)\n    else:\n        ans.append(ans[i])\n\n        \nfor i in range(K):\n    st,sp = map(int,input().split())\n    print(ans[sp]-ans[st])\n    ",
    "error_obj":"IndexError: list index out of range"
  },
  "s379588443":{
    "code_string":"n,q=map(int,input().split())\ns=input()\nlist=[0]\nfor i in range(n-1):\n  if s[i]=='A' and s[i+1]=='C':\n    list.append(list[i]+1)\n  else:\n    list.append(list[i])\nfor j in range(q):\n  l,r=map(int,input().split())\n  print(list[r]-list[l-1])",
    "error_obj":"IndexError: list index out of range"
  },
  "s911085655":{
    "code_string":"N, Q = map(int, input().split())\nS = str(input())\nli = []\ncnt = 0\n\nfor i in range(N-1):\n  if S[i]=='A' and S[i+1]=='C':\n    cnt += 1\n    li.append(cnt)\n  else:\n    li.append(cnt)\n\nfor i in range(Q):\n  l, r = map(int, input().split())\n  ans = li[r-1] - li[:l-1]\n  print(ans)\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'list'"
  },
  "s326844698":{
    "code_string":"N, Q=map(int, input().split())\nS=input()\ncount=0\nac=[0]\nfor i in range(N-1):\n  if S[i]==\"A\" and S[i+1]==\"C\":\n    count+=1\n  ac.append(count)\nfor _ in range(Q):\n  l, r=map(int, input().split())\n  l-=1, r-=1\n  print(ac[r]-ac[l])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s370007435":{
    "code_string":"\tdef ss():\n    N,Q = list(map(int,input().split()))\n    s = input()\n    lis=[0]*N\n     \n    count = 0\n    for i in range(1,len(s)):\n        if s[i-1] == 'A' and s[i] == 'C':\n            count +=1\n        lis[i]+=count\n    for i in range(Q):\n        l,r = list(map(int,input().split()))\n        print(lis[r-1]-lis[l-1])\n\nss()\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s406259358":{
    "code_string":"import copy\n\nN, Q = map(int, input().split())\nS = input()\nt = [0]*N\nfor i in range(N):\n    t[i+1] = t[i] + (1 if S[i:i+2] == \"AC\" else 0)\n\nfor i in range(Q):\n    l, r = map(int, input().split())\n    print(t[r-1]-t[l-1])\n\n\n",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s110268032":{
    "code_string":"N, Q = map(int, input().split())\nS = input()\nt = [0] * (N + 1)\nfor i in range(N):\n    t[i + 1] = t[i] + (1 if S[i : i + 2] == 'AC' else 0)\n    for i in range(Q):\n        l, r = map(int, input().split())\n        print(t[r-1] - t[l-1])",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s310002586":{
    "code_string":"N, Q = map(int, input().split())\nS = ['0'] + list(input())\nC = [0] * len(S)\nc = 0\nfor i in range(1, len(S)):\n    if S[i-1] == \"A\" and S[i] == \"C\":\n        c += 1\n    C[i] = c\nfor _ in range(N):\n    l, r = map(int, input().split())\n    print(C[r] - C[l])\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s665251681":{
    "code_string":"import sys\ninput = sys.stdin.readline\nN,Q = list(map(int,input().split()))\ns = input()\nlis=[0]*N\n \ncount = 0\nfor i in range(1,len(s)):\n    if s[i-1] == 'A' and s[i] == 'C':\n        count +=1\n    lis[i]+=count\nfor i in range(Q):\n    l,r = list(map(int,input().split()))\n    print(lis[r-1]-lis[l-1])\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s080786837":{
    "code_string":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\nfrom decorator import stop_watch\n\n\n@stop_watch\ndef solve(N):\n    mod = 10 ** 9 + 7\n    dp = [{} for _ in range(N + 1)]\n    dp[0].setdefault('TTT', 1)\n\n    def check(last4):\n        for i in range(4):\n            x = list(last4)\n            if i > 0:\n                x[i], x[i - 1] = x[i - 1], x[i]\n            if ''.join(x).count('AGC') >= 1:\n                return False\n        return True\n\n    for i in range(1, N + 1):\n        for last3, count in dp[i - 1].items():\n            for c in 'AGCT':\n                if check(last3 + c):\n                    new_last3 = last3[1:] + c\n                    dp[i].setdefault(last3[1:] + c, 0)\n                    dp[i][new_last3] = (dp[i][new_last3] + count) % mod\n\n    print(sum(dp[-1].values()) % mod)\n\n\nif __name__ == '__main__':\n    N = int(input())\n    solve(N)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n",
    "error_obj":"ImportError: cannot import name 'stop_watch' from 'decorator' (\/home\/alex\/.local\/lib\/python3.9\/site-packages\/decorator.py)"
  },
  "s545824978":{
    "code_string":"def ok(last4):\n    for i in range(4):\n        t = list(last4)\n        if i >= 1:\n            t[i-1], t[i] = t[i], t[i-1]\n        if ''.join(t).count('AGC') >= 1:\n            return False\n    return True\ndef dfs(cur, last3):\n    if last3 in memo[cur]:\n        return memo[cur][last3]\n    if cur == N:\n        return 1\n    ret = 0\n    for c in 'ACGT':\n        if ok(last3 + c):\n            ret = (ret + dfs(cur + 1, last3[1:] + c)) % MOD\n    memo[cur][last3] = ret\n    return ret\nprint(dfs(0, 'TTT'))\n",
    "error_obj":"NameError: name 'memo' is not defined"
  },
  "s259017187":{
    "code_string":"N=int(input())\nb=list(map(int, inputs().split()))\nans=[]\nfor i in range(N):\n  for j in range(len(b)):\n    if b[j]==j+1:\n      ans.append(b.pop(j))\n      break\nfor i in range(N-1, -1, -1):\n  print(ans[i])",
    "error_obj":"NameError: name 'inputs' is not defined"
  },
  "s823085120":{
    "code_string":"from string import ascii_lowercase\nfrom functools import reduce\nfrom operator import mul\nn = int(input())\nS = input()\nmod = 10**9 + 7\nprint(reduce(lambda x, y: x*y % mod, S.count(c)+1 for c in ascii_lowercase))",
    "error_obj":"SyntaxError: Generator expression must be parenthesized"
  },
  "s060120550":{
    "code_string":"N=int(input())\ns=list(input())\nfrom collections import Counter\nd=Counter(s)\nans=1\nfor v in d.values():\n  ans*=(v+1\nans-=1\nans=ans%(10**9+7)\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s399363510":{
    "code_string":"a = [list(map(int, input().split())) for i in range(2)]\na[0][0] = H\na[0][1] = W\na[1][0] = h\na[1][1] = w\nmy_result = H * W - h * W - H * w + h * w\nprint(my_result)",
    "error_obj":"NameError: name 'H' is not defined"
  },
  "s097862846":{
    "code_string":"H1, W1 = map(int, input().split())\nH2, W2 = map(int, input().split())\n\nH=H1-H2\nW=W1-W2\n\nprint(HW)",
    "error_obj":"NameError: name 'HW' is not defined"
  },
  "s344222669":{
    "code_string":"H,W = map(int,input().split())\nh,w = map(int,input().split())\n\n print(max(H*W-h*W-(H-h)*w,0))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s760451556":{
    "code_string":"H,W = map(int,input().split())\nh,w = = map(int,input().split())\nprint((H-h)*(W-w))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s586425401":{
    "code_string":"3 2\n2 1",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s426834504":{
    "code_string":"H,W = map(int, input().split())\nh.w = map(int, input().split())\nprint(H*W -h*W-w*H+h*w)",
    "error_obj":"NameError: name 'h' is not defined"
  },
  "s795860855":{
    "code_string":"3 2\n2 1",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s709483599":{
    "code_string":"HW =[list(map(int,input().split())) for i in range(2)]\nprint((HW[0][0]-HW[1][0])*(HW[0][1]-HW[1][1])",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s979635934":{
    "code_string":"a,b=map(input().split(\" \"))\nc,d=map(input().split(\" \"))\nprint((a-c)*(b-d))",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s713417947":{
    "code_string":"H,W=map(int,input().split())\nh,w=map(int,input(),split())\nprint((H-h)*(W-w))",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s909093375":{
    "code_string":"a,b=list(map(int,input().split()))\nc,d=list(map(int,input().split()))\nx=a*b\nprint(x-a*c-b*)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s543864976":{
    "code_string":"a,b=input().split()\nc,d=input().split()\nprint((a-c)*(b-d))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s396570992":{
    "code_string":"h, w = [int(i) for i in input().split()]\n_, _ = input()\n\nprint(h * w - (h + w - 1))",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s509462331":{
    "code_string":"HW = [int(i) for i in input().split()]\nhw = [int(i) for i in input().split()]\n\nprint((HW[0] - hw[0])(HW[1] - hw[1]))",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s893494756":{
    "code_string":"N,M,C=map(int,input().split())\nB=list(map(int,input().split()))\ncount=0\nfor i in range(N):\n  A=list(map(int, input().split()))\n  p=C\n  for j in range(M):\n    P+=A[j]*B[j]\n    if p>0:\n      count+=1\nprint(count)",
    "error_obj":"NameError: name 'P' is not defined"
  },
  "s051916260":{
    "code_string":"N,M,H=list(map(int().input(),split()))\nB=list(map(int,input().split()))\ncount=0\nfor i in range(N):\n  A=list(map(int,input().split()))\n  ans=0\n  for k in range(M):\n    ans+=A[k]*B[k]\n  if ans+H>:\n    count+=1\nprint(count)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s431605232":{
    "code_string":"N, M, C = map(int, input().split())\nB = list(map(int, input().split()))\nA = [0]*N\ncount = 0\n\nfor n in range(N):\n  A[n] = list(map(int, input().split()))\n  \n  for i in range(M):\n    _sum += A[n][i] * B[i]\n    \n  if _sum + C > 0:\n    count += 1\n  else:\n    continue\n    \nprint(count)",
    "error_obj":"NameError: name '_sum' is not defined"
  },
  "s847339547":{
    "code_string":"n, m, c = map(int, input().split())\nb = list(map(int, input().split()))\na = [list(map(int, input().split())) for i in range(n)]\ncnt = 0\n\nfor l in a:\n    tmp = 0\n    for i in range(m):\n        tmp += b[i]*a[i]\n    tmp += c\n    if tmp > 0:\n        cnt += 1\n\nprint(cnt)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'list'"
  },
  "s816664953":{
    "code_string":"3 3 0\n100 -100 0\n0 100 100\n100 100 100\n-100 100 100",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s569338820":{
    "code_string":"# \u305d\u306e24\n# ABC121 B - Can you solve this?\n\nn,m,c=map(int,input().split())\nB = np.array(list(map(int,input().split())))\nK=[]\nfor i in range(n):\n    A = list(map(int,input().split()))\n    K.append(A)\n\nimport numpy as np\npp = np.array(K)\nl = (pp*B).sum(axis=1)+c\n\nt = 0\nfor i in range(len(l)):\n    if l[i] > 0:\n        t+=1\nprint(t)\n",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s041192692":{
    "code_string":"N,M,C = map(int,input().split())\nB = list(map(int,input().split()))\ncount = 0\nfor i in range(N):\n  a = list(map(int,input().split()))\n  for j in range(M):\n  P = C  \n  P += B[j]*a[j]\n  if P>0:\n    count+=1\nprint(count)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s878704549":{
    "code_string":"import numpy as np\nn,m,c=map(int,input().split())\nb=list(map(int,input ().split()))\nnum=0\nfor i in range(n):\n  a=list(map(int,input().split()))\n  hoge=np.dot(b*a)+c\n  if hoge>0:\n    num+=1\nprint(num)",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'list'"
  },
  "s493361396":{
    "code_string":"N,M,C=map(int,input().split())\nB=list(map(int,input().split()))\nAi= [input().split() for l in range(N)]\ncount=0\ntot=0\nfor i in range(N):\n    for j in range(M):\n        tot+=Ai[i][j]*B[i]\n        if tot+C>0:\n            count+=1\nprint(count)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s317954084":{
    "code_string":"# -*- coding: utf-8 -*-\nimport numpy as np\nN, M, C = inpl()\nB = np.array(inpl(), dtype=np.int64)\nans = 0\nfor _ in range(N):\n    A = np.array(inpl(), dtype=np.int64)\n    ans += np.sum(A*B)+C > 0\nprint(ans)",
    "error_obj":"NameError: name 'inpl' is not defined"
  },
  "s073703199":{
    "code_string":"n,m = map(int,input().split())\nd = []\nfor i in range(n):\n    a,b = map(int,input().split())\n    d.append([a,b])\n \nd.sort(key=lambda x:x[0])\n\nsum_ = 0\ncnt = 0\nfor ab in d:\n    if cnt + ab[1] > M:\n        sum_ += ab[0] * (M-cnt)\n        break\n    else:\n        cnt += ab[1]\n        sum_ += ab[0]*ab[1]\nprint(sum_)\n",
    "error_obj":"NameError: name 'M' is not defined"
  },
  "s376724606":{
    "code_string":"N,M = map(int,input().split())\nlist = []\nfor _ in range(n):\n  a,b = map(int,input().split())\n  list.append([a,b])\nlist.sort()\nans = 0\nfor a,b in l:\n  ans += min(b,M)*a\n  M = max(0,M-b)\nprint(ans)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s742618790":{
    "code_string":"N, M = map(int,input().split())\n\nAB = {}\nfor i in range(N):\n  A, B = map(int,input().split())\n  AB[A]=B\nAB = sorted(AB.items(),key = lambda x:x[0])\n\nacost = 0\n\nfor a,b in AB:\n  cost += (min(max(M,0),b))*a\n  M-=b\n  if M<=0:\n    break\nprint(cost)\n  ",
    "error_obj":"NameError: name 'cost' is not defined"
  },
  "s162515288":{
    "code_string":"n,m = map(int,input().split())\nab = [list(map(int,input().split())) for _ in range(n)]\nab.sort()\nans = 0\ncnt = 0\ni = 0\nwhile cnt < m:\n    ans += ab[i][0]*ab[i][1]\n    cnt += ab[i][1]\n    i += 1\nprint(ans - (cnt - m)*ab[i][0])",
    "error_obj":"IndexError: list index out of range"
  },
  "s542651118":{
    "code_string":"N, M = map(int, input().split())\nA = []\nB = []\nfor _ in range(N):\n    a, b = map(int, input().split())\n    A.append(a)\n    B.append(b)\nC = sorted(A)\nwhile M > 0:\n    ",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s036427384":{
    "code_string":"n,m=map(int,input().split())\nab=sorted([list(map(int,input().split())) for i in range(n)])\nshop,cost,rest=m,0,0\nwhile True:\n    if ab[shop][1]<rest:\n        cost+=ab[shop][1]*ab[shop][0]\n        rest-=ab[shop][1]\n        shop+=1\n    else:\n        cost+=ab[shop][0]*rest\n        break\nprint(cost)",
    "error_obj":"IndexError: list index out of range"
  },
  "s571008751":{
    "code_string":"n,m=map(int,input().split())\ndrink=[list(map(int,input().split())) for i in range(n)]\n#print(drink)\n\ndrink.sort()\n#print(drink)\nmoney=0\nnumber=0\nfor i in range(n):\n    if number+drink[i][0]=<m:\n        money+=drink[i][0]*drink[i][1]\n        number+=drink[i][1]\n    elif m<number+drink[i][0]:\n        money+=drink[i][0]*(m-number)\n        number+=m-number\n        break\n    if m==number:\n        break\nprint(money)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s407276381":{
    "code_string":"A, B, C = map(int, input())\nif A*C <= B:\n  print(C)\nelse:\n  print(B\/\/A)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s293950613":{
    "code_string":"A,B,C = map(int,input())\nprint(max(B\/\/A,C))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s577166048":{
    "code_string":"A, B, C = map (int, input().split())\n\nprint(min(C,\u3000B\u3000\/\/\u3000A))",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s365929991":{
    "code_string":"#!\/usr\/bin\/python\n\ninput_data = input().split()\n\nd1 = input_data[0]\nd2 = input_data[1]\nd3 = input_data[2]\ntotal = 0\n\nd4 = d2 % d1\nif d4 > d3:\n    total += 1\n\nprint(total)",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s026949707":{
    "code_string":"a, b, c = map(input().split())\nif a * c > b:\n    print(b\/\/a)\nelse:\n    print(c)\n",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s006715438":{
    "code_string":"a, b, c= map(int, input().split())\nprint(min(c, b\/\/a)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s286881412":{
    "code_string":"a, b, c = map(int, input().split())\nprint(min(n\/\/a, c))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s045757776":{
    "code_string":"a, b, k = map(int, input().split())\n\nmin = a\nif b < min:\n  min = b\n\nans_lists = []\nfor i in range(1, min+1, 1):\n  if a%i == 0 and b%i == 0:\n    ans_lists.append(i)\n\nans_lists.reverse()\nans = lists[k-1]\n\nprint(ans)",
    "error_obj":"NameError: name 'lists' is not defined"
  },
  "s450196568":{
    "code_string":"A, B, K = map(int, input().split())\ncnt = 0\n\nfor i in range(100, 0, -1):\n  if A%i == 0 and B%i == 0:\n    cnt += 1\n    if cnt = K:\n      print(i)\n      exit()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s000016565":{
    "code_string":"a,b,k=map(int,input().split())\nN=\"\"\nfor i in range(1,min(a,b)):\n    if a%i==0 and b%i==0:\n            N.append(i)\nN.reverse()\nprint(N[k-1])",
    "error_obj":"AttributeError: 'str' object has no attribute 'append'"
  },
  "s633083450":{
    "code_string":"a,b,k=map(int,input().split())\np=[]\nfor i in range(a):\n  if a%i==0 and b%i==0:\n    p.append(i)\n\nn=len(p)\nprint(p[n-k])",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s483053716":{
    "code_string":"# a,b,k = map(int, input().split())\nl = []\nfor i in range(1,100):\n    if (a % i == 0) & (b % i == 0):\n        l.append(i)\nprint(l[k-1])",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s283483060":{
    "code_string":"a,b,k=list(map(int,input().split()))\n \nans=[]\n \nfor i in range(1,min(a,b)+1):\n\tif a%i==0 and b%i==0:\n\t\tans.append(i)\nprint(ans[k+1])",
    "error_obj":"IndexError: list index out of range"
  },
  "s954746982":{
    "code_string":"abk = [int(i) for i in input().split()]\na = abk[0]\nb = abk[1]\nk = abk[2]\n\nanss = []\nfor i in range(1,min(a,b)+1):\n  if a%i==0 and b%i==0:\n    anss.append(i)\n    \nanns.sort(reverse=True)\nprint(anss[k-1])\n",
    "error_obj":"NameError: name 'anns' is not defined"
  },
  "s594111835":{
    "code_string":"A,B,K = map(int,input().split())\ndiv = []\n\nfor i in range(1,100):\n  if a%i == 0 and b%i == 0:\n    div.append(i)\n    break\nprint(sorted(div)[-K]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s621350364":{
    "code_string":"A,B,K=map(int,input().split())\nl=[]\nfor i in range(101):\n    if A%i==0 and B%i==0:\n        l.append(i)\nprint(l[i-1])",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s109892038":{
    "code_string":"A,B,K=map(int,input().split())\ni=0\nj=0\nwhile i<K:\n  j+=1\n  if A*%j==0 and B%j==0:\n    i+=1\nprint(j)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s671474284":{
    "code_string":"A, B, K = map(int, input().split())\nprint((i for i in range(1, 101) if A % i + B % i < 1)[-K])",
    "error_obj":"SyntaxWarning: 'generator' object is not subscriptable; perhaps you missed a comma?"
  },
  "s926025644":{
    "code_string":"a, b, k = map(int, input().split())\nl = []\n\nfor i in range(1,n+1):\n    if a % i == 0 and b % i == 0:\n        l.append(i)\n        \nprint(l[k-1])\n    ",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s042492970":{
    "code_string":"a,b,c=input().split()\na=int(a)\nb=int(b)\nc=int(c)\ncount=0\nwhile count<c:\n  for i in range(100,0):\n    if a%i==0 and b%i==0:\n      count=count+1\nprint(i)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s348162858":{
    "code_string":"A,B,K=map(int,input().split())\ncheck = 0\nres = 0\nfor i in range(100):\n  if A % i == 0 and B % i == 0:\n    check += 1\n    if check == K:\n      res = i\n      break\nprint(res)",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s089168146":{
    "code_string":"def next_check(cubes):\n\tindex_list = []\n\tfor cube_index in reversed(range(1, len(cubes))):\n\t\tif ((cube_index not in index_list) and (cubes[cube_index] == cubes[cube_index - 1])):\n\t\t\tindex_list.append(cube_index - 1)\n\t\t\tindex_list.append(cube_index)\n\tl = len(index_list)\n\tfor i in reversed(index_list):\n\t\tcubes.pop(i)\n\treturn (cubes, l)\n\ndef main():\n\tcubes = input()\n\tfor c in cubes:\n\t\tif c not in ['0', '1']:\n\t\t\texit(0)\n\tcube_list = []\n\tfor cube in cubes:\n\t\tcube_list.append(cube)\n\tl = len(cube_list)\n\tk = 0\n\twhile (l != 0):\n\t\tcubes, l = next_check(cube_list)\n\t\tk += l\n\tprint(k)\n\nif __name__ == \"__main__\":\n\tmain()",
    "error_obj":"IndexError: pop index out of range"
  },
  "s695475433":{
    "code_string":"n = int(input())\ns = input()\ncnt1 = 0\ncnt2 = 0\nfor i in range(n):\n    if s[i] == '0':\n        cnt1 += 1\n    else:\n        cnt2 += 1\nprint(min(cnt1, cnt2)*2)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s052457182":{
    "code_string":"S=input()\nList = list(S)\nzeroNum = List.count(\"0\")\noneNum = List.count(\"1\")\nres = min(reroNum,oneNum)\nprint(res*2)",
    "error_obj":"NameError: name 'reroNum' is not defined"
  },
  "s002284373":{
    "code_string":"import sys\n\n\nclass UnionFind:\n    def __init__(self, n):\n        self.table = [-1] * n\n\n    def _root(self, x):\n        stack = []\n        tbl = self.table\n        while tbl[x] >= 0:\n            stack.append(x)\n            x = tbl[x]\n        for y in stack:\n            tbl[y] = x\n        return x\n\n    def find(self, x, y):\n        return self._root(x) == self._root(y)\n\n    def union(self, x, y):\n        r1 = self._root(x)\n        r2 = self._root(y)\n        if r1 == r2:\n            return\n        d1 = self.table[r1]\n        d2 = self.table[r2]\n        if d1 <= d2:\n            self.table[r2] = r1\n            self.table[r1] += d2\n        else:\n            self.table[r1] = r2\n            self.table[r2] += d1\n\n\ndef main():\n    n, m, k = map(int, sys.stdin.buffer.readline().split())\n    uf = UnionFind(n)\n    fb = [0]*n\n    i = 0\n    for x in sys.stdin.buffer.readlines():\n        if i < m:\n            a, b = map(int, x.split())\n            fb[a-1] += 1\n            fb[b-1] += 1\n            uf.union(a-1, b-1)\n        else:\n            c, d = map(int, x.split())\n            fb[c-1] += 1\n            fb[d-1] += 1\n        i += 1\n\n    ans = [-uf.table[uf._root(i)]-1-fb[i] for i in range(n)]\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s291271089":{
    "code_string":"#import numpy as np\n\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nN,M = list( map(int, input().split()) )\n\nuf = UnionFind(N)\nA = [0]*M\nB = [0]*M\nfor i in range(M):\n    a,b = list( map(int, input().split()) )\n    A[i]=a-1\n    B[i]=b-1\n\n#print(A)\n#print(B)\n\ncmax = int(N*(N-1)\/2)\nFD = [cmax]*(M+1)\n#print(FD)\nfor i in range(M):\n    #print(uf)\n    if same(A[M-i-1])*uf.size(B[M-i-1]):\n        FD[M-i-1] = FD[M-i]\n    else:\n        cless = uf.size(A[M-i-1])*uf.size(B[M-i-1])\n        FD[M-i-1] = FD[M-i] - cless\n        if FD[M-i-1]<0: FD[M-i-1]=0\n    uf.union(A[M-1-i],B[M-1-i])\n\n#print(uf)\n#print(FD[1:])\nfor fd in FD[1:]:\n    print(fd)\n\n\n",
    "error_obj":"NameError: name 'same' is not defined"
  },
  "s510455536":{
    "code_string":"import sys\nsys.setrecursionlimit(10**7)\n\nn, m = map(int, input().split())\n\npar = [i for i in range(n+1)]\nrank = [0]*(n+1)\nsize = [1]*(n+1)\n\ndef root(x):\n    if par[x] == x:\n        return x\n    else:\n        par[x] = root(par[x])\n        return par[x]\n\ndef same(x, y):\n    return root(x) == root(y)\n\ndef unite(x, y):\n    xx = root(x)\n    yy = root(y)\n    if xx == yy:\n        return\n    if rank[xx] < rank[yy]:\n        par[xx] = yy\n        size[yy] += size[xx]\n    else:\n        par[yy] = xx\n        size[xx] += size[yy]\n        if rank[xx] == rank[yy]:\n            rank[yy] += 1\n\nab=[list(map(int, input().split())) for _ in range(m)]\n\nans=[0]*m\nans[m-1]=n*(n-1)\/\/2\n\nfor i in range(M-1, 0, -1):\n    a = ab[i][0]\n    b = ab[i][1]\n    if root(a) != root(b):\n        ans[i-1] = ans[i] - size[root(a)]*size[root(b)]\n    else:\n        ans[i-1] = ans[i]\n    unite(a,b)\n\nfor ans_i in ans:\n    print(ans_i)\n",
    "error_obj":"NameError: name 'M' is not defined"
  },
  "s205432853":{
    "code_string":"S = input()\nprint(\"TBD\" if S[6]>=5 or S[5]>=1 else \"Heisei\")",
    "error_obj":"TypeError: '>=' not supported between instances of 'str' and 'int'"
  },
  "s242185198":{
    "code_string":"s = input()\nif s <= 2019\/04\/30:\n  print(\"Heisei\")\nelse:\n  print(\"TBD\")",
    "error_obj":"SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers"
  },
  "s878933356":{
    "code_string":"y,m,d = int(input().split(\"\/\"))\nprint(\"Heisei\" if y<=2019 and m<=4 and d<=30 else \"TBD\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s801311783":{
    "code_string":"S=input()\nl=S.split('\/')\nif l[0]<=2019:\n    if l[1]<=4:\n        if l[2]<=30:\n            print('Heisei')\n            exit()\n    print('TBD')",
    "error_obj":"TypeError: '<=' not supported between instances of 'str' and 'int'"
  },
  "s558664285":{
    "code_string":"s = input()\ns = s.split(\"\/\")\n\nif s[0] >= 2019 and s[1] >= 5:\n  print(\"TBD\")\nelse:\n  print(\"Heisei\")",
    "error_obj":"TypeError: '>=' not supported between instances of 'str' and 'int'"
  },
  "s172520556":{
    "code_string":"s = input()\nif s[5] = \"1\":\n  print(\"TBD\")\nelif int(s[6]) >= 5:\n  print(\"TBD\")\nelse:\n  print(\"Heisei\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s826904643":{
    "code_string":"s = list(input().split('\/'))\n\nif s[0] < 2019:\n  print(\"Heisei\")\nelif s[0] == 2019:\n  if s[1] < 4:\n    print(\"Heisei)\n  elif (s[1] == 4 and s[2] <= 30) or s[1] > 4:\n    print(\"TBD\")\nelse:\n  print(\"TBD\")",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s601778104":{
    "code_string":"y,m,d=map(int,input().split('\/'))\nif y < 2020 and m < 05:\n    print('Heisei')\nelse:\n    print('TBD')",
    "error_obj":"SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers"
  },
  "s940093941":{
    "code_string":"s = str(input())\nyear = ''\nmonth = ''\nday = ''\n\nfor i in range(4):\n    y = s[i]\n    year += y\nfor i in range(5, 7):\n    m = s[i]\n    month += m\nfor i in range(9, 11):\n    d = s[i]\n    day += d\n\nyear = int(year)\nmonth = int(month)\nday = int(day)\n\nif year < 2019:\n    answer = 'Heisei'\n\nelif year == 2019 and month <= 4:\n    answer = 'Heisei'\n\nelse:\n    answer = 'TBD'\n    \nprint(answer)",
    "error_obj":"IndexError: string index out of range"
  },
  "s028287196":{
    "code_string":"s = input()\nif s[5] == 1:\n    print(\"TBD\")\nelse:\n    if s[6]>4:\n        print(\"Heisei\")\n    else:\n        print(\"TBD\")",
    "error_obj":"TypeError: '>' not supported between instances of 'str' and 'int'"
  },
  "s426310759":{
    "code_string":"s = map(str,input().split())\nif int(s[5]) == 1:\n  print(\"TBD\")\nelif int(s[6]) <= 4:\n  print(\"Heisei\")\nelse:\n  print(\"TBD\")",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s321868109":{
    "code_string":"a = input()\nif a[6] > 4:\n  print('TBD')\nelif a[6] < 3:\n  print('heisei')\nelse:\n  if a[8] < 2:\n    print('heisei')\n  else:\n    if a[9] > 0:\n      print('heisei')\n    else:\n      print('TBD')\n ",
    "error_obj":"TypeError: '>' not supported between instances of 'str' and 'int'"
  },
  "s694762340":{
    "code_string":"s = input()\n\nyear = s[:4]\nmo = s[5:7]\nda = s[8:]\n\nif year < 2019:\n  ans = \"Heisei\"\nelif year == 2019 and mo<= 4:\n  ans ='Heisei'\nelse:\n  ans = 'TBD'\nprint(ans)",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s388810081":{
    "code_string":"n = int(input())\nsum =0\nfor j in range(n):\n  i,c = input().split()\n  if c ==\"BTC\":\n    sum+=float(i)*380000\n  else:\n    sum+=i\nprint(sum)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s105208205":{
    "code_string":"a=int(input())\nb=[input().split() for i in range(a)]\nc=0\nfor i in range(a):\n  if b[i][1]==\"JPY\":\n    c=c+int(b[i][0])\n  if b[i][1]==\"BTC\":\n    c=c+int(b[i][0])*380000\nprint(c)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '0.10000000'"
  },
  "s235934082":{
    "code_string":"# abc119_b.py\n# https:\/\/atcoder.jp\/contests\/abc119\/tasks\/abc119_b\n\n# B - Digital Gifts \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 200\u70b9\n\n# \u554f\u984c\u6587\n# \u9ad8\u6a4b\u304f\u3093\u306f N\u4eba\u306e\u89aa\u621a\u304b\u3089\u304a\u5e74\u7389\u3092\u3082\u3089\u3044\u307e\u3057\u305f\u3002\n# N\u500b\u306e\u5024 x1,x2,...,xN \u3068 N \u500b\u306e\u6587\u5b57\u5217 u1,u2,...,uN \u304c\u5165\u529b\u3055\u308c\u307e\u3059\u3002\n# \u5404\u6587\u5b57\u5217 ui \u306f JPY \u307e\u305f\u306f BTC \u3067\u3042\u308a\u3001xi \u3068 ui \u304c i\u4eba\u76ee\u306e\u89aa\u621a\u304b\u3089\u306e\u304a\u5e74\u7389\u306e\u5185\u5bb9\u3092\u8868\u3057\u307e\u3059\u3002\n# \u4f8b\u3048\u3070\u3001x1=10000, u1= JPY \u3067\u3042\u308c\u3070 1 \u4eba\u76ee\u306e\u89aa\u621a\u304b\u3089\u306e\u304a\u5e74\u7389\u306f 10000 \u5186\u3067\u3042\u308a\u3001x2= 0.10000000, \n# u2= BTC \u3067\u3042\u308c\u3070 2 \u4eba\u76ee\u306e\u89aa\u621a\u304b\u3089\u306e\u304a\u5e74\u7389\u306f 0.1\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u3067\u3059\u3002\n# \u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u3092 1.0BTC \u3042\u305f\u308a 380000.0\u5186\u3068\u3057\u3066\u63db\u7b97\u3059\u308b\u3068\u3001\u9ad8\u6a4b\u304f\u3093\u304c\u3082\u3089\u3063\u305f\u304a\u5e74\u7389\u306f\u5408\u8a08\u3067\u4f55\u5186\u306b\u76f8\u5f53\u3059\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\n# \u5236\u7d04\n#     2\u2264N\u226410\n# ui=JPY \u307e\u305f\u306f BTC\n# ui=JPY \u306e\u3068\u304d xi \u306f\u6574\u6570\u3067\u3042\u308a\u30011\u2264xi\u226410^8\n# ui=BTC \u306e\u3068\u304d xi \u306f\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u3092 8 \u6841\u6301\u3064\u5c0f\u6570\u3067\u3042\u308a\u30010.00000001\u2264xi\u2264100.00000000\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# N\n# x1 u1\n# x2 u2\n# :\n# xN uN\n\n# \u51fa\u529b\n# \u9ad8\u6a4b\u304f\u3093\u304c\u53d7\u3051\u53d6\u3063\u305f\u304a\u5e74\u7389\u304c\u5408\u8a08\u3067 Y\u5186\u306b\u76f8\u5f53\u3059\u308b\u3068\u304d\u3001\u5024 Y(\u6574\u6570\u3068\u306f\u9650\u3089\u306a\u3044) \u3092\u51fa\u529b\u305b\u3088\u3002\n# \u51fa\u529b\u306f\u3001\u30b8\u30e3\u30c3\u30b8\u306e\u51fa\u529b\u3068\u306e\u7d76\u5bfe\u8aa4\u5dee\u307e\u305f\u306f\u76f8\u5bfe\u8aa4\u5dee\u304c 10\u22125\u4ee5\u4e0b\u306e\u3068\u304d\u6b63\u89e3\u3068\u5224\u5b9a\u3055\u308c\u308b\u3002\n\n# \u5165\u529b\u4f8b 1\n# 2\n# 10000 JPY\n# 0.10000000 BTC\n\n# \u51fa\u529b\u4f8b 1\n# 48000.0\n\n# 1\u4eba\u76ee\u306e\u89aa\u621a\u304b\u3089\u306e\u304a\u5e74\u7389\u306f 10000 \u5186\u3067\u3059\u3002\n# 2 \u4eba\u76ee\u306e\u89aa\u621a\u304b\u3089\u306e\u304a\u5e74\u7389\u306f 0.1 \u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u3067\u3042\u308a\u30011 BTC \u3042\u305f\u308a 380000.0 \u5186\u3068\u3057\u3066\u63db\u7b97\u3059\u308b\u3068 38000.0 \u5186\u3068\u306a\u308a\u307e\u3059\u3002\n# \u3053\u308c\u3089\u306e\u5408\u8a08\u306f 48000.0\u5186\u3067\u3059\u3002\n\n# \u306a\u304a\u300148000\u300148000.1 \u306a\u3069\u3068\u51fa\u529b\u3057\u3066\u3082\u6b63\u89e3\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n# \u5165\u529b\u4f8b 2\n# 3\n# 100000000 JPY\n# 100.00000000 BTC\n# 0.00000001 BTC\n\n# \u51fa\u529b\u4f8b 2\n# 138000000.0038\n\n# \u3053\u306e\u5834\u5408\u3001138001000\u30011.38e8 \u306a\u3069\u3068\u51fa\u529b\u3057\u3066\u3082\u6b63\u89e3\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n\ndef calculation(lines):\n    # line = lines[0]\n    N = int(lines[0])\n    # N, M = list(map(int, lines[0].split()))\n    # values = list(map(int, lines[1].split()))\n    # values = list()\n    # for i in range(N):\n    #     values.append(int(lines[i+1]))\n\n    result = 0\n    for i in range(N):\n        line = lines[i+1]\n        if 'JPY' in line:\n            result += int(line.replace(' JPY', ''))\n        else:\n            result += float(line.replace(' BTC', ''))*380000.0\n\n    return [result]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines():\n    line = input()\n    N, M = list(map(int, line.split()))\n    lines = list()\n    lines.append(line)\n    for _ in range(N):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['2', '10000 JPY', '0.10000000 BTC']\n        lines_export = [48000.0]\n    if pattern == 2:\n        lines_input = ['3', '100000000 JPY', '100.00000000 BTC', '0.00000001 BTC']\n        lines_export = [138000000.0038]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines()\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s552842325":{
    "code_string":"n=int(input())\nans=0\nfor i in range(n):\n  x, u=map(int, str, input().split())\n  if u==\"BTC\":\n    x=x*380000\n  ans=ans+x\nprint(ans)",
    "error_obj":"TypeError: 'type' object is not iterable"
  },
  "s957369281":{
    "code_string":"n=int(input())\nans=0\nfor i in range(n):\n  x,u=map(str,input().split())\n  x=int(x)\n  if u==\"BTC\":\n    x*=380000\n  ans+=x\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '0.10000000'"
  },
  "s716777440":{
    "code_string":"from decimal import Decimal\nn=int(input())\nans=0\nfor in range(n):\n    x,y=map(str,input().split())\n    if y==\"BTC\":\n        ans+=Decimal(380000*Decimal(x))\n    else:\n        ans+=Decimal(x)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s040721054":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nn = ri()\nans = 0\nfor _ in range(n):\n  a, b = rs()\n  if b == 'JPY':\n    ans += float(a)\n  else:\n    ans += float(a)*380000\npritn(ans)\n  \n    \n\n\n\n\n\n\n\n\n",
    "error_obj":"NameError: name 'pritn' is not defined"
  },
  "s207630798":{
    "code_string":"N=int(input())\ns=0\nfor i in range(N):\n    x,u=map(str,input().split())\n    if u=='JPY':\n        s+=int(x)\n    else:\n        s+=380000*int(x)\nprint(s)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '0.10000000'"
  },
  "s258504724":{
    "code_string":"N = int(input())\nans=0\nfor _ in range(N):\n    xu=input().split()\n    if xu[1]==\"JPY\":\n        ans+=xu[0]\n    else:\n        ans+=xu[0]*380000\nprint(ans)\n",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s868721280":{
    "code_string":"Row = int(input())\nList = []\nfor i in range (Row):\n  List.append(list(map(str, input().split())))\nres = 0\nfor i in range(Row):\n  if List[i][1] = \"JPY\":\n    res += int(List[i][0])\n  else:\n    res += int(List[i][0])*380000\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s917238192":{
    "code_string":"n = int(input())\nans = 0\nfor i in range(n):\n  a, b = map(str, input().split())\n  if b = 'JPY':\n    ans += int(a)\n  else:\n    ans += int(a) * 380000\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s626999314":{
    "code_string":"btc=380000\nN=int(input())\nans=0\nfor i in range(N):\n  x,u=input().split()\n  if u=='JPY':\n    ans+=int(x)\n  else:\n    ans+=int(x)*btc\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '0.10000000'"
  },
  "s248067543":{
    "code_string":"n = int(input())\na = 0\nfor i in range(n):\n  v, c = map(int, input().split())\n  if c == \"JPY\":\n    a += v\n  else:\n    a += v * 380000.0\nprint(a)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'JPY'"
  },
  "s103932003":{
    "code_string":"n=int(input())\nkei = 0.0\nfor i in range(n):\n    x,u=map(str,input().split())\n    if u==\"JPY\":\n        kei += float(x[i])\n    else:\n        kei += float(x[i])*380000.0\nprint(kei)",
    "error_obj":"ValueError: could not convert string to float: '.'"
  },
  "s961772735":{
    "code_string":"def resolve():\n    n = int(input())\n    s = 0\n    for _ in range(n):\n        x, u = input().split()\n        if u == 'BTC':\n            s += float(x) * 380000\n        else:\n            s += float(x) * 1\n    print(s)\nresole()",
    "error_obj":"NameError: name 'resole' is not defined"
  },
  "s666381530":{
    "code_string":"n,a,b,c=map(int,input().split())\nl=[int(input())for i in range(n)]\ndef dfs(i,x,y,z):\n if i==n:return abs(a-x)+abs(b-y)+abs(c-z)-30if a+b+c>=3else 10**9+7\n A,B,C,D=dfs(i+1,x,y,z),dfs(i+1,x+l[i],y,z)+10,dfs(i+1,x,y+l[i],z)+10,dfs(i+1,x,y,z+l[i])+10\n return min(A,B,C,D)\nprint(dfs(0,0,0,0)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s555700637":{
    "code_string":"from bisect import bisect_left\n\nA,B,Q=map(int,input().split())\nS=[int(input()) for i in range(A)]\nT=[int(input()) for i in range(B)]\nfor i in range(Q):\n    x=int(input())\n    si=bisect_left(S,x)\n    ti=bisect_left(T,x)\n    if 0<si<A and 0<ti<B:\n        sl,sr=abs(x-S[si-1]),abs(x-S[si])\n        tl,tr=abs(x-T[ti-1]),abs(x-T[ti])\n        print(min(max(sr,tr),max(sl,tl),sl+tr+min(sl,tr),sr+tl+min(sr,tl)))\n    elif si==0 and ti==0:\n        sr=abs(x-S[si])\n        tr=abs(x-T[ti])\n        print(sr,tr)\n    elif si==A and ti==B:\n        sl=abs(x-S[si-1]),abs(x-S[si])\n        tl=abs(x-T[ti-1]),abs(x-T[ti])\n        print(max(sl,tl))\n    elif si==0 and ti==B:\n        sr=abs(x-S[si])\n        tl=abs(x-T[ti-1])\n        print(sr+tl+min(sr,tl))\n    elif si==A and ti==0:\n        sl=abs(x-S[si-1])\n        tr=abs(x-T[ti])\n        print(sl+tr+min(sl,tr))\n    elif si==0:\n        sr=abs(x-S[si])\n        tl,tr=abs(x-T[ti-1]),abs(x-T[ti])\n        print(min(max(sr,tr),sr+tl+min(sr,tl)))\n    elif si==A:\n        sl=abs(x-S[si-1])\n        tl,tr=abs(x-T[ti-1]),abs(x-T[ti])\n        print(min(max(sl,tl),sl+tr+min(sl,tr)))\n    elif ti==0:\n        sl,sr=abs(x-S[si-1]),abs(x-S[si])\n        tr=abs(x-T[ti])\n        print(min(max(sr,tr),sl+tr+min(sl,tr)))\n    elif ti==B:\n        sl,sr=abs(x-S[si-1]),abs(x-S[si])\n        tl=abs(x-T[ti-1])\n        print(min(max(sl,tl),sr+tl+min(sr,tl)))",
    "error_obj":"IndexError: list index out of range"
  },
  "s608475575":{
    "code_string":"import sys\nimport re\nimport math\nimport collections\nimport bisect\nimport itertools\nimport fractions\nimport functools\nimport copy\nimport heapq\nimport decimal\nimport statistics\nimport queue\n\n# import numpy as np\n\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: map(int, sys.stdin.readline().split())\nna = lambda: list(map(int, sys.stdin.readline().split()))\nna1 = lambda: list(map(lambda x: int(x) - 1, sys.stdin.readline().split()))\n\n\n# ===CODE===\n\ndef disLR(a, idx):\n    small = a[max(0, idx - 1)]\n    large = a[min(len(a) - 1, idx)]\n    return small, large\n\n\ndef main():\n    a, b, q = ns()\n    s = [ni() for _ in range(a)]\n    t = [ni() for _ in range(b)]\n\n    for _ in range(q):\n        ans = INF\n\n        x = ni()\n\n        idxs = bisect.bisect_left(s, x)\n        a1 = [disLR(s, idxs)]\n\n        idxt = bisect.bisect_left(t, x)\n        a2 = [disLR(t, idxt)]\n\n        for ta1 in a1:\n            for ta2 in a2:\n                tmp1 = abs(x - a1) + abs(a2 - a1)\n                tmp2 = abs(x - a2) + abs(a1 - a2)\n                ans = min(ans, tmp1, tmp2)\n\n        print(ans)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'list'"
  },
  "s821927838":{
    "code_string":"A,B=map(int(input().split()))\nif B%A==0:\n    print(A+B)\nelse:\n    print(A-B)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s356715914":{
    "code_string":"A,B = mao (int, input ().split ())\nif B%A == 0:\n  print (A+B)\nelse:\n  print (B-A)",
    "error_obj":"NameError: name 'mao' is not defined"
  },
  "s294303576":{
    "code_string":"a,b=map(int,input().split())\nb=input()\nif b%a==0:\n  print(a+b)\nelse:\n  print(b-a)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s513765690":{
    "code_string":"\ndef main():\n    a, b = map(int, input().split())\n    if b \/ a % 0:\n        print(a + b)\n    else:\n        print(b - a)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ZeroDivisionError: float modulo"
  },
  "s358156241":{
    "code_string":"import sys\n\nn,m=map(int,input().split())\nans=[]*(m+1)\noutput=0\n\nfor i in range(n):\n    k=list(map(int,input().split()))\n    for j in range(1,len(k)):\n        ans[j]+=1\n\nfor i in ans:\n    if ans[i]==n:\n        output+=1\n\nprint(output)",
    "error_obj":"IndexError: list index out of range"
  },
  "s892943348":{
    "code_string":"N,M = map(int,input().split())\nLIKE = set()\n\nfor i in range(N):\n  AK = list(map(int,input().split()))\n  LIKE |= AK[1:]\n\nprint(len(LIKE))\n            ",
    "error_obj":"TypeError: unsupported operand type(s) for |=: 'set' and 'list'"
  },
  "s391295851":{
    "code_string":"N,M=map(int,input().split())\nfoods=[0]*M\n\nfor i in range(N):\n  KA=list(map(int,input().split())\n  for a in KA[1: ]:\n    foods[a-1]+=1\n\ncnt=0\nfor j in foods:\n  if j==N:\n    cnt+=1\n\nprint(cnt)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s885991398":{
    "code_string":"N, M = map(int, input().split())\nt = [0 for i in range(M+1)]\nfor i in range(N):\n  A = map(int, input().split())\n  for j in range(1, A[0]+1):\n    t[ A[j] ] += 1\nans = 0\nfor i in t:\n  if i == N:\n    ans += 1\nprint(ans)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s079001762":{
    "code_string":"N.M = map(int,input().split())\nC = [0] * (M+1)\nfor i in range(N):\n    K = list(map(int, input().split()))\n    for k in range(len(k)):\n        C[K[k]] += 1\ncount = 0\n\nfor c in C:\n    if c == N:\n        count += 1\n\nprint(count)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s128116680":{
    "code_string":"import numpy as np\nN, M = map(int, input().split())\n\nA = np.zeros((N,M))\nfor i in range(N):\n    a = list(map(int, input().split()))\n    a = a[1:]\n    A[i, 0:len(a)] = a\n\nfor i in range(N):\n    a = A[i]\n    a = a[(a != 0) & (a < M)]\n    if i == 0:\n        s = set(list(a))\n    else:\n        _s = set(list(a))\n    s &= _s\n\nprint(len(s))",
    "error_obj":"NameError: name '_s' is not defined"
  },
  "s368751020":{
    "code_string":"N,M=map(int,input().split())\nA=[]*N\nfor i in ragne(N):\n  A[i]=list(map(int,input().split()))",
    "error_obj":"NameError: name 'ragne' is not defined"
  },
  "s837383019":{
    "code_string":"n,m=map(int, input().split())\nA=set(range(1, m+1))\nfor _ in range(n):\n  a,*b=map(int, input().split())\n  A = A & set(*b)\nprint(len(A))",
    "error_obj":"TypeError: set expected at most 1 argument, got 2"
  },
  "s824055208":{
    "code_string":"N,P = map(int,input().split())\nList=[]\nfor i in range(N):\n    List+=list(map(int,input().split()))\ncount = 0\nfor i in range(P+1):\n  if List.count(List[i])=N:\n    count +=1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s401931660":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\n\na=sorted(a)\n\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n \/\/ i:\n                upper_divisors.append(n\/\/i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n  \nc=make_divisors(a[0])\nd=list(c.keys)\n\nd=d.sorted\nf=[]\nfor y in range(len(d))\n  e=d[y]\n  ch=0\n  for x in range(1,n):\n    if not a[x]%e==0:\n      continue\n    ch+=1\n  if ch==n-1:\n    f.append(e)\n    \nprint(max(f))\n    \n      \n     ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s581556071":{
    "code_string":"from math import floor, ceil, sqrt, factorial, log, gcd\nfrom itertools import accumulate, permutations, combinations, product, combinations_with_replacement\nfrom bisect import bisect_left, bisect_right\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush, heappushpop\nimport sys\nINF = float('inf')\nmod = 10**9+7\n\n\ndef lcm(a, b): return a * b \/ gcd(a, b)\n\n# 1 2 3\n# a, b, c = LI()\n\n\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\n\n# a = I()\n\n\ndef I(): return int(sys.stdin.buffer.readline())\n\n# abc def\n# a, b = LS()\n\n\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\n\n# a = S()\n\n\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\n\n# 2\n# 1\n# 2\n# [1, 2]\n\n\ndef IR(n): return [I() for i in range(n)]\n\n# 2\n# 1 2 3\n# 4 5 6\n# [[1,2,3], [4,5,6]]\n\n\ndef LIR(n): return [LI() for i in range(n)]\n\n# 2\n# abc\n# def\n# [abc, def]\n\n\ndef SR(n): return [S() for i in range(n)]\n\n# 2\n# abc def\n# ghi jkl\n# [[abc,def], [ghi,jkl]]\n\n\ndef LSR(n): return [LS() for i in range(n)]\n\n# 2\n# abcd\n# efgh\n# [[a,b,c,d], [e,f,g,h]]\n\n\ndef SRL(n): return [list(S()) for i in range(n)]\n\n\ndef main():\n    n = I()\n    lst = LI()\n    print(gcd(lst))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s289701266":{
    "code_string":"n = int(input())\na = [int(input()) for i in range(n)]\n\ng = gcd(a[0], a[1])\nfor i in range(2, n):\n    g = gcd(g, a[i])\n    \nprint(g)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 10 8 40'"
  },
  "s601855343":{
    "code_string":"n= int(input())\na_list = list(map(int, input().split()))\ngcd = a_list[0]\nfor i in range(1,n):\n    gcd = math.gcd(gcd,a_list[i])\n    \n    \nprint(gcd)",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s560936652":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\nnow = A[0]\nfor i in range(1,N):\n    now = math.gcd(A[i],now)\nprint(now)",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s558413219":{
    "code_string":"N=int(input())\nM=list(map(int, input().split()))\nans=min(M)\nmn=Min(M)\nfrom math import gcd\nfor m in M:\n  if m%ans!=0:\n    ans=min(ans, gcd(mn,m))\nprint(ans)",
    "error_obj":"NameError: name 'Min' is not defined"
  },
  "s954776433":{
    "code_string":"n = int(input())\nxlist = list(map(int,input().split()))\na = xlist[0]\nfor i in range(1,n):\n  a = fractions.gcd(a,xlist[i])\nprint(a)",
    "error_obj":"NameError: name 'fractions' is not defined"
  },
  "s880645003":{
    "code_string":"N = int(input())\na = list(map(int,input().split()))\nans = a[0]\nfor i in range(1,N):\n  ans = gcd(ans,a[i])\nprint(ans)",
    "error_obj":"NameError: name 'gcd' is not defined"
  },
  "s473562248":{
    "code_string":"import math\nprint(reduce(math.gcd,map(int,input().split())))",
    "error_obj":"NameError: name 'reduce' is not defined"
  },
  "s021368406":{
    "code_string":"N, K = map(int(input().split()))\nif N >= k * 2 - 1:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s453279953":{
    "code_string":"N, K = map(int,input().split())\nif N + 1 >= 2 * K:\n    print('YES')\nele:\n    print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s870974671":{
    "code_string":"#\u3069\u306e 2 \u3064\u306e\u8857\u306e\u9593\u3082\u3001\u9053\u3092\u4f55\u672c\u304b\u901a\u308b\u3053\u3068\u3067\u884c\u304d\u6765\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\ncnts=[0]*4\nfor i in range(3):\n    ai,bi=map(int, input().split())\n    ai-=1;bi-=1\n    cnts[ai]+=1;cnts[bi]+=1\nfor i in range(4):\n    if cnts>2:\n        print(\"NO\")\n        exit()\nprint(\"YES\")\n",
    "error_obj":"TypeError: '>' not supported between instances of 'list' and 'int'"
  },
  "s091593606":{
    "code_string":"G = [0] * 4\nfor i in range(3):\n    a, b = mii()\n    a -= 1\n    b -= 1\n    G[a] += 1\n    G[b] += 1\n\nfor i in range(4):\n    if G[i] == 3:\n        print('NO')\n        exit()\n\nprint('YES')\n",
    "error_obj":"NameError: name 'mii' is not defined"
  },
  "s852716782":{
    "code_string":"print('YNEOS'[len({*map(int,input().split())for i in range(3)})!=4::2])",
    "error_obj":"SyntaxError: iterable unpacking cannot be used in comprehension"
  },
  "s149623580":{
    "code_string":"from collections import defaultdict\nfrom collections import deque\nimport itertools\nimport math\n\ndef readInt():\n\treturn int(input())\ndef readInts():\n\treturn list(map(int, input().split()))\ndef readChar():\n\treturn input()\ndef readChars():\n\treturn input().split()\n\nk,a,b = readInts()\n\nif a+1<=k and a+2<b:\n\tk-=a+1\n\tans+=k\/\/2*(b-a)+k%2+b\nelse:\n\tans = k+1\n\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s353875104":{
    "code_string":"K, A, B = map(int, input().split())\ncount = 1\ncoin = 0\nif B - A <= 2:\n  print(K + 1)\n  \nelse:\n  for i in range(K):\n    if coin == 1:\n      count += B\n      coin -= 1\n    elif count >= A and i != k-1:\n      count -= A\n      coin += 1\n    else:\n      count += 1\n  print(count)\n  \n  ",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s439207817":{
    "code_string":"t,x=map(float, input().split())\nprint({0:.4f}.format(t\/x))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s239557660":{
    "code_string":"a,b = map(double,input().split())\nprint(a\/b)",
    "error_obj":"NameError: name 'double' is not defined"
  },
  "s387663815":{
    "code_string":"T,X = map(int,input())\n\nprint(T\/X)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s339850478":{
    "code_string":"a,b = map(int, input())\nprint(a\/b)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s061368754":{
    "code_string":"t, x = map(int, inupt().split())\nprint(t \/ x)",
    "error_obj":"NameError: name 'inupt' is not defined"
  },
  "s380247021":{
    "code_string":"T, X = int(input().split())\nprint(T \/ X)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s672105379":{
    "code_string":"x,y =map(int,input().split())\nprint(x\/t)",
    "error_obj":"NameError: name 't' is not defined"
  },
  "s410044534":{
    "code_string":"T,X=map(int,input())\nprint(float(T\/X))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s085859328":{
    "code_string":"_ = input()\nedges = list(int, input().split())\nmax_edge = max(edges)\nprint('Yes' if max_edge < sum(edges) - max_edge else 'No')",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s842019815":{
    "code_string":"n,l=map(int,open(0).read().split())\nsum_n=sum(l)\nfor i in range(n):\n\tif 2*l[i]>=sum_n\n\t\tprint('No')\n\t\timport sys\n\t\tsys.exit()\nprint('Yes')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s479938550":{
    "code_string":"N = int(input())\nL = list((int,input().split()))\n\nif max(L) - (sum(L) - max(L)) < 0:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: '>' not supported between instances of 'list' and 'type'"
  },
  "s255996303":{
    "code_string":"N = int(input())\nL = list(map(int,input().split()))\ns = 0\nfor i in L:\n    s += i\ns -= max(L)\nif L < s:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: '<' not supported between instances of 'list' and 'int'"
  },
  "s836372068":{
    "code_string":"n = int(input())\nl = list(map(int, input().split()))\n\nnl = sorted(l)\n\nfor i in range(n-1):\n\tother = 0 + n1[i]\n\nif other < nl[n-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 'n1' is not defined"
  },
  "s744693397":{
    "code_string":"\nn=int(input())\nL=list(map(int,input().split()))\nL.sort()\nans=sum(L[:n-1])\nif ans>L[n-1:n]:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: '>' not supported between instances of 'int' and 'list'"
  },
  "s937116943":{
    "code_string":"N = int(input())\nL = list(map(int, int(input())))\nL.sort()\nif L[-1] > (sum(L) - L[-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 8 5 1'"
  },
  "s654479957":{
    "code_string":"N = int(inout())\nL = input().split()\nflag = 0\n\nfor i in range(N):\n  L[i] = int(L[i])\n  total += L[i]\n\nfor i in range(N):\n  if L[i]*2 >= total:\n    print(\"No\")\n    flag = 1\n    break\n\nif flag == 0:\n  print(\"Yes\")\n",
    "error_obj":"NameError: name 'inout' is not defined"
  },
  "s614014320":{
    "code_string":"#ABC117B\nn = int(input())\nl = [int(input()) for i in range(n)]\nprint(\"Yes\" if max(l) >= (sum(l)-max(l)) else \"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 8 5 1'"
  },
  "s950491796":{
    "code_string":"# 117b\n\ndef atc_117b(N: int, Li_input: str) -> str:\n    Li = [int(i) for i in Li_input.split(\" \")]\n    Li = sorted(Li)\n    max_length = Li.pop()\n    if max_length < sum(Li):\n        return \"Yes\"\n    return \"No\"\n\nN_input_value = int(input())\nLi_input_Value = input()\nprint(atc_117b(N_input_value, Li_input_value))\n",
    "error_obj":"NameError: name 'Li_input_value' is not defined"
  },
  "s829122550":{
    "code_string":"_,l=map(int,open(0).read().split())\nl.sort()\nprint(\"YNeos\"[sum(l[:-1])<=l[-1]::2])",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s847668949":{
    "code_string":"n = int(input())\nl = [int(i) for i in input().split()]\n\nl.sort()\nl.reverse()\ncnt = 0\nfor i in range(n-1):\n\tcnt += l[i]\nif cnt > l[n]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s272295403":{
    "code_string":"\n\nN,M = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\nX.sort()\ncnt = 0\narr = [0]*(M-1)\nif N > M:\n    ans = 0\nelse:\n    for i in range(1,M):\n        arr[i] = (abs(X[i-1]-X[i]))\n    #print(arr)\n    arr.sort()\n    ans = sum(arr[0:M-N])\nprint(ans)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s101116380":{
    "code_string":"x,m = map(int, input().split())\nx = sorted(list(map(int, input().split())))\n\nif n >= m:print(0)\nelse:\n    dist = [abs(x[i+1] - x[i]) for i in range(m-1)]\n    dist = sorted(dist)\n    print(sum(dist[:-(n-1)]))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s768180103":{
    "code_string":"import sys\n\n# N: \u30b3\u30de\u6570\n# M: \u5730\u70b9\u6570\n\n# N,M,*X = map(int, open(0).read().split())\n\n# \u30b3\u30de\u6570\u304c\u5730\u70b9\u6570\u4ee5\u4e0a\u306e\u5834\u5408\u3001\u5404\u5730\u70b9\u306b\u30b3\u30de\u3092\u914d\u7f6e\u3067\u304d\u308b\n# \u3088\u3063\u3066 0 \u56de\u306e\u79fb\u52d5\u3067\u76ee\u7684\u3092\u9054\u6210\u3067\u304d\u308b\nif N >= M:\n    print(0)\n    sys.exit()\n\nX.sort()\nans = []\nfor i in range(M-1):\n    ans.append(abs(X[i+1] - X[i]))\n\nprint(X[-1] - X[0] - sum(sorted(ans)[::-1][:N-1]))",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s605645957":{
    "code_string":"N,A,B=map(int, input().split())\n#\u6700\u5927\u306e\u6570\nx = min(A, B)\n#\u6700\u5c0f\ny = 0\n        \nif N < A+B:\n    if A > B:\n        y = A - B\n    else:\n        y = B - A\n\nprint(x + \" \" + y)",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s442138689":{
    "code_string":"N,A,B=map(int,input().split())\n\nif(A>B):\n  ans1=B\n  ans2=A-(N-B)\nelse:\n  ans1=A\n  ans2=B-(N-A)\n  \nprint(ans1+\" \"+ans2)",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s873795440":{
    "code_string":"N, A, B = map(int, raw_input().split())\nm = A + B\nprint(min(A, B), max(0, m - N))",
    "error_obj":"NameError: name 'raw_input' is not defined"
  },
  "s302232013":{
    "code_string":"n,a,b=map(int,input.split())\nmx=min(a,b)\nmn=mx-(n-max(a,b))\nprint(str(mx)+\" \"+str(mn))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s441929238":{
    "code_string":"n = int(input())\na, b, c = input(), input(), input()\nans = 0\nfor i in range(n):\n  ans += len(set(a[i], b[i], c[i])) - 1\nprint(ans)",
    "error_obj":"TypeError: set expected at most 1 argument, got 3"
  },
  "s853560554":{
    "code_string":"from sys import stdin\nN = int(stdin.readline().rstrip())\nA = stdin.readline().rstrip()\nB = stdin.readline().rstrip()\nC = stdin.readline().rstrip()\nans = 0 \nfor i in range(N):\n    ans += len(set(A[i], B[i], C[i]))-1\nprint(ans)",
    "error_obj":"TypeError: set expected at most 1 argument, got 3"
  },
  "s484663515":{
    "code_string":"a,b,c = map(int,input().split())\nprint(a*b*\/2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s672410650":{
    "code_string":"a,b,c = map(int,input().split())\nprint(min(a,b,c)*(sum([a,b,c]-min(a,b,c)-max(a,b,c)))\/\/2)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'int'"
  },
  "s879787789":{
    "code_string":"a, b, c = [int(i) for i in input().split()]\nif a >= b and a >= c:\n print(c*b\/\/2)\nelse if b >= c and b >= a:\n print(a*c\/\/2)\nelse:\n print(a*b\/\/2)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s939405528":{
    "code_string":"length1, length2, length3 = map(int, input().split())\narea = AB * BC \/ 2\nprint(int(area))",
    "error_obj":"NameError: name 'AB' is not defined"
  },
  "s278148919":{
    "code_string":"a=list(map(int,input().split()))\nb=a.sorted()\nprint(b[1]*b[2])\n",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s236933505":{
    "code_string":"l = sorted(map,input().split())\nprint((l[0]*l[1])\/\/2)",
    "error_obj":"TypeError: sorted expected 1 argument, got 2"
  },
  "s114139853":{
    "code_string":"AB, BC, CA = int(input())\n\nprint((AB * BC) \/\/ 2)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4 5'"
  },
  "s061033596":{
    "code_string":"a,b,c=input().split()\nls=[a,b,c]\nls.sort()\nprint(ls[0]*ls[1])",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s464559589":{
    "code_string":"AB, BC, CA = map(int, input().split())\nif (1 <= AB & AB <= 100) & (1 <= BC & BC <= 100) & (1 <= CA & CA <= 100)\n    S = int(AB * BC \/ 2)\n    print(S)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s769239780":{
    "code_string":"a,b,c = map(int,input().split())\n\nlis = [a,b,c]\nlis  = lis.remove(max(lis))\n\nprint(int(lis[0]*lis[1]\/2))",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s828691242":{
    "code_string":"a, b, c = map(int, input().splis())\ndai = max(a,b,c)\nshou = min(a,b,c)\nmid = a + b + c - dai - shou\n\nprint(shou * mid \/ 2)",
    "error_obj":"AttributeError: 'str' object has no attribute 'splis'"
  },
  "s384157104":{
    "code_string":"L = list(map(int,input().split()))\n\nprint(L[0]*l[1]\/\/2)",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s037690749":{
    "code_string":"l=list(map(int,input()))\n\nl.sort()\n\nprint(l[0]*l[1]\/\/2)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s777109189":{
    "code_string":"a,b,c = map(int, input.split())\nprint(a*b\/\/2)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s564667844":{
    "code_string":"a,b=map(int,input().split())\n\nprint(a*b\/\/2)\n",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s328389928":{
    "code_string":"s = int(input())\na = [s]\ni = 1\nwhile True:\n  if s % 2 == 0:\n    s = s \/\/ 2\n  else:\n    s = 3 * s + 1\n  if s in a:\n    print(len(a) + 1)\n  a.append(s)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s875597328":{
    "code_string":"s = list(int(input()))\nfor i in range(1000001):\n    if s[i] % 2 == 0:\n        s.append(s[i]\/2)\n    else:\n        s.append(3 * s[i] + 1)\n    if s[i] in s[:i]:\n        print(i+1)\n        break",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s150170870":{
    "code_string":"s=int(input())\nG =[s]\nwhile all(G[i]!=G[-1] for i in range(len(G)-1)):\n  if G[-1] % 2==0:\n    G.append(int(x\/2))\n  else:\n    G.append(int(3*x+1))\nprint(len(G))",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s174381795":{
    "code_string":"s = int (input ())\nl = []\na = 0\nl.append (s)\nwhile True:\n  a += 1\n  if s%2 == 0:\n    s = round(s\/2)\n  else:\n    s = s*3+1\n  if l.count (s) != 0:\n    print (a+1)\n    break\n  ",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s175922160":{
    "code_string":"h_state=[0]*n\n\ndef water(n,h,h_state):\n    for i in range(n):\n        if h_state[i]<h[i]:\n            l=i\n            break\n        elif i==n-1 and h_state[i]<h[i]:\n            l=i\n        else:\n            l=i+1\n    \n    for j in range(l,n):\n        if h_state[j]==h[j]:\n            r=j-1\n            break\n        else:\n            r=j\n    \n    for k in range(l,r+1):\n        h_state[k]+=1\n\ncnt=0\nwhile h_state != h:\n    for i in range(n):\n        if h_state[i]<h[i]:\n            cnt+=1\n            water(n,h,h_state)\n            break\nprint(cnt)\n        ",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s739538803":{
    "code_string":"H = [0] + H\ncnt = 0\nfor i in range(1, N + 1):\n    cnt += max(H[i] - H[i - 1], 0)\n\n\nprint(cnt)\n",
    "error_obj":"NameError: name 'H' is not defined"
  },
  "s239500009":{
    "code_string":"import sys\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 10 ** 9 + 7\n\nn = I()\nhl = LI()\n# count = 0\n\n# len_h = len(hl)\n\n# def m1(n):\n#     if n > 0:\n#         n = n - 1\n#     else:\n#         n = 0\n#     return n\n\n# max_hana = max(hl)\n# if max_hana == 0:\n#     print(0)\n#     sys.exit()\n\n# for i in range(max_hana):\n#     for j in range(len_h):\n#         if j == 0:\n#             if hl[j] > 0:\n#                 count += 1\n#         else:\n#             if hl[j] > 0 and hl[j-1] == 0:\n#                 count += 1\n#             elif hl[j] > 0 and hl[j-1] == 0:\n#                 count += 1\n#     hl = list(map(m1, hl))\n\n# print(count)\n\n######################\n# \u96a3\u3068\u306e\u5dee\u5206\u3092\u8003\u3048\u305f\u307b\u3046\u304c\u65e9\u3044\n\n# 1    2    4    2    1    0      \u8a084\n#   1    2    0    0     0\n\nans = hl[0]\nfor i in range(1, n)\n    ans += max(0, hl[i] - hl[i - 1])\nprint(ans)\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s894179012":{
    "code_string":"from math import floor, ceil, sqrt, factorial, log, gcd\nfrom itertools import accumulate, permutations, combinations, product, combinations_with_replacement\nfrom bisect import bisect_left, bisect_right\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush, heappushpop\nimport copy\nimport numpy as np\nimport sys\nINF = float('inf')\nmod = 10**9+7\n\n\ndef lcm(a, b): return a * b \/ gcd(a, b)\n\n# 1 2 3\n# a, b, c = LI()\n\n\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\n\n# a = I()\n\n\ndef I(): return int(sys.stdin.buffer.readline())\n\n# abc def\n# a, b = LS()\n\n\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\n\n# a = S()\n\n\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\n\n# 2\n# 1\n# 2\n# [1, 2]\n\n\ndef IR(n): return [I() for i in range(n)]\n\n# 2\n# 1 2 3\n# 4 5 6\n# [[1,2,3], [4,5,6]]\n\n\ndef LIR(n): return [LI() for i in range(n)]\n\n# 2\n# abc\n# def\n# [abc, def]\n\n\ndef SR(n): return [S() for i in range(n)]\n\n# 2\n# abc def\n# ghi jkl\n# [[abc,def], [ghi,jkl]]\n\n\ndef LSR(n): return [LS() for i in range(n)]\n\n# 2\n# abcd\n# efgh\n# [[a,b,c,d], [e,f,g,h]]\n\n\ndef SRL(n): return [list(S()) for i in range(n)]\n\n\ndef main():\n    n = I()\n    h = list(LI())\n    n = int(input())\n    ans = h[0]\n    for i in range(1, n):\n        if h[i] > h[i-1]:\n            ans += h[i] - h[i-1]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s221815371":{
    "code_string":"def main():\n    n = int(input())\n    h = [list(map(int, input().split()))]\n    ans = h[0]\n    for i in range(n-1):\n        if h[i+1] > h[i]:\n            ans += h[i + 1]-h[i]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s638009179":{
    "code_string":"n=int(input())\nh=list(map(int,input().split()))\nhm=max(h)\n\nans=0\nfor i in range(hm,-1,-1):\n    t=1\n    for j in range(n):\n        if h[j]=i:\n            ans+=t\n            t=0\n        else:\n            t=1\n\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s905206247":{
    "code_string":"s = list(map(int,input().split()))\n\nc = [1,,4,7,9]\n\nif s == c:\n    print('YES')\nelse:\n    print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s697792206":{
    "code_string":"print('YES' if set(map(int, input().split())) == set(1, 9, 7, 4) else 'NO')\n",
    "error_obj":"TypeError: set expected at most 1 argument, got 4"
  },
  "s429742273":{
    "code_string":"a=''.join(list(sorted(list(map(int,input().split())))))\nif(a=='1479'):\n\tprint('YES')\nelse:\n\tprint('NO')\n\n\n",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s051133789":{
    "code_string":"n1, n2, n3, n4 = map(input().split())\nif {n1, n2, n3, n4} == {1, 9, 7, 4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s804384242":{
    "code_string":"s = input()\n\nfor i in range(1, 8):\n    a, b = i, 7-i\n    l, r = k[:i], k[i:]\n    \n    if l in s and r in s:\n        print(\"YES\")\n        exit()\n\nprint('NO')\n",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s305912013":{
    "code_string":"keyence",
    "error_obj":"NameError: name 'keyence' is not defined"
  },
  "s294259242":{
    "code_string":"# coding:utf-8\ns = input()\nfor i in range(n := len(s))\n    if s[:i] + s[n-7+i:] == 'keyence':\n        print('YES')\n        exit()\nprint('NO')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s656669809":{
    "code_string":"def main():\n    S = input()\n    if S[0] != 'k':\n        return ('NO')\n    elif S = 'keyence':\n        return ('YES')\n\n    ans = 'keyence'\n    i = 0\n    j = 0\n    while True:\n        i += 1\n        j += 1\n        if S[i] != ans[j]:\n            break\n\n    #\u6b8b\u308a\u306e\u6587\u5b57\u6570\n    num = 7-j\n    cnt = 0\n    while cnt < num:\n        cnt += 1\n        #print(ans[-cnt])\n        if S[-cnt] != ans[-cnt]:\n            return ('NO')\n    return ('YES')\nprint(main())\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s856339540":{
    "code_string":"S=input()\nl = len(S)\n#keyencexxxxx\nif s[:7]==\"keyence\":\n  print(\"YES\")\n#kxxxxxeyence\nelif s[:1]==\"k\" and s[l-6:]==\"eyence\":\n  print(\"YES\")\n#kexxxxxyence\nelif s[:2]==\"ke\" and s[l-5:]==\"yence\":\n  print(\"YES\")\n#keyxxxxxence\nelif s[:3]==\"key\" and s[l-4:]==\"ence\":\n  print(\"YES\")\n#keyexxxxxnce\nelif s[:4]==\"keye\" and s[l-3:]==\"nce\":\n  print(\"YES\")\n#keyenxxxxxce\nelif s[:5]==\"keyen\" and s[l-2:]==\"ce\":\n  print(\"YES\")\n#keyencxxxxxe\nelif s[:6]==\"keyenc\" and s[l-1:]==\"e\":\n  print(\"YES\")\n#xxxxxkeyence\nelif s[l-7:]==\"keyence\":\n  print(\"YES\")\nelse:\n  print(\"NO\")\n",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s704074429":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nsurplus = []\nshort = []\n\nfor i in range(n):\n    if a[i] > b[i]:\n        surplus.append(a[i]-b[i])\n    elif b[i] > a[i]:\n        short.append(b[i]-a[i])\n\nsurplus = sorted(surplus)\ntaken = False\ncnt = 0\nfor i in range(len(short)):\n    cost = short.pop()\n    cnt += 1\n\n    while cost > 0:\n        if len(surplus) == 0:\n            print(-1)\n           \texit()\n\n        take = min(cost, surplus[-1])\n        cost -= take\n        surplus[-1] -= take\n\n        if not taken:\n            taken = True\n            cnt += 1\n\n        if surplus[-1] == 0:\n            surplus.pop()\n            taken = False\n\nprint(cnt)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s008533223":{
    "code_string":"import numpy as np\nfrom numba import njit\n\nn=int(input())\na=np.array(list(map(int, input().split())))\nb=np.array(list(map(int, input().split())))\n\n@njit\ndef func():\n  if np.all(a>=b):\n    print(0)\n  elif np.sum(a)<np.sum(b):\n    print(-1)\n  else:\n    temp_a = a[a-b<0]\n    temp_b = b[a-b<0]\n    sum_a = np.sum(temp_a)\n    sum_b = np.sum(temp_b)\n    ans = len(temp_a)\n\n    if sum_a>=sum_b:\n      print(ans)\n    else:\n      aa = a[a-b>=0]\n      bb = b[a-b>=0]\n      for _ in range(n-ans):\n        index = np.argmax(aa-bb)\n        sum_a += aa[index]\n        sum_b += bb[index]\n        ans += 1\n        if sum_a>=sum_b:\n          print(ans)\n          break\n        else:\n          aa[index]=0\n          bb[index]=0\n          continue\nfunc()",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s462382257":{
    "code_string":"N=input()\nH=input()\nW=input()\n\nprint((N-W+1)*(N-H+1))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s049510695":{
    "code_string":"class UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n\n\ndef calc(i,j):\n    return i*w+j\ndef calc_inv(x):\n    return x\/\/w, x%w\ndef judge(x,y):\n    i0,j0 = calc_inv(x)\n    i1,j1 = calc_inv(y)\n    if s[i0][j0] != s[i1][j1]:\n        return True\n    return False\n\n\nh,w = map(int,input().split())\ns = [[(i == \"#\")*1 for i in list(input())] for _ in range(h)]\nuf = UnionFind(h*w)\n\nfor i in range(h):\n    for j in range(w):\n        now = calc(i,j)\n        nxt = calc(i+1,j)\n        if i+1 < h:\n            if judge(now,nxt):\n                uf.union(now,nxt)\n        nxt = calc(i,j+1)\n        if j+1 < w:\n            if judge(now,nxt):\n                uf.union(now,nxt)\n\n\ncnt = [[0,0] for _ in range(h*w)]\nind = 0\nfor l in uf.all_group_members().values():\n    for x in l:\n        i,j = calc_inv(x)\n        if s[i][j]:\n            cnt[ind][0] += 1\n        else:\n            cnt[ind][1] += 1\n    ind += 1\nans = 0\nfor i in range(ind):\n    ans += cnt[i][0]*cnt[i][1]\nprint(ans)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s338933809":{
    "code_string":"N,H,W=map(int,input().split())\nprint((N-H+1)*(N-W+1))",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s826727229":{
    "code_string":"7\n5 15\n1 10 16 2 7 20 12",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s843352748":{
    "code_string":"N = int(input())\nA, B = map(int, input().split())\nP = list(map(int, input().split()))\na = len(filter(lambda x: x<=A,P))\nb = len(filter(lambda x: A<x<=B,P))\nc = len(filter(lambda x: B<x,P))\nprint(min(a,b,c))",
    "error_obj":"TypeError: object of type 'filter' has no len()"
  },
  "s373570272":{
    "code_string":"n=int(input())\na,b=map(int, input().split())\np=list(map(int, input().split())\nc=[0]*3\nfor i in p:\n       if i <=a:\n        c[0] +=1\n       elif i>b:\n        c[2] +=1\n       else:\n        c[1]+=1\nprint(min(c))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s361299971":{
    "code_string":"N=int(input())\nA,B=map(int,input().split())\np = list(map(int,input().split()))\nc=[]\nd=[]\ne=[]\nfor i in range(N):\n    if p[i]<=A:\n        c.append(p[i])\n    if A+1 <= p[i] <= B:\n        d.append(p[i])\n    if B+1 <= p[i]:\n        e.append(p[i])\n\n        \nprint(min(len(c),len(d),len(e))))\n",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s834317423":{
    "code_string":"n,a,b=map(int, input().split())\n*p,=map(int, input().split())\nmn,md,mx=0,0,0\nfor pi in p:\n    if pi<=a:\n        mn+=1\n    elif pi<=b:\n        md+=1\n    else:\n        mx+=1\nprint(min(mn,md,mx))\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s742738112":{
    "code_string":"int pxcount,pycount,pzcount=0\n\nn=int(input())\na,b=map(int, input().split())\np=list(map(int, input().split()))\n\nfor i in p:\n  if i<=a:\n    pxcount=pxcount+1\nfor i in p:\n  if a+1<=i and i<=b:\n    pycount=pycount+1\nfor i in p:\n  if b+1<=i:\n    pzcount=pzcount+1\n  \nprint(min(pxcount,pycount,pzcount))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s641850394":{
    "code_string":"def chmin(a, b):\n    if a > b:\n        return b\n    return a\n#\u914d\u308bDP\ndef resolve():\n    n = int(input())\n    h = list(map(int, input().split()))\n    dp = [10**10] * n\n    dp[0] = 0\n    for i in range(n):\n        dp[i+1] = chmin(dp[i+1], dp[i]+abs(h[i]-h[i+1]))\n        if i < n-2:\n        \tdp[i+2] = chmin(dp[i+2], dp[i]+abs(h[i]-h[i+2]))\n    print(dp[-1])\nresolve()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s850108881":{
    "code_string":"N = int(input())\nhs = np.array(list(map(int, input().split())))\n\ni = 0\ntotal_cost = 0\n\na = np.zeros(N, int)\na[0] = 0\na[1] = abs(hs[1] - hs[0])\nfor i in range(2, N):\n    a[i] = min(a[max(i-2,0)] + abs(hs[i] - hs[max(i-2,0)]),\n               a[max(i-1,0)] + abs(hs[i] - hs[max(i-1,0)]))\nprint(a[-1])\n",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s885070968":{
    "code_string":"N = int(input())\nh = list(map(int, input().split()))\n\ninf = -1\ndp = [0] + [inf]*N\n    \nfor i in range(1,N):\n    dp[1] = abs(h[1]-h[0])\n    else:\n        dp[i] = min(dp[i-1]+abs(h[i]-h[i-1]), dp[i-2]+abs(h[i]-h[i-2]))\n    \nprint(dp[N-1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s528080575":{
    "code_string":"def frogOne(N, arr):\n    dparr= [-1 for i in range(N)]\n    dparr[0] = 0\n    dparr[1] = abs(arr[0]-arr[1])\n    for num in range(2,N):\n        dparr[num] = min(dparr[num-2]+ abs(arr[num]-arr[num-2]), dparr[num-1]+ abs(arr[num]-arr[num-1]))\n    return dparr[-1]\n\n\n if __name__ == '__main__':\n   N = int(input())\n   arr = list(map(int,input().rstrip().split()))\n   print(frogOne(N, arr))",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s841025642":{
    "code_string":"n = int(input())\nh = list(map(int,input().split()))\n\ndp = [0, abs(h[1]-[0])]\n\nfor i in range(2,n):\n    dp.append(min(dp[i-1] + abs(h[i]-h[i+1]), dp[i] + abs(h[i]-h[i+2])))\n    \nprint(dp[-1])",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'list'"
  },
  "s492657165":{
    "code_string":"n = int(input())\nh = list(int,input().split())\ninf = float(\"inf\")\ndp =[inf for i in range(n)]\ndp[0] = 0\ndp[1] = h[1]\nfor i in range(2,n):\n  dp[i] = min(dp[i-1],dp[i-2])+h[i]\n  \nprint(dp[-1])",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s095649948":{
    "code_string":"from math import inf\n\nn = int(input())\nh = list(map(int, input().split()))\n\ncosts = [inf]*n\ncosts[0] = 0\n\nfor i in range(n):\n\tfor j in (i+1, i+2):\n\t\tif j < n:\n\t\t\tcosts[j] = min(costs[j], costs[i]+abs(h[i]-h[j]))\nprint(c[-1])",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s129112682":{
    "code_string":"return True",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s174033801":{
    "code_string":"n = int(input())\nh = list(map(int,input().split()))\n\ndp = [0, abs(h[1]-[0])]\n\nfor i in range(2,n):\n    dp.append(min(dp[i-1] + abs(h[i]-h[i+1]), dp[i] + abs(h[i]-h[i+2])))\n    \nprint(dp[-1])",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'list'"
  },
  "s908683528":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\n \nINF = 10**9\ndp = [0] + [INF]*N\n \nfor i in range(1,N+1):\n    if i == 1:\n        dp[1] = abs(A[1]-A[0])\n    else:\n        dp[i] = min(dp[i-1]+abs(A[i]-A[i-1]), dp[i-2]+abs(A[i]-A[i-2]))\n \nprint(dp[N])",
    "error_obj":"IndexError: list index out of range"
  },
  "s647387548":{
    "code_string":"n=int(input())\narr=list(map(int,input().split()))\nvis[0] = 0\nif n < 2:\n  print(vis[0])\nvis[1] = abs(arr[0]-arr[1])\nfor i in range(2, n):\n    step_1 = abs(arr[i-1]-arr[i-2]) + vis[i-1]\n    step_2 = abs(arr[i-1]-arr[i-3]) + vis[i-2]\n    vis[i] = min(step_1, step_2)\nprint(vis[i])",
    "error_obj":"NameError: name 'vis' is not defined"
  },
  "s232070307":{
    "code_string":"N = int(input())\nh = [int(x) for x in input().split()]\ndp = []\ndp1 = 0\ndp2 = 0\nfor i in range(N):\n    if i == 0:\n        dp.append(0)\n        continue\n\n    if i == 1:\n        dp.append(abs(h[0] - h[1]))\n        continue\n\n    dp1 = dp[i - 1] + abs(h[i] - h[i - 1])\n    dp2 = dp[i - 2] + abs(h[i] - h[i - 2])\n\n    if dp1 < dp2:\n        dp.append(dp1)\n    else:\n        dp.append(dp2)\nreturn dp[-1]\n",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s021105838":{
    "code_string":"N = int(input())\nh = list(map(int,input().split()))\ncost = [1000000]*N\ncost[0] = 0\ncost[1] = abs(h([1]-h[0])\nfor i in range(2, N):\n  cost[i] = min((abs(h[i-1] - h[i]) + cost[i-1]),cost[i])\n  cost[i] = min((abs(h[i-2] - h[i]) + cost[i-2]), cost[i])\nprint(cost[-1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s610893486":{
    "code_string":"n=int(input())\na=[int(s) for s in input().split()]\nb=[0]*n\nb[1]=abs(a[0]-a[1])\nfor i in range(2,n):\n  b[i]=min(b[i-1]+abs(a[i]-a[i-1]),b[i-2]+as(a[i]-a[i-2]))\nprint(b[n-1])  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s532805570":{
    "code_string":"N = int(input())\nh = list(map(int, input().split()))\n\ndp = []\ndp[0]=0\ndp[1]=abs(h[1]-h[0])\n\nfor i in range(2,N):\n     t1 = dp[i - 2] + abs(h[i] - h[i - 2])\n     t2 = dp[i - 1] + abs(h[i] - h[i - 1])\n     dp[i] = min(t1, t2)\n\n\n\nprint(dp[N-1])",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s947408785":{
    "code_string":"#!\/usr\/bin\/env python3\n\ndef main():\n    N = int(input())\n    h = list(map(int, input().split()))\n\n    h.append(INF)\n    h.append(INF)\n    \n    INF = 1 << 60\n    dp = [INF] * 100010\n\n    dp[0] = 0\n\n    for i in range(N):\n        dp[i + 1] = min(dp[i + 1], dp[i] + abs(h[i] - h[i + 1]))\n        dp[i + 2] = min(dp[i + 2], dp[i] + abs(h[i] - h[i + 2]))\n\n    print(dp[N-1])\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"UnboundLocalError: local variable 'INF' referenced before assignment"
  },
  "s056134541":{
    "code_string":"n = int(input())\nh = [None] + list(map(int, input().split('')))\n\ndp = [None for _ in range(n+1)]\nfor k in range(1,n+1):\n  if k == 1:\n    dp[k] = 0\n  elif k == 2:\n    dp[k] = abs(h[2] - h[1])\n  else:\n    dp[k] = min(\n      dp[k-1] + abs(h[k] - h[k-1]),\n      dp[k-2] + abs(h[k] - h[k-2])\n    )\nprint(dp[k])",
    "error_obj":"ValueError: empty separator"
  },
  "s880504000":{
    "code_string":"def cmin(a,b):\n    if a>b:\n        return b\n    else:\n        return a\n\nN = int(input())\nh = list(map(int,input().split()))\n\ndp[] = [0] + [float(\"inf\")]*(N-1)\nfor i in range(N-2):\n    dp[i] = cmin(dp[i],dp[i-1]+abs(h[i-1]-h[i]))\nprint(dp[-1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s369564222":{
    "code_string":"N = input()\nheight = list(map(int, input().split(\" \")))\ndp = [0]*N\n \nfor i in range(1,N):\n  if i <= 2:\n    dp[i] = abs(height[i]-height[0])\n  if dp[i-1] < dp[i-2]:\n    dp[i] = dp[i-1] + abs(height[i]-height[i-1])\n  else:\n    dp[i] = dp[i-2] + abs(height[i]-height[i-2])\n \nprint(dp[N-1])\n",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s513670341":{
    "code_string":"n=int(input())\nrec=list(map(int,input().split()))\ns=[rec[0],abs(rec[1]-rec[0])]\nfor i in range(2,n):\n        total2=abs(rec[i]-rec[i-2])+s[i-2]\n        total1=abs(rec[i]-rec[i-1])+s[i-1]\n        s.append(min(total2,total))\nprint(s[-1])",
    "error_obj":"NameError: name 'total' is not defined"
  },
  "s019998200":{
    "code_string":"n = int(input())\ns = input().split()\nfor i in range(n):\n  s[i] = int(s[i])\nmemo = [0 for i in range(n+1)]\nmemo[0] = 0\nmemo[1] = 0\nfor i in range(2,n+1):\n  memo[i] = min(memo[i-1]+abs(s[i]-s[i-1]), memo[i-2]+abs(s[i]-s[i-2]))\nprint(memo[n])",
    "error_obj":"IndexError: list index out of range"
  },
  "s228278730":{
    "code_string":"n = int(input())\narr = [int(i) for i in list(input().split())]\ndef helper(arr):\n\tif len(arr) <= 1:\n\t\treturn 0\n\tif len(arr) == 2:\n\t\treturn abs(arr[1] - arr[0])\n\tway1 = abs(arr[-1] - arr[-2]) + helper(arr[:-1])\n\tway2 = abs(arr[-1] - arr[-3]) + helper(arr[:-2])\n\treturn min(way1, way2 )\n\nif n == 1:\n\tprint(0)\nelif n == 2:\n\tprint(abs(arr[1] - arr[0]))\nelse:\n\tdp[0] = 0\n\tdp[1] = abs(arr[1] - arr[0])\n\tdp = [0]*n\n\tfor i in range(2,len(arr)):\n\t\tdp[i] = min(dp[i-1] + abs(arr[i] - arr[i-1]), dp[i-2] + abs(arr[i] - arr[i-2]))\n\tprint(dp[n-1])\n# print(helper(arr))",
    "error_obj":"NameError: name 'dp' is not defined"
  },
  "s043430222":{
    "code_string":"sys.setrecursionlimit(200000)\n\nn = int(input())\nh = list(map(int, input().split()))\n\ndp = []\nfor i in range(n):\n    dp.append(-1)\n \ndef flog(m):\n    if dp[m] != -1:\n        return dp[m]\n    if m == 0:\n        dp[m] = 0\n        return 0\n    if m == 1:\n        dp[m] = abs(h[0]-h[1])\n        return dp[m]\n    else:\n        dp[m] = min(flog(m-1) + abs(h[m-1] - h[m]),flog(m-2) + abs(h[m-2] - h[m]))\n        return dp[m]\n  \nprint(flog(n-1))",
    "error_obj":"NameError: name 'sys' is not defined"
  },
  "s894970859":{
    "code_string":"    n=int(input())\n    h=list(map(int,input().split()))\n    dp=[0]*(len(h))\n    dp[1]+=abs(h[1]-h[0])\n    for i in range(2,len(h)):\n        dp[i] = min( \n                abs(h[i]-h[i-1])+dp[i-1],\n                abs(h[i]-h[i-2])+dp[i-2]\n                )\n    print(dp[-1])\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s628930676":{
    "code_string":"n = int(input())\nh = list(map(int, input().split()))\n\ndp = []\nfor i in range(n):\n\tdp.append(int(0))\ndp[0] = 0\ndp[1] = abs(h[0]-h[1])\n \nfor j in range(2,n):\n\tdp[j] = min(flog(j-1) + abs(h[j-1] - h[j]),flog(j-2) + abs(h[j-2] - h[j]))\n  \nprint(dp[n-1])",
    "error_obj":"NameError: name 'flog' is not defined"
  },
  "s871335447":{
    "code_string":"n = int(input())\narr = list(map(int, input().split()))\n  \ncost = [0]*n\ncost[0] = 0\nfor i in range(1, n):\n  if i > 1:\n    cost[i] = min(abs(arr[i]-arr[i-2])+cost[i-2], abs(arr[i]-arr[i-1])+cost[i-1])\n  elif i == 1:\n    cost[i] = minabs(arr[i]-arr[i-1])\n\nprint(cost[-1])",
    "error_obj":"NameError: name 'minabs' is not defined"
  },
  "s760031430":{
    "code_string":"def findmin(arr,n):\n  dp = [0]*n\n  dp[1] = abs(arr[0]-arr[1])\n  for i in range(2,n):\n    dp[i] = min(dp[i-1]+abs(arr[i-1]-arr[i]), dp[i-2]+abs(arr[i-2]-arr[i]))\n  return dp[-1]\n\nn = int(input())\narr = list(map(int,input().split())\nprint(findmin(arr,n))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s005895706":{
    "code_string":"\n\ndef solution(h):\n    n = len(h)\n    for i in range(n):\n        for j in range(i+1,i+3):\n            if j < n:\n                dp[j] = min(dp[j] , dp[i]+abs(h[i]-h[j]) )\n    return dp[n-1]\n\nN = int(input())\nh = list(map(int,input().split()))\nres = solution(h)\nprint(res)\n",
    "error_obj":"NameError: name 'dp' is not defined"
  },
  "s347076433":{
    "code_string":"N = int(input())\nh = list(map(int, input().split(\" \")))\n\ndp = [1000000 for i in range(N+10)]\ndp[1] = 0\n\nfor i in range(1, N-1):\n    dp[i + 1] = min(dp[i + 1], abs(h[i + 1] - h[i]) + dp[i])\n    dp[i + 2] = min(dp[i + 2], abs(h[i + 2] - h[i]) + dp[i])\n\nprint(dp[N])",
    "error_obj":"IndexError: list index out of range"
  },
  "s548817608":{
    "code_string":"import sys\nn = int(input())\na = list(map(int,input().split())\n\ndp = [sys.maxsize]*n\ndp[0] = 0\nfor i in range(n):\n\tfor j in (i+1,i+2):\n         if j < n:\n         \tdp[j] = min(dp[j], dp[i]+abs(dp[i]-dp[j]))\nprint(dp[n-1],end=\"\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s082114602":{
    "code_string":"def sol(lis):\n    if len(lis)<=2:\n        return abs(lis[0]-lis[1])\n    costs = [0,abs(lis[0]-lis[1])]\n    for i in range(2,len(lis)):\n        x = abs(lis[i]-lis[i-1])\n        y = abs(lis[i]-lis[i-2])\n        costs.append(min(x+costs[-1]),min(x+costs[-2]))\n    print(costs)\n    return costs[-1]\ninput()\nlis = list(map(int,input().split(' ')))\nprint(sol(lis))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s077043941":{
    "code_string":"import math\nimport sys\ninput = sys.stdin.readline\nnumber, jump =input().rstrip().split()\nnumber = int(number)\njump = int(jump)\nscaffolding = input().rstrip().split()\nscaffolding = list(map(int, scaffolding))\nres = [math.inf * number]\nres[0] =0 \ntest = [math.inf * number]\ntest[0] = 0\n\nfor i in range(number):\n    for j in range(1,jump+1):\n        if i-j < 0:break\n        cost = abs(scaffolding[i]-scaffolding[i-j])\n        test[j-1] = res[i-j] + cost\n    \n    res[i] = min(test)\n    \n\nprint(res[number-1])\n\n\n",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s845364264":{
    "code_string":"N, K = map(int, input().split())\nh = list(map(int, input().split()))\n \nS = [0] * N\n\nfor i in range(1, N):\n  S[i] = min(S[_] + abs(h[i] - h[_]) for range(max(0, i-K), i))\n\nprint(S[N-1])\n",
    "error_obj":"SyntaxError: cannot assign to function call"
  },
  "s994511645":{
    "code_string":"import sys\n\nimport numba as nb\n\ninput = sys.stdin.readline\nINF = float(\"inf\")\n\n\n@nb.njit\ndef solve(N, K, h):\n    dp = [0] * N\n    for i in range(1, N):\n        min_cost = INF\n        for k in range(1, min(K + 1, i + 1)):\n            cost = dp[i - k] + abs(h[i] - h[i - k])\n            if cost < min_cost:\n                min_cost = cost\n        dp[i] = min_cost\n    return dp[-1]\n\n\ndef main():\n    N, K = map(int, input().split())\n    h = tuple(map(int, input().split()))\n\n    ans = solve(N, K, h)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s595021496":{
    "code_string":"N, K = map(int, input().split())\nH=list(map(int, input().split() for _ in range(N)))\n\nimport numpy as np\ndp=np.full(N+K, 1e+14, dtype=np.int64)\ndp[0]=0\nfor i in range(1, N):\n  dp[i:i+K]=np.minimum(dp[i:i+K], np.abs(H[i-1]-H[i:i+K])+dp[i-1])\n\nprint(dp[N - 1])  # 0-indexed\u306b\u5909\u63db\u3057\u3066\u304a\u304f",
    "error_obj":"SyntaxError: Generator expression must be parenthesized"
  },
  "s875581517":{
    "code_string":"def main():\n    N, K = map(int, input().split())\n    h = list(map(int, input().split()))\n\n    DP = [10**10 for _ in range(N)]\n    DP[0] = 0\n    DP[1] = abs(h[0]-h[1])\n    \n    for i in range(2, N):\n        DP[i] = min([DP[k]+abs(h[i]-h[k]) for k in range(max(0, i-k), i)])    \n    print(DP[N-1])\nmain()",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s025969183":{
    "code_string":"from numba import jit\nimport math\nN, K = map(int, input().split())\nh = list(map(int, input().split()))\n \nS = [0] * N\nS[0] = 0\n \n@jit\ndef nya(S, N):\n    for i in range(1, N):\n        value = math.inf\n        for step in range(1, K + 1):\n            if i - step < 0:\n                break\n            value = min(value, S[i - step] + abs(h[i] - h[i - step]))\n        S[i] = value\n    return S\n\nS = nya(S, N)\nprint(S[N - 1])",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s447933905":{
    "code_string":"import numpy as np\n[N,K]=[int(x) for x in input().split()]\nh=[int(x) for x in input().split()]\n\ndp=[0 for i in range(N)]\n\nfor i in range(1,N):\n  dp[N-1-i]=dp[N-i]+np.abs(h[N-i-1]-h[N-i])\n  for j in range(2,np.min(K+1,i+1)):\n    dp[N-i-1]=np.min(dp[N-i-1+j]+np.abs(h[N-i-1]-h[N-1-i+j]),dp[N-i-1])\nprint(dp[0]) ",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p03161\/Python\/s447933905.py\", line 9, in <module>\n    for j in range(2,np.min(K+1,i+1)):\n  File \"<__array_function__ internals>\", line 5, in amin\n  File \"\/home\/alex\/.local\/lib\/python3.9\/site-packages\/numpy\/core\/fromnumeric.py\", line 2879, in amin\n    return _wrapreduction(a, np.minimum, 'min', axis, None, out,\n  File \"\/home\/alex\/.local\/lib\/python3.9\/site-packages\/numpy\/core\/fromnumeric.py\", line 86, in _wrapreduction\n    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\nnumpy.AxisError: axis 2 is out of bounds for array of dimension 0\n"
  },
  "s179258878":{
    "code_string":"from numba import jit\n@jit\nn,k=map(int,input().split())\nh=list(map(int,input().split()))\ncost=[0]\nfor i in range(1,n):\n  wk=[]\n  for j in range(1,min(k,i)+1):\n    wk.append(cost[i-j]+abs(h[i]-h[i-j]))\n  cost.append(min(wk))\nprint(cost[n-1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s589630355":{
    "code_string":"N, K = map(int, input().split())\nh_list = list(map(int, input().split()))\n\ndp_list = [0]\nfor n in range(1, N):\n  tmp_h = h_list[n]\n  if n < K:\n    lst = [abs(tmp_h - h_list[i]) + dp_list[i] for i in range(n)]\n    else:\n      lst = [abs(tmp_h - h_list[n-k]) + dp_list[n-k] for k in range(1, K + 1)]\n      dp_list.append(min(lst))\n      print(dp_list[-1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s388221594":{
    "code_string":"from numba import njit,jit\n\n@jit\ndef main():\n  # Worst Case\n  #n,k=100000,100\n  #a=[p for p in range(100000)]\n  \n  kl=[p for p in range(1,k+1)]\n  dp=[10**9]*(n)\n  dp[0]=0\n  for i in range(n):\n    for j in kl:\n      ij=i+j\n      if ij < n:\n        m=dp[i]+abs(a[i]-a[ij])\n        if m < dp[ij]:\n          dp[ij]=m\n\n  print(dp[n-1])\n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nmain()",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s860755653":{
    "code_string":"from numba import njit\n@njit #\u51e6\u7406\u306e\u4e26\u5217\u5316\ndef main():\n    n,k = map(int,input().split())\n    h = list(map(int, input().split()))\n\n    # \u7121\u9650\u5927\u306e\u5024\n    INF = 10**10\n\n    # DP \u30c6\u30fc\u30d6\u30eb\n    # DP \u30c6\u30fc\u30d6\u30eb\u5168\u4f53\u3092\u521d\u671f\u5316 (\u6700\u5c0f\u5316\u554f\u984c\u306a\u306e\u3067 INF \u306b\u521d\u671f\u5316)\n    dp = [INF] * n\n\n    # \u521d\u671f\u6761\u4ef6\n    dp[0] = 0\n    dp[1] = abs(h[0] - h[1])\n\n    # \u30eb\u30fc\u30d7\n    for i in range(2,n):\n        # ...\n        # for j in range(1,min(k,i)+1):\n        #     hk = dp[i-j] + abs(h[i-j] - h[i])\n        #     dp[i] = min(hk,dp[i])\n        dp[i] = min(dp[i-j] + abs(h[i-j] - h[i]) for j in range(1,min(k,i)+1))\n\n    # \u89e3\u3092\u5f97\u3066\u51fa\u529b\n    print(dp[n-1])\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s310911877":{
    "code_string":"from numba import njit\n\n\n@njit\ndef main():\n    N, K = map(int, input().split())\n    h = list(map(int, input().split()))\n\n    dp = [10**6] * (N+1)\n    dp[0] = 0\n\n    for i in range(1, N):\n        for j in range(min(i, K)):\n            dp[i] = min(dp[i], dp[i-j-1]+abs(h[i]-h[i-j-1]))\n\n    print(dp[N-1])\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s138675703":{
    "code_string":"import numpy as np\n\ndef main(n,k,a):\n  # Worst Case\n  #n,k=100000,100\n  #a=[p for p in range(100000)]\n  \n  kl=[p for p in range(1,k+1)]\n  dp=[10**9]*(n)\n  dp[0]=0\n  for i in range(n):\n    for j in kl:\n      ij=i+j\n      if ij < n:\n        m=dp[i]+abs(a[i]-a[ij])\n        if m < dp[ij]:\n          dp[ij]=m\n  print(dp[n-1])\n\ndef cc_export():\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('main','(i4,i4,i4[:])')(main)\n    cc.compile()\n\nif __name__ == '__main__':\n    import sys\n    if sys.argv[-1] == 'ONLINE_JUDGE':\n    #if True:\n      cc_export()\n      exit(0)\n    from my_module import main\n    n,k=map(int,input().split())\n    a=np.array(list(map(int,input().split())))    \n    main(n,k,a)\n    \n    \n\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s813407114":{
    "code_string":"import numpy as np\n\nN, K = map(dtype=np.int64, input().split())\nhs = np.array(list(map(dtype=np.int64, input().split())))\n\ni = 0\ntotal_cost = 0\n \na = np.zeros(N, dtype=np.int64)\na[0] = 0\na[1] = abs(hs[1] - hs[0])\n\nfor i in range(2, N):\n    bmin = float('inf')\n    for j in range(max(i-K,0),i):\n        bmin = np.min(bmin, a[j] + np.abs(hs[i] - hs[j]))    \n    a[i] = bmin\nprint(a[-1])\n",
    "error_obj":"SyntaxError: positional argument follows keyword argument"
  },
  "s518094892":{
    "code_string":"n,k=map(int,input().split())\nl=list(map(int,input().split()))\nfinal=[0]*n\nif k>=n:\n  print(abs(l[n-1]-l[0]))\nelse:   \n   for i in range(1,k+1):\n      final[i]=abs(l[i]-l[0])\n  \n   for i in range(k+1,n):\n\n      li=[abs(h[i]-h[ik])+dp[ik] for ik in range(i-1,i-k-1,-1) ]\n      final[i]=min(li)\n   print(final[-1])\n",
    "error_obj":"NameError: name 'h' is not defined"
  },
  "s886671603":{
    "code_string":"import math\nfrom numba import jit\nn,k=map(int,input().split())\nh=list(map(int,input().split()))\ns=[0]*n\n@jit\nfor i in range(1,n):\n    total=math.inf\n    for j in range(1,k+1):\n        if i-j<0:\n            break\n        total=min(total,abs(h[i]-h[i-j])+s[i-j])\n    s[i]=(total)\nprint(s[-1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s272056910":{
    "code_string":"n = int(input()\narr = [[int(i) for i in list(input().split())] for j in range(n)]\nfor i in range(1,n):\n\tarr[i][0] += max(arr[i-1][1], arr[i-1][2])\n\tarr[i][2] += max(arr[i-1][1], arr[i-1][0])\n\tarr[i][1] += max(arr[i-1][0], arr[i-1][2])\nprint(max(arr[n-1]))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s580063153":{
    "code_string":"N=int(input())\nsys.setrecursionlimit(1000000000)\n\nABC=[]\nfor _ in range(N):\n    ABC.append(list(map(int,input().split())))\nfrom functools import lru_cache\n@lru_cache(maxsize=None)\ndef dynam(n):\n    if n>1:\n        a=max(dynam(n-1)[1]+ABC[n-1][0],\n              dynam(n-1)[2]+ABC[n-1][0])\n        b=max(dynam(n-1)[0]+ABC[n-1][1],\n              dynam(n-1)[2]+ABC[n-1][1])\n        c=max(dynam(n-1)[0]+ABC[n-1][2],\n              dynam(n-1)[1]+ABC[n-1][2])\n        return (a,b,c)\n    return tuple(ABC[0])\nprint(max(dynam(N)))",
    "error_obj":"NameError: name 'sys' is not defined"
  },
  "s835437951":{
    "code_string":"# C - Vacation AC\nimport sys\nsys.setrecursionlimit(10**6)\nN = int(input())\nA = []\nfor _ in range(N):\n    a,b,c = map(int,input().split())\n    A.append((a,b,c))\n\n# \u7121\u9650\u5927\u306e\u5024\nINF = 10**10\n\n# DP \u30c6\u30fc\u30d6\u30eb\ndp = [[0]*3 for _ in range(100010)]\n\n# DP \u30c6\u30fc\u30d6\u30eb\u5168\u4f53\u3092\u521d\u671f\u5316\nfor i in range(5):\n    for j in range(3):\n        dp[i][j] = 0# \u6700\u5927\u5316\u554f\u984c\n\ndef rec(v):\n    # v-1 \u65e5\u76ee\u306e\u6d3b\u52d5 (\u672c\u5f53\u306f v)\n    for w in range(100010):\n        print(v,w)\n        if dp[v][w] > 0:\n       \n            return dp[v]\n        if v == 0:\n            dp[v][w] = 0\n         \n            return dp[v]\n        res = 0\n        # v \u65e5\u76ee\u306e\u6d3b\u52d5 (\u672c\u5f53\u306f v-1)\n        for k in range(3):\n            if w == k:\n               \n                continue\n            res = max(res,rec(v-1)[k] + A[v-1][w]) # v-1\u65e5\u306e\u6d3b\u52d5\u306e\u3068\u3053\u308d\u306b\u8a18\u9332\u3057\u3066\u3044\u308b\uff1f\n            dp[v][w] = res # \u3053\u3053\u3067 k\u3092\u8a18\u9332\u3057\u3066\u3044\u308b\u306e\u306b w \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u305f\n            print(v,w,k,dp[v])\n    return dp[v]\n\nrec(N)\nans = max(dp[N])\nprint(ans)\n# w \u304c\u305a\u3063\u3068 0\n# w \u3068 k \u306e\u6271\u3044\u304c\u9006",
    "error_obj":"IndexError: list index out of range"
  },
  "s702942888":{
    "code_string":"n=int(input())\nabc = [list(map(int, input().split())) for i in range(n)]\n#[[10,40,70],[20,50,80],[30,60,90]]\nABC=[[0,0,0]]\n#A = [0]\n#B = [0]\n#C = [0]\nfor i in range(n):\n  a = abc[i][0] + max(ABC[-1][1], ABC[-1][2])#10+max(0,0),20+max(40,70)=90,30+max(120,120)=150\n  b = abc[i][1] + max(ABC[-1][0], ABC[-1][2])#40+max(0,0),50+max(10,70)=120,60+max(90,120)=180\n  c = abc[i][2] + max(ABC[-1][0], ABC[-1][1])#70+mac(0,0),80+max(10,40)=120,90+max(90,120)=210\n  ABC += [[a,b,c]]\n  #A += [a]#0,10,90,150\n  #B += [b]#0,40,120,180\n  #C += [c]#0,70,120,210\nprint(max(ABC[-1])",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s918719800":{
    "code_string":"N = int(input())\nabc_list = [list(map(int, input().split())) for _ in range(N)]\n\nhappy_list = [[0, 0, 0]] # n\u65e5\u76ee\u306ba|b|c\u3092\u9078\u3093\u3060\u3068\u304d\u306e\u5e78\u798f\u306e\u305d\u3053\u307e\u3067\u306e\u6700\u5927\u5024\n# before_act = -1 # a: 0, b: 1, c: 2\nfor n in range(N):\n    before_happy_a, before_happy_b, before_happy_c = happy_list[-1]\n    a, b, c = abc_list[n]\n    tmp_happy_a = max(before_happy_b, before_happy_c) + a\n    tmp_happy_b = max(before_happy_c, before_happy_a) + b\n    tmp_happy_c = max(before_happy_a, before_happy_b) + c\n    happy_list.append([tmp_happy_a, tmp_happy_b, tmp_happy_c])\n\nprint(max(happy_list[-1]))s",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s538602353":{
    "code_string":"#\u554f\u984cC\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\n\nN = list(map(int, input().split()))\nh = [np.array(list(map(int, input().split()))) for _ in range(N)]\n\nh = h.reshape(7,3)\n\ndp = np.array([[0] * h.shape[1]] * h.shape[0])\ndp[0,:] = h[0,:]\nfor i in range(1,N):\n    dp[i,0] = max(dp[i-1,1],dp[i-1,2])+h[i,0]\n    dp[i,1] = max(dp[i-1,0],dp[i-1,2])+h[i,1]\n    dp[i,2] = max(dp[i-1,0],dp[i-1,1])+h[i,2]\n\nprint(max(dp[-1,]))",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s577812580":{
    "code_string":"n=int(input())\nINF=float('inf')\n\nh=[]\nfor _ in range(n):\n  a,b,c=map(int,input().split())\n  h.append([a,b,c])\n\ndp=[[0 for i in range(3)]for j in range(n+1)]\nfor i in range(1,n+1):\n  dp[i][0]=max(dp[i-1][1]+h[i-1][0],dp[i-1][2]+h[i-1[0]])\n  dp[i][1]=max(dp[i-1][0]+h[i-1][1],dp[i-1][2]+h[i-1[1]])\n  dp[i][2]=max(dp[i-1][0]+h[i-1][2],dp[i-1][1]+h[i-1[2]])\n\nprint(max(dp[n][0],dp[n][1],dp[n][2]))",
    "error_obj":"SyntaxWarning: 'int' object is not subscriptable; perhaps you missed a comma?"
  },
  "s451224996":{
    "code_string":"def main():\n  n=int(input())\n  dp=[[0,0,0]]\n  for i in range(1,n+1):\n    a,b,c=map(int,input().split())\n    dp.append([\n      dp[i-1][0]+max(b,c),\n      dp[i-1][1]+max(a,c),\n      dp[i-1][2]+max(a,b)\n    ]\n  print(max(dp[n]))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s407010305":{
    "code_string":"# https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_c\nN = int(input())\nMax_List=[]\nN_List=[i for i in range(3)]\nfor i in range(N):\n    Current_Max_List = []\n    Current_List=list(map(int,input().split())) \n    if i == 0:\n        Max_List.append(Current_List)\n    else:\n        for j in range(3):\n            Index_List=np.array(Max_List[i-1])\n            ind = np.ones(3, dtype=bool)\n            ind[j] = False\n            Current_Max_List.append(max(Index_List[ind])+Current_List[j])\n            \n        Max_List.append(Current_Max_List)\n \nprint(max(Max_List[-1]))",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s005720456":{
    "code_string":"# https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_c\nN = int(input())\nMax_List = [[0] * 3 for i in range(N)]\nfor i in range(N):\n    Current_List = list(map(int,input().split()))  \n    if i == 0:\n        Max_List[i] = Current_List\n    else:\n        Search_List = Max_List[i-1]\n        for j in range(3):\n            Current_Search_List = Search_List[1:3]\n            Max_List[i][j] = max(Current_Search_List) + Current_List[j]\n            Search_List.append(Search_List[0])\n            del Search_List[0]\n        \n        Max_List[i] = Current_Max_List\n\n        \nprint(max(Max_List[-1]))",
    "error_obj":"NameError: name 'Current_Max_List' is not defined"
  },
  "s528098823":{
    "code_string":"N = int(input())\narr = []*N\nfor _ in range(N):\n\tarr.append(list(map(int,input().split())))\n\ndp = [0,0,0]\nfor a in arr:\n\tdp = [a[0]+max(dp[1],dp[2]),a[1]+max(dp[0],dp[2]),a[2]+max(dp[0],dp[1])]\nreturn max(dp)",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s289627107":{
    "code_string":"n,W=list(map(int,input().split()))\n\ndp=np.zeros([n+1,W+1],dtype=int)\n\nfor i in range(1,n+1):\n    w,v=list(map(int,input().split()))\n    dp[i][:w]=dp[i-1][:w]\n    dp[i][w:]=np.maximum(dp[i-1][:W-w+1]+v,dp[i-1][w:])\nprint(np.max(dp))",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s078850548":{
    "code_string":"[N,W]=[int(x) for x in input().split()]\nwv=[[0,0]]\nfor i in range(N):\n  wv.append([int(x) for x in input().split()]) \ndp=np.zeros([N+1,W+i],dtype=int)\nfor i in range(1,N+1):\n  dp[i][:w]=dp[i-1][:w]\n  dp[i][w:]=max(dp[i-1][w:],dp[i-1][w-wv[i][0]:]+wv[i][1])\n\nprint(dp[N][W])\n  ",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s650136170":{
    "code_string":"import numpy as np\nN, W = map(int, input().split())\n\ndp=np.zeros((N+1, W+1), dtype=np.int64)\n\nfor i in range(1,N+1):\n    w, v =list(map(int, input().split()))\n     dp[i]=dp[i-1]\n     dp[i][w:]=np.maximum(dp[i-1][:W-w+1]+v, dp[i-1][w:])\nprint(np.max(dp))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s499598498":{
    "code_string":"6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s425786817":{
    "code_string":"import numpy as np\n\nN, W = map(int, input().split())\nw = np.empty(N)\nv = np.empty(N)\nfor i in range(N):\n\tw[i], v[i] = map(int, input().split())\n\ndp = np.zeros(W + 1, dtype = np.int64)\ndp[w[0]] = v[0]\n\nfor i in range(1, N):\n\tdp[w[i]:] = np.maximum(dp[w[i]:], dp[:W - w[i] + 1] + v[i])\n\nprint(dp.max())",
    "error_obj":"IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
  },
  "s670453925":{
    "code_string":"import numpy as np\n\nN, W = map(int, input().split())\nknap = []\nfor i in range(N):\n    knap.append(tuple(map(int, input().split())))\n\ns_val = sum([v for w, v in knap])\n    \nINF = float(\"inf\")\ndp = np.full(s_val+1, INF)\n\nfor i, (w, v) in enumerate(knap):\n    dp[v:] = np.minimum(dp[v:], dp[:-v]+w)\n    \nprint(max([i for i in range(s_val+1) if dp[i] <= W]))",
    "error_obj":"ValueError: max() arg is an empty sequence"
  },
  "s848856677":{
    "code_string":"from sys import stdin, stdout\nimport numba as nb \n\n@nb.njit()\ndef solve(n,w,weights, values):\n\tdp = [[0 for _ in range(w+1)] for k in range(n+1)]\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,w+1):\n\t\t\tif weights[i] <= j:\n\t\t\t\tdp[i][j] = max(dp[i-1][j],\n\t\t\t   \tdp[i-1][j-weights[i]] + values[i])\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i-1][j]\n\treturn dp[n][w]\n\ndef main():\n\tn, w = map(int, stdin.readline().split())\n\tvalues = []\n\tweights = []\n\n\tfor _ in range(n):\n\t\tv,a = map(int, stdin.readline().split())\n\t\tvalues.append(a)\n\t\tweights.append(v)\n\n\tvalues = [0] + values\n\tweights = [0] + weights\n\tprint(solve(n,w,weights,values))\n\nif __name__ == \"__main__\":\n\tmain()",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s291553657":{
    "code_string":"#!\/usr\/bin\/env python3\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\nimport sys\nimport numpy as np\nimport numba\n\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.buffer.readline\nINF = 10 ** 9 + 1  # sys.maxsize # float(\"inf\")\n\n\ndef debug(*x):\n    print(*x)\n\n\n@numba.njit\ndef get_longest(start, values, next, head, longest):\n    ret = longest[start]\n    if ret != -1:\n        return ret\n\n    ret = 0\n    p = head[start]\n    while p:\n        v = values[p]\n        x = get_longest(v, values, next, head, longest) + 1\n        if x > ret:\n            ret = x\n        p = next[p]\n\n    longest[start] = ret\n    return ret\n\n\n@numba.njit\ndef solve(N, M, data):\n    longest = np.repeat(-1, N + 1)\n\n    values = np.zeros(M + 1, np.int16)\n    next = np.zeros(M + 1, np.int16)\n    head = np.zeros(N + 1, np.int16)\n    p = 1\n    for i in range(0, 2 * M, 2):\n        v1 = data[i]\n        v2 = data[i + 1]\n        values[p] = v2\n        next[p] = head[v1]\n        head[v1] = p\n        p += 1\n\n    for i in range(N + 1):\n        if head[i] == 0:\n            longest[i] = 0\n\n    ret = 0\n    for v in range(N + 1):\n        x = get_longest(v, values, next, head, longest)\n        if x > ret:\n            ret = x\n    return ret\n\n\ndef main():\n    N, M = map(int, input().split())\n    data = np.int16(read().split())\n    print(solve(N, M, data))\n\n\nT1 = \"\"\"\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n\"\"\"\n\nT2 = \"\"\"\n6 3\n2 3\n4 5\n5 6\n\"\"\"\n\nT3 = \"\"\"\n5 8\n5 3\n2 3\n2 4\n5 2\n5 1\n1 4\n4 3\n1 3\n\"\"\"\n\n\ndef _test():\n    \"\"\"\n    # >>> as_input(T1)\n    # >>> main()\n    # 3\n\n    # >>> as_input(T2)\n    # >>> main()\n    # 2\n\n    >>> as_input(T3)\n    >>> main()\n    3\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\n\ndef as_input(s):\n    \"use in test, use given string as input file\"\n    import io\n    global read, input\n    f = io.StringIO(s.strip())\n    input = f.readline\n    read = f.read\n\n\nUSE_NUMBA = False\nif (USE_NUMBA and sys.argv[-1] == 'ONLINE_JUDGE') or sys.argv[-1] == '-c':\n    print(\"compiling\")\n    from numba.pycc import CC\n    import numba\n    cc = CC('my_module')\n    cc.export(\n        'solve',\n        numba.i8(\n            numba.i8, numba.i8,\n            numba.typeof({1: [1]})))(solve)\n    cc.compile()\n    exit()\nelse:\n    input = sys.stdin.buffer.readline\n    read = sys.stdin.buffer.read\n\n    if (USE_NUMBA and sys.argv[-1] != '-p') or sys.argv[-1] == \"--numba\":\n        # -p: pure python mode\n        # if not -p, import compiled module\n        from my_module import solve  # pylint: disable=all\n    elif sys.argv[-1] == \"-t\":\n        _test()\n        sys.exit()\n    elif sys.argv[-1] != '-p' and len(sys.argv) == 2:\n        # input given as file\n        input_as_file = open(sys.argv[1])\n        input = input_as_file.buffer.readline\n        read = input_as_file.buffer.read\n\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s643873570":{
    "code_string":"# https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_g\nimport sys\nsys.setrecursionlimit(10**7)\n\n\nclass DAG:\n    def __init__(self, n):\n        # n: num of vertices\n        self.n = n\n        self.adj = [[] for _ in range(n)]\n\n    def addEdge(self, parent, child):\n        self.adj[parent].append(child)\n\n    def dfs(self, node):\n        ans = 0\n        for child in self.adj[node]:\n            ans = max(ans, 1 + self.dfs(child))\n        return ans\n\n    def dfsWithMemo(self, node, memo, visited):\n        if(visited[node]):\n            return memo[node]\n        visited[node] = True\n        for child in self.adj[node]:\n            memo[node] = max(\n                memo[node], 1 + self.dfsWithMemo(child, memo, visited))\n        return memo[node]\n\n    def dfsWithDp(self, node, dp, visited):\n        if(visited[node]):\n            return dp[node]\n        visited[node] = True\n        for child in self.adj[node]:\n            if not visited[child]:\n                self.dfsWithDp(child, dp, visited)\n            dp[node] = max(dp[node], 1 + self.dfsWithDp(child, dp, visited))\n        return dp[node]\n\n    # o(n^2) solution\n    def findLongestPathNaive(self):\n        ans = 0\n        for i in range(self.n):\n            ans = max(ans, self.dfs(i))\n        return ans\n\n    # o(n) solution\n    def findLongestPathWithMemo(self):\n        visited = [False] * self.n\n        memo = [0] * self.n\n        ans = 0\n        for i in range(self.n):\n            ans = max(ans, self.dfsWithMemo(i, memo, visited))\n        return ans\n\n    # O(n) solution\n    def findLongestPathWithDp(self):\n        visited = [False] * self.n\n        dp = [0] * self.n  # dp[i] := longest path starting from vertex i\n        ans = 0\n        for i in range(self.n):\n            ans = max(ans, self.dfsWithDp(i, dp, visited))\n        return ans\n\n\ndef main():\n    N, M = map(int, input().split())\n    dag = DAG(N)\n    for _ in range(M):\n        parent, child = map(lambda i: int(i) - 1, input().split())\n        dag.addEdge(parent, child)\n    # print(dag.findLongestPathNaive())\n    #  print(dag.findLongestPathWithMemo())\n     print(dag.findLongestPathWithDp())\n\n\nmain()\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s298276129":{
    "code_string":"#!\/usr\/bin\/env python3\n\"\"\"\nSimple Version\nPython TLE https:\/\/atcoder.jp\/contests\/dp\/submissions\/14906600\nPyPy TLE https:\/\/atcoder.jp\/contests\/dp\/submissions\/14906630\n\"\"\"\nfrom collections import defaultdict\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef solve(N, M, edges):\n    longest = {}\n\n    stack = [v for v in edges]\n\n    while stack:\n        v = stack.pop()\n        if v > 0:\n            if v in longest:\n                continue\n            next_edges = edges.get(v)\n            stack.append(-v)\n            if next_edges:\n                stack.extend(next_edges)\n        else:\n            next_edges = edges.get(-v)\n            if not next_edges:\n                ret = 0\n            else:\n                ret = max(longest[x] for x in next_edges) + 1\n            longest[-v] = ret\n\n    return max(longest[v] for v in edges)\n\n\ndef main():\n    N, M = map(int, input().split())\n    edges = defaultdict(set)\n    for i in range(M):\n        v1, v2 = map(int, input().split())\n        edges[v1].add(v2)\n\n    print(solve(N, M, edges))\n\n\nT1 = \"\"\"\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n\"\"\"\n\nT2 = \"\"\"\n6 3\n2 3\n4 5\n5 6\n\"\"\"\n\nT3 = \"\"\"\n5 8\n5 3\n2 3\n2 4\n5 2\n5 1\n1 4\n4 3\n1 3\n\"\"\"\n\n\ndef _test():\n    \"\"\"\n    # >>> as_input(T1)\n    # >>> main()\n    # 3\n\n    # >>> as_input(T2)\n    # >>> main()\n    # 2\n\n    >>> as_input(T3)\n    >>> main()\n    3\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\n\ndef as_input(s):\n    \"use in test, use given string as input file\"\n    import io\n    global read, input\n    f = io.StringIO(s.strip())\n    input = f.readline\n    read = f.read\n\n\nUSE_NUMBA = False\nif (USE_NUMBA and sys.argv[-1] == 'ONLINE_JUDGE') or sys.argv[-1] == '-c':\n    print(\"compiling\")\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('solve', solve.__doc__.strip().split()[0])(solve)\n    cc.compile()\n    exit()\nelse:\n    input = sys.stdin.buffer.readline\n    read = sys.stdin.buffer.read\n\n    if (USE_NUMBA and sys.argv[-1] != '-p') or sys.argv[-1] == \"--numba\":\n        # -p: pure python mode\n        # if not -p, import compiled module\n        from my_module import solve  # pylint: disable=all\n    elif sys.argv[-1] == \"-t\":\n        _test()\n        sys.exit()\n    elif sys.argv[-1] != '-p' and len(sys.argv) == 2:\n        # input given as file\n        input_as_file = open(sys.argv[1])\n        input = input_as_file.buffer.readline\n        read = input_as_file.buffer.read\n\n    main()\nT1 = \"\"\"\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n\"\"\"\n\nT2 = \"\"\"\n6 3\n2 3\n4 5\n5 6\n\"\"\"\n\nT3 = \"\"\"\n5 8\n5 3\n2 3\n2 4\n5 2\n5 1\n1 4\n4 3\n1 3\n\"\"\"\n\n\ndef _test():\n    \"\"\"\n    # >>> as_input(T1)\n    # >>> main()\n    # 3\n\n    # >>> as_input(T2)\n    # >>> main()\n    # 2\n\n    >>> as_input(T3)\n    >>> main()\n    3\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\n\ndef as_input(s):\n    \"use in test, use given string as input file\"\n    import io\n    global read, input\n    f = io.StringIO(s.strip())\n    input = f.readline\n    read = f.read\n\n\nUSE_NUMBA = False\nif (USE_NUMBA and sys.argv[-1] == 'ONLINE_JUDGE') or sys.argv[-1] == '-c':\n    print(\"compiling\")\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('solve', solve.__doc__.strip().split()[0])(solve)\n    cc.compile()\n    exit()\nelse:\n    input = sys.stdin.buffer.readline\n    read = sys.stdin.buffer.read\n\n    if (USE_NUMBA and sys.argv[-1] != '-p') or sys.argv[-1] == \"--numba\":\n        # -p: pure python mode\n        # if not -p, import compiled module\n        from my_module import solve  # pylint: disable=all\n    elif sys.argv[-1] == \"-t\":\n        _test()\n        sys.exit()\n    elif sys.argv[-1] != '-p' and len(sys.argv) == 2:\n        # input given as file\n        input_as_file = open(sys.argv[1])\n        input = input_as_file.buffer.readline\n        read = input_as_file.buffer.read\n\n    main()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 0)"
  },
  "s821613145":{
    "code_string":"#!\/usr\/bin\/env python3\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\nimport sys\nimport numpy as np\n\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.buffer.readline\nINF = 10 ** 9 + 1  # sys.maxsize # float(\"inf\")\n\n\ndef debug(*x):\n    print(*x)\n\n\n@numba.njit(cache=True)\ndef get_longest(start, values, next, head, longest):\n    ret = longest[start]\n    if ret != -1:\n        return ret\n\n    ret = 0\n    p = head[start]\n    while p:\n        v = values[p]\n        x = get_longest(v, values, next, head, longest) + 1\n        if x > ret:\n            ret = x\n        p = next[p]\n\n    longest[start] = ret\n    return ret\n\n\n@numba.njit(cache=True)\ndef solve(N, M, data):\n    longest = np.repeat(-1, N + 1)\n\n    values = np.zeros(M + 1, np.int32)\n    next = np.zeros(M + 1, np.int32)\n    head = np.zeros(N + 1, np.int32)\n    p = 1\n    for i in range(0, 2 * M, 2):\n        v1 = data[i]\n        v2 = data[i + 1]\n        values[p] = v2\n        next[p] = head[v1]\n        head[v1] = p\n        p += 1\n\n    for i in range(N + 1):\n        if head[i] == 0:\n            longest[i] = 0\n\n    ret = 0\n    for v in range(N + 1):\n        x = get_longest(v, values, next, head, longest)\n        if x > ret:\n            ret = x\n    return ret\n\n\ndef main():\n    N, M = map(int, input().split())\n    data = np.int32(read().split())\n    print(solve(N, M, data))\n\n\nT1 = \"\"\"\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n\"\"\"\n\nT2 = \"\"\"\n6 3\n2 3\n4 5\n5 6\n\"\"\"\n\nT3 = \"\"\"\n5 8\n5 3\n2 3\n2 4\n5 2\n5 1\n1 4\n4 3\n1 3\n\"\"\"\n\n\ndef _test():\n    \"\"\"\n    # >>> as_input(T1)\n    # >>> main()\n    # 3\n\n    # >>> as_input(T2)\n    # >>> main()\n    # 2\n\n    >>> as_input(T3)\n    >>> main()\n    3\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\n\ndef as_input(s):\n    \"use in test, use given string as input file\"\n    import io\n    global read, input\n    f = io.StringIO(s.strip())\n    input = f.readline\n    read = f.read\n\n\nUSE_NUMBA = False\nif (USE_NUMBA and sys.argv[-1] == 'ONLINE_JUDGE') or sys.argv[-1] == '-c':\n    print(\"compiling\")\n    # from numba.pycc import CC\n    # cc = CC('my_module')\n    # cc.export(\n    #     'solve',\n    #     \"i4(i4,i4,i4[:])\")(solve)\n    # cc.export(\n    #     'get_longest',\n    #     \"i4(i4,i4[:],i4[:],i4[:],i4[:])\")(get_longest)\n    # cc.compile()\n    import numba\n    numba.njit(cache=True)(get_longest)\n    numba.njit(cache=True)(solve)\n    exit()\nelse:\n    input = sys.stdin.buffer.readline\n    read = sys.stdin.buffer.read\n\n    if (USE_NUMBA and sys.argv[-1] != '-p') or sys.argv[-1] == \"--numba\":\n        # -p: pure python mode\n        # if not -p, import compiled module\n        # from my_module import solve  # pylint: disable=all\n        import\n\n    elif sys.argv[-1] == \"-t\":\n        _test()\n        sys.exit()\n    elif sys.argv[-1] != '-p' and len(sys.argv) == 2:\n        # input given as file\n        input_as_file = open(sys.argv[1])\n        input = input_as_file.buffer.readline\n        read = input_as_file.buffer.read\n\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s203926967":{
    "code_string":"v=pow(10,9)+7\narr=[]\ninp = list(map(int,input().split()))\nrow=inp[0]\ncol=in[1]\nfor i in range(row):\n  s=input()\n  arr.append(s)\nans=[[0 for i in range(col)]for j in range(row)]\nfor i in range(col):\n  if arr[0][i]=='#':\n    break\n  else:\n    ans[0][i]=1\nfor i in range(row):\n  if arr[i][0]=='#':\n    break\n  else:\n    ans[i][0]=1\nfor i in range(1,row):\n  for j in range(1,col):\n    if arr[i][j]=='#':\n      continue\n    else:\n      arr[i][j]=(arr[i-1][j]+arr[i][j-1])%v\nprint (arr[-1][-1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s323743590":{
    "code_string":"import sys\ninput=sys.stdin.readline\n\ndef grid(y,x,mp):\n    mod=10**9+7\n    dp=[[0]*y for _ in range(x)]\n    dp[0][0]=1\n    for h in range(y):\n        for w in range(x):\n            if mp[h][w]=='.':\n                if h>=1:\n                    dp[h][w]+=(dp[h-1][w]%mod)\n                if w>=1:\n                    dp[h][w]+=(dp[h][w-1]%mod)\n    return dp[y-1][x-1]%mod\n\n\nH,W=map(int,input().split())\nmp=[]\nfor _ in range(H):\n    mp.append(list(input()))\nprint(grid(H,W,mp))\n\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s601036211":{
    "code_string":"n , m = map(int , input().split())\ndp = []\nfor i in range(n + 1):\n    dp.append([])\n    for j in range(m + 1):\n        dp[i].append(0)\narr = []\nfor i in range(n):\n    arr.append(input())\ndp[1][1] = 1\nfor i in range(1,n + 1):\n    for j in range(1,m + 1):\n        if arr[i - 1][j - 1] == '#' or (i == 1 and j == 1):\n            continue\n        dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\nprint(dp[n][m] % 1000000007",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s700892035":{
    "code_string":"import sys\nreadline = sys.stdin.readline\n#import math\n#import numpy as np\nN = int(input())\n#= input()\n#= map(int, input().split())\np = list(map(float, readline().split()))\n#= [input(), input()]\n#= [list(map(int, input().split())) for _ in range(N)]\n#= {i:[] for i in range(N)}\n\ndp = [[0.0] * (N + 1) for _ in range(N + 1)]\n\ndp[0][0] = 1\n\nfor i, p in enumerate(p, 1):\n    pp = 1 - p\n    dpij = dp[i][j]\n    dpi = dp[i - 1]\n    for j in range(i + 1):\n        if j == 0:\n            dpij = dpi[j] * pp\n        elif j == i:\n            dpij = dpi[j - 1] * p\n        else:\n            dpij = dpi[j - 1] * p + dpi[j] * pp\n\nres = 0.0\nn = N \/\/ 2 + 1\n\nfor cnt in dp[-1][n:]:\n    res += cnt\n\nprint(res)",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s731079468":{
    "code_string":"import numpy as np\nfrom numba import njit\n\n\n@njit('(f8[:,:,:],i4,i4,i4,i4,)', cache=True)\ndef solve(dp, N, n1, n2, n3):\n\n    if dp[n1][n2][n3] >= 0.0:\n        return dp[n1][n2][n3]\n    if n1 == n2 == n3 == 0:\n        return 0.0\n\n    cnt = n1 + n2 + n3\n    ret = 0\n    if n3 >= 1:\n        ret += solve(dp, N, n1, n2 + 1, n3 - 1) * n3\n    if n2 >= 1:\n        ret += solve(dp, N, n1 + 1, n2 - 1, n3) * n2\n    if n1 >= 1:\n        ret += solve(dp, N, n1 - 1, n2, n3) * n1\n\n    ret = (ret + N) \/ cnt\n    dp[n1][n2][n3] = ret\n    return ret\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    dp = np.full((N + 1, N + 1, N + 1), -1, dtype=np.float64)\n\n    a1, a2, a3 = 0, 0, 0\n    for i in range(N):\n        if A[i] == 1:\n            a1 += 1\n        elif A[i] == 2:\n            a2 += 1\n        elif A[i] == 3:\n            a3 += 1\n\n    print(solve(dp, N, a1, a2, a3))\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s432225598":{
    "code_string":"import sys\nimport numpy as np\nfrom numba import njit\nsys.setrecursionlimit(10**7)\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nin_n = lambda: int(readline())\nin_nn = lambda: map(int, readline().split())\nin_s = lambda: readline().rstrip().decode('utf-8')\nin_nl = lambda: list(map(int, readline().split()))\nin_nl2 = lambda H: [in_nl() for _ in range(H)]\nin_map = lambda: [s == ord('.') for s in readline() if s != ord('\\n')]\nin_map2 = lambda H: [in_map() for _ in range(H)]\nin_all = lambda: map(int, read().split())\n\n\ndef main():\n\n    N = in_n()\n    A = in_nl()\n\n    n1 = A.count(1)\n    n2 = A.count(2)\n    n3 = A.count(3)\n\n    dp = np.full((N + 1, N + 1, N + 1), -1, dtype=np.float64)\n    dp[0][0][0] = 0\n\n    print(solve(N, dp, n1, n2, n3))\n\n\n@njit('(i4,f8[:,:,:],i4,i4,i4,)', cache=True)\ndef solve(N, dp, n1, n2, n3):\n\n    if dp[n1][n2][n3] != -1:\n        return dp[n1][n2][n3]\n\n    cnt = n1 + n2 + n3\n    ret = 0\n    if n3 >= 1:\n        ret += solve(N, dp, n1, n2 + 1, n3 - 1) * n3 \/ cnt\n    if n2 >= 1:\n        ret += solve(N, dp, n1 + 1, n2 - 1, n3) * n2 \/ cnt\n    if n1 >= 1:\n        ret += solve(N, dp, n1 - 1, n2, n3) * n1 \/ cnt\n\n    dp[n1][n2][n3] = ret + (N \/ cnt)\n    return ret + (N \/ cnt)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s233975527":{
    "code_string":"n,k = map(int,input().split())\na = []\nfor i in range(n):\n  a.append(int(input()))\n\ndp = [False]*(k+1)\ndp[0] = 0\n\nfor i in range(1,k+1):\n  for j in range(n):\n    if i-a[j] >= 0 and dp[i-a[j]] == 0:\n      dp[i] = 1\n      break\n    #dp[i] = 0\n\nif dp[k] == 1:\n  print(\"First\")\nelse:\n  print(\"Second\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 3'"
  },
  "s429350869":{
    "code_string":"N,K =map(int,input().split())\nList = list(map(int,input().split()))\nDP = [False]*(2*K+1)\nfor i in range(K):\n  for item in List:\n    if DP[i]==False:\n      DP[i+item] = True\nif DP[k]==True:\n  print('First')\nelse:\n  print('Second')",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s581225663":{
    "code_string":"# https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_l\n\n'''\ndp[i,j] ... deque\u306b[i,j]\u304c\u6b8b\u3063\u3066\u3044\u308b\u3068\u304d\u306b\u884c\u52d5\u3059\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30b9\u30b3\u30a2\u306e\u6700\u5927\ndp[i,j] = max(a[i-1]-dp[i-1,j], a[j+1]-dp[i,j+1]) #\u3053\u308c\u3058\u3083greedy\u3068\u540c\u3058\u3058\u3083\u3093\n\ndp[i,j] ... deque\u306b[i,j)\u304c\u6b8b\u3063\u3066\u3044\u308b\u3068\u304d\u306b\u305d\u306e\u72b6\u614b\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u9054\u6210\u3067\u304d\u308b\u30b9\u30b3\u30a2\u306e\u6700\u5927 (\u533a\u9593\u3092\u4f38\u3070\u3057\u3066\u3044\u304f\u611f\u3058)\n\n\u521d\u671f\u5024 dp[i,i]==0\n\ndp[i,j]=max(a[i]-dp[i+1,j], a[j-1]-dp[i,j-1])\n'''\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline  # \u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\nimport numpy as np\nfrom functools import partial\narray = partial(np.array, dtype=np.int64)\nzeros = partial(np.zeros, dtype=np.int64)\nfull = partial(np.full, dtype=np.int64)\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return np.fromstring(readline(), sep=' ', dtype=np.int64)\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\n\nN = a_int()\nA = ints()\n\n\nfrom numba import njit\n\n\n@njit('(i8,i8[:])', cache=True)\ndef solve(N, A, dp):\n    dp = np.zeros((N + 1, N + 1), dtype=np.int64)\n    for i in range(N - 1, -1, -1):\n        for j in range(i + 1, N + 1):\n            dp[i, j] = max(A[i] - dp[i + 1, j], A[j - 1] - dp[i, j - 1])\n    print(dp[0, N])\n    # print(*dp, sep='\\n')\n\n\nsolve(N, A)\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s478383392":{
    "code_string":"import numpy as np\nfrom numba import njit\n\nN = int(input())\nscores = np.array(list(map(int, input().split())), dtype='int32')\n\n@njit('i8(i4[:],i4,i4)', cache=True)\ndef get_max_score(scores, i, j):\n    if i == j:\n        return scores[i]\n    return max(scores[i] - get_max_score(scores, i+1, j), scores[j] - get_max_score(scores, i, j-1))\n\nprint(get_max_score(scores, 0, len(scores)-1))\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s884436578":{
    "code_string":"import numpy as np\nfrom numba import njit\n\nN,K=map(int,input().split())\na=np.array([int(i) for i in input().split()],dtype=np.int64)\n\ndp=np.full((N+1,K+1),0,dtype=np.int64)\nc=np.full(K+2,0,dtype=np.int64)\nMOD=10**9+7\n\n@njit('i8(i8,i8,i8,i8[:,:],i8[:])', cache=True)\ndef main(N,K,MOD,dp,c):\n\n    dp[0][0]=1\n    for i in range(1,N+1):\n        c[0]=0\n        for j in range(1,K+2):\n            c[j]=(c[j-1]+dp[i-1][j-1])%MOD\n        for j in range(K+1):\n            dp[i][j]=(c[j+1]-c[max(0,j-a[i-1])])%MOD\n\n    return dp[N][K]\n\nprint(main(N,K,dp,c))\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s458193984":{
    "code_string":"import numpy as np\nfrom numba import njit\n\nN, K = map(int, input().split())\n\nmax_candies = np.array(list(map(int, input().split())))\n\ndpt = np.full((N+1, K+1), 0, dtype='int64')\nfor i in range(K+1):\n    dpt[0][i] = 1\n\n@njit('i8(i8,i8,i8[:],i8[:,:]', cache=True)\ndef dp(N, K, max_candies, dpt):\n    for i in range(1, N+1):\n        for j in range(0, K+1):\n            dpt[i][j] += dpt[i-1][j]\n            t = j - max_candies[i-1] - 1\n            if t >= 0:\n                dpt[i][j] -= dpt[i-1][t]\n            if j > 0:\n                dpt[i][j] += dpt[i][j-1]\n            dpt[i][j] = dpt[i][j] % (10**9+7)\n    return (dpt[N][K] - dpt[N][K-1]) % (10**9+7)\n\nif K > 0:\n    print(dp(N, K, max_candies, dpt))\nelse:\n    print(1)\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s837856917":{
    "code_string":"import numpy as np\nfrom numba import njit\nN=int(input())\na=np.array([int(i) for i in input().split()],dtype=np.int64)\n\ns=[0]\n\ndp=np.array([[-1 for i in range(N)] for _ in range(N)],dtype=np.int64)\n\nfor i in range(1,N+1):\n    s.append(s[i-1]+a[i-1])\n\ns=np.array(s,dtype=np.int64)\nfor i in range(N):\n    dp[i][i]=0\n\n@njit('i8(i8,i8,i8[:,:],i8[:])', cache=True)\ndef calc(i,j,dp,s):\n    if dp[i][j]!=-1:\n        return dp[i][j]\n    m=float('inf')\n    for k in range(i,j):\n        m=min(m,calc(i,k,dp,s)+calc(k+1,j,dp,s)+s[j+1]-s[i])\n    dp[i][j]=m\n    return dp[i][j]\n\nprint(calc(0,N-1,dp,s))\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s495304007":{
    "code_string":"import numpy as np\nfrom numba import njit\n\nN = int(input())\nslimes = list(map(int, input().split()))\ncsum_slimes = [0]\nfor i in range(N):\n    csum_slimes.append(csum_slimes[-1]+slimes[i])\n\ndpt = np.full((N, N), -1, dtype='int64')\n\ndef get_min_cost(l, r):\n    if dpt[l][r] != -1:\n        return dpt[l][r]\n    if l == r:\n        return 0\n    min_cost = 10**18\n    for m in range(l, r):\n        min_cost = min(min_cost, get_min_cost(l,m)+get_min_cost(m+1,r)+csum_slimes[r+1]-csum_slimes[l])\n    dpt[l][r] = min_cost\n    return min_cost\n    \n\nprint(get_min_cost(0, N-1))",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s129633866":{
    "code_string":"import numpy as np\nfrom numba import njit\n\n@njit('i8(i8,i4[:,:],i8[:,:],i8)', cache=True)\ndef solve(N, aff, dpt, MOD):\n    for i in range(N):\n        row = aff[i]\n        for idx in range(N):\n            if row[idx] == 1:\n                dpt[i+1][(1<<idx):] += dpt[i][:-(1<<idx)]\n        dpt[i+1] %= MOD\n    return dpt[N][(1<<N)-1]\n\ndef main():\n    MOD = 10**9 + 7\n \n    N = int(input())\n    aff = np.array([list(map(int, input().split())) for i in range(N)], dtype='int32')\n    dpt = np.zeros((N+1, 1<<N), dtype='int64')\n    dpt[0][0] = 1\n\n    print(solve(N, aff, dpt, MOD))\n\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s281920286":{
    "code_string":"import sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline  # \u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\nimport numpy as np\nfrom functools import partial\narray = partial(np.array, dtype=np.int64)\nzeros = partial(np.zeros, dtype=np.int64)\nfull = partial(np.full, dtype=np.int64)\n\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n# \u53d7\u3051\u6e21\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u8981\u7d20\u304b\u3089sub\u3060\u3051\u5f15\u304f.\u30ea\u30b9\u30c8\u3092*\u3092\u3064\u3051\u3066\u5c55\u958b\u3057\u3066\u304a\u304f\u3053\u3068\n\n\ndef a_int(): return int(readline())\n\n\ndef read_matrix(H, W):\n    '''return np.ndarray shape=(H,W) matrix'''\n    lines = []\n    for _ in range(H):\n        lines.append(read())\n    lines = ' '.join(lines)  # byte\u540c\u58eb\u306e\u7d50\u5408\u304c\u3067\u304d\u306a\u3044\u306e\u3067readline\u3067\u306a\u304fread\u3067\n    return np.fromstring(lines, sep=' ', dtype=np.int64).reshape(H, W)\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\n\nfrom collections import defaultdict, Counter, deque\nfrom operator import itemgetter, xor, add\nfrom itertools import product, permutations, combinations\nfrom bisect import bisect_left, bisect_right  # , insort_left, insort_right\nfrom functools import reduce\n\nN = a_int()\nA = read_matrix(N, N)\n\n'''\n\u4e00\u65b9\u306e\u96c6\u5408\u3092\u7ba1\u7406\u3057\u3066DP\u3068\u3044\u3046\u30a2\u30a4\u30c7\u30a2\n\ndp[i][s] ... \u7537\u6027\u3092:i\u4eba\u76ee\u307e\u3067\u898b\u305f\u3068\u304d\u306b\u3001\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u5973\u6027\u306e\u96c6\u5408\u304cs\u3067\u3042\u308b\u3088\u3046\u306a\u901a\u308a\u306e\u7dcf\u6570\n\n\u66f4\u65b0\u5f0f\ndp[i+1][s+1<<j] += dp[i][s] for s \u306ejbit\u76ee\u306f0 \u304b\u3064 A[i,j]==1\n\n\u3053\u308c\u3067\u306f\u8a08\u7b97\u91cf\u304cO(2^N 2N)\u306a\u306e\u3067TLE\ni\u3068|s|\u306f\u540c\u3058\u306a\u306e\u3060\u304b\u3089\u72b6\u614b\u3092\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n(\u4e8c\u6b21\u5143dp\u3067\u3044\u3046\u3068i=|s|\u306e\u30bb\u30eb\u3067\u3057\u304b\u72b6\u614b\u9077\u79fb\u304c\u767a\u751f\u3057\u306a\u3044)\n\n\u3088\u3063\u3066\u5358\u7d14s\u3060\u3051\u3067\u30eb\u30fc\u30d7\u3057\u3066\u3082\u826f\u3055\u305d\u3046\u3060\u3057\u3001()\u5185\u306e\u30a2\u30a4\u30c7\u30a2\u3067\u679d\u5208\u308a\u3057\u3066\u3082\u826f\u3055\u305d\u3046\n'''\n\nfrom numba import njit\n\n\n@njit('(i8,i8[:,:])', cache=True)\ndef solve_TLE(N, A):\n    dp = np.zeros((N + 1, 1 << N), dtype=np.int64)\n    dp[0, 0] = 1\n    for i in range(N):\n        for s in range(1 << N):\n            for j in range(N):\n                if (s >> j) & 1 == 0 and A[i, j] == 1:\n                    dp[i + 1, s + (1 << j)] += dp[i, s] % MOD\n    print(dp[N, (1 << N) - 1] % MOD)\n\n\nsolve_TLE(N, A)\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s532477446":{
    "code_string":"import numpy as np\nfrom numba import njit\nMOD = 10**9 + 7\n\ndef main():\n \n    N = int(input())\n    aff = np.array([list(map(int, input().split())) for i in range(N)], dtype='int32')\n    dpt = np.zeros((N+1, 1<<N), dtype='int64')\n    dpt[0][0] = 1\n\n    print(solve(N, aff, dpt))\n\n@njit(cache=True)\ndef solve(N, aff, dpt):\n    for i, row in enumerate(aff):\n        for idx, v in enumerate(row):\n            if v == 1:\n                dpt[i+1][(1<<idx):] += dpt[i][:-(1<<idx)]\n        dpt[i+1] %= MOD\n    return dpt[N][(1<<N)-1]\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s533772874":{
    "code_string":"class BITmax:\n    def __init__(self, N, init=0):\n        self.init = init\n        self.tree = [self.init] * (N+1)\n    \n    def set(self, x, value):\n        while x < N + 1:\n            old = self.tree[x]\n            if value <= old:\n                break\n            self.tree[x] = value\n            x += x & -x\n    \n    def find_max_to(self, x):\n        result = self.init\n        while x > 0:\n            result = max(result, self.tree[x])\n            x -= x & -x\n        return result\n\ndef main():\n    N = int(input())\n    dpt = BITmax(N)\n\n    h_list = list(map(int, input().split()))\n    b_list = list(map(int, input().split()))\n\n    for h, b in zip(h_list, b_list):\n        dpt.set(h, dpt.find_max_to(h-1) + b)\n\n    print(max(dpt.tree))\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s311264421":{
    "code_string":"import numpy as np\n\nN,K=map(int,input().split())\nA = np.array([list(map(int,input().split())) for _ in range(N)],dtype=int)\nmod = 10**9+7\n\nres = matrix_power(A,N,mod)\nprint(res.sum()%mod)\n\npower_list=[A]\nfor i in range(1,K.bit_length()+1):\n  power_list.append((power_list[-1]@power_list[-1])%mod)\n  \nB = np.identity(N).astype(int)\nfor i in range(K.bit_length()+1):\n  if K>>i&1:\n    B = (B @ power_list[i])%mod\n\nprint(B.sum()%mod)",
    "error_obj":"NameError: name 'matrix_power' is not defined"
  },
  "s454882004":{
    "code_string":"import numpy as np\nN,K=map(int,input().split())\na=[[int(i) for i in input().split()] for _ in range(N)]\na=np.array(a,dtype=np.int64)\nMOD=10**9+7\n\ndef matmul(A,B,MOD):\n    N=len(A)\n    C=np.zeros((N,N),dtype=np.int64)\n\n    for n in range(N):\n        C[n] = (A[n,:][:,None] * B % mod).sum(axis=0) % mod\n    return C\n\ndef mat_power(A,k,MOD):\n    N=len(A)\n    D=np.identity(N,dtype=np.int64)\n    while k:\n        if k & 1:\n            D=matmul(D,A,MOD)\n        A = matmul(A,A,MOD)\n        k >>= 1\n\n    return D\n\nA=mat_power(a,K,MOD)\nans=0\nfor i in range(N):\n    for j in range(N):\n        ans=(ans+A[i][j])%MOD\n\nprint(ans)",
    "error_obj":"NameError: name 'mod' is not defined"
  },
  "s173123341":{
    "code_string":"\nN=int(input())\ncnt=N.count('2')\nprint(cnt)",
    "error_obj":"AttributeError: 'int' object has no attribute 'count'"
  },
  "s660331497":{
    "code_string":"print(input().count('2')",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s098171663":{
    "code_string":"N = int(input())\nprint(N.count(\"2\"))",
    "error_obj":"AttributeError: 'int' object has no attribute 'count'"
  },
  "s221356683":{
    "code_string":"print(input().count())",
    "error_obj":"TypeError: count() takes at least 1 argument (0 given)"
  },
  "s057675668":{
    "code_string":"N,H,W=map(int,input().split())\nans=0\nfor i in range(N):\n  a,b=map(int,input().split())\n  if a>=H and b=W:\n    ans+=1\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s004926748":{
    "code_string":"def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\nN,K=map(int,input().split())\nL=factorization(N)\nans=1\nfor i in L:\n  ans*=L[0]**(L[1]\/\/N)\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s303601848":{
    "code_string":"n, p = map(int, input().split())\nif n==1:\n  print(p)\n  exit()\nelif p==1 or n>=60:\n  print(1)\n  exit()\nfor i in range(int(p**(1\/n))+1)[0::-1]:\n  if p%(i**n)==0:\n    print(i)\n    exit()",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s804016463":{
    "code_string":"n,m = map(int,input().split())\n\nif n == 1:\n    print(m)\n    exit()\n    \nif n >= len(L):\n    print(1)\n    exit()\n    \ndiv = 2\nL = []\ni = 1\nwhile div <= int(m**0.5)+1:\n    while m%div == 0:\n        m \/\/=div\n        L.append(div)\n    div +=1\nL.append(m)\n#print(L)\n\nfrom collections import Counter\nL = Counter(L)\n\ncnt = 1\nfor k,v in L.items():\n    if v >= n:\n        cnt *=k\nprint(cnt)",
    "error_obj":"NameError: name 'L' is not defined"
  },
  "s917365295":{
    "code_string":"from math import sqrt\ndef divisors(n):\n    divisors = []\n    for i in range(1, int(sqrt(n))+1):\n        q, r = divmod(n, i)\n        if r == 0:\n            divisors.append(i)\n            if i != q:\n                divisors.append(q)\n    return divisors\n\nn, p = map(int, input().split())\nx = 1\nfor k, v in factorint(p).items():\n    x *= k ** (v\/\/n)\nprint(x)",
    "error_obj":"NameError: name 'factorint' is not defined"
  },
  "s062225533":{
    "code_string":"n, p = map(int, input().split())\nnum = int(p ** (1 \/ n))\nfor i in range(num + 1, 0, -1):\n    p0 = p\n    count = 0\n    if i == 1:\n        print(i)\n        break\n    for i in range(n):\n        if p0 % i == 0:\n            p0 \/\/= i\n            count += 1\n        else:\n            break\n    else:\n        print(i)\n        break",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s491955107":{
    "code_string":"import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 1\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\n\ndef facto(n):\n    arr = []\n    temp = n\n    for i in range(int(math.sqrt(n))+1):\n        if temp%i==0:\n            cnt = 0\n            while temp%i==0:\n                cnt +=1\n                temp \/\/= i\n            arr.append([cnt, i])\n    if temp != 1:\n        arr.append([1, temp])\n    \n    if arr == []:\n        arr.append([1, n])\n    \n    return arr\n\nn, p=I()\n\nfor i in facto(p):\n    if i[0] >= n:\n        ans *= i[1]\n\nif n == 1:\n    print(p)\nelif p == 1:\n    print(1)\nelse:\n    print(ans)\n",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s840219939":{
    "code_string":"def prime_factorize(P):\n    prime = list()\n    for i in range(2, P + 1):\n        if i**2 <= P:\n            if P % i == 0:\n                c = 0\n                while P % i == 0:\n                    P \/\/= i\n                    c += 1\n                prime.append([i, c])\n            else:\n                continue\n        else:\n            break\n \n    if P != 1:\n        prime.append([P, 1])\n \n    return prime\n \ndef main2():\n    N, P = map(int, input().split())\n \n    prime = prime_factorize(P)\n \n    print(prime)\n    ans = 1\n    for p in prime:\n        n, c = p\n        ans *= (n ** (c \/\/ N)) \n \n    print(ans)\n \nif __name__ == \"__main__\":\n    main2()\ndef prime_factorize(P):\n    prime = list()\n    for i in range(2, P + 1):\n        if i**2 <= P:\n            if P % i == 0:\n                c = 0\n                while P % i == 0:\n                    P \/\/= i\n                    c += 1\n                prime.append([i, c])\n            else:\n                continue\n        else:\n            break\n\n    if P != 1:\n        prime.append([P, 1])\n\n    return prime\n\ndef main2():\n    N, P = map(int, input().split())\n\n    prime = prime_factorize(P)\n    ans = 1\n    for p in prime:\n        n, c = p\n        ans *= (n ** (c \/\/ N)) \n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main2()",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s282013573":{
    "code_string":"import bisect\nimport copy\nimport heapq\nimport math\nimport sys\nfrom collections import *\nfrom functools import lru_cache\nfrom itertools import accumulate, combinations, permutations, product\ndef input():\n    return sys.stdin.readline()[:-1]\ndef ruiseki(lst):\n    return [0]+list(accumulate(lst))\nsys.setrecursionlimit(500000)\nmod=pow(10,9)+7\nal=[chr(ord('a') + i) for i in range(26)]\ndirection=[[1,0],[0,1],[-1,0],[0,-1]]\n\nn=int(input())\na=[int(input()) for i in range(n)]\n\nf=\"first\"\ns=\"second\"\n# print(a)\nif sum(a)==n sum(a)==n+1:\n    print(f)\n    exit()\n# print(sum(a)%2)\nif sum(a)%2:\n    print(f)\nelse:\n    print(s)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s707254202":{
    "code_string":"def main():\n    n = int(input())\n    a = list([(int(input())) % 2 for i in range(n)])\n    su = sum(a)\n    xors = 0\n    for i in(a):\n        xors ^= i\n    if(xors != 0 || sum == n):\n        print('first')\n    else:\n        print('second')\n\nmain()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s861037236":{
    "code_string":"n = int(input())\na = []\nfor i in range(n):\n  a.append(int(input()%2))\nk = sum(a)\n\nif(k%2)or n==2:\n  print(\"first\")\nelse:\n  print(\"second\")\n",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s042626802":{
    "code_string":"print('second' if all(a[i] % 2 == 0 for i in range(N)) else 'first')",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s485955496":{
    "code_string":"import sys\nn = int(input())\nA = [int(sys.stdin.readline()) for _ in range(n)]\nprint(\"second\" if all(a[i]%2==0 for i in range(n)) else 'first')",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s366279671":{
    "code_string":"\n        \ndef main():\n    import sys\n    def input(): return sys.stdin.readline().rstrip()\n\n    n = int(input())\n    flag = 0\n    for i in range(n):\n        a = int(intput())\n        flag &= (a%2 == 1)\n    if flag:\n        print('first')\n    else:\n        print('second')\n\n    \n\n\n\n\n                \nif __name__ == '__main__':\n    main()",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s887372114":{
    "code_string":"s=input()\nc=0\na=0\nfor i in s:\n  if i=='B':\n    c+=1\n  else:\n    a+=c\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s125390748":{
    "code_string":"othello = input()\nbef = 0\nsumall = 0\nsumelse = 0\n\nfor i in range(len(othello)):\n    sumall += i\n    if(othello[i] == 'B'):\n        bef += i\n        count += 1\n\ncount = 0\nfor i in range(len(othello)-count):\n    sumelse += i\n\naft = sumall - sumelse\n\nprint(aft - bef)",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s329599092":{
    "code_string":"s = input()\nn = len(s)\nsum = [0] * (n + 1)\nsum[0] = (s[0] == 'B')\nfor i in range(1 , n):\n\tsum[i] = sum[i-1] + (s[i] == 'B')\nans = 0\nfor i in range(n, -1 ,-1):\n\tif s[i] == 'W':\n\t\tans += sum[i]\nprint(ans)\n\t",
    "error_obj":"IndexError: string index out of range"
  },
  "s156214940":{
    "code_string":"ans = 0\nans2 = 0\ns = input()\nl = len(s)\nt = 1\nfor i in range(l):\n  print(f'a={t}')\n  same = True\n  while same:\n    if s[i] != s[t]:\n      i = t\n      print(f'b={t}')\n      same = False\n    else:\n      ans += 1\nprint(max(ans, ans2))\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s883598198":{
    "code_string":"from itertools import permutations\nN = int(input())\n\nval = []\nfor _ in range(N):\n    val.append(int(input()))\nans = 10**10\nfor i in permutations(val):\n    for j in range(1, N):\n        ans = min(max(sum(i[:j]), sum(i[j:])), ans)\nif N == 1:\n    print(val[0])\nelse:\n    print(ans)\n    \n\n    \n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'BBW'"
  },
  "s436428824":{
    "code_string":"s = input()\nl = []\nfor i in range(len(s)-1, -1, -1):\n    if s[i] == 'B':\n        l.append(0)\n    else:\n        l.append(1)\ncnt = 0\n\nfor j in range(len(s)**0.5):\n    for i in range(j, len(s) - 1, 2):\n        if l[i] == 1 and l[i+1] == 0:\n            l[i] = 0\n            l[i+1] = 1\n            cnt += 1\n\nprint(cnt)\n",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s075713009":{
    "code_string":"S = input()\nW = []\n\nfor i, s enumerate(S):\n  if s == 'W':\n    W.append(i)\n\nidx = 0\nans = 0\nfor w in W:\n  ans += w-idx\n  idx += 1\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s564241300":{
    "code_string":"s = input()\n \nn = len(s)\n \nans = 0\n \ncunt = 0\n \nfor i in range(n):\n    if s[i] == \"B\":\n        cnt += 1\n    else:\n        ans += cunt\nprint(ans)",
    "error_obj":"NameError: name 'cnt' is not defined"
  },
  "s728398542":{
    "code_string":"s = input()\n\ncw = 0\nans = 0\nfor i in range(n):\n  if s[i] == 'W':\n    ans += i-cw\n    cw += 1\n    \nprint(ans)    \n    \n  ",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s394374805":{
    "code_string":"max=0\nk=0\nN=int(input())\nfor i in range(1,N+1):\n    p=int(input())\n    if p>max:max=p\n    k=k+p\n    print((k-max)+(max\/\/2))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s569923883":{
    "code_string":"d = int(input())\nif d = 25:\n  print(\"Christmas\")\nelif d = 24:\n  print(\"Christmas Eve\")\nelif d = 23:\n  print(\"Christmas Eve Eve\")\nelif d = 22:\n  print(\"Christmas Eve Eve Eve\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s032661889":{
    "code_string":"D=input()\nD=int(d)\n\nif D==25:\n    print(\"Christmas\")\n\nif D==24:\n    print(\"Christmas Eve\")\n\nif D==23:\n    print(\"Christmas Eve Eve\")\n\nif D==22:\n    print(\"Christmas Eve Eve Eve\")",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s742255808":{
    "code_string":"a = int(input())\nif a == 22:\n  print('Christmas Eve Eve Eve')\nelif a == 23:\n  print('Christmas Eve Eve')\nelif a == 24:\n  print('Christmas Eve')\nelse a == 25:\n  print('Christmas')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s590642400":{
    "code_string":"D=int(input())\nif D=25:\n  print(\"Christmas\")\nelif D=24:\n  print(\"Christmas Eve\")\nelif D=23:\n  print(\"Christmas Eve Eve\")\nelif D=22:\n  print(\"Christmas Eve Eve Eve\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s249401869":{
    "code_string":"def main():\n D = int(input().split())\n if D == 25:\n     print('Christmas')\n elif D == 24:\n     print('Christmas Eve')\n elif D == 23:\n     print('Christmas Eve Eve')\n else:\n     print('Christmas Eve Eve')\nmain()",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s924444342":{
    "code_string":"print(\"Chistmas\"+\" Eve\"+(25-int(input())))",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s823740816":{
    "code_string":"D=int(input())\nif D=25 :\n  print(\"Christmas\")\nelif D=24 :\n  print(\"Christmas Eve\")\nelif D=23 :\n  print(\"Christmas Eve Eve\")\nelse :\n  print(\"Christmas Eve Eve Eve\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s550377372":{
    "code_string":"christmas_day = 25\nd = int(input())\nprint(\"Christmas\", \" Eve\" * christmas_day - d)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s849110734":{
    "code_string":"d = int(input())\nif d = 25:\n  print(\"Christmas\")\nelif d = 24:\n  print(\"Christmas Eve\")\nelif d = 23:\n  print(\"Christmas Eve Eve\")\nelse:\n  print(\"Christmas Eve Eve Eve\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s492248825":{
    "code_string":"import math\nN = int(input())\np = []\n\nfor i in range(N):\n    p.append(int(input()))\n\ntotal_price = max(N) \/ 2 + sum(N) - max(N)\n\nprint(math.floor(total_price))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s897836000":{
    "code_string":"# abc115_b.py\n# https:\/\/atcoder.jp\/contests\/abc115\/tasks\/abc115_b\n\n# B - Christmas Eve Eve \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 200\u70b9\n\n# \u554f\u984c\u6587\n# \u3068\u3042\u308b\u4e16\u754c\u3067\u306f\u3001\u4eca\u65e5\u306f\u30af\u30ea\u30b9\u30de\u30b9\u30a4\u30d6\u306e\u524d\u65e5\u3067\u3059\u3002\n# \u9ad8\u7fbd\u6c0f\u306f\u3001\u30c7\u30d1\u30fc\u30c8\u3067 N\u500b\u306e\u54c1\u7269\u3092\u8cb7\u304a\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002i \u500b\u76ee\u306e\u54c1\u7269 (1\u2264i\u2264N) \u306e\u5b9a\u4fa1\u306f pi\u5186\u3067\u3059\u3002\n# \u5f7c\u306f\u5272\u5f15\u5238\u3092\u6301\u3063\u3066\u304a\u308a\u3001N\u500b\u306e\u3046\u3061\u6700\u3082\u5b9a\u4fa1\u304c\u9ad8\u3044\u54c1\u7269 1 \u500b\u3092\u5b9a\u4fa1\u306e\u534a\u984d\u3067\u8cb7\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \u6b8b\u308a\u306e N\u22121\u500b\u306e\u54c1\u7269\u306b\u5bfe\u3057\u3066\u306f\u5b9a\u4fa1\u3092\u652f\u6255\u3044\u307e\u3059\u3002\u652f\u6255\u91d1\u984d\u306f\u5408\u8a08\u3067\u3044\u304f\u3089\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\n# \u5236\u7d04\n#     2\u2264N\u226410\n#     100\u2264pi\u226410000\n#     pi\u306f\u5076\u6570\u3067\u3042\u308b\u3002\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# N\n# p1\n# p2\n# :\n# pN\n\n# \u51fa\u529b\n# \u5408\u8a08\u652f\u6255\u91d1\u984d\u3092 (\u6574\u6570\u3068\u3057\u3066) \u51fa\u529b\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 3\n# 4980\n# 7980\n# 6980\n\n# \u51fa\u529b\u4f8b 1\n# 15950\n\n# 7980\u5186\u306e\u54c1\u7269\u304c\u534a\u984d\u306b\u306a\u308a\u3001\u5408\u8a08 4980+7980\/2+6980=15950\u5186\u3067\u3059\u3002\n# 15950.0 \u306a\u3069\u3068\u51fa\u529b\u3059\u308b\u3068 Wrong Answer \u3068\u5224\u5b9a\u3055\u308c\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5165\u529b\u4f8b 2\n# 4\n# 4320\n# 4320\n# 4320\n# 4320\n\n# \u51fa\u529b\u4f8b 2\n# 15120\n\n# 4\u500b\u306e\u54c1\u7269\u306e\u3046\u3061 1 \u500b\u3060\u3051\u304c\u534a\u984d\u306b\u306a\u308a\u3001\u5408\u8a08 4320\/2+4320+4320+4320=15120 \u5186\u3067\u3059\u3002\n\n\ndef calculation(lines):\n    # X = lines[0]\n    N = int(lines[0])\n    # N, M = list(map(int, lines[0].split()))\n    values = list()\n    for i in range(N):\n        values.append(int(lines[i+1]))\n\n    result = sum(values) - int(max(values)\/2)\n\n    return [result]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines():\n    line = input()\n    N, M = list(map(int, line.split()))\n    lines = list()\n    lines.append(line)\n    for _ in range(N):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['3', '4980', '7980', '6980']\n        lines_export = [15950]\n    if pattern == 2:\n        lines_input = ['4', '4320', '4320', '4320', '4320']\n        lines_export = [15120]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines()\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s945400738":{
    "code_string":"n=int(input())\np=[int(input()) for i in range(n)]\nprint(int(sum(p)-(max(p)\/2))\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s978915989":{
    "code_string":"n = int(input())\np = []\nfor i in range(n):\n  p[i]= int(input())\np.sort()\nprint(p[-1]\/\/2 + sum(p[:-2]))",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s828114015":{
    "code_string":"n=int(input())\nk = [int(input()) for i in range(n)]\nprint(int((sum(k)-max(k)\/\/2))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s711927564":{
    "code_string":"a=int(input())\nb=[input().split() for i in range(a)]\nb=int(b)\nb.sort()\nc=sum(b)\nprint(int(c-b[a]\/2))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s789574038":{
    "code_string":"total_item = int(input())\nitem_cost = []\nfor i in range(total_item):\n    item_cost.append(int(input()))\nprint(sum(item_cost) - max(item_cost) \/\/ 2)v",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s886988079":{
    "code_string":"max=0\nfor i in range(1,n+1):\n    p=int(input())\n    if p>max:\n        max=p\/\/2\n        print(max)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s307311684":{
    "code_string":"P=[int(input()) for i in range(int(input()))]\nprint(sum(p)-max(p)\/\/2)\n",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s297281753":{
    "code_string":"N = int(input())\nP = sorted([int(input()) for X in range(0,N)])\nP[-1] = P[-1]\/\/2\nprint(sum(SP))",
    "error_obj":"NameError: name 'SP' is not defined"
  },
  "s376673599":{
    "code_string":"n = int(input())\na = list([input() for i in range(n)])\nz = 0\nfor i in range(n):\n  a[i] = int(a[i])\n  if a[i] > z:\n    z = i+1\n\nprint(sum(a)-a[z]\/2)",
    "error_obj":"IndexError: list index out of range"
  },
  "s387998607":{
    "code_string":"n=int(input())\na=[]\nfor i in range(n):\n  p=int(input())\n  a.append(p)\n\na.sort()\ns=p[n-1]\/\/2\nprint(sum(a)-s)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s046908091":{
    "code_string":",k=map(int,input().split())\na=[]\nfor x in range(n):\n  a.append(int(input()))\nans=1000000009\na=sorted(a)\nfor y in range(n-k+1):\n  ans=min(a[y+k-1]-a[y],ans)\n  \nprint(ans)\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s283040907":{
    "code_string":"n,k = map(int,input().split())\nh = sorted([int(input()) for _ in range(n)])\nprint(min(ans[j+k-1]-ans[j] for j in range(n-k+1)))",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s833710469":{
    "code_string":"n, k = map(int, input().split())\nh = [int(input()) for i in range(n)]\nh.sort()\nans = []\nfor i in range(n):\n    ans.append(h[i + k - 1] - h[i])\nprint(min(ans))",
    "error_obj":"IndexError: list index out of range"
  },
  "s802111509":{
    "code_string":"def main():\n    n, k = Input()\n    data = sorted(int(input()) for _ in range(n))\n    print(min([data[i+k-1] - data[i] for i in range(n-k+1)]))\nmain()",
    "error_obj":"NameError: name 'Input' is not defined"
  },
  "s849953157":{
    "code_string":"# coding:utf-8\nn, k = map(int, input().split())\nh = [int(input()) for _ in range(n)]\nh.sort()\nans = h[0]\n\nprint(min(h[i + k - 1] - h[i] for i in range(n - k + 1))\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s533610169":{
    "code_string":"n, k = map(int, input().split())\nh = list(map(int, input().split()))\nh.sort()\n\nfor i in range(n-k+1):\n    a = h[i+k-1]-h[i]\n    ans = a if i == 0 else min(ans, a)\n\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s424028745":{
    "code_string":"n, k=map(int,input().split())\na=[input() for i in range(n)]\na.sort()\nb=[]\nfor p in range(n-k):\n  c=a[p+k]-a[p]\n  b.append(c)\n  \nprint(min(b))\n  ",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s377343849":{
    "code_string":"n, k = map(int, input().split())\n\ntrees = []\nfor _i in range(n):\n  trees.append(int(input())\n\ntrees.sort()\nans = float('inf')\n\nfor i in range(n - k + 1):\n  diff = trees[i + k - 1] - trees[i]\n  if ans > diff:\n    ans = diff\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s357595448":{
    "code_string":"n,k=map(int,input().split())\nans=[]\nfor i in range(n):\n    ans.append(int(input()))\nans.sort()\nprint(min(ans[i+k-1]-ans[i] for j in range(n-k+1)))\n\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s814407368":{
    "code_string":"x = int(input())\na = False\nif x = 7 or x = 5 or x = 3:\n  a = True\n  \nprint('YES' if a else 'NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s603275186":{
    "code_string":"a=imput()\na=int(a)\n\nif a==7 or a==5 or a==3:\n    print('YES')\n\nelse:\n    print('NO')",
    "error_obj":"NameError: name 'imput' is not defined"
  },
  "s593956272":{
    "code_string":"x = int(input())\nli = [3,5,7]\nif x in li:\n    print('YES')\nelse:\n    print('NO'",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s208384169":{
    "code_string":"print(\"YES\" if input() == \"3\" or input() == \"5\" or input() == \"7\" else \"NO\") ",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s063016351":{
    "code_string":"N = int(input())\nif N==3 || N==5 || N==7:\n  print \"YES\"\nelse:\n  print\"NO\"",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s739413400":{
    "code_string":"#!\/usr\/bin\/env python3\n\na = int(input())\na, b = list(map(int, input().split()))\na = list(str(input()))\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s650200044":{
    "code_string":"print(\"YNEOS\"[~input()in\"357\"%2::2]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s729396862":{
    "code_string":"y=int(input())\nif y==7 or y==5 0r y==3:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s619404504":{
    "code_string":"a=input()\na=int(a)\nif a==3:\n  print(\"YES\")\nif a==5:\n  print(\"YES\")\nif a==7:\n  print(\"YES\")\n  else:\n    print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s349836170":{
    "code_string":"X=int(input())\nif X== 3,5, 7:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s934392620":{
    "code_string":"n = int(input())\nif n==7 or n==5 or n=3:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s540772906":{
    "code_string":"S = list(input())\n\nans = 753\n\nfor i in range(len(S)-2):\n    sa = abs(753-(int(S[i])*100 + int(S[i+1])*10 + int(S[i+2])))\n    ans = min(sa,ans)\n             \nprint(ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s727562403":{
    "code_string":"S=input()\nprint(min(abs(753-int(S[i,i+3])) for i in range(len(S)-2)))",
    "error_obj":"TypeError: string indices must be integers"
  },
  "s800534393":{
    "code_string":"S = input()\nN = len(S)\nans = \"inf\"\nfor i in range(N-2):\n  tmp = abs(753 - int(S[i:i+2])\n  ans = min(ans,tmp)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s522785665":{
    "code_string":"a=input()\nb=abs(753-int(a[0]+a[1]+a[2]))\nfor i in range(int(len(a)-2)):\n  if abs(753-int(a[i]+a[i+1]+a[i+2]))>abs(753-int(a[i+1]+a[i+2]+a[i+3])):\n    b=abs(753-int(a[i+1]+a[i+2]+a[i+3]))\nprint(b)",
    "error_obj":"IndexError: string index out of range"
  },
  "s270326094":{
    "code_string":"s = input()\na = []\nfor i in range(len(str(s))-2):\n  a.extend(abs(int(s[i])*100+int(s[i+1])*10+int(s[i+2])-753))\nprint(min(a))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s912769667":{
    "code_string":"1 S = input()\n2 print(min(abs(int(S[i:i+3]) - 753) for i in range(len(S) - 3)))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s015845566":{
    "code_string":"l, ans = len(s), []\nfor i in range(0,l-2):\n    n = s[i:i+3]\n    ans.append(abs(753-int(n)))\nprint(min(ans))",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s523882633":{
    "code_string":"s=input()\nans=[]\nfor i in range(len(s)-2):\n    ans = min(ans , abs(753-int(s[i:i+3])))\nprint(min(ans))",
    "error_obj":"TypeError: '<' not supported between instances of 'int' and 'list'"
  },
  "s306433166":{
    "code_string":"# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\nfrom collections import deque\nfrom decorator import stop_watch\n\n\n@stop_watch\ndef solve(N):\n    dq = deque([(3, [1, 0, 0]), (5, [0, 1, 0]), (7, [0, 0, 1])])\n    ans = 0\n    while dq:\n        num, check = dq.popleft()\n        if num > N:\n            break\n        if sum(check) == 3:\n            ans += 1\n        for i in (3, 5, 7):\n            new_num = num * 10 + i\n            if new_num > N:\n                break\n            new_check = check.copy()\n            if i == 3:\n                new_check[0] = 1\n            elif i == 5:\n                new_check[1] = 1\n            elif i == 7:\n                new_check[2] = 1\n            dq.append((new_num, new_check))\n    print(ans)\n\n\nif __name__ == '__main__':\n    N = int(input())\n    solve(N)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n",
    "error_obj":"ImportError: cannot import name 'stop_watch' from 'decorator' (\/home\/alex\/.local\/lib\/python3.9\/site-packages\/decorator.py)"
  },
  "s363149785":{
    "code_string":"n=int(input())\ntmp=2\nans=0\nFlag=True\nwhile Flag:\n    tmp+=1\n    iterator=product(range(3),repeat=tmp)\n    for idxs in iterator:\n        num=''.join(map(str,idxs))\n        num753=str(num).replace('0', '3').replace('1', '5').replace('2', '7')\n        if '7' in num753 and '5' in num753 and '3' in num753:\n            if int(num753)<=n:\n                ans+=1\n            else:\n                Flag=False\n                break\nprint(ans)",
    "error_obj":"NameError: name 'product' is not defined"
  },
  "s363115642":{
    "code_string":"n = input()\nfrom itertools import product\nfrom collectins import Counter\nsum = 0\nfor i in range(len(n)-2):\n  for j in list(product(\"753\", repeat=i+3)):\n    if int(''.join(j)) <= int(n) and len(Counter(j))==3:\n      sum+=1\nprint(sum)",
    "error_obj":"ModuleNotFoundError: No module named 'collectins'"
  },
  "s976697865":{
    "code_string":"import itertools\nN = int(input())\ncount = 0\nfor i in range(3, len(str(N)) + 1):\n    for j in itertools.product('753', repeat=i):\n        if int(''.join(j)) =< N and '3' in str(j) and '5'in str(j) and '7' in str(j):\n            count += 1\n\nprint(count)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s708243836":{
    "code_string":"import sys\n\nsys.setrecursionlimit(10 ** 9)\nN = input()\nN_len = len(N)\n'''\n75333\n'''\n\n\n# t = []\n\n\ndef dfs(a, depth):\n    if depth == N_len:\n        if int(a) <= int(N) and a.count('3') > 0 \\\n                and a.count('5') > 0 and a.count('7') > 0 and str(int(a)).count('0') == 0:\n            t.append(a)\n            return 1\n        else:\n            return 0\n\n    ret1 = dfs(a + '0', depth + 1)\n    ret2 = dfs(a + '3', depth + 1)\n    ret3 = dfs(a + '5', depth + 1)\n    ret4 = dfs(a + '7', depth + 1)\n    return ret1 + ret2 + ret3 + ret4\n\n\nans = dfs('', 0)\nprint(ans)\n# print(t)\n",
    "error_obj":"NameError: name 't' is not defined"
  },
  "s208993295":{
    "code_string":"from itertools import permutations\ntarget = [3,5,7]\n\nclear_list = combinations(target, 4)\nprint(clear_list)",
    "error_obj":"NameError: name 'combinations' is not defined"
  },
  "s966733988":{
    "code_string":"from itertools import product\n\nn = input()\n\nif int(n) < 100:\n    print(0)\n\nelse:\n    ans = 0\n\n    for i in range(3,len(n)+1):\n        s = list(product(\"753\",repeat=i))\n        for combi in s:\n            n_s = \"\".join(combi)\n            if int(n_s) > int(n):\n                continue\n            if (\"7\" in combi) and (\"5\" in combi) and (\"3\" in combi):\n                ans += 1\n    \n\tprint(ans)\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s740030271":{
    "code_string":"# from collections import Counter\nfrom copy import deepcopy\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n \/\/= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n \/\/= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nN = int(input())\nprime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\ndp = [[0] * 26 for _ in range(N)]\nif N == 1:\n    print(0)\nelse:\n    for i in range(1,N):\n        dp[i] = deepcopy(dp[i-1])\n        temp = Counter(prime_factorize(i+1))\n        for x in temp.items():\n            if len(prime_factorize(x[0])) == 1:\n                dp[i][prime.index(x[0])] += x[1]\n        four = 0\n        two = 0\n        fourteen = 0\n        twenty_four = 0\n        seventy_four = 0\n        for j in range(25):\n            if dp[i][j] >= 74:\n                seventy_four += 1\n                twenty_four += 1\n                fourteen += 1\n                four += 1\n                two += 1\n            elif dp[i][j] >= 24:\n                twenty_four += 1\n                fourteen += 1\n                four += 1\n                two += 1\n            elif dp[i][j] >= 14:\n                fourteen += 1\n                four += 1\n                two += 1\n            elif dp[i][j] >= 4:\n                four += 1\n                two += 1\n            elif dp[i][j] >= 2:\n                two += 1\n        dp[i][25] = ((four*(four-1))\/\/2) * (two-2) + twenty_four * (two-1) + fourteen * (four-1) + seventy_four\n    print(dp[N-1][25])",
    "error_obj":"NameError: name 'Counter' is not defined"
  },
  "s966640377":{
    "code_string":"import statistics\nn = int(input())\na = list(map(int,input().split()))\ns = statistics.mean(a)\nprint(s)\nc = float(\"inf\")\nd = i\nfor i in range(n):\n    if c!= min(abs(s-a[i]),c):\n        c = s-a[i]\n        d = i\nprint(d)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s598778447":{
    "code_string":"from itertools import accumulate\n\ndef main():\n    int: n, k, i, j, ans, num, cnt, b\n    list: a, btfl\n    \n    n, k = map(int, input().split())\n    a = [0] + list(accumulate(map(int, input().split())))\n\n    btfl = []\n    for i in range(0, n):\n        for j in range(i + 1, n + 1):\n            btfl.append(a[j] - a[i])\n\n    # \u89e3\u8aacAC\n    ans = 0\n    for i in range(50)[::-1]:\n        num, cnt = ans + pow(2, i), 0\n        for b in btfl:\n            if num == num & b:\n                cnt += 1\n        if cnt >= k:\n            ans = num\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s170124113":{
    "code_string":"def solve(N, S, k):\n    k -= 1\n\n    # i-th of these counts the thing in [ max(0, i-k), i ).\n    D_counts  = [0]\n    M_counts  = [0]\n    DM_counts = [0]\n\n    D = 0\n    M = 0\n    DM = 0\n    for i in range(k):\n        if S[i] == 'D':\n            D += 1\n        elif S[i] == 'M':\n            DM += D\n            M += 1\n        D_counts.append(D)\n        M_counts.append(M)\n        DM_counts.append(DM)\n    for i in range(k, N):\n        if S[i-k] == 'D':\n            D -= 1\n            DM -= M\n        elif S[i-k] == 'M':\n            M -= 1\n\n        if S[i] == 'D':\n            D += 1\n        elif S[i] == 'M':\n            DM += D\n            M += 1\n            \n        D_counts.append(D)\n        M_counts.append(M)\n        DM_counts.append(DM)\n\n    ans = 0\n    for i, c in enumerate(S):\n        if c == 'C':\n            ans += DM_counts[i]\n    return ans\n\ndef main():\n    N = int(input())\n    S = input()\n    Q = int(input())\n    ks = list(map(int, input().split()))\n    for k in ks:\n        print(solve(N, S, k))\n\ndef cc_export():\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('solve')(solve)\n    cc.compile()\n\nif __name__ == '__main__':\n    import sys\n    if sys.argv[-1] == 'ONLINE_JUDGE':\n        cc_export()\n        exit(0)\n    from my_module import solve\n    main()",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s112240508":{
    "code_string":"x,y = map(int,input())\nprint(x + y \/\/2)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s014425538":{
    "code_string":"a,b = map(int(input().split()))\nprint(a+b\/\/2)\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s092463344":{
    "code_string":"a,b,c,d=input().split()\na=int(a)\nb=int(b)\nprint(a+b\/2)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 2)"
  },
  "s451420151":{
    "code_string":"x,y=map(int,input.split())\nprint(x+y\/2)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s638035850":{
    "code_string":"L = list(map(int,input().split()))\n\nprint(L[0]+l[1]\/\/2)",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s152624730":{
    "code_string":"x,y=map(int,input().split())\nprintint((x+y\/2))",
    "error_obj":"NameError: name 'printint' is not defined"
  },
  "s820529679":{
    "code_string":"x,y=map(int,input())\nprint(x+y\/2)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s981297748":{
    "code_string":"x, y = int(input().split())\nprint(x + (y\/\/2))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s508005672":{
    "code_string":"x,y=map(int,input().split())\nprintint((x+y\/2))",
    "error_obj":"NameError: name 'printint' is not defined"
  },
  "s586497361":{
    "code_string":"X,Y=map(int,input().split())\nprint(X+y\/2)",
    "error_obj":"NameError: name 'y' is not defined"
  },
  "s548673892":{
    "code_string":"n = int(input())\nt, a = map(int,input().split())\nbeta = 0.006\nH = list(map(int,input().split()))\nimport numpy as np \nH = np.array(H) \nuse = t - beta * H - a \nuse = use**2 \npre_answer = min(use) \nans = 1 + use.index(pre_answer) \nprint(ans)",
    "error_obj":"AttributeError: 'numpy.ndarray' object has no attribute 'index'"
  },
  "s779683194":{
    "code_string":"N = int(input())\nT,A = map(int,input().split())\nH = list(map(int,input().split()))\n\ndiff = []\nfor i in H:\n\tdiff.append(abs(A-T+i*0.006))\n\ndiffmin = diff[0]\nans = 0\nfor i in range(N):\n\tif diffmin > diff[i]:\n\t\tdiffmin = diff[i]\n\t\t\tans = i\nprint(ans)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s961979376":{
    "code_string":"n = int(input())\nt, a = map(int, input().split())\nh = list(map(int, input().split()))\nl = []\nfor i in range(n):\n  l.append(abs(a-(t-x*6\/1000)))\nprint(l.index(min(l))+1)\n",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s735789589":{
    "code_string":"n = int(input())\nt, a = int(input().split())\nh = list(map(int, input().split()))\n\nx = []\n\nfor i in h:\n    b = t - 0.006 * j - a\n    x.append(b)\n\nprint(x.index(min(x)))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s463104462":{
    "code_string":"n=int(input())\nt,a=map(int,input().split())\nH=list(map(int,inpt().split()))\nminn=10**10\nfor i in range(n):\n  if minn>abs((t*(1000)-6*H[i])-a):\n    ans = H[i]\n    minn=t*(1000)-6*H[i]\nprint(ans)\n  ",
    "error_obj":"NameError: name 'inpt' is not defined"
  },
  "s387183589":{
    "code_string":"n=int(input())\nt,a=map(int,input().split())\nh=list(map(int,input().solit()))\nnum=0\ndist=abs(t-h[0]*0.006)\nfor i in range(1,n):\n    if dist>abs((t-h[i]*0.006)):\n        num=i\nprint(num+1)\n\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'solit'"
  },
  "s429297899":{
    "code_string":"n=int(input())\nt,a=map(int,input().split())\nh=list(map(int,input().split()))\n\nk=0\nm=100000000000000\nfor i in range(1,n+1):\n    b=a-t+h[i]*0.006\n    if m>abs(b):\n        m=abs(b)\n        k=i\n\n\nprint(k)        \n        ",
    "error_obj":"IndexError: list index out of range"
  },
  "s852227382":{
    "code_string":"n = int(input())\nt, a = map(int, input().split())\nb = [abs(a - (t - i * 0.006)) for i in list(map(int, input().split()))]\nprint(b.index(min(b) + 1))\n",
    "error_obj":"ValueError: 2.0 is not in list"
  },
  "s064355601":{
    "code_string":"n = int(input())\nt, a = map(int, input().split())\nlisth = list(map(int, input().split()))\ndiff = [abs((t-x*0.006)-a) for x in listh]\nprint(diff.index(min(diff)+1))\n",
    "error_obj":"ValueError: 2.0 is not in list"
  },
  "s508515125":{
    "code_string":"n=int(input())\nT,A=map(int,input().split())\nh=list(map(int,input().split()))\na=[]\nfor i in h:\n  a.append(abs(A-(T-i*0.006)))\nprint(index(min(a))+1)",
    "error_obj":"NameError: name 'index' is not defined"
  },
  "s083755690":{
    "code_string":"n = int(input())\nt, a = map(int,input().split())\nh = list(map(int,input().split()))\n\ncounter = 0\ndiff = abs(a - (t - h[0] * 0.006))\n\nfor x in h:\n    average_temple = t - x * 0.006\n    counter += 1\n    if diff > abs(a - average_temple):\n        poss = counter\n\nprint(poss)",
    "error_obj":"NameError: name 'poss' is not defined"
  },
  "s504472906":{
    "code_string":"n=int(input())\nt,a=map(int,input().split())\nx=list(map(int,input().split()))\nans=0\ncnt=10**3\nfor i in range(x):\n  s=t-x[i]*0.006\n  if abs(s-a)<cnt:\n    cnt=abs(s-a)\n    ans=i+1\nprint(ans)",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s718311004":{
    "code_string":"n = int(input())\nT,A = map(int,input().split())\nH = list(map(int,input().split()))\nTH = []\nfor i in n:\n  TH.append(abs(T-int(T-0.006*H[i])))\nprint(TH.index(min(TH))+1)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s410797535":{
    "code_string":"a=int(input())\nb,c=input().split()\nb=int(b)\nc=int(c)\nl=list(map(int,input().split()))\nfor i in range(a):\n  l[0]==abs(c-(b-l[0]*0.006))\nfor i in range(a):\n  if l[i]==min.l\n  print(i)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s047817166":{
    "code_string":"N = int(input())\nT, A = np.array(input().split(), dtype=\"int\")[:2]\nH = [int(i) for i in input().split()]\n    \nmin_dif = 10000\nplace = 0\nfor i in range(N):\n  temp = T - H[i] *0.006\n  dif = abs(A-temp)\n        \n  #\u8aa4\u5dee\u306e\u6700\u5c0f\u5024(\u2192\u5019\u88dc\u5730\u3082\u66f4\u65b0)\n  if min_dif >= dif:\n    min_dif = dif\n    place = i+1\n    \nprint(place)",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s267934399":{
    "code_string":"import collections\nimport bisect\nn,m=map(int,input().split())\np = [map(int,input().splilt()) for i in range(m)]\na=collections.defaultdict(list)\nfor x,y in sorted(p):\n    a[x]+=[y]\nfor x,y in p:\n    z=bisect.bisect(a[x],y)\n    print(\"%06d%06d\"%(x,z))",
    "error_obj":"AttributeError: 'str' object has no attribute 'splilt'"
  },
  "s143812927":{
    "code_string":"# coding=utf-8\nfrom math import floor, ceil, sqrt, factorial, log, gcd\nfrom itertools import accumulate, permutations, combinations, product, combinations_with_replacement\nfrom bisect import bisect_left, bisect_right\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush, heappushpop, heapify\nimport copy\nimport numpy as np\nimport sys\nINF = float('inf')\nmod = 10**9+7\nsys.setrecursionlimit(10 ** 6)\n\n\ndef lcm(a, b): return a * b \/ gcd(a, b)\n\n# 1 2 3\n# a, b, c = LI()\n\n\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\n\n# a = I()\n\n\ndef I(): return int(sys.stdin.buffer.readline())\n\n# abc def\n# a, b = LS()\n\n\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\n\n# a = S()\n\n\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\n\n# 2\n# 1\n# 2\n# [1, 2]\n\n\ndef IR(n): return [I() for i in range(n)]\n\n# 2\n# 1 2 3\n# 4 5 6\n# [[1,2,3], [4,5,6]]\n\n\ndef LIR(n): return [LI() for i in range(n)]\n\n# 2\n# abc\n# def\n# [abc, def]\n\n\ndef SR(n): return [S() for i in range(n)]\n\n# 2\n# abc def\n# ghi jkl\n# [[abc,def], [ghi,jkl]]\n\n\ndef LSR(n): return [LS() for i in range(n)]\n\n# 2\n# abcd\n# efgh\n# [[a,b,c,d], [e,f,g,h]]\n\n\ndef SRL(n): return [list(S()) for i in range(n)]\n\n\ndef main():\n    n, m = LI()\n    # py = LIR(m)\n    lst = [[] for i in range(n)]\n    for i in range(m):\n        p, y = map(int, input().split())\n        lst[p - 1].append(y)\n\n    for i in range(n):\n        if len(lst[i]) > 1:\n            lst[i].sort()\n\n    for pair in py:\n        print(str(pair[0]*1000000+lst[pair[0]-1].index(pair[1])+1).zfill(12))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"NameError: name 'py' is not defined"
  },
  "s694353537":{
    "code_string":"from collections import defaultdict\nfrom bisect import bisect\nn,m=map(int,input().split())\nl=[list(map(int,input().split()) for _ in range(m))]\na=defaultdict(list)\nfor x,y in sorted(l):\n    a[x]+=[y]\n\nfor x,y in l:\n    z=bisect(a[x],y)\n    print('%06d%06d'%(x,z))",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s761904294":{
    "code_string":"s = input()\nif len(s) == 3:\n  s.reverse()\nprint(s)",
    "error_obj":"AttributeError: 'str' object has no attribute 'reverse'"
  },
  "s989740588":{
    "code_string":"S=str(input())\nif len(S)==2:\n    print(S)\nelse:\n    print(S.reverse())",
    "error_obj":"AttributeError: 'str' object has no attribute 'reverse'"
  },
  "s010988084":{
    "code_string":"if len(S) == 2:\n  print(S)\nif len(S) == 3:\n  print(S[2]+S[1]+S[0])",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s949826747":{
    "code_string":"S = input()\nbuffer = 0\nif len(S) != 2:\n  buffer = S[0]\n  S[0] = S[2]\n  S[2] = buffer\nprint(S)\n  ",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s823378434":{
    "code_string":"s=input()\n\nif len(s)==2:\n  print(s)\nif len(s)==3:\n  s.reverse()\n  print(s)\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'reverse'"
  },
  "s444642859":{
    "code_string":"n = input()\nprint(n.reverse() if len(n) == 3 else n)",
    "error_obj":"AttributeError: 'str' object has no attribute 'reverse'"
  },
  "s415621483":{
    "code_string":"s = input()\nif len(S) == 2:\n  print(s)\nelse:\n  print(s[2]+s[1]+s[0])",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s839107054":{
    "code_string":"n = int(input())\nif len(n)==2:\n    print(n)\nelse:\n    print(n[::-1])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'abc'"
  },
  "s484689481":{
    "code_string":"N = int(input())\na = [int(input()) for _ in range(N)]\n\nif N % 2 == 0:\n    res = 2 * (sum(a[N \/\/ 2:]) - sum(a[:N \/\/ 2]))\n    res += a[N \/\/ 2 - 1] - a[N \/\/ 2]\n    print(res)\nelse:\n    res = 2 * (sum(a[N \/\/ 2 + 1:]) - sum(a[N \/\/ 2]))\n    print(res - min(a[N \/\/ 2 + 1] - a[N \/\/ 2] - a[N \/\/ 2 - 1]))\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s110412772":{
    "code_string":"A.sort()\nn = N\/\/2\nif N%2 != 0:\n    ans1,ans2,ans = 0,0,0\n    ar1,ar2 = A[:n],A[n+1:]\n    ar = []\n    for i in range(n):\n        ar.append(ar2[i])\n        ar.append(ar1[i])\n    ar.append(A[n])\n    for i in range(N-1):\n        ans1 += abs(ar[i]-ar[i+1])\n    ar = [A[n]]+ar[:-1]\n    for i in range(N-1):\n        ans2 += abs(ar[i]-ar[i+1])\n    ans = max(ans1,ans2)\nelse:\n    ans = 0\n    ar1,ar2 = A[:n],A[n:]\n    ar = []\n    for i in range(n):\n        ar.append(ar2[i])\n        ar.append(ar1[i])\n    for i in range(N-1):\n        ans += abs(ar[i]-ar[i+1])\n \nprint(ans)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s901628815":{
    "code_string":"from collections import deque\nimport copy\nsys.setrecursionlimit(50000)\nN = int(input())\nd_1, d_2 = deque([]), deque([])\nl = []\nfor i in range(N):\n  l.append(int(input()))\n  \nl.sort()\nl_1, l_2 = copy.copy(l), copy.copy(l)\nd_1.append(max(l))\nd_2.append(min(l))\nl_1.pop()\nl_2.pop(0)\n\ndef main1(d, l):\n  d.appendleft(l[0])\n  l.pop(0)\n  if l == []:\n    return d\n  d.append(l[0])\n  l.pop(0)\n  if l == []:\n    return d\n  d.appendleft(l[-1])\n  l.pop()\n  if l == []:\n    return d\n  d.append(l[-1])\n  l.pop()\n  if l == []:\n    return d\n  else:\n    return main1(d, l)\n  \ndef main2(d, l):\n  d.appendleft(l[-1])\n  l.pop()\n  if l == []:\n    return d\n  d.append(l[-1])\n  l.pop()\n  if l == []:\n    return d\n  d.appendleft(l[0])\n  l.pop(0)\n  if l == []:\n    return d\n  d.append(l[0])\n  l.pop(0)\n  if l == []:\n    return d\n  else:\n    return main2(d, l)\n  \nx, y = 0, 0\na = main1(d_1, l_1)\nb = main2(d_2, l_2)\nfor i in range(N-1):\n  x += abs(a[i+1]-a[i])\n  y += abs(b[i+1]-b[i])\nprint(max(x, y))",
    "error_obj":"NameError: name 'sys' is not defined"
  },
  "s157261539":{
    "code_string":"from copy import deepcopy\n\nn,*a = map(int,open(0).read().split())\nacopy = deepcopy(a)\na.sort()\nacopy.sort(reverse = True)\n\nL = deque([])\na = deque(a)\nacopy = deque(acopy)\nLcopy = deepcopy(L)\n\nmax_ = a.pop()\nL.append(max_)\nmin_ = acopy.pop()\nLcopy.append(min_)\n\nwhile a:\n    if a:\n        b = a.popleft()\n        L.append(b)\n    if a:\n        c = a.popleft()\n        L.appendleft(c)\n    if a:\n        d = a.pop()\n        L.append(d)\n    if a:\n        e = a.pop()\n        L.appendleft(e)\n\nwhile acopy:\n    if acopy:\n        b = acopy.popleft()\n        Lcopy.append(b)\n    if acopy:\n        c = acopy.popleft()\n        Lcopy.appendleft(c)\n    if acopy:\n        d = acopy.pop()\n        Lcopy.append(d)\n    if acopy:\n        e = acopy.pop()\n        Lcopy.appendleft(e)\nans1,ans2 = 0,0\n#print(L,Lcopy)\nfor i in range(len(L)-1):\n    ans1 +=abs(L[i+1] - L[i])\nfor i in range(len(Lcopy)-1):\n    ans2 +=abs(Lcopy[i+1] - Lcopy[i])\nprint(max(ans1,ans2))",
    "error_obj":"NameError: name 'deque' is not defined"
  },
  "s547769499":{
    "code_string":"n=int(input())\nd=[int(input()) for _ in range(n)]\nfrom collections import deque\nd.sort()\na=deque(d)\n\ntmpl=a.popleft()\ntmpr=tmpl\nans=0\ni=0\n\nwhile len(a)>0:\n    #0 \u5927\u304d\u3044\u307b\u3046\u304b\u3089\n    if i%4==0:\n        tmp=a.pop()\n        ans+=abs(tmpl-tmp)\n        tmpl=tmp\n\n    #1 \u5927\u304d\u3044\u307b\u3046\u304b\u3089\n    elif i%4==1:\n        tmp=a.pop()\n        ans+=abs(tmpr-tmp)\n        tmpr=tmp\n\n    #2 \u5c0f\u3055\u3044\u307b\u3046\u304b\u3089\n    elif i%4==2:\n        tmp=a.popleft()\n        ans+=abs(tmpl-tmp)\n        tmpl=tmp\n\n\n    #3 \u5c0f\u3055\u3044\u307b\u3046\u304b\u3089\n    elif i%4==3:\n        tmp=a.popleft()\n        ans+=abs(tmpr-tmp)\n        tmpr=tmp\n\n    i+=1\n\nres=ans\n\nd.sort(reverse=True)\na= deque(copy.deepcopy(d))\n\ntmpl=a.popleft()\ntmpr=tmpl\nans=0\ni=0\n\nwhile len(a)>0:\n    #0 \u5927\u304d\u3044\u307b\u3046\u304b\u3089\n    if i%4==0:\n        tmp=a.pop()\n        ans+=abs(tmpl-tmp)\n        tmpl=tmp\n\n    #1 \u5927\u304d\u3044\u307b\u3046\u304b\u3089\n    elif i%4==1:\n        tmp=a.pop()\n        ans+=abs(tmpr-tmp)\n        tmpr=tmp\n\n    #2 \u5c0f\u3055\u3044\u307b\u3046\u304b\u3089\n    elif i%4==2:\n        tmp=a.popleft()\n        ans+=abs(tmpl-tmp)\n        tmpl=tmp\n\n\n    #3 \u5c0f\u3055\u3044\u307b\u3046\u304b\u3089\n    elif i%4==3:\n        tmp=a.popleft()\n        ans+=abs(tmpr-tmp)\n        tmpr=tmp\n\n    i+=1\n\nprint(max(ans,res))\n\n\n\n\n            \n\n\n",
    "error_obj":"NameError: name 'copy' is not defined"
  },
  "s938236375":{
    "code_string":"import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nn,m = I()\ns = v()\nt = v()\nl = lcm(n,m)\ng = gcd(n,m)\n\nfor i in range(g):\n    if s[n\/\/g*i] != t[m\/\/g*i]:\n        print(-1)\n        sys.exit()\n\nprint(l)\n",
    "error_obj":"NameError: name 'gcd' is not defined"
  },
  "s768014979":{
    "code_string":"import math\ndef main5():\n    N, M = map(int, input().split())\n    S = input()\n    T = input()\n\n    G = math.gcd(N, M)\n    L = (N * M) \/\/ G\n\n    for i in range(G):\n        if S[i * N \/\/ G] != T[i * M \/\/ G]:\n            print(-1)\n            exit()\n\n    print(L)\n\nif __name__ == \"__main__\":\n    main4()",
    "error_obj":"NameError: name 'main4' is not defined"
  },
  "s267656103":{
    "code_string":"# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict\nfrom math import sqrt, factorial, gcd\n# def input(): return sys.stdin.readline()[:-1] # warning not \\n\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\n# def input(): return sys.stdin.buffer.readline().decode('utf-8')\n\n\ndef solve():\n    n, m = [int(x) for x in input().split()]\n    s = input()\n    t = input()\n    g = gcd(n, m)\n    ans = n * m \/\/ g\n    a, b = n \/\/ g, m \/\/ g\n    x, y = 0, 0\n    for i in range(g):\n        if s[x] != x[y]:\n            print(-1)\n            return\n        x += a\n        y += b\n    print(ans)\n    \nt = 1\n# t = int(input())\nfor case in range(1,t+1):\n    ans = solve()\n\n\n\"\"\"\n\n2 2 2 2 2\n\n\"\"\"\n",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s383240450":{
    "code_string":"from math import gcd\n \na,b=map(int, input().split())\nc=input()\nd=input()\n \ne=gcd(n,m)\n \nae=a\/\/e\nbe=b\/\/e\n \nfor i in range(0,e):\n    if c[ae*i]!=d[be*i]:\n        print(-1)\n        exit()\nprint(ae*be*e)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s212804151":{
    "code_string":"n=int(input())\na=int(input())\nb=int(input())\nif(n==1):\n    print(\"Hello World\")\nelif(n==2):\n    print(int(a+b))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s724820569":{
    "code_string":"n = int(input())\n\nif n == 2:\n\ta = int(input())\n    b = int(input())\n    print(a + b)\nelse:\n\tprint('Hello World')",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s620620370":{
    "code_string":"n = int(input())\na = int(input())\nb = int(input())\nif n == 1:\n    print('Hello World')\nelse:\n    print(a + b)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s361839391":{
    "code_string":"a=int(input())\nb=int(input())\nc=int(input())\nif a==1:\n  print(\"Hello World\")\nif a==2:\n  print(int(b+c))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s419396796":{
    "code_string":"n = int(input())\nif n == 1:\n  orint(\"Hello World\")\nelse:\n  a = int(input())\n  b = int(input())\n  print(a+b)",
    "error_obj":"NameError: name 'orint' is not defined"
  },
  "s470825425":{
    "code_string":"\ndef main():\n    n = int(input())\n    a = int(input())\n    b = int(input())\n    if n == 1:\n        print('Hello World')\n    else:\n        print(a + b)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s829315761":{
    "code_string":"n=int(input())\na=int(input())\nb=int(input())\nif n==1:\n  print(\"Hello World\")\nelse:\n  print(a+b)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s293924645":{
    "code_string":"a = [int(input()) for i in range(3)]\n\nif a[0] == 2:\n  print(a[1] + a[2])\n  \nelif a[0] == 1:\n  print('Hello World')\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s493590252":{
    "code_string":"# abc112_a.py\n# https:\/\/atcoder.jp\/contests\/abc112\/tasks\/abc112_a\n\n# A - Programming Education \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9: 100\u70b9\n\n# \u554f\u984c\u6587\n# 2020\u5e74, AtCoder \u793e\u306f\u5e74\u5546 10 \u5104\u5186\u3092\u8d85\u3048, \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6559\u80b2\u306b\u3082\u624b\u3092\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u305f.\n# \u3042\u308b\u65e5\u884c\u308f\u308c\u305f\u30c6\u30b9\u30c8\u3067\u306f, 1 \u624d\u5150\u306f Hello World \u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092, 2 \u624d\u5150\u306f\u6574\u6570 A, B \u3092\u5165\u529b\u3057\u3066 A+B \u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n# \u9ad8\u6a4b\u541b\u306f\u3053\u306e\u30c6\u30b9\u30c8\u3092\u53d7\u3051\u3066\u3044\u308b\u304c, \u7a81\u7136\u81ea\u5206\u304c\u4f55\u624d\u306a\u306e\u304b\u304c\u5206\u304b\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f.\n# \u305d\u3053\u3067, \u6700\u521d\u306b\u81ea\u5206\u306e\u5e74\u9f62 N (N \u306f 1 \u307e\u305f\u306f 2) \u3092\u5165\u529b\u3057, N=1 \u306a\u3089\u3070 Hello World \u3068\u51fa\u529b\u3057, N=2 \u306a\u3089\u3070 A, B \u3092\u5165\u529b\u3057\u3066 A+B\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u3053\u3068\u306b\u3057\u305f.\n# \u9ad8\u6a4b\u541b\u306b\u4ee3\u308f\u3063\u3066, \u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u306a\u3055\u3044.\n\n# \u5236\u7d04\n#     N\u306f 1 \u307e\u305f\u306f 2\n#     A\u306f 1 \u4ee5\u4e0a 9\u4ee5\u4e0b\u306e\u6574\u6570\n#     B\u306f 1 \u4ee5\u4e0a 9\u4ee5\u4e0b\u306e\u6574\u6570\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e 2 \u3064\u306e\u3046\u3061\u3044\u305a\u308c\u304b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b.\n# 1\n\n# 2\n# A\n# B\n\n\n# \u51fa\u529b\n# N=1\u306e\u3068\u304d, Hello World \u3068\u51fa\u529b\u3057, N=2 \u306e\u3068\u304d, A+B\u3092\u51fa\u529b\u3057\u306a\u3055\u3044.\n\n# \u5165\u529b\u4f8b 1\n# 1\n\n# \u51fa\u529b\u4f8b 1\n# Hello World\n\n# N=1\u306a\u306e\u3067, \u9ad8\u6a4b\u541b\u306f 1\u624d\u3067\u3042\u308b. \u3057\u305f\u304c\u3063\u3066, Hello World \u3092\u51fa\u529b\u3059\u308b.\n\n# \u5165\u529b\u4f8b 2\n# 2\n# 3\n# 5\n\n# \u51fa\u529b\u4f8b 2\n# 8\n\n# N=2\u306a\u306e\u3067, \u9ad8\u6a4b\u541b\u306f 2 \u624d\u3067\u3042\u308b. A=3,B=5 \u306a\u306e\u3067, A+B \u3067\u3042\u308b 8 \u3092\u51fa\u529b\u3059\u308b. \n\n\ndef calculation(lines):\n    n = int(lines[0])\n    # values = list(map(int, lines[1].split()))\n    # n = lines[0]\n\n    if n == 1:\n        return ['Hello World']\n    else:\n        A = int(lines[1])\n        B = int(lines[2])\n        return [A+B]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines():\n    line = input()\n    N = int(line)\n    lines = list()\n    lines.append(line)\n    for _ in range(N):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['1']\n        lines_export = ['Hello World']\n    if pattern == 2:\n        lines_input = ['2', '3', '5']\n        lines_export = [8]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines()\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s600603604":{
    "code_string":"n=int(input())\na,b=int(input()),int(input())\nif n==1:print('Hello World')\nelse:print(a+b)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s512656135":{
    "code_string":"N = int(input())\nA = int(input())\nB = int(input())\n\nif N == 1:\n    print(\"Hello World\")\nelif N == 2:\n    print(A+B)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s408351391":{
    "code_string":"n=int(input())\nif n==1:print(\"Hello word\")\na=int(input())\nb=int(input())\nif n==2 :print(a+b)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s743024485":{
    "code_string":"n= int(input())\nif n = 1:\n  print(\"Hello World\")\n  exit()\n\na = int(input())\nb = int(input())\nprint(a+b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s348807124":{
    "code_string":"n = int(input())\na = int(input())\nb = int(input())\n\nif n == 1:\n  print(\"Hello World\")\nif n == 2:\n  print(a + b)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s506278553":{
    "code_string":"if input() == '1':\n  print(Hello World)\nelse:\n  print(eval(input()+'+'+input()))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s296264670":{
    "code_string":"n, t = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\nl = []\nflag = False\nfor i in range(n):\n    if a[i][2] <= t:\n        l.append(a[i][0])\n        flag = True\nif flag:\n    print(min(l))\nelse:\n    print('TLE')",
    "error_obj":"IndexError: list index out of range"
  },
  "s101415927":{
    "code_string":"T, N = list(map(int,input().split()))\n\nans_c = 1001\nfor i in range(T):\n    c, t = list(map(int,input().split()))\n    if (N >= t) and (c <= ans_c):\n        ans_c = c\n\nif ans_t == 1001:\n    print(\"TLE\")\nelse:\n    print(ans_c)",
    "error_obj":"NameError: name 'ans_t' is not defined"
  },
  "s433510120":{
    "code_string":"N,T=map(int,input().split())\nk=1000\nl=1\nfor i in range(N):\n    c,t = int(input())\n    if t[i] <= T:\n        l=0\n        if c[i] < k:\n            k = c[i]\nif l==1:\n    print('TLE')\nelse:\n    print(k)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '7 60'"
  },
  "s796842378":{
    "code_string":"N, T = map(int, input().split())\nc = 1001\nfor i in range(N):\n  c, t = map(int, input().split())\n  if t <= T:\n    ans = min(ans, c)\nprint(ans) if c < 1001 else print(\"TLE\")",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s111495228":{
    "code_string":"a,b=map(int,inpu().split())\nmeta = int(a)\nfor i in range(a):\n  x,y = map(int,input().split())\n  if b > y and a > x:\n    a = x\nif meta > a:\n  print(a)\nelse:\n  print(\"TLE\")\n  ",
    "error_obj":"NameError: name 'inpu' is not defined"
  },
  "s248062209":{
    "code_string":"n,t = map(int,input().split())\n\nm = 1001\n\nfor i in range(N):\n    \n    c,t = map(int,input().split())\n    \n    if t <= T:\n        m=min(m,c)\n        \nprint(\"TLE\" if m==1001 else m)\n\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s880038514":{
    "code_string":"N, T = map(int, input().split())\nX = [list(map(int, input().split())) for _ in range(N)]\nY = [X[i] if X[i][1]<=T for i in range(N)]\nprint(Y)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s438288079":{
    "code_string":"n, t = map(int, input.split())\n\nmax_cost = 10 ** 9\n\nfor _ in range(n):\n  c, tt = map(int, input().split())\n  if tt <= t:\n    max_cost = max(max_cost, c)\n    \nprint(max_cost)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s955471074":{
    "code_string":"n, t = map(int, input().split())\nc = 999\nfor i in range(n):\n    tmp = input().split()\n    if t <= tmp[1]:\n        if tmp[0] < c:\n            c = tmp[0]\nif c == 999:\n    print('TLE')\n    exit()\nelse:\n    print(c)",
    "error_obj":"TypeError: '<=' not supported between instances of 'int' and 'str'"
  },
  "s163544231":{
    "code_string":"N,T=map(int,input().split())\nans=100000\nfor _ in range(N):\n  c,t=map(int,input().split())\n  if t<=T:\n    ans=min(ans,c)\nprint('TLE' if ans=100000 else ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s915375688":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nc=[input().split() for i in range(a)]\nd=1001\nfor i in range(a):\n  if int(c[i][i])<=b:\n    if d>int(c[i][i]):\n      d=int(c[i][i])\nprint(d)\n      ",
    "error_obj":"IndexError: list index out of range"
  },
  "s412441414":{
    "code_string":"# abc112_b.py\n# https:\/\/atcoder.jp\/contests\/abc112\/tasks\/abc112_b\n\n# B - Time Limit Exceeded \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 200\u70b9\n\n# \u554f\u984c\u6587\n# \u5916\u51fa\u3057\u3066\u3044\u308b X \u3055\u3093\u306f\u3001ABC \u306b\u53c2\u52a0\u3059\u308b\u305f\u3081\u306b\u30b9\u30de\u30fc\u30c8\u30a6\u30a9\u30c3\u30c1\u3067\u6700\u9069\u306a\u5e30\u5b85\u7d4c\u8def\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n# \u30b9\u30de\u30fc\u30c8\u30a6\u30a9\u30c3\u30c1\u3067\u3042\u308b\u3042\u306a\u305f\u306f\u3001N\u500b\u306e\u5e30\u5b85\u7d4c\u8def\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\n# X \u3055\u3093\u304c i\u756a\u76ee\u306e\u7d4c\u8def\u3092\u4f7f\u3046\u5834\u5408\u3001\u30b3\u30b9\u30c8 ci \u304b\u3051\u3066\u6642\u9593 ti\u3067\u5e30\u5b85\u3067\u304d\u307e\u3059\u3002\n# \u6642\u9593 T\u4ee5\u5185\u306b\u5e30\u5b85\u3067\u304d\u308b\u7d4c\u8def\u306e\u3046\u3061\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u3068\u306a\u308b\u7d4c\u8def\u306e\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5236\u7d04\n#     \u5165\u529b\u306f\u3059\u3079\u3066\u6574\u6570\u3067\u3042\u308b\n#     1\u2264N\u2264100\n#     1\u2264T\u22641000\n#     1\u2264ci\u22641000\n#     1\u2264ti\u22641000\n#     \u5404 (ci,ti)\u306e\u7d44\u306f\u7570\u306a\u308b\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# N T\n# c1 t1\n# c2 t2\n# :\n# cN tN\n\n# \u51fa\u529b\n# \u6642\u9593 T\u4ee5\u5185\u306b\u5e30\u5b85\u3067\u304d\u308b\u7d4c\u8def\u306e\u3046\u3061\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u3068\u306a\u308b\u7d4c\u8def\u306e\u30b3\u30b9\u30c8\u3092\u51fa\u529b\u305b\u3088\u3002\n# \u305f\u3060\u3057\u3001\u3069\u306e\u7d4c\u8def\u3092\u4f7f\u3063\u3066\u3082\u6642\u9593 T\u4ee5\u5185\u306b\u5e30\u5b85\u3067\u304d\u306a\u3044\u5834\u5408\u3001TLE \u3068\u51fa\u529b\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 3 70\n# 7 60\n# 1 80\n# 4 50\n\n# \u51fa\u529b\u4f8b 1\n# 4\n\n# 1\u756a\u76ee\u306e\u7d4c\u8def\u3092\u4f7f\u3046\u3068\u3001\u30b3\u30b9\u30c8 7\u3067\u5e30\u5b85\u3067\u304d\u307e\u3059\n# 2\u756a\u76ee\u306e\u7d4c\u8def\u3067\u306f\u6642\u9593 T=70\u4ee5\u5185\u306b\u5e30\u5b85\u3067\u304d\u307e\u305b\u3093\n# 3\u756a\u76ee\u306e\u7d4c\u8def\u3092\u4f7f\u3046\u3068\u3001\u30b3\u30b9\u30c8 4\u3067\u5e30\u5b85\u3067\u304d\u307e\u3059\n# \u5f93\u3063\u3066\u30013\u756a\u76ee\u306e\u7d4c\u8def\u3092\u4f7f\u3063\u305f\u3068\u304d\u306e\u30b3\u30b9\u30c8 4\u304c\u6700\u5c0f\u3067\u3059\u3002\n\n# \u5165\u529b\u4f8b 2\n# 4 3\n# 1 1000\n# 2 4\n# 3 1000\n# 4 500\n\n# \u51fa\u529b\u4f8b 2\n# TLE\n\n# \u3069\u306e\u7d4c\u8def\u3092\u4f7f\u3063\u3066\u3082\u6642\u9593 T=3\u4ee5\u5185\u306b\u5e30\u5b85\u3067\u304d\u307e\u305b\u3093\u3002\n\n# \u5165\u529b\u4f8b 3\n# 5 9\n# 25 8\n# 5 9\n# 4 10\n# 1000 1000\n# 6 1\n\n# \u51fa\u529b\u4f8b 3\n# 5\n\n\ndef calculation(lines):\n    # N = int(lines[0])\n    N, T = list(map(int, lines[0].split()))\n    # n = lines[0]\n\n    min_c = None\n\n    for i in range(1, N+1):\n        c, t = list(map(int, lines[i].split()))\n        if t <= T:\n            if min_c is None:\n                min_c = c\n            elif min_c > c:\n                min_c = c\n\n    if min_c is None:\n        return ['TLE']\n    else:\n        return [min_c]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['3 70', '7 60', '1 80', '4 50']\n        lines_export = [4]\n    if pattern == 2:\n        lines_input = ['4 3', '1 1000', '2 4', '3 1000', '4 500']\n        lines_export = ['TLE']\n    if pattern == 3:\n        lines_input = ['5 9', '25 8', '5 9', '4 10', '1000 1000', '6 1']\n        lines_export = [5]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(2)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s086428752":{
    "code_string":"n=int(input())\nxyh = [list(map(int,input().split())) for i in range(n)]\n\nansh=-1\nans=[]\nflag=True\nfor cx in range(0,101):\n  if len(ans)>0:\n    break\n  for cy in range(0,101):\n    if len(ans)>0:\n      break\n    ansh = -1\n    for pira in xyh:\n      \n      if flag and pira[2] == 0 and ansh==-1 and pira[2]+abs(cx-pira[0])+abs(cy-pira[1])<=0:\n        ansh = pira[2]+abs(cx-pira[0])+abs(cy-pira[1])\n        ans.append([cx,cy,ansh])\n      \n      elif flag and pira[2] > 0 and ansh == -1:\n        ansh = pira[2]+abs(cx-pira[0])+abs(cy-pira[1])\n        ans.append([cx,cy,ansh])\n        flag=False\n        \n      elif len(ans)>0 and pira[2] > 0 and ansh !=pira[2]+abs(cx-pira[0])+abs(cy-pira[1]):\n        ans=[]\n        break\n        \n      elif len(ans)>0 and pira[2]==0 and ansh-abs(cx-pira[0])-abs(cy-pira[1])>0:\n        ans=[]\n        break\nprint(*ans[0])\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s791085467":{
    "code_string":"N=int(input())\nx=[list(map(int,input().split())) for _ in range(N)]\nCx=0\nCy=0\nH=0\ndp=[[0]*101 for i in range(101)]\nans=10**10\nfor i in range(N):\n  for j in range(101):\n    for k in range(101):\n      count=abs(x[i][0]-j)+abs(x[i][1]-k)+x[i][2]\n      if dp[j][k]!=i*count:\n        dp[j][k]=0\n      else:\n        dp[j][k]+=count\n      ans=min(ans,x[i][2])\np=10**19\na=0\nb=0\nfor i in range(101):\n  for j in range(101):\n    if dp[i][j]%N==0 dp[i][j]!=0:\n      if p!=min(p,dp[i][j]\/\/N):\n        a=i\n        b=j\n        p=min(p,dp[i][j]\/\/N)\nprint(a,b,p)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s737834963":{
    "code_string":"n = int(input())\nXYH = [list(map(int, input().split())) for _ in range(n)]\nx1, y1, h1 = XYH[0]\n# print(x1, y1, h1)\n\nfor Cx in range(101):\n    for Cy in range(101):\n        H = h1 + abs(x1-Cx) + abs(y1-Cy)\n        # print(Cx, Cy, H)\n        if all(h == max(H-abs(x-Cx)-abs(y-Cy), 0) for x, y, h in XYH:\n            print(Cx, Cy, H)\n            exit()\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s469086704":{
    "code_string":"# -*- coding: utf-8 -*-\n\nN = int(input())\nconditions = []\nfor i in range(N):\n    x,y,h = map(int, input().split())\n    conditions.append([x,y,h])\n\n\nfor cx in range(101):\n    for cy in range(101):\n        H = -1\n        for _,cond in enumerate(conditions):\n            if cond[2] > 0:\n                H_tmp = cond[2] + abs(cond[0]-cx) + abs(cond[1]-cy)\n                if H == -1:\n                    H = H_tmp\n                else:\n                    if H_tmp != H:\n                        H = -2\n                        break\n\n        if H == -2:\n            continue\n\n        for _,cond in enumerate(conditions):\n            if cond[2] == 0:\n                if H > abs(cond[0]-cx) + abs(cond[1]-cy):\n                    H = -2\n                    break\n        \n        if H == -2:\n            continue\n        \n        print(cx,cy,H)\n        exit(1)\n",
    "error_obj":""
  },
  "s309917574":{
    "code_string":"# \u521d\u671f\u5165\u529b\nimport sys\ninput = sys.stdin.readline  #\u6587\u5b57\u5217\u3067\u306f\u4f7f\u308f\u306a\u3044\nN = int(input())\nxyh =[0]*N\nfor i in range(N):\n    xyh[i] = tuple(int(i) for i in input().split())\n\nfrom collections import defaultdict\nH =defaultdict(set)\nfor x,y,h in xyh:\n    for cx in range(101):\n        for cy in range(101):\n            xx =x -cx\n            yy =y -cy\n            if cx <=x and cy <=y:\n                H[(cx,cy)].add( (h +xx +yy) )\n            elif cx >x and cy <=y:\n                 H[(cx,cy)].add( (h -xx +yy) )\n            elif cx <=x and cy >y:\n                 H[(cx,cy)].add( (h +xx -yy) )\n            elif cx >x and cy >y:\n                 H[(cx,cy)].add( (h -xx -yy) )\n            \n#print(xyh)\n#H.sort(key =lambda x:x[1])\nfor k,v in H.items():\n    if len(v)==1:\n        if 0 <= v[0] <=10**9:\n            print(*k,*v)\n        elif v[0] <0:\n            print(*k,0)\n        elif 10**9 <v[0]:\n            print(*k,10**9)",
    "error_obj":"TypeError: 'set' object is not subscriptable"
  },
  "s644438286":{
    "code_string":"# abc112_c.py\n# https:\/\/atcoder.jp\/contests\/abc112\/tasks\/abc112_c\n\n# C - Pyramid \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 3 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9: 300\u70b9\n\n# \u554f\u984c\u6587\n# \u53e4\u4ee3\u3059\u306c\u3051\u56fd\u3067\u306f, AtCoder \u793e\u9577\u300c\u9ad8\u6a4b\u541b\u300d\u306e\u6a29\u5a01\u3092\u9ad8\u3081\u308b\u305f\u3081\u306b, \u30d4\u30e9\u30df\u30c3\u30c9\u304c\u5efa\u3066\u3089\u308c\u3066\u3044\u305f.\n# \u30d4\u30e9\u30df\u30c3\u30c9\u306b\u306f \u4e2d\u5fc3\u5ea7\u6a19 (CX,CY)\u3068 \u9ad8\u3055 H \u304c\u5b9a\u307e\u3063\u3066\u304a\u308a, \u5ea7\u6a19 (X,Y) \u306e\u9ad8\u5ea6\u306f max(H\u2212|X\u2212CX|\u2212|Y\u2212CY|,0)\u3067\u3042\u3063\u305f.\n# \u63a2\u691c\u5bb6\u306e\u9752\u6728\u541b\u306f, \u3053\u306e\u30d4\u30e9\u30df\u30c3\u30c9\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3068\u9ad8\u3055\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u8abf\u67fb\u3092\u884c\u3063\u305f. \u305d\u306e\u7d50\u679c, \u6b21\u306e\u3088\u3046\u306a\u60c5\u5831\u304c\u5f97\u3089\u308c\u305f.\n#     CX,CY\u306f 0 \u4ee5\u4e0a 100 \u4ee5\u4e0b\u306e\u6574\u6570\u3067, H \u306f 1\u4ee5\u4e0a\u306e\u6574\u6570\u3067\u3042\u3063\u305f.\n#     \u4e0a\u8a18\u3068\u5225\u306b N\u500b\u306e\u60c5\u5831\u304c\u5f97\u3089\u308c\u305f. \u305d\u306e\u3046\u3061 i \u500b\u76ee\u306e\u60c5\u5831\u306f, \u300c\u5ea7\u6a19 (xi,yi) \u306e\u9ad8\u5ea6\u306f hi\u3067\u3042\u308b\u300d\n# \u3053\u306e\u60c5\u5831\u306f, \u30d4\u30e9\u30df\u30c3\u30c9\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3068\u9ad8\u3055\u3092\u7279\u5b9a\u3059\u308b\u306e\u306b\u5341\u5206\u3067\u3042\u3063\u305f. \u60c5\u5831\u3092\u624b\u639b\u304b\u308a\u306b, \u3053\u308c\u3089\u306e\u5024\u3092\u6c42\u3081\u306a\u3055\u3044.\n\n# \u5236\u7d04\n#     N\u306f 1 \u4ee5\u4e0a 100\u4ee5\u4e0b\u306e\u6574\u6570\n#     xi, yi \u306f 0 \u4ee5\u4e0a 100\u4ee5\u4e0b\u306e\u6574\u6570\n#     hi\u306f 0 \u4ee5\u4e0a 109\u4ee5\u4e0b\u306e\u6574\u6570\n#     N\u500b\u306e\u5ea7\u6a19 (x1,y1),(x2,y2),(x3,y3),...,(xN,yN)\u306f\u3059\u3079\u3066\u7570\u306a\u308b\n#     \u30d4\u30e9\u30df\u30c3\u30c9\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3068\u9ad8\u3055\u3092\u3061\u3087\u3046\u3069 1\u3064\u306b\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b.\n# N\n# x1 y1 h1\n# x2 y2 h2\n# x3 y3 h3\n# :\n# xN yN hN\n\n# \u51fa\u529b\n# \u7279\u5b9a\u3057\u305f\u4e2d\u5fc3\u5ea7\u6a19\u3068\u9ad8\u3055\u3092\u8868\u3059\u6574\u6570 CX,CY,H\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067, 1 \u884c\u306b\u51fa\u529b\u3057\u306a\u3055\u3044.\n\n# \u5165\u529b\u4f8b 1\n# 4\n# 2 3 5\n# 2 1 5\n# 1 2 5\n# 3 2 5\n\n# \u51fa\u529b\u4f8b 1\n# 2 2 6\n\n# \u3053\u306e\u5834\u5408, \u4e2d\u5fc3\u5ea7\u6a19\u306f (2,2), \u9ad8\u3055\u306f 6\u3068\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b.\n\n# \u5165\u529b\u4f8b 2\n# 2\n# 0 0 100\n# 1 1 98\n\n# \u51fa\u529b\u4f8b 2\n# 0 0 100\n\n# \u3053\u306e\u5834\u5408, \u4e2d\u5fc3\u5ea7\u6a19\u306f (0,0), \u9ad8\u3055\u306f 100 \u3068\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b.\n# CX,CY \u304c 0 \u4ee5\u4e0a 100\u4ee5\u4e0b\u306e\u6574\u6570\u3067\u3042\u308b\u3068\u5206\u304b\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u305b\u3088.\n\n# \u5165\u529b\u4f8b 3\n# 3\n# 99 1 191\n# 100 1 192\n# 99 0 192\n\n# \u51fa\u529b\u4f8b 3\n# 100 0 193\n\n# \u3053\u306e\u5834\u5408, \u4e2d\u5fc3\u5ea7\u6a19\u306f (100,0), \u9ad8\u3055\u306f 193 \u3068\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b.\n\n\ndef calculation(lines):\n    N = int(lines[0])\n    # N, T = list(map(int, lines[0].split()))\n    # n = lines[0]\n\n    points = list()\n    highest = 0\n    for i in range(1, N+1):\n        point = list(map(int, lines[i].split()))\n        # print(point)\n        points.append(point)\n        if highest < point[2]:\n            highest = point[2]\n        # print(f'points=[{points}]')\n\n    for x in range(101):\n        for y in range(101):\n            for h in range(highest, highest+200):\n                # print(f'x=[{x}], y=[{y}], h=[{h}]')\n                flag = True\n                for point in points:\n                    # print(f'point=[{point}]')\n                    calc_h = max(h - abs(point[0]-x) - abs(point[1]-y), 0)\n                    if point[2] != calc_h:\n                        flag = False\n                        break\n                if flag:\n                    result = str(x) + ' ' + str(y) + ' ' + str(h)\n                    return [result]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['4', '2 3 5', '2 1 5', '1 2 5', '3 2 5']\n        lines_export = ['2 2 6']\n    if pattern == 2:\n        lines_input = ['2', '0 0 100', '1 1 98']\n        lines_export = ['0 0 100']\n    if pattern == 3:\n        lines_input = ['3', '99 1 191', '100 1 192', '99 0 192']\n        lines_export = ['100 0 193']\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(2)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s644448200":{
    "code_string":"# Date [ 2020-08-24 21:23:20 ]\n# Problem [ test.py ]\n# Author Koki_tkg\n\nimport sys\n# import math\n# import bisect\nimport numpy as np\n# from decimal import Decimal\nimport numba as nb\nfrom numba import njit, i8, u1, b1 #JIT compiler\n# from itertools import combinations, product\n# from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_ints2(x):   return map(lambda num: int(num) - x, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef GCD(a: int, b: int) -> int: return b if a%b==0 else GCD(b, a%b)\ndef LCM(a: int, b: int) -> int: return (a * b) \/\/ GCD(a, b)\n\n@njit(cache=True)\ndef solve(info):\n    for Cx in range(101):\n        for Cy in range(101):\n            height = abs(Cx - info[0][0]) + abs(Cy - info[0][1]) + info[0][2]\n            flag = True\n            for i in range(1, len(info) - 1):\n                x, y, h = info[i][0], info[i][1], info[i][2]\n                val = max(height - abs(Cx - x) - abs(Cy - y), 0)\n                if h == val:\n                    continue\n                else:\n                    flag = False\n                    break\n            if flag:\n                return Cx, Cy, height\n\ndef Main():\n    n = read_int()\n    info = np.empty((n, 3), dtype=np.int64)\n    for i in range(n):\n        info[i][0], info[i][1], info[i][2] = read_ints()\n    print(*solve(info))\n\nif __name__ == '__main__':\n    Main()",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s410485150":{
    "code_string":"import sys\n\nn = int(input())\nxyh = [list(map(int, input().split())) for _ in range(n)]\nxyh.sort(key=lambda x: x[2], reverse=True)\n\nfor cx in range(101):\n    for cy in range(101):\n        x, y, h = xyh[0]\n        tmp_h = abs(cy - y) + abs(cx - x) + h\n        H = np.zeros(n, dtype=np.bool)\n        for i, a in enumerate(xyh):\n            H[i] = a[2] == max(tmp_h - abs(cx - a[0]) - abs(cy - a[1]), 0)\n        if np.all(H):\n            print(cx, cy, tmp_h)\n            sys.exit()",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s751570909":{
    "code_string":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(str, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n#import numpy as np\nfrom decimal import *\n \n# N\u4ee5\u4e0a\u3067M\u3092\u5272\u308a\u5207\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u6700\u5c0f\u306e\u6570n\u3092\u6c42\u3081\u308b\u3000\u2192 \u7b54\u3048 M\/\/n\nN, M = MAP()\n\ndef make_divisors(n):  #\u7d04\u6570\u5217\u6319\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors.append(i)\n            if i != n\/\/i:\n                divisors.append(n\/\/i)\n    divisors.sort()\n    return divisors\n    \ndivisors = make_divisors(M)\nprint(divisors)n = divisors[bisect_left(divisors, N)]\nprint(M\/\/n)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s401329176":{
    "code_string":"def make_divisors(n):\n    lower_divisors,upper_divisors=[],[]\n    i=1\n    while i*i<=n:\n        if n%i=0:\n            lower_divisors.append(i)\n            if i!=n\/\/i:\n                upper_divisors.append(n\/\/i)\n        i+=1\n    return lower_divisors+upper_divisors[::-1]\nn,m=map(int,input().split())\narray=make_divisors(m)\narray.reverse()\nfor ele in array:\n    if m\/\/ele>=n:\n        print(ele)\n        exit()\n        ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s808216869":{
    "code_string":"def divisor(n):\n    i = 1\n    res = []\n    for i in range(1, n**.5 + 1)\n        if n%i == 0:\n            res.append(i)\n            if n\/\/i not in res:\n                res.append(n\/\/i)\n    res.sort(reverse=True)\n    return res\n\ndef main():\n    n, m = map(int, input().split())\n    md = divisor(m)\n    for i in md:\n        if i*n <= m:\n            print(i)\n            exit()\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s809298526":{
    "code_string":"ret = ''\nfor a in input():\n  if a = '1':\n    ret += '9'\n  elif a = '9':\n    ret += '1'\n  else:\n    ret += a\nprint(ret)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s846535112":{
    "code_string":"a=input()\nprint(a.replace(1,8).replace(9,1).replace(8,9))",
    "error_obj":"TypeError: replace() argument 1 must be str, not int"
  },
  "s869212141":{
    "code_string":"s = input()\nfor i in range(len(s)):\n  if s[i] == \"1\":\n    s[i]=\"9\"\n  elif s[i]==\"9\":\n    s[i]=\"1\"\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s202378691":{
    "code_string":"def f(c):\n  if c == \"1\":\n    return \"9\"\n  elif c == \"9\":\n    return 1\n  else:\n    return c\n  \nprint(''.join(list(map(f, input()))))",
    "error_obj":"TypeError: sequence item 2: expected str instance, int found"
  },
  "s998699785":{
    "code_string":"n = input()\nfor i in range(3):\n    if n[i] == '9':\n        n[i] = '1'\n    else:\n        n[i] = '9'\nprint(int(n))\n",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s039062942":{
    "code_string":"a = input()\nfor i in range(len(a)):\n    if a[i] == '1':\n        a[i] = '9'\n    elif a[i] == '9':\n        a[i] = '1'\nprint(a)\n",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s481855407":{
    "code_string":"a=input()\nif a[0]==\"1\":\n  a[0]=\"9\"\nif a[0]==\"9\":\n  a[0]==\"1\"\nif a[1]==\"1\":\n  a[1]==\"9\"\nif a[1]==\"9\":\n  a[1]==\"1\"\nif a[2]==\"1\":\n  a[2]==\"9\"\nif a[2]==\"9\":\n  a[2]==\"1\"\nprint(a)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s399622876":{
    "code_string":"s = list(input())\nl = []\nfor i in range(s):\n  if i == \"1\":\n    l.append(\"9\")\n  elif i == \"9\":\n    l.append(\"1\")\n  else:\n    l.append(i)\nfor k in l:\n  print(k,end=\"\")",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s139334044":{
    "code_string":"a = input()\npirnt(a.replace('1', '9'))",
    "error_obj":"NameError: name 'pirnt' is not defined"
  },
  "s707964824":{
    "code_string":"n = input()\n\nif n = 111:\n  print(999)\nelif n = 119:\n  print(991)\nelif n = 191:\n  print(919)\nelif n = 199:\n  print(911)\nelif n = 911:\n  print(199)\nelif n = 919:\n  print(191)\nelif n = 991:\n  print(199)\nelse:\n  print(111)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s927832904":{
    "code_string":"#111a\nprint(input().replace(1,x).replace(9.1).replace(x,9))",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s762163706":{
    "code_string":"print(int(input())-N)\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s624594863":{
    "code_string":"a=input()\nprint(a,replace(\"1\",\"x\").replace(\"9\",\"1\").replace(\"x\",\"9\"))",
    "error_obj":"NameError: name 'replace' is not defined"
  },
  "s583614374":{
    "code_string":"n=int(input())\nprint(100*(10-n[0])+10*(10-n[1])+10-n[2])",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s949820298":{
    "code_string":"n=input()\nresult=''\nfor i in n:\n    if i==1:\n        result+=9\n    else:\n        result+=1\nprint(result)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s740292612":{
    "code_string":"s = str(input())\nans = \"\"\nfor i in range(len(s)):\n    if s[i] == 1:\n        ans += 9\n    else:\n        ans += 1\nprint(ans)\n",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s329372122":{
    "code_string":"n=input()\n\n\nans=\"\"\n\nif n[0]==\"1\":\nans=ans+\"9\"\nelse:\nans=ans+\"1\" \n\nif n[1]==\"1\":\nans=ans+\"9\"\nelse:\nans=ans+\"1\" \n\n\nif n[2]==\"1\":\nans=ans+\"9\"\nelse:\nans=ans+\"1\"\n\n\nprint(ans) ",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s471426499":{
    "code_string":"S=input().replace('1','x').replace('9','1').replace('x',9)\nprint(S)",
    "error_obj":"TypeError: replace() argument 2 must be str, not int"
  },
  "s285389865":{
    "code_string":"# abc111_a.py\n# https:\/\/atcoder.jp\/contests\/abc111\/tasks\/abc111_a\n\n# A - AtCoder Beginner Contest 999 \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 100\u70b9\n\n# \u554f\u984c\u6587\n# \u732b\u306e\u3059\u306c\u3051\u306f\u6587\u5b57\u3092\u66f8\u304f\u7df4\u7fd2\u3092\u3057\u3066\u3044\u307e\u3059\u3002 \n# \u3059\u306c\u3051\u306f\u4eca\u65e5\u3001\u6570\u5b57\u306e 1 \u3068 9 \u3092\u66f8\u304f\u7df4\u7fd2\u3092\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001 \u9593\u9055\u3048\u3066 1 \u3068 9 \u3092\u3042\u3079\u3053\u3079\u306b\u66f8\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n# \u3059\u306c\u3051\u304c\u66f8\u3044\u305f 3\u6841\u306e\u6574\u6570 n \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 \n# n\u306b\u542b\u307e\u308c\u308b 1 \u3068\u3044\u3046\u6841\u3092\u305d\u308c\u305e\u308c 9 \u306b\u3001 9 \u3068\u3044\u3046\u6841\u3092\u305d\u308c\u305e\u308c 1 \u306b\u7f6e\u304d\u63db\u3048\u3066\u5f97\u3089\u308c\u308b\u6574\u6570\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5236\u7d04\n#     111\u2264n\u2264999\n#     n\u306f\u5404\u6841\u304c 1 \u304b 9 \u3067\u3042\u308b\u6574\u6570\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# n\n\n# \u51fa\u529b\n# n\u306e\u5404\u6841\u306e 1 \u3068 9\u3092\u5165\u308c\u66ff\u3048\u305f\u6574\u6570\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5165\u529b\u4f8b 1\n# 119\n\n# \u51fa\u529b\u4f8b 1\n# 991\n\n# \u4e00\u306e\u4f4d\u306e 9 \u3092 1 \u306b\u3001\u5341\u306e\u4f4d\u306e 1 \u3092 9 \u306b\u3001\u767e\u306e\u4f4d\u306e 1 \u3092 9 \u306b\u66f8\u304d\u63db\u3048\u305f 991 \u304c\u7b54\u3048\u3068\u306a\u308a\u307e\u3059\uff0e\n\n# \u5165\u529b\u4f8b 2\n# 999\n\n# \u51fa\u529b\u4f8b 2\n# 111\n\n\ndef calculation(lines):\n    # N = int(lines[0])\n    # X, Y = list(map(int, lines[0].split()))\n    n = lines[0]\n\n    return [n.replace('9', 'a').replace('1', '9').replace('a', '1')]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['119']\n        lines_export = ['991']\n    if pattern == 2:\n        lines_input = ['999']\n        lines_export = ['111']\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(2)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s110322426":{
    "code_string":"a=int(input())\nb=a%100\nc=a\/\/100\nif b<=c*11:\n  print(c*111)\nelse:\n  print()c+1)*111)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s082093112":{
    "code_string":"number = int(input())\ni = int(number \/ 111)\nif number % 111 != 0:\n  i += 1\n print(i * 111)\n\n  \n  ",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s293962782":{
    "code_string":"n = int(input())\na = -(-n\/\/111)\nif a = 10:\n    print(1111)\nelse:\n    print(a*111)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s781093709":{
    "code_string":"import math\n# import statistics\n# a=input()\n#b,c=int(input()),int(input())\n# c=[]\n# for i in a:\n#    c.append(i)\ne1,e2 = map(int,input().split())\n#f = list(map(int,input().split()))\n#g = [input() for _ in range(a)]\nz = a\/\/9\naf= a%9\nif af==0:\n    print(str(9)*(z))\n \nelse :\n    print(str(af)*(z+1))",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s483422801":{
    "code_string":"N=int(input())\nX=set(str(N))\nY=len(X)\nif Y==1\n  print(N)\nif Y!=1:\n  Z=0\n  for i in range(111,1000,111):\n    if N-i<0:\n      Z+=i\n      break\n  print(Z)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s057155087":{
    "code_string":"import sys\nimport time\nimport math\ndef inpl():\n    return list(map(int, input().split()))\nst = time.perf_counter()\n# ------------------------------\n\n\bN = int(input())\nfor i in range(N, 1000):\n\tif N\/\/100==N\/\/10 ans N\/\/10==N%10:\n\t\tprint(N)\n\t\tsys.exit()\n\n# ------------------------------\ned = time.perf_counter()\nprint('time:', ed-st, file=sys.stderr)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s802371671":{
    "code_string":"n = input()\nfor i in range(int(n), 1000):\n  if i.count(n[0]) == 3:\n    print(i)\n    exit()",
    "error_obj":"AttributeError: 'int' object has no attribute 'count'"
  },
  "s992919306":{
    "code_string":"n = int(input())\nfor i in range(1, 10):\n    if 100*i + 10*i + i => n:\n        print(100*i + 10*i + i)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s079348972":{
    "code_string":"# abc111_b.py\n# https:\/\/atcoder.jp\/contests\/abc111\/tasks\/abc111_b\n\n# B - AtCoder Beginner Contest 111 \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 200\u70b9\n\n# \u554f\u984c\u6587\n# \u9ed2\u6a4b\u541b\u306f\uff0cAtCoder Beginner Contest (ABC) \u306b\u307e\u3060\u53c2\u52a0\u3057\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\uff0e\n# \u6b21\u306b\u884c\u308f\u308c\u308b ABC \u306f\u7b2c N\u56de\u3067\u3059\uff0e \n# \u9ed2\u6a4b\u541b\u306f\uff0c\u521d\u3081\u3066\u53c2\u52a0\u3059\u308b ABC \u3092\u7b2c x \u56de\u3068\u3057\u305f\u3068\u304d\u306b\uff0cx\u306e\u5341\u9032\u6cd5\u8868\u8a18\u3067\u306e\u3059\u3079\u3066\u306e\u6841\u306e\u6570\u5b57\u304c\u540c\u3058\u3067\u3042\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3067\u3059\uff0e\n# \u9ed2\u6a4b\u541b\u304c\u521d\u3081\u3066\u53c2\u52a0\u3059\u308b ABC \u3068\u3057\u3066\u3075\u3055\u308f\u3057\u3044\u3082\u306e\u306e\u3046\u3061\uff0c\u6700\u3082\u65e9\u3044\u3082\u306e\u306f\u7b2c\u4f55\u56de\u3067\u3057\u3087\u3046\u304b\uff1f\n\n# \u5236\u7d04\n#     100\u2264N\u2264999\n#     N\u306f\u6574\u6570\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\uff0e\n# N\n\n# \u51fa\u529b\n# \u9ed2\u6a4b\u541b\u304c\u521d\u3081\u3066\u53c2\u52a0\u3059\u308b ABC \u3068\u3057\u3066\u3075\u3055\u308f\u3057\u3044\u3082\u306e\u306e\u3046\u3061\uff0c\u6700\u3082\u65e9\u3044\u3082\u306e\u306f\u7b2c\u4f55\u56de\u304b\u3092\u51fa\u529b\u305b\u3088\uff0e\n\n# \u5165\u529b\u4f8b 1\n# 111\n\n# \u51fa\u529b\u4f8b 1\n# 111\n\n# \u6b21\u306b\u884c\u308f\u308c\u308b ABC \u306f\u7b2c 111\u56de\u3067\u3059\uff0e \u3053\u308c\u306f\u9ed2\u6a4b\u541b\u304c\u521d\u3081\u3066\u53c2\u52a0\u3059\u308b ABC \u3068\u3057\u3066\u3075\u3055\u308f\u3057\u3044\u3067\u3059\uff0e\n\n# \u5165\u529b\u4f8b 2\n# 112\n\n# \u51fa\u529b\u4f8b 2\n# 222\n\n# \u6b21\u306b\u884c\u308f\u308c\u308b ABC \u306f\u7b2c 112\u56de\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\uff0c\u7b2c 111 \u56de\u306e ABC \u306b\u306f\u3082\u3046\u53c2\u52a0\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\uff0e \n# \u9ed2\u6a4b\u541b\u304c\u521d\u3081\u3066\u53c2\u52a0\u3059\u308b ABC \u3068\u3057\u3066\u3075\u3055\u308f\u3057\u3044\u3082\u306e\u306e\u3046\u3061\uff0c\u6700\u3082\u65e9\u3044\u3082\u306e\u306f\u7b2c 222\u56de\u3067\u3059\uff0e\n\n# \u5165\u529b\u4f8b 3\n# 750\n\n# \u51fa\u529b\u4f8b 3\n# 777\n\n\ndef calculation(lines):\n    N = int(lines[0])\n    # X, Y = list(map(int, lines[0].split()))\n    # n = lines[0]\n\n    if N % 111 == 0:\n        result = N\n    else:\n        result = -(-N\/\/111) * 111 \n\n    return [result]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['111']\n        lines_export = [111]\n    if pattern == 2:\n        lines_input = ['112']\n        lines_export = [222]\n    if pattern == 3:\n        lines_input = ['750']\n        lines_export = [777]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(2)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s236362755":{
    "code_string":"from collections import Counter\nn = int(input())\nv = list(map(int,input().split()))\n\nif len(set(v)) == 1:\n    print(n\/\/2)\nelse:\n\n    c1 = Counter(v[::2])\n    c2 = Counter(v[1::2])\n    o = c1.most_common(2)\n    e = c2.most_common(2)\n    o.append((0,0))\n    e.append((0,0))\n    if o[0][0] == e[0][0]:\n        print(min(n-o[1][1]-e[0][1],n-o[0][1]-e[1][1]))\n    else:\n        print(n-o(2)[0][1]-e(2)[0][1])",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s857548324":{
    "code_string":"import itertools\n\nn = int(input())\nlist_A = list(map(int, input().split()))\nL, R = [], []\nA, B = [[-1, 0], [-1, 0]]\n\nfor i in range(n):\n    if i % 2 == 0:\n        L.append(list_A[i])\n    else:\n        R.append(list_A[i])\n\nL = itertools.groupby(L)\nfor key, group in L:\n    A.append([key, len(list(group))])\n\nA.sort(key=lambda x:x[1], reverse=True)\n\nR = itertools.groupby(R)\nfor key, group in R:\n    B.append([key, len(list(group))])\n\nB.sort(key=lambda x:x[1], reverse=True)\n\nif A[0][0] != B[0][0]:\n    print(n - A[0][1] - B[0][1])\nelse:\n    print(min(n - A[1][1] - B[0][1], n - A[0][1] - B[1][1]))",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s165873300":{
    "code_string":"from collections import deque\nn=int(input())\nv=list(map(int,input().split()))\nd1={}\nd2={}\nl1=[]\nl2=[]\nfor i in range(n):\n    num=v[i]\n    if i%2==0:\n        try:\n            d1[num]+=1\n        except:\n            d1[num]=1\n    else:\n        try:\n            d2[num]+=1\n        except:\n            d2[num]=1\nfor i in d1:\n    l1.append([d1[i],i])\nfor i in d2:\n    l2.append([d2[i],i])\nl1.sort(reverse=True)\nl2.sort(reverse=True)\nans=n\nif l1[0][1]!=l2[0][1]:\n    ans-=(l1[0][0]+l2[0][0])\nelif len(l1)==1 and len(l2)==1:\n    ans\/\/=2\nelif len(l1)==1:\n    ans-=l2[1][0]\nelif len(l2)==1\n    ans-=l1[1][0]\nelse:\n    a=ans-l1[0][0]-l2[1][0]\n    b=ans-l1[1][0]-l2[0][0]\n    ans=min(a,b)\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s030256023":{
    "code_string":"n=int(input())\nv=list(map(int,input().split()))\nd1=[0]*(10**5+1)\nd2=[0]*(10**5+1)\n\nfor i in range(n):\n    if i%2==0:\n        d1[v[i]]+=1\n    else:\n        d2[v[i]]+=1\nassert n-max(d1)-max(d2)<0\nprint(n-max(d1)-max(d2))\n",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p03244\/Python\/s030256023.py\", line 11, in <module>\n    assert n-max(d1)-max(d2)<0\nAssertionError\n"
  },
  "s197002289":{
    "code_string":"N=int(input())\n*V,=map(int,input().split())\nimport Counter from collections \n\nc1=Counter(V[0::2]).most_common()+[(0,0)]\nc2=Counter(V[1::2]).most_common()+[(0,0)]\nif c1[0][0]!=c2[0][0]:\n    print(N-c1[0][1]-c2[0][1])\nelse:\n    print(min(N-c1[0][1]-c2[1][1],N-c1[1][1]-c2[0][1]))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s120138206":{
    "code_string":"a,b,c=input()\nif a<b:\n  a,b=b,a\nif b<c:\n  b,c=c,b\nif a<b:\n  a,b=b,a\nprint(10*a+b+c)",
    "error_obj":"ValueError: too many values to unpack (expected 3)"
  },
  "s489661795":{
    "code_string":"a=list(map(int,input().split))\na=sorted(a)\nd=str(a[2])+str(a[1])\nprint(int(d)+a[0])",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s783904772":{
    "code_string":"A,B,C = I()\nif max(A,B,C) == A:\n    print(A*10+B+C)\nif max(A,B,C) == B:\n    print(B*10+A+C)\nelse:\n    print(C*10+A+B)",
    "error_obj":"NameError: name 'I' is not defined"
  },
  "s739638278":{
    "code_string":"l = list(map(int,input().split()))\nl.sort()\na =list[2]*10+list[1]+list[2]\nprint(a)",
    "error_obj":"TypeError: unsupported operand type(s) for *: 'types.GenericAlias' and 'int'"
  },
  "s953010010":{
    "code_string":"A = list(map(int, input().split()))\nA.sort(reverse = True)\n\nprint(A[0] * 10 + A[1] + A[2]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s684751753":{
    "code_string":"A,B,C=input().split()\nichi=eval(AB+C)\ntwo=eval(A+BC)\nprint(max(ichi,two))",
    "error_obj":"NameError: name 'AB' is not defined"
  },
  "s993445239":{
    "code_string":"A, B, C = map(int, input().split())\nm = max(A, B, C)\nprint(m * 9 + sum(A, B, C))",
    "error_obj":"TypeError: sum() takes at most 2 arguments (3 given)"
  },
  "s704650160":{
    "code_string":"# abc110_a.py\n# https:\/\/atcoder.jp\/contests\/abc110\/tasks\/abc110_a\n\n# A - Maximize the Formula \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 100\u70b9\n\n# \u554f\u984c\u6587\n# \u3042\u306a\u305f\u306f\u5b50\u4f9b\u306b\u30b2\u30fc\u30e0\u3092\u30d7\u30ec\u30a4\u3055\u305b\u3001\u305d\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u304a\u5c0f\u9063\u3044\u3092\u3042\u3052\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n# \u305d\u306e\u30b2\u30fc\u30e0\u306e\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n#     1\u4ee5\u4e0a 9 \u4ee5\u4e0b\u306e\u6574\u6570 1 \u3064\u304c\u66f8\u304b\u308c\u305f\u6574\u6570\u30d1\u30cd\u30eb 3 \u679a\u3068 + \u304c\u66f8\u304b\u308c\u305f\u6f14\u7b97\u5b50\u30d1\u30cd\u30eb 1\u679a\u304c\u3042\u308b\n#     \u3053\u308c\u3089 4\u679a\u306e\u30d1\u30cd\u30eb\u3092\u6a2a\u4e00\u5217\u306b\u4e26\u3079\u3066 X+Y\u306e\u5f62\u306e\u6570\u5f0f\u3092\u4f5c\u308b (\u3059\u306a\u308f\u3061\u3001\u6f14\u7b97\u5b50\u30d1\u30cd\u30eb\u3092\u7aef\u306b\u7f6e\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044)\n#     \u6570\u5f0f\u3092\u8a08\u7b97\u3057\u305f\u7d50\u679c\u3068\u540c\u3058\u5024\u306e\u304a\u5c0f\u9063\u3044\u3092\u3042\u3052\u308b\n\n# \u30b2\u30fc\u30e0\u3067\u4f7f\u7528\u3059\u308b\u5404\u6574\u6570\u30d1\u30cd\u30eb\u306e\u5024 A,B,C\u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001\u3042\u3052\u308b\u3053\u3068\u306b\u306a\u308a\u5f97\u308b\u304a\u5c0f\u9063\u3044\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5236\u7d04\n#     \u5165\u529b\u306f\u3059\u3079\u3066\u6574\u6570\u3067\u3042\u308b\n#     1\u2264A,B,C\u22649\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# A B C\n\n# \u51fa\u529b\n# \u3042\u3052\u308b\u3053\u3068\u306b\u306a\u308a\u5f97\u308b\u304a\u5c0f\u9063\u3044\u306e\u6700\u5927\u5024\u3092\u51fa\u529b\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 1 5 2\n\n# \u51fa\u529b\u4f8b 1\n# 53\n\n# 52+1 \u3068\u4e26\u3079\u305f\u3068\u304d\u306b\u3042\u3052\u308b\u3053\u3068\u306b\u306a\u308b\u304a\u5c0f\u9063\u3044\u306f 53\u3068\u306a\u308a\u3053\u308c\u304c\u6700\u5927\u3067\u3059\u3002\n\n# \u5165\u529b\u4f8b 2\n# 9 9 9\n\n# \u51fa\u529b\u4f8b 2\n# 108\n\n# \u5165\u529b\u4f8b 3\n# 6 6 7\n\n# \u51fa\u529b\u4f8b 3\n# 82\n\n\ndef calculation(lines):\n    # N = int(lines[0])\n    a, b, c = list(map(int, lines[0].split()))\n    result = max(a, b, c) * 9 + a + b + c\n    return [result]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['1 5 2']\n        lines_export = [53]\n    if pattern == 2:\n        lines_input = ['9 9 9']\n        lines_export = [108]\n    if pattern == 3:\n        lines_input = ['6 6 7']\n        lines_export = [82]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(2)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s587911146":{
    "code_string":"A, B, C = map(int, input().split())\n\nprint(max(A * 10 + B + C, A + N * 10 + C))",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s141252302":{
    "code_string":"# abc110_b.py\n# https:\/\/atcoder.jp\/contests\/abc110\/tasks\/abc110_b\n\n# B - 1 Dimensional World's Tale \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 200\u70b9\n\n# \u554f\u984c\u6587\n# \u3053\u306e\u4e16\u754c\u306f 1\u6b21\u5143\u4e16\u754c\u3067\u3042\u308a\u3001\u4e16\u754c\u3092\u6cbb\u3081\u308b 2\u3064\u306e\u5e1d\u56fd\u306f\u305d\u308c\u305e\u308c A \u5e1d\u56fd\u3001B \u5e1d\u56fd\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n# A \u5e1d\u56fd\u306e\u9996\u90fd\u306f\u5ea7\u6a19 X\u3001B \u5e1d\u56fd\u306e\u9996\u90fd\u306f\u5ea7\u6a19 Y\u306b\u4f4d\u7f6e\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3042\u308b\u65e5\u3001A \u5e1d\u56fd\u306f\u5ea7\u6a19 x1,x2,...,xN\u3001B \u5e1d\u56fd\u306f\u5ea7\u6a19 y1,y2,...,yM\u306e\u90fd\u5e02\u3092\u652f\u914d\u4e0b\u306b\u7f6e\u304d\u305f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n# \u3053\u306e\u3068\u304d\u3001\u4ee5\u4e0b\u306e 3\u3064\u306e\u6761\u4ef6\u3092\u3059\u3079\u3066\u6e80\u305f\u3059\u6574\u6570 Z\u304c\u5b58\u5728\u3059\u308c\u3070\u3001\u5408\u610f\u304c\u6210\u7acb\u3057\u3066\u6226\u4e89\u306f\u8d77\u304d\u307e\u305b\u3093\u304c\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f\u6226\u4e89\u304c\u8d77\u3053\u308a\u307e\u3059\u3002\n#     X<Z\u2264Y\n#     x1,x2,...,xN<Z\n#     y1,y2,...,yM\u2265Z\n# \u6226\u4e89\u304c\u8d77\u3053\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5236\u7d04\n#     \u5165\u529b\u306f\u3059\u3079\u3066\u6574\u6570\u3067\u3042\u308b\n#     1\u2264N,M\u2264100\n#     \u2212100\u2264X<Y\u2264100\n#     \u2212100\u2264xi,yi\u2264100\n#     x1,x2,...,xN\u2260X\n#     xi\u306f\u3059\u3079\u3066\u7570\u306a\u308b\n#     y1,y2,...,yM\u2260Y\n#     yi\u306f\u3059\u3079\u3066\u7570\u306a\u308b\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# N M X Y\n# x1 x2 ... xN\n# y1 y2 ... yM\n\n# \u51fa\u529b\n# \u6226\u4e89\u304c\u8d77\u3053\u308b\u306a\u3089 War\u3001\u305d\u3046\u3067\u306a\u3044\u306a\u3089 No War \u3092\u51fa\u529b\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 3 2 10 20\n# 8 15 13\n# 16 22\n\n# \u51fa\u529b\u4f8b 1\n# No War\n\n# Z=16\u3068\u3059\u308c\u3070\u3001\u6b21\u306e\u3088\u3046\u306b 3\u3064\u306e\u6761\u4ef6\u3092\u3059\u3079\u3066\u6e80\u305f\u3059\u306e\u3067\u5408\u610f\u304c\u6210\u7acb\u3057\u3001\u6226\u4e89\u306f\u8d77\u304d\u307e\u305b\u3093\u3002\n#     X=10<16\u226420=Y\n#     8,15,13<16\n#     16,22\u226516\n\n# \u5165\u529b\u4f8b 2\n# 4 2 -48 -1\n# -20 -35 -91 -23\n# -22 66\n\n# \u51fa\u529b\u4f8b 2\n# War\n\n# \u5165\u529b\u4f8b 3\n# 5 3 6 8\n# -10 3 1 5 -100\n# 100 6 14\n\n# \u51fa\u529b\u4f8b 3\n# War\n\n\ndef calculation(lines):\n    # N = int(lines[0])\n    N, M, X, Y = list(map(int, lines[0].split()))\n    xs = list(map(int, lines[1].split()))\n    ys = list(map(int, lines[2].split()))\n    xs.append(X)\n    ys.append(Y)\n    max_x = max(xs)\n    min_y = min(ys)\n    if max_x < min_y:\n        return ['No War']\n    else:\n        return ['War']\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['3 2 10 20', '8 15 13', '16 22']\n        lines_export = ['No War']\n    if pattern == 2:\n        lines_input = ['4 2 -48 -1', '-20 -35 -91 -23', '-22 66']\n        lines_export = ['War']\n    if pattern == 3:\n        lines_input = ['5 3 6 8', '-10 3 1 5 -100', '100 6 14']\n        lines_export = ['War']\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(2)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s675516138":{
    "code_string":"n,m,X,Y=sorted(map(int,input().split()))\nx=max([X],max(map(int,input().split())))\ny=min([Y],min(map(int,input().split())))\nprint(\"No War\" if x<y else \"War\")",
    "error_obj":"TypeError: '>' not supported between instances of 'int' and 'list'"
  },
  "s989411939":{
    "code_string":"n,m,x,y=map(int,input().split())\nxx=list(map(int,input().split()))\nyy=list(map(int,input().split()))\nxxx=max(xx+list(x))\nyyy=min(yy+list(y))\nif xxx<yyy:\n  print(\"No War\")\nelse:\n  print(\"War\")",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s330465650":{
    "code_string":"x=list(map(int,input().split()))\ny=list(map(int,input().split()))\n \nx.sort(reverse=True)\ny.sort()\n \n \nflag=0\nfor i in range(X+1,Y+1):\n  if x[0]<=i and y[0]>i:\n    flag=1\n    break\n  \n \n  else:\n    flag=0\n    \nif flag==1:\n  print('No War')\n  \nelse:\n  print('War')",
    "error_obj":"NameError: name 'X' is not defined"
  },
  "s226888449":{
    "code_string":"N,M,X,Y=map(int,input().split())\nListX = list(map(int, input().split()))\nListY = list(map(int, input().split()))\nListX.sort()\nListX.sort()\nthreX = max(X,List[N-1])\nthreY = min(Y,List[0])\nZ = threX+1\nif threY >= Z:\n  print(\"No War\")\nelse:\n  print(\"War\")\n  ",
    "error_obj":"NameError: name 'List' is not defined"
  },
  "s615784181":{
    "code_string":"n,m,x,y = map(list(input().split()))\na = map(list(input().split()))\nb = map(list(input().split()))\nmax_x = max(a)\nmax_y = max(b)\nmax_x = max(max_x,x)\nmax_y = max(max_y,y)\n\nif max_x < max_y:\n  print(\"No War\")\nelse:\n  print(\"War\")",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s645294470":{
    "code_string":"N,M,X,Y = map(int,input().split())\nx = list(map(int,input().split()))\ny = list(map(int,input().split()))\nD = min(y) - max(x)\nif D >= 0 and max(x)+D <= min(y) \n\tprint(\"No War\")\nelse:\n\tprint(\"War\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s114695366":{
    "code_string":"if __name__ == '__main__':\n\tn,m,x,y = map(int,input().split())\n\tX = list(map(int,input().split()))\n\tY = list(map(int,input().split()))\n \n\tx_max = max(X)\n\ty_min = min(Y)\n \n \tflg = False\n\tfor Z in range(x+1,y+1):\n\t\tif x_max < Z and Z <= y_min:\n\t\t\tflg = True\n\t\t\tbreak\n\n\tif flg :\n\t\tprint(\"No war\")\n\telse:\n\t\tprint(\"War\")\n ",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s171656860":{
    "code_string":"S = input()\nT = input()\n\nx = defaultdict(list)\n\nfor i, t in enumerate(T):\n    x[t].append(S[i])\n\nok = True\nfor k, v in x.items():\n    a = v[0]\n    for c in v:\n        if c != a:\n            ok = False\n            break\nif ok:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"NameError: name 'defaultdict' is not defined"
  },
  "s408417034":{
    "code_string":"import collections\na = list(input())\nb = list(input())\nA = collections.Counter(a)\nB = collections.Counter(b)\nAsort = sorted(A.values())\nBsort = sorted(B.values())\nif list(Asort.values()) == list(Bsort.values()):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"AttributeError: 'list' object has no attribute 'values'"
  },
  "s952167315":{
    "code_string":"n = int(input())\nm = int(input())\na = list(map(int,input().split()))\nM = 10000\n\ndp = [[0]*(m+1) for i in range(n+1)]\n\nfor i in range(n+1):\n    dp[i][0] = 1\n    \nfor i in range(n):\n    for j  in range(1,m+1):\n        if j - 1 - a[i] >= 0:\n            dp[i + 1][j] = (dp[i + 1][j - 1] + dp[i][j] - dp[i][j - 1 - a[i]] ) % M\n        else:\n            dp[i + 1][j] = (dp[i + 1][j - 1] + dp[i][j]) % M\n            \nprint(dp)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 6'"
  },
  "s419901136":{
    "code_string":"def main():\n  N, M = map(int, input().split())\n\n   def factorization(n):\n        arr = []\n        temp = n\n        for i in range(2, int(-(-n**0.5\/\/1))+1):\n            if temp % i == 0:\n                cnt = 0\n                while temp % i == 0:\n                    cnt += 1\n                    temp \/\/= i\n                arr.append([i, cnt])\n        if temp != 1:\n            arr.append([temp, 1])\n\n        if arr == [] and n != 1:\n            arr.append([n, 1])\n\n        return arr\n\n    mod = 10**9 + 7\n\n    def cmb(n, r, mod):\n        if (r < 0 or r > n):\n            return 0\n        r = min(r, n-r)\n        return g1[n] * g2[r] * g2[n-r] % mod\n\n    g1 = [1, 1]\n    g2 = [1, 1]\n    inverse = [0, 1]\n    for i in range(2, N+100 + 1):\n        g1.append((g1[-1] * i) % mod)\n        inverse.append((-inverse[mod % i] * (mod\/\/i)) % mod)\n        g2.append((g2[-1] * inverse[-1]) % mod)\n\n    primes = factorization(M)\n    # \u4f55\u7b87\u6240\u306b\u5206\u3051\u308b\u304b\uff08cnt\u4ee5\u4e0b\uff09,\u305d\u306e\u4e2d\u3067\u3069\u3046\u5206\u3051\u308b\u304b\uff08\u3057\u304d\u308a\u3092\u3069\u3053\u306b\u304a\u304f\u304b\uff08\u632f\u308a\u5206\u3051\u3089\u308c\u306a\u3044\u3082\u306e\u304c\u51fa\u308b\u3068\u9078\u3079\u308c\u306a\u3044\u306e\u3068\u304a\u306a\u3058\u306b\u306a\u308b\u306e\u3067\u3001cnt - \u9078\u3093\u3060\u6570\uff09\uff09\n\n    ans = 1\n\n    for p, cnt in primes:\n        tmp = cmb(N+cnt-1, N-1, mod)\n        ans *= tmp\n        ans %= mod\n\n    print(ans)\n\n\nmain()\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s834182029":{
    "code_string":"from collections import defaultdict\nN,M = map(int,input().split())\nd = defaultdict(int)\nfor i in range(2, floor(sqrt(M))+1):\n    while M % i == 0:\n        d[i] += 1\n        M \/\/= i\nif M != 1:\n    d[M] += 1\ndef comb(n,k):\n    if k == 0:\n        return 1\n    return comb(n-1,k-1) * n \/\/ k\nans = 1\nfor e in d.values():\n    ans *= comb(N+e-1, e)\nprint(ans % (10**9+7))",
    "error_obj":"NameError: name 'floor' is not defined"
  },
  "s268925556":{
    "code_string":"a=list(map(int,input().split()))\n\na.sort()\n\ns=0\ni=0\n\nif sum(a)<=x:\n    print(n)\n    exit()\nelif min(a)>x:\n    print(0)\n    exit()\nelse:\n    while s<x:\n        s+=a[i]\n        i+=1\n\nprint(i-1)",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s845454491":{
    "code_string":"n,x = map(int,input().split())\nA = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n  if A[i] > x :\n    print(ans)\n    break\n  else:\n    x -= A[i]\n    if i == N-1:\n      print(N-1)\n      break",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s210967948":{
    "code_string":"N, x = map(int, input().split())\na = sorted(map(int, input().split()))\ncnt = 0\n\nfor i in range(N):\n    x -= a[i]\n    if x < 0:\n        break\n    else:\n        s += 1\n\nprint(cnt if x <= 0 else cnt-1)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s653003427":{
    "code_string":"children = list(map(int,input().split())) \nchildren.sort()\ncount=0\nc = 0\nif x < children[0]:\n  print(0)\n  exit()\nfor i in range(n):\n  count += children[i]\n  c += 1\n  if count == x:\n    print(c)\n    exit()\n  elif count > x:\n    print(c-1)\n    exit()\n\nprint(n-1)",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s647136341":{
    "code_string":"for i in range(N):\n    print(i)\n    if x >= sort_a[i]:\n        count += 1\n        x -= sort_a[i]\n        # print(x)\n        continue\n    break\nprint(count)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s093199315":{
    "code_string":"n,x=map(int,input().split())\na=sort(list(map(int,input().split())))\n\ns=0\nnum=0\nfor i in range(len(a)):\n  if x>=a[i]:\n    x-=a[i]\n    num+=1\n  else:\n    break\n    \nprint(num)",
    "error_obj":"NameError: name 'sort' is not defined"
  },
  "s455558805":{
    "code_string":"N,x = input().split()\nA = input().split()\na = []\nfor i in range(int(N)):\n  a.append(int(A[i]))\n  \na.sort()\na.append(1)\nX = int(x)\n \nidx = 0\nwhile X>=0:\n  X = X-a[idx]\n  idx+=1\n\nprint(idx-1)",
    "error_obj":"IndexError: list index out of range"
  },
  "s197158836":{
    "code_string":"N, x = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\na_sum = [sum(a[:i+1]) for i in range(len(a))]\n\nfor i, item in enumerate(a_sum):\n    if x < item:\n        ans = i\n        break\n    elif x == item:\n        ans = i+1\n    elif x > item and i == len(a_sum):\n        ans = i\n\nprint(ans)\n\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s849601508":{
    "code_string":"n, x = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\ncount = 0\n\nfor i in a:\n    if x >= a[min]:\n        x -= i\n        count += 1\n    else:\n        pass\n        \nprint(count)",
    "error_obj":"TypeError: list indices must be integers or slices, not builtin_function_or_method"
  },
  "s598111298":{
    "code_string":"n,x=map(int,input().split())\na=list(map(int,input().split()))\nar=a.sort(reverse=True,key=int)\nans=0\nfor i in range(n):\n  x-=ar[i]\n  if x<0:\n    x+=ar[i]\n  else:\n    ans+=1\nprint(ans)\n  ",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s115361851":{
    "code_string":"import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nimport numpy as np\n\n@jit\ndef main(n, x, a):\n  cnt = 0\n  for i in a:\n    x -= i\n    if x <= 0:\n      break\n    elif i == a[-1] and x > 0:\n      break\n    cnt += 1\n  return cnt\n\nn, x = map(int, readline().split())\na = np.sort(np.array(readline().split(), np.int64))\nprint(main(n, x, a))\n",
    "error_obj":"NameError: name 'jit' is not defined"
  },
  "s456209958":{
    "code_string":"#22\nN,x = map(int,input().split())\na = list(map(int,input().split()))\ncou =0\n\na.sort()\n\nfor i in a:\n    if i >x:\n        break\n    cou +=1\n    x -= i\n    \nwhile x>0:\n    for i in a:\n        if x%i ==0:\n            cou -=1\n            break\n        while x > i:\n            x-=i\n        cou -= 1\nprint(cou)\n    ",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s648732318":{
    "code_string":"from collections import deque\n\nN, M = map(int, input().split())\ns = [list(input()) for i in range(N)]\n\nS = []\nfor i in s: #S[i]=0\u306a\u3089\u9802\u70b9i\u306e\u30e9\u30d9\u30eb\u306f\"A\"\u3001S[i]=1\u306a\u3089\u9802\u70b9i\u306e\u30e9\u30d9\u30eb\u306f\"B\"\n    if i == \"A\": S.append(0)\n    else: S.append(1)\n\n#R[i]\u306b\u306f\u9802\u70b9i\u3068\u8fba\u3067\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u9802\u70b9\u3092\u5165\u308c\u308b\nR = [list() for _ in range(N)]\n#C[i][0]\u306b\u306f\u9802\u70b9i\u3068\u8fba\u3067\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u30e9\u30d9\u30eb\"A\"\u306e\u6570\n#C[i][1]\u306b\u306f\u9802\u70b9i\u3068\u8fba\u3067\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u30e9\u30d9\u30eb\"B\"\u306e\u6570\nC = [[0, 0] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    R[a-1].append(b-1)\n    R[b-1].append(a-1)\n    C[a-1][S[b-1]] += 1\n    C[b-1][S[a-1]] += 1\n\nO = [0] * N #\u30c0\u30e1\u306a\u9802\u70b9\u306b\u306f1\u3092\u5165\u308c\u308b\nq = deque() #\u8abf\u3079\u308b\u9802\u70b9\u306e\u5019\u88dc\u30ea\u30b9\u30c8\nfor i in range(N):\n    if C[i][0] * C[i][1] == 0: #\u3082\u3057\u5c11\u306a\u304f\u3068\u3082\"A\",\"B\"\u3069\u3061\u3089\u304b\u306b\u884c\u3051\u306a\u3044\u306a\u3089\n        q.append(i)\n        O[i] = 1\n\nwhile q:\n    x = q.popleft()\n    for v in R[x]:\n        C[v][S[x]] -= 1\n        if C[v][S[x]] == 0 and O[v] != 0:\n            O[v] = 1\n            q.append(v)\n\nif sum(O) == N:\n    answer = \"No\"\nelse:\n    answer = \"Yes\"\n\nprint(answer)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s770809837":{
    "code_string":"a,b=map(int,input().split())\nfor i in range(1,4):\n  if (a*b*i)%2!=0:\n    print(\"Yes\")\n\texit()\nprint(\"No\")",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s806457746":{
    "code_string":"A,B = map(int, input().input())\n\nprint('Yes' if A%2 !=0 and B%2 !=0 else 'No')",
    "error_obj":"AttributeError: 'str' object has no attribute 'input'"
  },
  "s273914731":{
    "code_string":"a,b = map(int, input())\nif\t(a*b)%2==1:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s908735470":{
    "code_string":"A,B=map(int,input())\nif A*B%2==0 :\n  print(\"No\")\nelse :\n  print(\"Yes\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s235023537":{
    "code_string":"import sys\n\nri = lambda: int(sys.stdin.readline())\n\nprint('No' if ri() == 2 or ri() == 2 else 'Yes')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1\\n'"
  },
  "s800670592":{
    "code_string":"a,b=map(int,input().split())\nif a%2== and b%2==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s913052906":{
    "code_string":"A,B = map(int,input())\ncheck = False\nfor C in range(1,4):\n  if (A * B * C) % 2 == 1:\n    check = True\n    \nprint(\"Yes\" if check else \"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s501542792":{
    "code_string":"A, B = map(int, input().split())\nflg = True\nfor i in range(1, 4):\n    if (A * B * i) % 2 == 1:\n        flg = False\n        break\nif flg == False:\n    print('Yes')\nelif == True:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s656394875":{
    "code_string":"a, b = int(input())\nfor c in range(1, 4):\n    if (a * b * c) % 2 == 1:\n        print('Yes')\n        exit()\nprint('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1'"
  },
  "s734105793":{
    "code_string":"A,B = map(int,input().split())\nprint(['No','Yes'][A%2==1 and B%2==1]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s782710630":{
    "code_string":"A,B=list(map(int,input().split()))\n\nif A*B in [4,6,9]:\n  print('No')\nelse:\n  print('Yes')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s848388087":{
    "code_string":"N = int(input())\nW = [input() for _ in range(N)]\nWs =[]\nans = 'Yes'\n\nfor i in range(N):\n    Ws.append(W[i])\n    for j in range(1,N+1)\n        if W[i][-1] == W[j][0]:\n            break\n        else:\n            ans = 'No'\n            break\n        \n#print(Ws)\n\nif len(set(W)) != len(Ws):\n    ans = 'No'\nprint(ans)  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s700017120":{
    "code_string":"#https:\/\/atcoder.jp\/contests\/abc109\/tasks\/abc109_b\nimport collections\nN = int(input())\nWord_List = []\nSP = \"\"\nfor i in range(N):\n    CW = str(input())\n    if i == 0:\n        Word_List.append(CW)\n        SP = CW[-1]\n    elif SP != CW[0]:\n        break\n    else:\n        Word_List.append(CW)\n        SP = CW[-1]\nelse:\n    Word_List = collections.Counter(Word_List))\n    if len(Word_List) != N:\n        print(\"No\")\n    else:\n        print(\"Yes\")",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s302953466":{
    "code_string":"n=int(input())\na=[]\nx=str(input())\na[0]=x\nd=bool(True)\nfor i in range(1, n):\n  y=str(input)\n  if x[len(x)]!=y[0]:\n    d=False\n  for i in range(a.size()):\n    if y==a[i]:\n      d=False\n  a.append(y)\n\nif  d:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s733460079":{
    "code_string":"n=[input() for _ in range(int(input()))];if len(set(n))!=len(n): print('No');exit()\nprint('NYoe s'[all([1 if n[i-1][-1]==n[i][0] else 0 for i in range(1,len(n))])::2])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s561325677":{
    "code_string":"N=int(input())\nA=list(input()for i in range(N))\nif len(A)==len(set(A)):\n    if all(A[i][-1]==A[i+1][0]) for i in range(N-2):\n        print('Yes')\n    else:print('No')\nelse:print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s284802039":{
    "code_string":"n = int(input())\nalist = [input() for i in range(n)]\n \nif len(set(alist))==n:\n  if all(alist[i][-1]==alist[i+1][0])for i in range(n-1):\n    print(\"Yes\")\n  else:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s862309142":{
    "code_string":"n =int(input())\nW=[]\nw=''\nfor i in range(n):\n    if i !=0 and w[-1] !=str(input())[0]:\n        print('No')\n        exit()\n    else:\n        w=str(input())\n        W.append(w)\nif len(W) != len(list(set(W))):\n    print('No')\n    exit()\nprint('Yes')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s570421369":{
    "code_string":"N = int(input())\nm = dict()\n\nprev = input()\nm[prev] = True\nflg = True\n\nfor _ in range(N - 1):\n  s = input()\n  flg = all(flg, s not in m, prev[len(prev) - 1] == s[0])\n  m[s] = True\n  prev = s\n\nprint(\"Yes\" if flg else \"No\")",
    "error_obj":"TypeError: all() takes exactly one argument (3 given)"
  },
  "s022039351":{
    "code_string":"n=int(input())\nl=[input() for i in range(n)]\n\nif l.most_common()[0][1] != 1:\n  ans=\"No\"\nelse:\n  l_head = [i[0] for i in l]\n  l_tail = [i[-1] for i in l]\n  if l_head == l_tail:\n    ans=\"Yes\"\n  else:\n    ans=\"No\"\n    \nprint(ans)\n  ",
    "error_obj":"AttributeError: 'list' object has no attribute 'most_common'"
  },
  "s878673786":{
    "code_string":"N = int(input())\nw = input()\nW_list = [w]\nfor i in range(N-1):\n  W = input()\n  if w[-1] == W[0] and W not in W.list:\n    W_list.append(w)\n    w = W\n  else:\n    print(\"No\")\n    exit()\nprint(\"Yes\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'list'"
  },
  "s437636991":{
    "code_string":"import sys\nimport numpy as np\nimport collections as cl\nimport itertools as it\n# import more_itertools as mit\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(100000)\n\nn = int(readline())\nw = list(readlines().split())\ndic = set()\n\nfor i in w:\n    if i == 0:\n        dic.append(i)\n        continue\n    if i in dic or dic[i-1][-1] != dic[i][0]:\n        print('No')\n        sys.exit()\n    dic.append(i)\nprint('Yes')",
    "error_obj":"AttributeError: 'list' object has no attribute 'split'"
  },
  "s635252777":{
    "code_string":"# abc109_b.py\n# https:\/\/atcoder.jp\/contests\/abc109\/tasks\/abc109_b\n\n# B - Shiritori \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 200\u70b9\n\n# \u554f\u984c\u6587\n# \u9ad8\u6a4b\u304f\u3093\u306f\u4eca\u65e5\u3082 1\u4eba\u3067\u3057\u308a\u3068\u308a\u306e\u7df4\u7fd2\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3057\u308a\u3068\u308a\u3068\u306f\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u3067\u904a\u3070\u308c\u308b\u30b2\u30fc\u30e0\u3067\u3059\u3002\n#     \u306f\u3058\u3081\u3001\u597d\u304d\u306a\u5358\u8a9e\u3092\u767a\u8a00\u3059\u308b\n#     \u4ee5\u964d\u3001\u6b21\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5358\u8a9e\u3092\u767a\u8a00\u3059\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\n#         \u305d\u306e\u5358\u8a9e\u306f\u307e\u3060\u767a\u8a00\u3057\u3066\u3044\u306a\u3044\u5358\u8a9e\u3067\u3042\u308b\n#         \u305d\u306e\u5358\u8a9e\u306e\u5148\u982d\u306e\u6587\u5b57\u306f\u76f4\u524d\u306b\u767a\u8a00\u3057\u305f\u5358\u8a9e\u306e\u672b\u5c3e\u306e\u6587\u5b57\u3068\u4e00\u81f4\u3059\u308b\n# \u9ad8\u6a4b\u304f\u3093\u306f\u300110\u79d2\u9593\u306b\u3067\u304d\u308b\u3060\u3051\u591a\u304f\u306e\u5358\u8a9e\u3092\u767a\u8a00\u3059\u308b\u7df4\u7fd2\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n# \u9ad8\u6a4b\u304f\u3093\u304c\u767a\u8a00\u3057\u305f\u5358\u8a9e\u306e\u500b\u6570 N\u3068 i \u756a\u76ee\u306b\u767a\u8a00\u3057\u305f\u5358\u8a9e Wi\u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001\n# \u3069\u306e\u767a\u8a00\u3082\u3057\u308a\u3068\u308a\u306e\u30eb\u30fc\u30eb\u3092\u5b88\u3063\u3066\u3044\u305f\u304b\u3092\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5236\u7d04\n#     N\u306f 2\u2264N\u2264100\u3092\u6e80\u305f\u3059\u6574\u6570\u3067\u3042\u308b\n#     Wi\u306f\u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\u9577\u3055 1 \u4ee5\u4e0a 10\u4ee5\u4e0b\u306e\u6587\u5b57\u5217\u3067\u3042\u308b\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# N\n# W1\n# W2\n# :\n# WN\n\n# \u51fa\u529b\n# \u9ad8\u6a4b\u304f\u3093\u306e\u3069\u306e\u767a\u8a00\u3082\u3057\u308a\u3068\u308a\u306e\u30eb\u30fc\u30eb\u3092\u5b88\u3063\u3066\u3044\u305f\u306a\u3089 Yes\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070 No \u3092\u51fa\u529b\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 4\n# hoge\n# english\n# hoge\n# enigma\n\n# \u51fa\u529b\u4f8b 1\n# No\n\n# hoge \u304c\u8907\u6570\u56de\u767a\u8a00\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u308a\u3068\u308a\u306e\u30eb\u30fc\u30eb\u3092\u5b88\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\n# \u5165\u529b\u4f8b 2\n# 9\n# basic\n# c\n# cpp\n# php\n# python\n# nadesico\n# ocaml\n# lua\n# assembly\n\n# \u51fa\u529b\u4f8b 2\n# Yes\n\n# \u5165\u529b\u4f8b 3\n# 8\n# a\n# aa\n# aaa\n# aaaa\n# aaaaa\n# aaaaaa\n# aaa\n# aaaaaaa\n\n# \u51fa\u529b\u4f8b 3\n# No\n\n# \u5165\u529b\u4f8b 4\n# 3\n# abc\n# arc\n# agc\n\n# \u51fa\u529b\u4f8b 4\n# No\n\n\ndef calculation(lines):\n    N = int(lines[0])\n    # A, B = list(map(int, lines[0].split()))\n    last_letter = lines[1][0]\n    values = list()\n    for i in range(1, N+1):\n        line = lines[i]\n        if line[0] != last_letter:\n            return ['No']\n        last_letter = line[-1:]\n        if line in values:\n            return ['No']\n        values.append(line)\n    return ['Yes']\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['4', 'hoge', 'english', 'hoge', 'enigma']\n        lines_export = ['No']\n    if pattern == 2:\n        lines_input = ['9', 'basic', 'c', 'cpp', 'php', 'python', 'nadesico', 'ocaml', 'lua', 'assembly']\n        lines_export = ['Yes']\n    if pattern == 3:\n        lines_input = ['8', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaa', 'aaaaaaa']\n        lines_export = ['No']\n    if pattern == 4:\n        lines_input = ['3', 'abc', 'arc', 'agc']\n        lines_export = ['No']\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines()\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"TypeError: get_input_lines() missing 1 required positional argument: 'lines_count'"
  },
  "s253923041":{
    "code_string":"n=int(input())\ns=input()\nans=0\nfor i in range(n):\n  keep=s[-1]\n  s=input()\n  if keep != s[0]:\n    ans=1\n  else:\n    continue\nprint([\"Yes\",\"No\"][ans])\n    \n  ",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s859882638":{
    "code_string":"N = int(input())\nwords = []\nfor _ in range(N):\n    words.append(input())\nprint('Yes' if all(w[i].startswith(w[i-1][-1]) for i in range(1, N)) and len(set(words)) == N else 'No')",
    "error_obj":"NameError: name 'w' is not defined"
  },
  "s680981759":{
    "code_string":"Row = int(input())\nflag = True\nList = []\nfor i in range (Row):\n  List.append(int(input()))\ns_l = set(List)\nif len(List) != len(s_l):\n  print(\"No\")\nfor i in range(Row-1):\n  n = len(List[i])-1\n  if List[i][n] != List[i+1][0]:\n    flag = False\nif flag:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'hoge'"
  },
  "s032717413":{
    "code_string":"import sys\nimport math\n\n\nN, X = map(int, input().split())\nA = list(map(int, input().split()))\n\nif N == 1:\n    print(A[0]-X)\n    sys.exit()\n\nA.append(X)\nA = sorted(A)\n\nanslis = [0]*N\n\nfor i in range(N):\n    anslis[i] = A[i+1] - A[i]\n\ng = anslis.pop(0)\nfor c in cost_li:\n    g = math.gcd(g,c)\n\nprint(g)",
    "error_obj":"NameError: name 'cost_li' is not defined"
  },
  "s666620224":{
    "code_string":"from functols import reduce\nfrom fractions import gcd\nN,X = map(int, input().split())\nx =[abs(X-int(i)) for i in input().split()]\nprint(reduce(gcd,x))",
    "error_obj":"ModuleNotFoundError: No module named 'functols'"
  },
  "s137046905":{
    "code_string":"import math\nfrom functools import reduce\nN, X = map(int, input().slpit())\nx = list(map(int,input().split()))\n \nfor i in range(N):\n    x[i] = abs(x[i]-X)\n \nx = sorted(x)[::-1]\ncnt = 0\n \nfor i in range(N):\n    cnt = math.gcd(cnt, x[i])\n \nprint(cnt)",
    "error_obj":"AttributeError: 'str' object has no attribute 'slpit'"
  },
  "s512400919":{
    "code_string":"# \u6700\u5927\u516c\u7d04\u6570(math\u306f3.5\u4ee5\u964d) \nimport math\nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\n# \u521d\u671f\u5165\u529b\nimport sys\n#input = sys.stdin.readline  #\u6587\u5b57\u5217\u3067\u306f\u4f7f\u308f\u306a\u3044\nN,X = map(int, input().split())\nx = list(map(int, input().split()))\n\n# \uff58\u306e\u96a3\u540c\u58eb\u306e\u8ddd\u96e2\u30ea\u30b9\u30c8\nx_div =[abs(X-x[0])] #\u521d\u9805\nfor i in range(N):\n    x_div.append(abs(x[i] -x[i+1]))\n\n#x_div\u306e\u6700\u5927\u516c\u7d04\u6570\nif N ==1:\n    ans =abs(x[0] -X)\nelse:\n    ans =gcd_list(x_div)\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s235912956":{
    "code_string":"import fractions\ndef gcdlist(a):\n    ans = a[0]\n    for i in range(1, len(a)):\n        ans = fractions.gcd(ans, a[i])\n    return ans\n\nn,y=map(int,input().split())\nx=list(map(int,input().split()))\nl=[]\nif y==1:\n    print(abs(x[0]-1))\n    exit()\n\nfor i in range(n-1):\n    l.append(abs(x[i+1]-x[i]))\nprint(gcdlist(l)) ",
    "error_obj":"AttributeError: module 'fractions' has no attribute 'gcd'"
  },
  "s961721764":{
    "code_string":"def mapt(fn, *args):\n    return list(map(fn, *args))\n\n\ndef Input():\n    return mapt(int, input().split(\" \"))\n\ndef main():\n    N, X = Input()\n    x = Input()\n\n    data = [abs(X - x[i]) for i in range(N)]\n    ans = data[0]\n    for i in range(1, len(data)):\n        ans = gcd(data[i], ans)\n    print(ans)\n\n\n\nmain()",
    "error_obj":"NameError: name 'gcd' is not defined"
  },
  "s907785571":{
    "code_string":"import math\nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\nN, X = list(map(int, input().split()))\n\nx = list(map(int, input().split()))\nx.append(X)\nx.sort()\n\nres = [abs(x[i+1]-x[i]) for i in range(len(x))]\nprint(gcd(*res))",
    "error_obj":"IndexError: list index out of range"
  },
  "s462189816":{
    "code_string":"#coding: utf-8\nfrom collections import deque\n\nH, W = (int(x) for x in input().split())\nA = []\n\nposOdd = deque() \ni = 0\nj = 0\n\nwhile (i, j) != H-1, W-1:\n    if i\n\nfor i in range(H):\n    row = [int(x) for x in input().split()]\n    A.append(row)\n\n\n\ndef move(src, dst):\n    ret = []\n    while src[0] != dst[0]:\n        if src[0] > dst[0]:\n            di = -1\n        else:\n            di = 1\n        ret.append((src[0], src[1], src[0]+di, src[1]))\n        src[0] += di \n    return ret\n\n    while src[1] != dst[1]:\n        if src[1] > dst[1]:\n            dj = -1\n        else:\n            dj = 1\n        ret.append((src[0], src[1], src[0], src[1]+dj))\n        src[1] += dj \n\nmoves = []\nwhile len(posOdd) > 1:\n    dst = posOdd.popleft()\n    src = posOdd.popleft()\n    moves += move(src, dst)\n\nprint(len(moves))\nfor m in moves:\n    print(\" \".join((str(i+1) for i in m)))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s644188742":{
    "code_string":"def main():\n    n = int(input())\n\n    ans = 0\n    for a, b in (list(combinations(range(1, n+1), 2))):\n        if (a%2==0 and b%2 != 0) or (b%2==0 and a%2!=0):\n            ans += 1\n\n    print(ans)\n\n\nmain()",
    "error_obj":"NameError: name 'combinations' is not defined"
  },
  "s842030463":{
    "code_string":"k = int(input())\nif k %2 == 0:\n  print(int(k*k\/2\/2))\nelif k%2 ==1:\n  print(int((k\/2)*(k\/\/2)\/2)\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s848689892":{
    "code_string":"K=int(input())\nprint(K\/\/2*(K\/\/2+k%2))",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s631795495":{
    "code_string":"K = int(input())\n\nev = K\/\/2\nodd = k\/\/2 + K%2\nprint(ev*odd)",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s852920296":{
    "code_string":"a=int(input)\nif a%2==0:\n  print(a*a)\nelse:\n  print((a-1)*a)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s404907266":{
    "code_string":"a=input()\na=int(a)\nif a%2==0:\n  print(int((a\/2)**2))\nelse:\n  print(int(a\/2)*2(int(int(a\/2)+1)))\n",
    "error_obj":"SyntaxWarning: 'int' object is not callable; perhaps you missed a comma?"
  },
  "s657011098":{
    "code_string":"# abc108_a.py\n# https:\/\/atcoder.jp\/contests\/abc108\/tasks\/abc108_a\n\n# A - Pair \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 100\u70b9\n\n# \u554f\u984c\u6587\n# 1\u4ee5\u4e0a K\u4ee5\u4e0b\u306e\u6b63\u306e\u6574\u6570\u304b\u3089\u3001\u5076\u6570\u3068\u5947\u6570\u3072\u3068\u3064\u305a\u3064\u306e\u7d44\u3092\u9078\u3076\u65b9\u6cd5\u306e\u500b\u6570\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\u306a\u304a\u3001\u9078\u3076\u9806\u756a\u306f\u8003\u616e\u3057\u307e\u305b\u3093\u3002\n\n# \u5236\u7d04\n#     2\u2264K\u2264100\n#     K\u306f\u6574\u6570\u3067\u3042\u308b\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# K\n\n# \u51fa\u529b\n# 1\u4ee5\u4e0a K\u4ee5\u4e0b\u306e\u6b63\u306e\u6574\u6570\u304b\u3089\u3001\u5076\u6570\u3068\u5947\u6570\u3072\u3068\u3064\u305a\u3064\u306e\u7d44\u3092\u9078\u3076\u65b9\u6cd5\u306e\u500b\u6570\u3092\u51fa\u529b\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 3\n\n# \u51fa\u529b\u4f8b 1\n# 2\n\n# (2,1)\u3068 (2,3)\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3057\u307e\u3059\u3002\n\n# \u5165\u529b\u4f8b 2\n# 6\n\n# \u51fa\u529b\u4f8b 2\n# 9\n\n# \u5165\u529b\u4f8b 3\n# 11\n\n# \u51fa\u529b\u4f8b 3\n# 30\n\n# \u5165\u529b\u4f8b 4\n# 50\n\n# \u51fa\u529b\u4f8b 4\n# 625\n\n\ndef calculation(lines):\n    # N, K = list(map(int, lines[0].split()))\n    N = int(lines[0])\n    if N%2 == 0:\n        ans = (N\/2)**2\n    else:\n        ans = ((N+1)\/2 * (N-1)\/2)\n    return [int(ans)]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['3']\n        lines_export = [2]\n    if pattern == 2:\n        lines_input = ['6']\n        lines_export = [9]\n    if pattern == 3:\n        lines_input = ['11']\n        lines_export = [30]\n    if pattern == 4:\n        lines_input = ['50']\n        lines_export = [625]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(2)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s715724118":{
    "code_string":"n=int(input())\nif n%2==0:\n    print((n\/\/2)*(n\/\/2+1)\nelse:\n    print((n\/\/2)**2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s401335331":{
    "code_string":"n=int(input())\nprint((k\/\/2)*((k+1)\/\/2))",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s904782892":{
    "code_string":"a=int(input())\nif a%2==0:\n  ans=(a\/2)**2\n  return\nelse:\n  ans=((a-1)\/2)*((a+1)\/2)\n  return\nprint(ans)",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s488883313":{
    "code_string":"Dist = abs(y1-y2)**2+abs(x1-x2)**2\ndist = Dist**0.5\nif x2 >= x1 and y2 >= y1:\n  x3=x2-abs(y2-y1)\n  x4=x1-abs(y2-y1)\n  y3=y2+abs(x2-x1)\n  y4=y1+abs(x2-x1)\nelif x2 < x1 and y2 >= y1:\n  x3=x2-abs(y2-y1)\n  x4=x1-abs(y2-y1)\n  y3=y2-abs(x2-x1)\n  y4=y1-abs(x2-x1)\nelif x2 < x1 and y1 >= y2:\n  x3=x2+abs(y2-y1)\n  x4=x1+abs(y2-y1)\n  y3=y2-abs(x2-x1)\n  y4=y1-abs(x2-x1)\nelse:\n  x3=x2+abs(y2-y1)\n  x4=x1+abs(y2-y1)\n  y3=y2+abs(x2-x1)\n  y4=y1+abs(x2-x1)\nprint(x3,y3,x4,y4)",
    "error_obj":"NameError: name 'y1' is not defined"
  },
  "s753853570":{
    "code_string":"x1, y1, x2, y2 = map(int, input().split())\nnx = x2\nny = y2\nl = []\nfor i in range(2) :\n    dx, dy = -dy, dx\n    nx += dx\n    ny += dy\n    l.append(nx)\n    l.append(ny)\nprint(l[0], l[1], l[2], l[3])\n",
    "error_obj":"NameError: name 'dy' is not defined"
  },
  "s092421208":{
    "code_string":"x1, y1, x2, y2 = map(int, input().split())\ndx = x2 - x1\ndy = y2 - y1\n\nx3 = x2 - dy\ny3 = y2 + dx\nx4 = x3 - dx\ny4 = y3 - dy\n\nprint(x3, y3, x4, y4",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s169146688":{
    "code_string":"n, k = map(int, input())\ncandidOdd = 0\ncandidEven = 0\ncandidEven2 = 0\nfor i in range(1, n+1):\n    if k % 2 == 1:\n        if i % k == 0:\n            candidOdd += 1\n    else:\n        if i % k == 0:\n            candidEven += 1\n        elif i % k == (k\/2):\n            candidEven2 += 1\nprint(candidOdd**3 + candidEven**3 + candidEven2**3)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s413864179":{
    "code_string":"a,b = map(int,input().split())\nreturn a - b + 1",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s030807258":{
    "code_string":"print(int(input)+1-int(input()))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s192501960":{
    "code_string":"n,i=map(int,input.split())\nprint(n-i+1)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s519867126":{
    "code_string":"a,b=map(int,input())\nprint(int(a-b+1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s194729210":{
    "code_string":"a,b=input().split()\nprint(int(a-b+1))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s557332385":{
    "code_string":"n, i = map(int, input())\nprint(n - i + 1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s609087448":{
    "code_string":"H,W = map(int,input().split())\n\ngrid = [list(str(input())) for _ in range(H)]\n\ndef elim(grid):\n    grid_after = []\n    for i in range(H):\n        gset = list(set(grid[i]))\n        #print(gset)\n        #print(grid[i])\n        if gset[0] != '.':\n            grid_after.append(grid[i])\n    return grid_after\n    \ndef transpose(grid_after):\n    \n    H1 = len(grid_after)\n    W1 = len(grid_after[0][:])\n    gridT = [['']*H1 for _ in range(W1)]\n    for i in range(W1):\n        for j in range(H1):\n            gridT[i][j] = grid_after[j][i]\n            \n            \n    return gridT\n\ngrid_after = elim(grid)\n\ngridT1 = transpose(grid_after)\n#print(gridT1)\ngrid_after2 = elim(gridT1)\n# print(grid_after2)\ngridT2 = transpose(grid_after2)\n#print(gridT2)\nfor i in gridT2:\n    print(*i,sep='')",
    "error_obj":"IndexError: list index out of range"
  },
  "s288545286":{
    "code_string":"# abc107_b.py\n# https:\/\/atcoder.jp\/contests\/abc107\/tasks\/abc107_b\n\n# B - Grid Compression \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 200\u70b9\n\n# \u554f\u984c\u6587\n# \u7e26 H\u884c\u3001\u6a2a W \u5217\u306e\u30de\u30b9\u76ee\u304c\u3042\u308a\u307e\u3059\u3002 \u4e0a\u304b\u3089 i \u884c\u76ee\u3001\u5de6\u304b\u3089 j \u5217\u76ee\u306e\u30de\u30b9\u3092 (i,j) \u3068\u8868\u3057\u307e\u3059\u3002 \n# \u5404\u30de\u30b9\u306f\u767d\u307e\u305f\u306f\u9ed2\u3067\u3059\u3002 \u30de\u30b9\u76ee\u306e\u914d\u8272\u306f\u3001H \u884c W \u5217\u306e\u884c\u5217 (ai,j) \u306b\u3088\u3063\u3066\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 \n# ai,j \u304c . \u306a\u3089\u3070\u30de\u30b9 (i,j) \u306f\u767d\u3067\u3042\u308a\u3001ai,j \u304c # \u306a\u3089\u3070\u30de\u30b9 (i,j)\u306f\u9ed2\u3067\u3059\u3002\n# \u3059\u306c\u3051\u541b\u306f\u3053\u306e\u30de\u30b9\u76ee\u3092\u5727\u7e2e\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u306b\u3001\u767d\u3044\u30de\u30b9\u306e\u307f\u304b\u3089\u306a\u308b\u884c\u307e\u305f\u306f\u5217\u304c\u5b58\u5728\u3059\u308b\u9593\u3001\u6b21\u306e\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u884c\u3044\u307e\u3059\u3002\n\n#     \u64cd\u4f5c: \u767d\u3044\u30de\u30b9\u306e\u307f\u304b\u3089\u306a\u308b\u884c\u307e\u305f\u306f\u5217\u3092\u3072\u3068\u3064\u4efb\u610f\u306b\u9078\u3073\u3001\u305d\u306e\u884c\u307e\u305f\u306f\u5217\u3092\u53d6\u308a\u9664\u3044\u3066\u7a7a\u767d\u3092\u8a70\u3081\u308b\u3002\n\n# \u5404\u64cd\u4f5c\u3067\u3069\u306e\u884c\u307e\u305f\u306f\u5217\u3092\u9078\u3076\u304b\u306b\u3088\u3089\u305a\u3001\u6700\u7d42\u7684\u306a\u30de\u30b9\u76ee\u306f\u4e00\u610f\u306b\u5b9a\u307e\u308b\u3053\u3068\u304c\u793a\u305b\u307e\u3059\u3002 \u6700\u7d42\u7684\u306a\u30de\u30b9\u76ee\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5236\u7d04\n#     1\u2264H,W\u2264100\n#     ai,j\u306f . \u307e\u305f\u306f # \u3067\u3042\u308b\u3002\n#     \u30de\u30b9\u76ee\u5168\u4f53\u3067\u5c11\u306a\u304f\u3068\u3082\u3072\u3068\u3064\u306f\u9ed2\u3044\u30de\u30b9\u304c\u5b58\u5728\u3059\u308b\u3002\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# H W\n# a1,1...a1,W\n# :\n# aH,1...aH,W\n\n# \u51fa\u529b\n# \u6700\u7d42\u7684\u306a\u30de\u30b9\u76ee\u3092\u3001\u5165\u529b\u3068\u540c\u69d8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u51fa\u529b\u305b\u3088\u3002 \u305f\u3060\u3057\u3001\u884c\u6570\u304a\u3088\u3073\u5217\u6570\u306f\u7701\u304f\u3053\u3068\u3002 \u8a73\u3057\u304f\u306f\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u7167\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 4 4\n# ##.#\n# ....\n# ##.#\n# .#.#\n\n# \u51fa\u529b\u4f8b 1\n# ###\n# ###\n# .##\n\n# \u5143\u306e\u30de\u30b9\u76ee\u306b\u304a\u3051\u308b\u7b2c 2\u884c\u304a\u3088\u3073\u7b2c 3\u5217\u304c\u305d\u308c\u305e\u308c\u53d6\u308a\u9664\u304b\u308c\u307e\u3059\u3002\n\n# \u5165\u529b\u4f8b 2\n# 3 3\n# #..\n# .#.\n# ..#\n\n# \u51fa\u529b\u4f8b 2\n# #..\n# .#.\n# ..#\n\n# \u767d\u3044\u30de\u30b9\u306e\u307f\u304b\u3089\u306a\u308b\u884c\u307e\u305f\u306f\u5217\u304c\u5b58\u5728\u3057\u306a\u3044\u306e\u3067\u3001\u64cd\u4f5c\u306f\u884c\u308f\u308c\u307e\u305b\u3093\u3002\n\n# \u5165\u529b\u4f8b 3\n# 4 5\n# .....\n# .....\n# ..#..\n# .....\n\n# \u51fa\u529b\u4f8b 3\n# #\n\n# \u5165\u529b\u4f8b 4\n# 7 6\n# ......\n# ....#.\n# .#....\n# ..#...\n# ..#...\n# ......\n# .#..#.\n\n# \u51fa\u529b\u4f8b 4\n# ..#\n# #..\n# .#.\n# .#.\n# #.#\n\n\ndef calculation(lines):\n    N, W = list(map(int, lines[0].split()))\n    masus = list()\n    for i in range(N):\n        line = lines[i+1]\n        if line != '.'*W:\n            masus.append(line)\n    for w in range(W):\n        flag = True\n        for masu in masus:\n            if masu[w] == '#':\n                flag = False\n        if flag:\n            for i in range(len(masus)):\n                masus[i] = masus[i][:w] + ' ' + masus[i][w+1:]\n    for i in range(len(masus)):\n        masus[i] = masus[i].replace(' ', '')\n    return masus\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['4 4', '##.#', '....', '##.#', '.#.#']\n        lines_export = ['###', '###', '.##']\n    if pattern == 2:\n        lines_input = ['3 3', '#..', '.#.', '..#']\n        lines_export = ['#..', '.#.', '..#']\n    if pattern == 3:\n        lines_input = ['4 5', '.....', '.....', '..#..', '.....']\n        lines_export = ['#']\n    if pattern == 4:\n        lines_input = ['7 6', '......', '....#.', '.#....', '..#...', '..#...', '......', '.#..#.']\n        lines_export = ['..#', '#..', '.#.', '.#.', '#.#']\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    if len(args) == 1:\n        mode = 0\n    else:\n        mode = int(args[1])\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(1)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s754551556":{
    "code_string":"h, w = map(int, input().split())\n\nl = []\nll = [[True for i in range(w)] for j in range(h)]\nfor _ in range(h):\n    s = input()\n    cells = list(s)\n    # print(cells)\n    l.append(cells)\n    \n# print(l)\n\nfor h_i in range(h):\n    flag = True\n    for w_i in range(w):\n        # print(l[h_i][w_i])\n        if l[h_i][w_i] == \"#\":\n            flag = False\n            break\n    if flag:\n        for w_i in range(w):\n            ll[h_i][w_i] = False\n\nfor w_i in range(w):\n    flag = True\n    for h_i in range(h):\n        # print(l[h_i][w_i])\n        if l[h_i][w_i] == \"#\":\n            flag = False\n            break\n    if flag:\n        for h_i in range(h):\n            ll[h_i][w_i] = False\n            \n# print(ll)\n\nfor i in range(h):\n    lll = []a\n    for j in range(w):\n        # print(l[i][j])\n        if ll[i][j]:\n            lll.append(l[i][j])\n    if len(lll) > 0:\n        print(''.join(lll))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s503112764":{
    "code_string":"#\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u30ae\u30d6\u30a2\u30c3\u30d7\u30b3\u30d4\u30da\nh,w=map(int,input().split())\n\na=[] #\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\u5316\nfor i in range(h):\n  x=input().split()\n  a.append(x)\n\nh1=[]\nfor i in range(h):\n  if a[i]==['.']*w:\n    h1.append(i)\n\nw1=[]\nfor i in range(w):\n  flag=0\n  for j in range(h):\n    if a[j][i]=='#':\n      flag=1\n      break\n  if flag==0:\n    w1.append(i)\n\nans=[]\nfor i in range(h):\n  if i not in h1:\n    r=[]\n    for j in range(w):\n      r.append(a[i][j])\n    ans.append(r)\n\nfor i in range(lens(ans)):\n  print(''.join(ans[i]))",
    "error_obj":"IndexError: list index out of range"
  },
  "s127518959":{
    "code_string":"H,W = map(int,input().split())\nmass = [list(input()) for _ in range(H)]\n\nfor i in range(H):\n  if \"#\" not in mass[i]:\n    mass.pop(i)\n  \nH = len(mass)\n\nnew_mass = [[] for _ in range(W)]\n\nfor j in mass:\n  for i, k in enumerate(j):\n    new_mass[i].append(k)\n    \nfor l in range(W):\n  if \"#\" not in new_mass[l]:\n    new_mass.pop(l)\n    \nmass = [[] for _ in range(H)]\n\nfor n in new_mass:\n  for i, m in enumerate(n):\n    mass[i].append(m)\n    \nprint(mass)",
    "error_obj":"IndexError: list index out of range"
  },
  "s677290411":{
    "code_string":"import sys\nimport numpy as np\n\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\n\nh, w = rm()\nli = np.array([np.array(rl()) for _ in range(h)])\nli2 = np.array([])\nli3 = np.array([])\nfor i in li:\n  if '#' not in i:\n    li2.append(i)\nli2 = li2.T\nfor i in li2:\n  if '#' not in i:\n    li3.append(i)\nfor i in li3.T:\n  print(''.join(i))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '##.#'"
  },
  "s374725846":{
    "code_string":"#\nfrom resolve import resolve\n####################################\n####################################\n# \u4ee5\u4e0b\u306b\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u5185\u5bb9\u3092\u30da\u30fc\u30b9\u30c8\u3059\u308b\n#  \nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5 3\n-30 -10 10 20 50\"\"\"\n        output = \"\"\"40\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3 2\n10 20 30\"\"\"\n        output = \"\"\"20\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"1 1\n0\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"8 5\n-9 -7 -4 -3 1 2 3 4\"\"\"\n        output = \"\"\"10\"\"\"\n        self.assertIO(input, output)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'resolve'"
  },
  "s887221093":{
    "code_string":"n,k = map(int,input().split())\nl = list(map(int,input().split()))\nls = []\nfor i in range(n-k+1):\n  a = l[i]\n  b = l[i+k-1]\n    ls.append(min(abs(a)+abs(a-b), abs(b)+abs(a-b)))\nprint(min(ls))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s190418233":{
    "code_string":"from collections import deque\n\nN,K=map(int,input().strip().split())\nx=list(map(int,input().strip().split()))\ninf=10*8\n\nl=inf\ndp=x[N-K:N-1]\ni=0\nwhile N-K-i>=0:\n    if dp[0]>=0:\n        tmp=dp[K-1]\n    elif dp[K-1]<=0:\n        tmp=-dp[0]\n    else:\n        if dp[K-1]>=dp[0]:\n            tmp=dp[0]*2+dp[K-1]\n        else:\n            tmp=dp[K-1]*2+dp[0]\n    l=min(l,tmp)\n    i+=1\n    if N-K-i<0:\n        break\n    else:\n        dp.appendleft(x[N-K-i])\n        dp.pop()\nprint(l)",
    "error_obj":"IndexError: list index out of range"
  },
  "s708626240":{
    "code_string":"n,k=map(int,input().split())\nx=list(map(int,input().split()))\n\nst=0\nm=3*10**8\nfor i in range(n-1):\n  if x[i]<0 and x[i+1]>=0:\n    st=i+1\n\nfor i in range(n-k+2):\n  mi=x[k+i-1]-x[i]+min(abs(x[k+i-1]),abs(x[i]))\n  print(x[k+i-1],x[i],mi)\n  if k+i<st or i>st:continue\n  if mi <m:m=mi\nprint(m)",
    "error_obj":"IndexError: list index out of range"
  },
  "s016664731":{
    "code_string":"N,K =(int(i) for i in input().split())\nx = (int(i) for i in input().split())\ni = 0\nt_min = float(\"inf\")\nwhile i+K <= N :\n  left = abs(x[i])+abs(x[i+K-1]-x[i])\n  right = abs(x[i+K-1])+abs(x[i+K-1]-x[i])\n  if min(left,right)<t_min:\n    t_min = min(left,right)\n  i += 1\nprint(t_min)",
    "error_obj":"TypeError: 'generator' object is not subscriptable"
  },
  "s403334532":{
    "code_string":"def main():\n    a, b = map(int, inptut().split())\n    print((a - 1) * (b - 1))\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"NameError: name 'inptut' is not defined"
  },
  "s046459277":{
    "code_string":"# -*- coding: utf-8 -*-\n\ndef main():\n\n    N = int(input())\n\n    ans = 0\n\n    for i in range(1, N+1):\n        if i % 2 == 1:\n\n            count = 0\n\n            for j in range(1, i+1):\n                if i % j == 0:\n                    count +=1\n                if count == 8:\n                    ans += 1\n        \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 2'"
  },
  "s732394092":{
    "code_string":"ans = (A * B) - (A + B - 1)\n\nprint(ans)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s041491468":{
    "code_string":"a,b=[int(i) for i in input.split()]\nprint((a-1)*(b-1))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s688538548":{
    "code_string":"import numpy as np\nAB = np.prod(np.array(list(map(int,input()))))\nprint(AB)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s858736492":{
    "code_string":"a,b=map(int,input().split)\nprint(a*b-(a+b-1))\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s305093551":{
    "code_string":"A,B = map(int(input().split()))\nans = (A-1)*(B-1)\nprint(ans)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s116769416":{
    "code_string":"print((int(input()) - 1) * (int(input()) - 1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 2'"
  },
  "s214447536":{
    "code_string":"#n = int(input())\na,b = map(str,input().split())\n#A = list(map(int,input().split()))\nans = (a-1)*(b-1)\n\nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s074051051":{
    "code_string":"a,b = map(int,input().split())\n\nprint((a-1)(b-1))",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s147319529":{
    "code_string":"n,m=input().split(\"  \")\nm=int(m)\nn=int(n)\nmulti=(m*n)-(m+n)+1\nprint(multi)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s222819632":{
    "code_string":"a,b = map(int,input())\nprint(str(a*b-a-b+1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s416074687":{
    "code_string":"\ndef solve():\n    ans = 0\n    n=int(input())\n    for i in range(1,n+1):\n        div_list = []\n        for j in range(1,int(i**0.5)+1):\n            if i%j!=0:\n                continue\n            if i\/\/j==j:\n                div_list.append(j)\n            else:\n                div_list.append(i\/\/j)\n                div_list.append(j)\n        if len(div_list)==8:\n            ans=+=1\n    print(ans)\n\nif __name__ == '__main__':\n    solve()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s302137861":{
    "code_string":"N=int(input())\nans=0\nfor i in range(1,N):\n    count=0\n    for j in range(i):\n        if i%j==0:\n            count+=1\n    if count==9:\n        ans+=1\n        \nprint(ans)",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s566391318":{
    "code_string":"\ndef yakusu(x):\n    A=[]\n    for i in range(1,x+1):\n        if x%i==0:\n            A.append()\n    return(len(A))\n    \nn=int(input())\n\nprint(yakusu(n))",
    "error_obj":"TypeError: list.append() takes exactly one argument (0 given)"
  },
  "s943037641":{
    "code_string":"a=int(input())\nif a<105:\n  print(0)\nelif 105<=a<135:\n  print(1)\nelif 135<=a<165:\n  print(2)\nelif 165<=a<189:\n  print(3)\nelif:189<=a:\n  print(4)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s545236355":{
    "code_string":"N=int(input())\n\nans=0\nodd=[]\nfor i in range(1,N+1):\n  if i%2!=0:\n    odd.append(i)\n    \nif N  <104:\n  pass\nelif N=105:\n  ans=1\nelse:\n  ans=1\n  for i in range(106,N+1):\n    if i%2 !=0:\n      tmp=0\n      for j in odd:\n        if i%j==0:\n          tmp=+1\n      if tmp==8:\n        ans+=1\n        \n        \nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s457237813":{
    "code_string":"n = int(input())\nans = 0\ncnt = 0\n\nfor i in range(1,n+1):\n  for j in range(1,n+1):\n    if i%j = 0:\n      ans += 1\n  if ans = 8:\n    cnt += 1\n\nprint(cnt)\n      \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s921493531":{
    "code_string":"in_num = int(input())\ncheck_num = 0\nans_counter = 0\n\nwhile check_num <= in_num:\n\ti = 1\n\tdiv_counter = 0\n\twhile i < check_num \/2:\n\t\tif check_num % i == 0:\n\t\t\tdiv_counter += 1\n\t\ti += 2\n\tif div_counter == 8:\n\t\tans_counter += 1\n\nprint(ans_counter)\n\n\n\n\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s519988923":{
    "code_string":"N = int(input())\n\ndef make_divisors(n):\n    ans = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            ans += 1\n            if i != n \/\/ i:\n                ans += 1\n    return ans\n\nfor i in range(1,N+1):\n    if (i %2 ==1) and (make_divisors(i) ==8):\n        ans += 1\n\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s969985695":{
    "code_string":"def resolve():\n    N = int(input())\n    ans = 0\n    for i in range(1, N+1, 2):\n        tmp = make_divisors(i)\n        if len(tmp) == 8:\n            ans += 1\n    print(ans)\n    return\n\nresolve()\n",
    "error_obj":"NameError: name 'make_divisors' is not defined"
  },
  "s380485723":{
    "code_string":"https:\/\/atcoder.jp\/contests\/abc106\/scoreN = int(input())\n#cnt = 0\nans = 0\nfor i in range(1, N+1, 2):\n    cnt = 0 \n    for j in range(1, i+1):\n        if i % j == 0:\n            cnt += 1\n    if cnt == 8:\n        ans += 1\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s191795313":{
    "code_string":"import numpy as np\nfrom sys import stdinans=0\nc=0\nN = int(input().rstrip())\nfor i in range(N):\n  c=0\n  i+=1\n  if i%2==1:\n    for j in range(i):\n      j+=1\n      if i%j==0:\n        c+=1\n  if c==8:\n    ans+=1\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s737807979":{
    "code_string":"n = int(input())\n\nli = [3,5,7,11,13]\nans = 0\nfor i in range(1,n+1):\n    cnt = 0\n    for j in range(10):\n        if i%li[j]==0:\n            cnt += 1\n    if cnt ==3:\n        ans +=1\n\nif n>=135:\n    ans += 1\nif n>=189:\n    ans += 1\n\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s793998206":{
    "code_string":"N = int(input())\na = 0\n\nfor i in range(1,1+N,2):\n  b = 0\n  for j in range(1,1+i,2):\n    if i%j==0:\n      b+=1\n    if n==8:\n      a+=1\n\nprint(a)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s117767411":{
    "code_string":"n = int(input())\nans = 0\nfor num in range(1, n):\n    if num%2 == 1:\n        continue\n    ls = []\n    for i in range(num+1):\n        if num%i == 0:\n            ls.append(i)\n    if len(ls) == 8:\n        ans += 1\nprint(ans)",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s356258475":{
    "code_string":"N = int(input())\ncnt = 0\nfor i in range(1, N + 1):\n    k = 0\n    for j in range(1, N + 1):\n        if i % j == 0:\n        k += 1\n    if k == 8:\n        cnt += 1\nprint(cnt)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s053705051":{
    "code_string":"# 105\u306e\u7d04\u6570\u306f1, 3, 5, 7, 3 * 5, 3 * 7, 5 * 7, 3 * 5 * 7\n# \u307b\u304b\u306b\u3042\u308a\u3048\u308b\u306e\u306f\n# \u24601, 3, 5, 9, ...\n# \u24611, 3, 5, 11, ...\n# \u24621, 3, 5, 13, ...\nn = int(input())\nif n < 105: print(0)\nelif n < 135: print(1)\nelif n < 165: print(2)\nelif n < 195: print(3)\nelse print(4)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s770730976":{
    "code_string":"n = int(input())\n\ndef solve(num):\n    cnt = 0\n    for i in range(1,num+1):\n        if num % i == 0:\n            cnt += 1\n    return cnt\n\nans = 0\nfor i in range(1,n+1):\n    if i % 2 == 0:\n        continue\n    if solve(i) == 8:\n        ans += 1\n\nprint(ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s199521624":{
    "code_string":"N = int(input())\nl = [105, 135, 165, 189, 195]\nfor i in range(5):\n    if N < l[i]:\n        print(i)\n        exit(1)\nprint(5)\n",
    "error_obj":""
  },
  "s888176624":{
    "code_string":"number = int(input())\n\nnum_eight_divisors = 0\n\nnumbers = list(range(9, number + 1, 2))\n\nfor i in range(9, number + 1, 2):\n    divisors = [1, i]\n\n    for j in range(2, i):\n        q, mod = divmod(i, j)\n\n        if mod == 0:\n            divisors.append(j, q)\n\n    if len(set(divisors)):\n        num_eight_divisors = num_eight_divisors + 1\n\nprint(num_eight_divisors)\n",
    "error_obj":"TypeError: list.append() takes exactly one argument (2 given)"
  },
  "s628705841":{
    "code_string":"n = int(input())\nans = 0\nfor i in range(1,n+1):\n  res = 0\n  for j in range(i+1):\n    if i % j ==0:\n      res +=1\n    if res == 8 :\n      ans +=1\n\nprint(ans)\n    ",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s332481098":{
    "code_string":"S=input();\nK=input();\ni = 0;\nfor i in range(len(S)) :\n    if int(S[i]) > 1 :\n        print(S[i]);\n        break;\n    elif i + 1 >= K :\n        print(1);\n",
    "error_obj":"TypeError: '>=' not supported between instances of 'int' and 'str'"
  },
  "s580190966":{
    "code_string":"s = input()\nk = input()\n\nans = '1'\nfor i in range(k):\n    if k[i] != '1':\n        ans = k[i]\n        break\nprint(ans)\n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s469943025":{
    "code_string":"S = input()\nK = int(input())\n\nind = -1\nfor i in range(len(S)):\n  if S[i] == 1\n    ind = i\n  else:\n    break\n\nif ind == -1:\n  print(S[0])\nelif ind + 1 >= K:\n  print(1)\nelse:\n  print(S[ind+1])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s445074419":{
    "code_string":"import sys\ns = input()\nn = int(input())\nif n == 1:\n\tprint(s[0])\n\tsys.exit()\nif \nfor i in s:\n\tif i != '1':\n\t\tprint(i)\n\t\tsys.exit()\nprint(1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s260156714":{
    "code_string":"s=list(map(int,tuple(input())))\nk=int(input())\ni=0\nif 1 in s:\n  i=s.index()\n  if i+1>=k:\n      print(1)\n  else:\n      print(s[i+1])\nelse:\n  print(s[0])",
    "error_obj":"TypeError: index expected at least 1 argument, got 0"
  },
  "s062984516":{
    "code_string":"def resolve():\n    s = input()\n    k = int(input())\n    c = 0\n    for i in s:\n        if i == \"1\":\n            c += 1\n        else:\n            c += int(i)**((5*10**16)-1)\n        if k <= c:\n            print(i)\n            break\nresolve()",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s241961462":{
    "code_string":"S=input()\nK=int(input())\n\nfor i in range(K):\n    if s[i]!='1':\n        print(int(s[i]))\n        break\nelse:\n    print(1)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s774616340":{
    "code_string":"A = str(input())\nB = int(input())\ncount = 0\n\nfor i in range(len(A)):\n    if A[i] == \"1\":\n        count += 1\n    else:\n        if B <= count:\n            print(1)\n            sys.exit()\n        else:\n            print(A[i])\n            sys.exit()\nprint(1)\n",
    "error_obj":"NameError: name 'sys' is not defined"
  },
  "s047736871":{
    "code_string":"S = input()\nK = int(input())\n\nfor i in range(K):\n    if S[i] != '1':\n        print(S[i])\n        exit()\n    \n    if i == k - 1:\n        print('1')\n        exit()\n\n\n",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s583360264":{
    "code_string":"\/\/ #define _GLIBCXX_DEBUG\n#include <bits\/stdc++.h>\n\n#define FOR(i, a, b) for (int i = (a); i < int(b); ++i)\n#define RFOR(i, a, b) for (int i = (b)-1; i >= int(a); --i)\n#define REP(i, n) FOR(i, 0, n)\n#define REP1(i, n) FOR(i, 1, int(n) + 1)\n#define RREP(i, n) RFOR(i, 0, n)\n#define RREP1(i, n) RFOR(i, 1, int(n) + 1)\n#define ALL(c) begin(c), end(c)\n\nint _ = (\n#ifndef LOCAL\n    std::cin.tie(nullptr), std::ios::sync_with_stdio(false),\n#endif\n    std::cout.precision(10), std::cout.setf(std::ios::fixed));\n\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\ntemplate <typename T> using vec = std::vector<T>;\nusing namespace std;\n\nint main() {\n  string S;\n  ll K;\n  cin >> S >> K;\n  smatch m;\n  regex_match(S, m, regex(\"^(1*)([1-9]*)$\"));\n  cout << ((m.length(1) >= K) ? '1' : m.str(2).front()) << endl;\n  return 0;\n}\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s422313186":{
    "code_string":"N = input()\nK = int(input())\nans = '1'\nfor i in range(K):\n  if i >= len(N):\n    break\n  if N[i] != '1':\n    ans = N[i]\n  \tbreak\nprint(ans)\n  ",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s718727527":{
    "code_string":"S = input()\nK = int(input())\n\nif S[0] == '1':\n  count  = 0\n  while S[i] == '1':\n    count += 1\n  if count >= K:\n    print(1)\n  else:\n    print(S[count])\nelse:\n  print(S[0])",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s983282211":{
    "code_string":"from copy import deepcopy\n\nn, m, q = map(int, input().split())\nlr = [list(map(int, input().split())) for _ in range(m)]\npq = [list(map(int, input().split())) for _ in range(q)]\n\ncnt = [[0] * (n + 1) for _ in range(n + 1)]\nfor l, r in lr:\n    cnt[l][r] += 1\n\nacc = cnt.deepcopy()\nfor i in range(n):\n    for j in range(n):\n        tmp = acc[i][j + 1] + acc[i + 1][j] - acc[i][j]\n        acc[i + 1][j + 1] += tmp\n\nfor p, q in pq:\n    p -= 1\n    ans = acc[q][q] - acc[p][q] - acc[q][p] + acc[p][p]\n    print(ans)\n",
    "error_obj":"AttributeError: 'list' object has no attribute 'deepcopy'"
  },
  "s475635955":{
    "code_string":"if snacks_num % persons == 0:\n    print(0)\nelse:\n    print(1)",
    "error_obj":"NameError: name 'snacks_num' is not defined"
  },
  "s017873289":{
    "code_string":"def mapt(fn, *args):\n    return list(map(fn, *args))\n\n\ndef Input():\n    return mapt(int, input().split(\" \"))\n\n\ndef main():\n    n, k = Input()\n    if n % k == 0:\n        print(0)\n    else:\n        max_n = math.ceil(k\/n)\n        min_n = math.floor(k\/n)\n        print(max_n - min_n)\n\n\nmain()",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s275766333":{
    "code_string":"N, K = map(int, input().split())\nif N % K == :\n  print(0)\nelse:\n  print(1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s164401031":{
    "code_string":"n,k=map(int, input())\nif n%k==0:\n  print(\"0\")\nelse:\n  print(\"1\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s463903939":{
    "code_string":"N,K=map(int,input().split())\n\nif N%K==0:\n\tprint(0)\n\telse:\n\t\tprint(1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s977305167":{
    "code_string":"\ndef main():\n    x, y = map(int, input().split())\n    print(abs((x \/\/ y + x % y) - (x \/\/ y)))\n\n\nif __name__ == \"__main__\":\n    main()\ni",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s711787968":{
    "code_string":"n,k = map(int,input().split())\n\nif n%k = 0:\n  print(0)\nelse:\n  print(1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s130477297":{
    "code_string":"if int(input())%3==0:\n  print(0)\nelse:\n  print(1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '7 3'"
  },
  "s152487338":{
    "code_string":"buy = [false]*1000\nbuy[0] = true\nfor i in range(100):\n  if buy[i]:\n    buy[i+4] = true\n    buy[i+7] = true\n    \nn = int(input())\nif buy[n]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 'false' is not defined"
  },
  "s608526073":{
    "code_string":"n = int(input())\nprint(\"Yes\" if any((n - i*7) % 4 == 0 for i in range(n \/\/ 7 + 1) else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s441954620":{
    "code_string":"import sys\n\nN=int(input())\n\nfor i range(101):\n  for j in range(101):\n    if 4*i + 7*j == N:\n      print('Yes')\n      sys.exit()\nelse:\n  print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s987891294":{
    "code_string":"n=int(input())\n\nfor i in range(26):\n  for j in range(15):\n    if 4*i+7*j=n:\n      print(\"Yes\")\n    else:\n      print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s150597558":{
    "code_string":"n=int(input())\n\n\na=0\nfor i in\u3000range(0,26):\n    for j in range(0,20):\n        if 4*i+7*j==n:\n            a+=1\n\n\nif a==0:\n    print(\"N0\")\nelse:\n    print(\"Yes\")\n",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s213899338":{
    "code_string":"N, K = map(int, input().split())\nh = list(map(int, input().split()))\n\nINF = 10**9\ndp = [INF] * (N + K)\ndp[0] = 0\nfor i in range(N):\n    for k in range(1, K+1):\n        if i + k >= N:\n            break\n        dp[i+k] = min(dp[i+k], dp[i] + abs(h[i]-h[i+k]))\nprint(dp[N-1])\n\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s499934170":{
    "code_string":"N = input()\nans = \"No\"\nfor i in range(15):\n    N = N-7\n    print(N)\n    if N <= 0:\n        if N%3 == 0:\n            ans=\"Yes\"\n        break\nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s276943200":{
    "code_string":"n = int(input())\n\nif n % 4 == 0 or n % 7 == 0\n    print('Yes')\n\nelif (n % 7) % 4 == 0:\n    print('Yes')\n\nelse:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s561835110":{
    "code_string":"\nans = \"\"\nif N == 1:\n    print(\"1\")\nelif N == -1:\n    print(\"10\")\nelse:\n    while True:\n        r = N % 2\n        N = (N-r) \/-2\n        ans = str(int(r)) + ans\n        if N == 0 or N == 1:\n            ans = str(int(N)) + ans\n            break\n\n    print(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s976058202":{
    "code_string":"n = int(input())\n\ndp =[0]*40\n\nif n ==0:\n    print(0)\n\nelif n >0:\n    x = bin(n)\n    bx = x[2:]\n    lx = len(bx)\n    for i in range(lx-1,-1,-1):\n        dp[i] = int(bx[lx-1-i])\n    for i in range(40):\n        if i % 2 ==1 and dp[i]==1:\n            dp[i+1] +=1\n    while max(dp) >1:\n        for i in range(40):\n            if dp[i] >=2:\n                dp[i] -=2\n                if dp[i+1] >0:\n                    dp[i+1] -=1\n                else:\n                    dp[i+1] +=1\n                    dp[i+2] +=1\n    dpr = list(reversed(dp))\n    dprs = list(map(lambda x :str(x),dpr))\n    dprj = \"\".join(dprs)\n    print(int(dprj))    \n\nelse:\n    x = bin(n)\n    bx = x[2:]\n    lx = len(bx)\n    for i in range(lx-1,-1,-1):\n        dp[i] = int(bx[lx-1-i])\n    for i in range(40):\n        if i % 2 ==1 and dp[i]==1:\n            dp[i+1] +=1\n    while max(dp) >1:\n        for i in range(40):\n            if dp[i] >=2:\n                dp[i] -=2\n                if dp[i+1] >0:\n                    dp[i+1] -=1\n                else:\n                    dp[i+1] +=1\n                    dp[i+2] +=1\n    dpr = list(reversed(dp))\n    dprs = list(map(lambda x :str(x),dpr))\n    dprj = \"\".join(dprs)\n    print(int(dprj))    ",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'b'"
  },
  "s487099209":{
    "code_string":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, log2\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nN = INT()\n\nif N == 0:\n\tprint(0)\n\texit()\n\nlim = 30\ntop = [0]*(lim+1)\nbottom = [0]*(lim+1)\n\nfor i in range(1, lim+1):\n\tif i%2:\n\t\tt = (i+1)\/\/2\n\t\ttop[i] = (4**t-1)\/\/3\n\t\tbottom[i] = bottom[i-1]\n\telse:\n\t\tb = i\/\/2\n\t\tbottom[i] = (4**b-1)*2\/\/3\n\t\ttop[i] = top[i-1]\n\ndigit = [0]*(lim+1)\nfor i in range(1, lim+1):\n\tdigit[i] = (-2)**(i-1)\n\nif 0 <= N:\n\tidx = bisect_left(top, N)\nelse:\n\tidx = bisect_left(bottom, -N)\n\nans = \"\"\nfor i in range(idx, 0, -1):\n\tif -bottom[i-1] <= N <= top[i-1]:\n\t\tans += \"0\"\n\telse:\n\t\tans += \"1\"\n\t\tN -= digit[i]\n\nprint(ans)",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s955141747":{
    "code_string":"N = input()\na = \"\"\nif N ==0:\n  a =0\nwhile N !=0:\n  if N%2 != 0:\n    a = \"1\" + a\n  else:\n    a = \"0\" + a\n  N = - (N\/\/2)\nprint(a)",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s826477905":{
    "code_string":"n=int(input())\nx = \"\"\nwhile n!=0:\n    x = str(n%2) + x\n    n = -(n\/\/2)\nif x = \"\":\n    print(0)\nelse:\n    print(x)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s283403627":{
    "code_string":"r=input()\nif r<1200:\n    print(\"ABC\")\nelif 1200<r<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s410022777":{
    "code_string":"r = int(intput())\nif r < 1200:\n  print(\"ABC\")\nelif r < 2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s281842561":{
    "code_string":"a=int(input())\nrint([\"ABC\",\"ARC\",\"AGC\"][(a>=1200)+(a>=2800)])",
    "error_obj":"NameError: name 'rint' is not defined"
  },
  "s882464727":{
    "code_string":"N = int(input())\nif N < 1200:\n  print(\"ABC\")\nelif N < 2800:\n  print(\"ARC\")\nelse\n  print(\"AGC\")\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s622097079":{
    "code_string":"r=input()\nif r<1200:\n  print(\"ABC\")\nelif r<2800:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s257136033":{
    "code_string":"a=input()\nif a<=1199:\n  print(\"ABC\")\nelif a<=2799:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")",
    "error_obj":"TypeError: '<=' not supported between instances of 'str' and 'int'"
  },
  "s928982756":{
    "code_string":"R = input()\nprint(R)\t\n\nif R < 1200:\n  print(ABC)\nelif 1200 <= R and R < 2800:\n  print(ARC)\nelse:\n  print(AGC)",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s985813053":{
    "code_string":"import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nr = I()\nif r<1200:\n    print(\"ABC\")\nelif r<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n",
    "error_obj":"TypeError: '<' not supported between instances of 'map' and 'int'"
  },
  "s643878682":{
    "code_string":"rating = int(input())\nswitch(rating):\n  case rating>0 and rating < 1200:\n    print(\"ABC\")\n    break\n  case rating > 1200 and rating < 2800:\n    print(\"ARC\")\n    break\n  case rating > 2800 :\n    print(\"AGC\")\n    break\n  default:\n    print(\"ERROR\")\n    break\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s237513482":{
    "code_string":"a=int(input())\nif a<1200:\n  print(\"ABC\")\nelse if 2800<=a:\n  print(\"AGC\")\nelse:\n  print(\"ARC\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s732985894":{
    "code_string":"n=int(input())\nif n<1200:\n  print(\"ABC\")\nelif:\n  print(\"ARC\")\nelse:\n  print(\"AGC\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s155828764":{
    "code_string":"if R < 1200:\n    print('ABC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')",
    "error_obj":"NameError: name 'R' is not defined"
  },
  "s776347141":{
    "code_string":"rint(\"a\", ord(\"a\"))\nprint(\"z\", ord(\"z\"))\n\ns = input()\nn = len(s)\nans = 1\nif s[0] != \"A\":\n    ans *= 0\nif not (97 <= ord(s[1]) <= 122):\n    ans *= 0\nif not (97 <= ord(s[-1]) <= 122):\n    ans *= 0\n\ncheck = 0\nfor i in range(1, n - 1):\n    if s[i] == \"C\":\n        check += 1\nprint([\"WA\", \"AC\"][ans & (check == 1)])",
    "error_obj":"NameError: name 'rint' is not defined"
  },
  "s376212966":{
    "code_string":"s = input()\nans = \"WA\"\n\nif s[0] == \"A\" and a[2:-2].count(\"C\") == 1:\n  tmp = s[1:]\n  tmp.replace(\"C\",\"\")\n  ans = \"AC\" if tmp.islower() else \"WA\"\n  \nprint(ans)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s238128728":{
    "code_string":"s = input()\n\nif s[0] != 'A':\n        print('WA')\n        exit()\n\nif s[2:-1].count('C') != 1:\n        print('WA')\n        exit()\n\ns = s.replace('C',\"\")\n\nif s[1:].isLower():\n        print('AC')\nelse:\n        print('WA')",
    "error_obj":"AttributeError: 'str' object has no attribute 'isLower'"
  },
  "s246143381":{
    "code_string":"s = list(input())\nflg = \"WA\"\nif s[0]==\"A\":\n  if \"C\" in s[2:len(s)-1]:\n    s.remove(\"A\")\n    s.remove(\"C\")\n    s = *s\n    if s.islower()==True:\n      flg = \"AC\"\nprint(flg)",
    "error_obj":"SyntaxError: can't use starred expression here"
  },
  "s151620063":{
    "code_string":"S = input()\nflag = True\ncount = 0\nif not S[0] == \"A\":\n  flag = False\nfor i in range(2,len(S)-1):\n  if S[i] == \"C\":\n    count += 1\n  else:\n    if not S[len(S)].islower():\n      flag = False \nif not S[len(S)].islower():\n  flag = False\nif not count == 1:\n  flag = False\nif flag:\n  print(\"AC\")\nelse:\n  print(\"WA\")",
    "error_obj":"IndexError: string index out of range"
  },
  "s407094299":{
    "code_string":"def isAC(S):\n    if S[0] != 'A':\n        return False\n    if S[2:-1].count('C') != 1:\n        return False\n    S = S.remove('C')\n    if not all('a' <= x <= 'z' for x in S):\n        return False\n    return True\n\nprint('AC' if isAC(input()) else 'WA')",
    "error_obj":"AttributeError: 'str' object has no attribute 'remove'"
  },
  "s828800671":{
    "code_string":"S = input()\nsl = []\nans = 'AC'\n\nfor i in S:\n    sl.append(i)\nif sl[0] != 'A':\n    ans = 'WA'\nif sl[2:-1].count('C') != 1:\n    ans = 'WA'\n\nif sl[1:].replace(\"C\",\"c\",1).islower() == False:\n    ans = 'WA'\n#print(sl)\nprint(ans)",
    "error_obj":"AttributeError: 'list' object has no attribute 'replace'"
  },
  "s678589210":{
    "code_string":"import sys\nS = list(input())\nC_cnt,low,upp = 0,0,0\nif S[0] != \"A\" or S[-1].isupper()\n  print(\"WA\")\n  sys.exit()\nfor i in range(1,len(S)-1):\n  if S[i] == \"C\":\n    C_cnt += 1\n  elif S[i].islower():\n    low += 1\n  elif S[i].isupper():\n    upp += 1\nif C_cnt = 1 and low = len(S)-3 and upp = 0:\n  print(\"AC\")\nelse :\n  print(\"WA\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s038075094":{
    "code_string":"S = list(input())\nl = [chr(i) for i in range(65, 65+26)]\n\nflag = True\nif S[0] != 'A':\n    flag = False\nelif S[1] in l:\n    flag = False\nelif S[len(S)] in l:\n    flag = False\nelif not 'C' in S[2:len(S) - 2]:\n    flag = False\ncount = 0\nfor i in range(2, len(S) - 1):\n    if flag == False:\n        break\n    if S[i] in l:\n        count += 1\n    if count > 1:\n        flag = False\nif count < 1:\n    flag = False\nif flag:\n    print('AC')\nelse:\n    print('WA')",
    "error_obj":"IndexError: list index out of range"
  },
  "s370648904":{
    "code_string":"s=input()\nans='AC'\nif s[0]!='A':\n  ans='WA'\nelif s[2:-1].count('C')!=1:\n  ans='WA'\ns=sorted(s)\nif s[2:].islower()==False:\n  ans='WA'\nprint(ans)",
    "error_obj":"AttributeError: 'list' object has no attribute 'islower'"
  },
  "s104867353":{
    "code_string":"def i():\n\treturn int(input())\ndef i2():\n\treturn map(int,input().split())\ndef s():\n\treturn str(input())\ndef l():\n\treturn list(input())\ndef intl():\n\treturn list(int(k) for k in input().split())\n\ns = s()\n\nif s[0] != \"A\":\n\tf1 = True  \ncnt = 0\nfor i in range(2,len(s)-1):\n\tif s[i] == \"C\":\n\t\tcnt += 1\nif cnt1 == 1:\n\tf2 =True\ncnt2 = 0\nfor i in range(1,len(s)):\n\tif s[i].islower():\n\t\tcnt2 += 1\nif cnt2 >= len(s) -2:\n\tf3 = True\n\nif f1 and f2 and f3:\n\tprint(\"AC\")\nelse:\n\tprinet(\"WA\")",
    "error_obj":"NameError: name 'cnt1' is not defined"
  },
  "s642902362":{
    "code_string":"s=input()\nif s[0]==\"A\" and \"C\" in s[2:-1] and len(re.findall('[A-Z]', s))==2:\n    print(\"AC\")\nelse:\n    print(\"WA\")",
    "error_obj":"NameError: name 're' is not defined"
  },
  "s530651497":{
    "code_string":"s = list(input())\nal = list(\"abcdefghijklmnopqrstuvwxyz\")\nif s[0] == \"A\" and s[-1] in al and s[1] in al:\n    del s[0]\n    del s[0]\n    del s[-1]\n    f = 0\n    for i in s:\n        if i == \"C\":\n            if f == 1:\n                print(\"WA\")\n                break\n            else:\n                f = 1\n                continue\n        else:\n            if i in al:\n                continue\n            else:\n                print(\"WA\")\n                break\n    else:\n        if f = 1:\n            print(\"AC\")\n        else:\n            print(\"WA\")\nelse:\n    print(\"WA\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s200815251":{
    "code_string":"S= input()\ncount=0\nif S[0]!='A':\n  print('WA')\n  return\nS.lower(0)\nfor i in range(3,len(S)-1):\n  if S[i]=='C':\n    count+=1\n    S.lower(i)\nif count==1 && S.islower():\n  print('AC')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s266588679":{
    "code_string":"import sys\ns = list(input())\nif s[0] == \"A\" and s[2:-1].count(\"C\") == 1:\n  cnt = 0\n  for i in s:\n    if s.isupper():\n      cnt += 1\n  if cnt == 2:\n    print(\"AC\")\n    sys.exit()\nprint(\"WA\")",
    "error_obj":"AttributeError: 'list' object has no attribute 'isupper'"
  },
  "s941458544":{
    "code_string":"s = input()\n\na = -1\nc = -1\nlower = 0\nfor i in range(len(s))\n  if s[i] == 'A':\n    a = i\n  if s[i] == 'C':\n    c = i\n  if 'a' <= s[i] <= 'z':\n    lower += 1\n\nif a == 0 and 2 <= c <= len(s) - 2 and lower == len(s) - 2:\n  print('AC')\nelse:\n  print('WA')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s380580434":{
    "code_string":"s = input()\nn = len(s)\nres = 0\n  \nif s[0] == 'A':\n  if s.find('C') >= 2 and s.find('C') < n-2:\n    s.lower(0)\n    s.lower(s.find('C'))\n    if s == s.lower():\n      print('AC')\n    else:\n      print('WA')\n  else:\n    print('WA')\nelse:\n  print('WA')",
    "error_obj":"TypeError: str.lower() takes no arguments (1 given)"
  },
  "s118160803":{
    "code_string":"\ndef solve():\n    d = 0\n    c = 0\n    for i in range(D):\n        d += p[i][0]\n    dp = [[0]*(d+1) for i in range(D)]\n    for i in range(D):\n        for j in range(p[i][0]+1):\n            if i == 0:\n                if j == p[i][0]:\n                    dp[i][j] += p[i][1]\n                dp[i][j] += 100*j\n            else:\n                for k in range(c+1):\n                    if j == p[i][0]:\n                        dp[i][k+j]=max(dp[i][k+j],dp[i-1][k]+100*j*(i+1)+p[i][1])\n                    else:\n                        dp[i][k+j]=max(dp[i][k+j],dp[i-1][k]+100*j*(i+1))\n        c += p[i][0]\n    for i in range(d+1):\n        if dp[D-1][i]>=G:\n            print(i)\n            break    \n    \nif __name__==\"__main__\":\n    D,G = list(map(int, input().split()))\n    pc = [list(map(int, input().split())) for _ in range(D)]\n    solve()\n",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s829007565":{
    "code_string":"rom math import ceil\n\nD, G = map(int,input().split())\npc = [list(map(int,input().split())) for i in range(D)]\n\nans = float(\"inf\")\nfor bit in range(1 << D):\n    cnt = 0\n    sum = 0\n    remain = set(range(1,D+1))\n\n    for i in range(D):\n        if bit & (1 << i):\n            cnt += pc[i][0]\n            sum += pc[i][0]*(i+1)*100 + pc[i][1]\n            remain.discard(i+1)\n\n    if sum < G:\n        use = max(remain)\n        n = min(pc[use-1][0], ceil((G-sum)\/(use*100)))\n        \"\"\"\n        if use == 0:\n            n = 0\n        elif (G - sum)%(use%100) == 0:\n            n = min(pc[use-1][0], (G - sum)\/\/(use*100))\n        else:\n            n = min(pc[use-1][0], (G - sum)\/\/(use*100)+1)\n        \"\"\"\n        cnt += n\n        sum += n*use*100\n\n    if sum >= G:\n        ans = min(ans,cnt)\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s954280431":{
    "code_string":"P=[]\nC=[]\npoint=1001    #\u5168\u554f\u984c\u6570\n\nD,G=map(int,input().split())\nfor i in range(D):\n    p,c= map(int,input().split())\n    P.append(p)\n    C.append(c)\n\n#\u3068\u308a\u3042\u3048\u305a\u5168\u90e8\u89e3\u304for\u89e3\u304b\u306a\u3044\u3067\u76ee\u6a19\u30b9\u30b3\u30a2\u3092\u8d85\u3048\u308b\u304b\u8d85\u3048\u306a\u3044\u304b\u3092\u8003\u3048\u308b\n\n\nfor i in range(2**D) :\n    score=0\n    solve=0\n    needproblem=0\n    for j in range(D) :                  #\u5168\u6b63\u89e3\u3057\u305f\u5927\u554f\u3092\u30b9\u30b3\u30a2\u306b\u5909\u63db\n        if (i>>j) & 1 :\n            score+=P[j]*100*(j+1)+C[j]\n            solve+=P[j]\n    if score>=G :\n        point=min(point,solve)\n\n#\u304e\u308a\u304e\u308a\u30b9\u30b3\u30a2\u304c\u5c4a\u3044\u3066\u3044\u306a\u3044\u5834\u5408\u30011\u554f\u3082\u89e3\u304b\u306a\u304b\u3063\u305f\u554f\u984c\u306e\u4e2d\u3067\u6700\u3082\u4e00\u984c\u3042\u305f\u308a\u306e\u70b9\u304c\u9ad8\u3044\u554f\u984c\u3060\u3051\u89e3\u3044\u3066\u307f\u308b\n#\u4e2d\u9014\u534a\u7aef\u306b\u5927\u554f\u3092\u89e3\u304d\u304d\u308b\u306e\u304c\uff11\u7a2e\u985e\u4ee5\u4e0b\u3067\u3082\u76ee\u6a19\u306b\u5c4a\u304f\u5834\u5408\u3082\u3042\u308b\u3068\u3044\u3046\u4e88\u60f3\n    elif score<G :\n        rest=G-score\n        for j in range(D) :\n            if (~i>>D-j) & 1 :\n                needproblem=D-j+1\n            sum=needproblem*100*(P[needproblem-1]-1)\n            if rest>sum :            #1\u554f\u3082\u89e3\u304b\u306a\u304b\u3063\u305f\u554f\u984c\u306e\u4e2d\u3067\u6700\u3082\u4e00\u984c\u3042\u305f\u308a\u306e\u70b9\u304c\u9ad8\u3044\u554f\u984c\u3092\u89e3\u3044\u3066\u3082\u5c4a\u304b\u306a\u3044\u306e\u3067\u3084\u308a\u76f4\u3057\n                rest-=sum\n                solve+=P[needproblem-1]-1\n            elif rest<=sum :\n                resolve=solve+rest\/\/(needproblem*100)\n                point=min(point,resolve)\n                continue\n\nprint(point)",
    "error_obj":"IndexError: list index out of range"
  },
  "s332233603":{
    "code_string":"\nD,G=map(int,input().split())\nfor i in range(D):\n    p,c= map(int,input().split())\n    P.append(p)\n    C.append(c)\n\n#\u3068\u308a\u3042\u3048\u305a\u5168\u90e8\u89e3\u304for\u89e3\u304b\u306a\u3044\u3067\u76ee\u6a19\u30b9\u30b3\u30a2\u3092\u8d85\u3048\u308b\u304b\u8d85\u3048\u306a\u3044\u304b\u3092\u8003\u3048\u308b\n\n\nfor i in range(2**D) :\n    score=0\n    solve=0\n    needproblem=0\n    for j in range(D) :                  #\u5168\u6b63\u89e3\u3057\u305f\u5927\u554f\u3092\u30b9\u30b3\u30a2\u306b\u5909\u63db\n        if (i>>j) & 1 :\n            score+=P[j]*100*(j+1)+C[j]\n            solve+=P[j]\n    if score>=G :\n        if D*100>solve :\n            point=min(point,solve)\n        continue\n\n#\u304e\u308a\u304e\u308a\u30b9\u30b3\u30a2\u304c\u5c4a\u3044\u3066\u3044\u306a\u3044\u5834\u5408\u30011\u554f\u3082\u89e3\u304b\u306a\u304b\u3063\u305f\u554f\u984c\u306e\u4e2d\u3067\u6700\u3082\u4e00\u984c\u3042\u305f\u308a\u306e\u70b9\u304c\u9ad8\u3044\u554f\u984c\u3060\u3051\u89e3\u3044\u3066\u307f\u308b\n#\u4e2d\u9014\u534a\u7aef\u306b\u5927\u554f\u3092\u89e3\u304d\u304d\u308b\u306e\u304c\uff11\u7a2e\u985e\u4ee5\u4e0b\u3067\u3082\u76ee\u6a19\u306b\u5c4a\u304f\u5834\u5408\u3082\u3042\u308b\u3068\u3044\u3046\u4e88\u60f3\n    rest=G-score\n    for j in range(D) :\n        if (i>>j) & 1==0 :\n            needproblem=j+1\n            sum=needproblem*100*(P[needproblem-1]-1)\n            if rest>sum :            #1\u554f\u3082\u89e3\u304b\u306a\u304b\u3063\u305f\u554f\u984c\u306e\u4e2d\u3067\u6700\u3082\u4e00\u984c\u3042\u305f\u308a\u306e\u70b9\u304c\u9ad8\u3044\u554f\u984c\u3092\u89e3\u3044\u3066\u3082\u5c4a\u304b\u306a\u3044\u306e\u3067\u3084\u308a\u76f4\u3057\n                continue\n            elif rest<=sum :\n                resolve=solve+rest\/\/(needproblem*100)\n                point=min(point,resolve)\n\nprint(point)\n",
    "error_obj":"NameError: name 'P' is not defined"
  },
  "s728990804":{
    "code_string":"ans = float(\"inf\")\nfor i in range(1<<d):\n    count = 0\n    sum = 0\n    nokori = set(range(1, d+1))\n    \n    # \u30dc\u30fc\u30ca\u30b9\u3092\u3082\u3089\u3048\u308b\u89e3\u7b54\u306e\u307f\u3067\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n    for j in range(d):\n        if j & 1<<i:\n            sum += pc[i][0]*(i+1)*100+pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i+1)\n            \n    # \u30b9\u30b3\u30a2\u304cG\u70b9\u306b\u5c4a\u304b\u306a\u3044\u5834\u5408\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[use-1][0], (g-sum)\/\/(use*100))\n        count += n\n        sum += n*use*100\n        \n    # \u30b9\u30b3\u30a2\u304cG\u70b9\u306b\u5c4a\u3044\u305f\u5834\u5408\n    if sum >= g:\n        ans = min(ans, count)\nprint(ans)",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s598775738":{
    "code_string":"D, G = map(int, input().split())\nPC = [0]+[list(map(int,input().split())) for _ in range(D)]\n\ndef dfs(d, g):\n    if(d == 0):\n        return 1e9\n\n    c = min(g\/\/(100*d), PC[d][0])\n    s = 100*d*c\n    if c == PC[d][0]:\n        s += PC[d][1]\n    if s<g:\n        c += f(d-1, g-s)\n    return min(c, f(d-1,g))\n\nprint(dfs(D, G))",
    "error_obj":"NameError: name 'f' is not defined"
  },
  "s461006921":{
    "code_string":"def dfs(i, sum, count, unsolve):\n global ans\n if i == D:\n  #G\u70b9\u306b\u6e80\u305f\u306a\u3051\u308c\u3070unsolve\u306e\u3046\u3061\u6700\u3082\u5927\u304d\u3044\u3082\u306e\u3092\u89e3\u304f\n  if sum < G:\n   use = max(unsolve)\n  #\u89e3\u304f\u554f\u984c\u304c\u554f\u984c\u6570\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n   N = min(pc[use-1][0], -(-(g-sum)\/\/(100*use)))\n   count += N \n   sum += N * 100 * use\n  if sum > G:\n   ans = min(ans, count)\n else:\n dfs(i + 1, sum, count, unsolve)\n        dfs(i + 1, sum + pc[i][0] * (i + 1) * 100 + pc[i][1], count + pc[i][0], unsolve - {i + 1})\n\nd, g = map(int, input().split())\npc = [list(map(int, input().split())) for i in range(d)]\nans = float(\"inf\")\ndfs(0, 0, 0, set(range(1, d + 1)))\nprint(ans)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s669475018":{
    "code_string":"def main():\n  D, G = list(map(int, input().split()))\n  P = []\n  for i in range(1, D+1):\n    P.append(tuple(map(int, input().split())))\n\n  # print(D, G, P)\n  minp = float('inf')\n  for bit in range(1 << D):\n    total = 0\n    num_p = 0\n    bset = set()\n    for i in range(D):\n      mask = 1 << i\n      if bit & mask:\n        total += P[i][1] + 100*(i+1)*P[i][0]\n        num_p += P[i][0]\n        bset.add(i)\n\n    # print(f'bset:{bset}, num_p:{num_p}')\n\n    res = G - total\n    if res <= 0:\n      if num_p < minp:\n        minp = num_p\n      continue\n\n    for i in reversed(sorted(set([i for i in range(D)]) - bset)):\n      maxv = 100*(i+1) * (P[i][0]-1)\n\n      if res <= maxv:\n        num_take = max(min(bisect.bisect(list(range(0, maxv+100*(i+1), 100*(i+1))), res)-1, P[i][0]-1), 1)\n        # print(i, list(range(0, maxv, 100*(i+1))))\n        # print(f'res:{res} so solve {100*(i+1)} * {num_take}')\n        num_p += num_take\n        res -= 100*(i+1)*num_take\n        if num_p < minp:\n          minp = num_p\n        break\n\n      res -= maxv\n      # print(f'solve {i+1} * {P[i][0]-1}')\n      num_p += (P[i][0]-1)\n\n  print(minp)\n\n\nif(__name__ == '__main__'):\n  main()",
    "error_obj":"NameError: name 'bisect' is not defined"
  },
  "s567533381":{
    "code_string":"A = map(int, input().split())\nprint(max(A) - min(A))",
    "error_obj":"ValueError: min() arg is an empty sequence"
  },
  "s330097912":{
    "code_string":"X=map(int,input().split())\nprint(max(X)-min(X))",
    "error_obj":"ValueError: min() arg is an empty sequence"
  },
  "s364047490":{
    "code_string":"li=a,b,c=list(map(int,input().split()))\nlis=sorted(li)\nprint(lis[2]-lis[0)\n",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s020361584":{
    "code_string":"a , b , c = map(int,input().split())\nprint(min(abs(a-b)+abs(b-c),abs(b-a)+abs(a-c),abs(a-c)+abs(c-b))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s071099064":{
    "code_string":"a,b,c = map(int,input().split())\na,b,c = map(int,input().split())\nl=sorted([a,b,c])\nprint(l[2]-l[1]+l[1]-l[0])\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s411158367":{
    "code_string":"N_List = sorted(list(map(int,input().split())))\nprint(sum(N_List[1:]-N_List[:-1]))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'list'"
  },
  "s675533687":{
    "code_string":"a,b,c=sorted(map(int, input().split())\nprint(a+c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s210931378":{
    "code_string":"a=list(map(int,input().split()))\nb=a.sorted\nprint(b[1]-b[0]+b[2]-b[1])",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s281424122":{
    "code_string":"list=input()\nlist_n=[int(s) for s in list]\nprint(int(max(list_n))-int(min(list_n)))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s679789166":{
    "code_string":"from collections import deque\nimport sys\n\ndeque_s = deque(list(input()))\nkyoto\ndeque_t = deque(list(input()))\ntokyo\n\nfor _i in range(len(deque_s)):\n    deque_s.rotate()\n    if deque_s == deque_t:\n        print('Yes')\n        sys.exit()\n\nprint('No')",
    "error_obj":"NameError: name 'kyoto' is not defined"
  },
  "s569046203":{
    "code_string":"# -*- coding: utf-8 -*-\nfrom collections import deque\nimport sys\n#input = sys.stdin.readline\ndef inpl(): return list(map(int, input().split()))\n\nS = input()\nT = input()\n\nfor i in range(N+1):\n    if S == T[i:] + T[:i]:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s268687744":{
    "code_string":"ans = \"No\"\nfor i in range(len(S)):\n\tif S[:i] + S[0:i] == T:\n\t\tans = \"Yes\"\n\nprint(ans)",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s721927398":{
    "code_string":"S = input()\nT = input()\nif s in T*2:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s272256854":{
    "code_string":"\u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\u6587\u5b57\u5217S,T\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002S\u3092\u56de\u8ee2\u3055\u305b\u3066T\u306b\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3059\u306a\u308f\u3061\u3001\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u4efb\u610f\u306e\u56de\u6570\u7e70\u308a\u8fd4\u3057\u3066S\u3092T\u306b\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u64cd\u4f5c:S=S1S2...S|S|\u306e\u3068\u304d\u3001S\u3092S|S|S1S2...S|S|\u22121\u306b\u5909\u66f4\u3059\u308b\n\u3053\u3053\u3067\u3001|X|\u306f\u6587\u5b57\u5217X\u306e\u9577\u3055\u3092\u8868\u3057\u307e\u3059\u3002\n\"\"\"\n\ns = input()\nt = input()\n# s,t\u3092\u30ea\u30b9\u30c8\u306b\u3059\u308b\ns = list(s)\nt = list(t)\n\n# \u5909\u6570count,judgement\u306b0\u3092\u4ee3\u5165\ncount = 0\njudgment = 0\n\n# s\u306e\u9577\u3055\u3060\u3051\u9806\u756a\u5165\u308c\u66ff\u3048\u3092\u7e70\u308a\u8fd4\u3057\nwhile count <= len(s)+1:\n    item = s.pop()\n    s.insert(0,item)\n    if s == t:\n        # s==t\u306b\u306a\u3063\u305f\u3089judgment\u3067\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\n        judgment += 1\n    # \u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\n    count +=1\n\n# \u4e00\u56de\u3082s==t\u306b\u306a\u3063\u3066\u306a\u3051\u308c\u3070No\nif judgment == 0:\n    print(\"No\")\nelse:\n    print(\"Yes\")",
    "error_obj":"SyntaxError: invalid character '\u3002' (U+3002)"
  },
  "s016715520":{
    "code_string":"l = list(map(int,input().split()))\ntask_list = sorted(l)\n\nprint(task_list[2]-task_list[0])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'kyoto'"
  },
  "s161924530":{
    "code_string":"import sys\nS,T = map(str,input().split())\nfor i in range(len(S)):\n  tmp = S[-1]\n  S[-1] = \"\"\n  S.insert(0,tmp)\n  if S == T:\n    print(\"Yes\")\n    sys.exit()\nprint(\"No\")\n    ",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s307235561":{
    "code_string":"s, t = [input() for i in range(2)]\nfor _ in range(len(s)):\n  s = s[1:] + s[0]\n  if s = t:\n    print(\"Yes\") \n    break\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s894290270":{
    "code_string":"s=list(input())\nt=list(input())\n\nx=len(s)\n\nch1=0\nch=0\n\nfor i in range(x):\n  if s[i]=t[x-1-i]:\n    ch+=1\n\nfor j in range(x):\n  if s[j]=t[j]:\n    ch1+=1\n    \nprint('Yes') if ch==x or ch1==x else print('No') \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s816906738":{
    "code_string":"i = input;i();print(sum([x-1 for x in i().split()]))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s500571048":{
    "code_string":"N=int(input)\nprint(sum(list(map(int, input().split())))-N)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s066604437":{
    "code_string":"n=int(input())\nl = list(map(int, input().split()))\nprint(sum(l) = n)",
    "error_obj":"SyntaxError: expression cannot contain assignment, perhaps you meant \"==\"?"
  },
  "s787059904":{
    "code_string":"N, M = map(int, input().split())\n\nab = [0] * M\nfor _ in range(M):\n    a, b = map(int, input().split())\n    ab[a].append(b)\n\ndp = [0] * (N + 1)\nfor i in range(1, N + 1):\n    dp[i] = max(dp[i], dp[i - 1])\n    for j in ab[i]:\n        dp[j] = max(dp[j], dp[i] + 1)\n\nprint(dp[N])\n",
    "error_obj":"AttributeError: 'int' object has no attribute 'append'"
  },
  "s759562285":{
    "code_string":"import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef s(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nn = k()\na = l()\n\ni=1\nwhile i < n:\n    if a[i] == a[i+1]:\n        ans += 1\n        i += 1\n    i += 1\n\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s091046470":{
    "code_string":"n = int(input())\narr = list(map(int, input().split()))\nfrom numpy import random\nb = 0\nfor i in range (len(a) - 1) :\n  if a[i] == a[i + 1]:\n    b += 1\n    a[i + 1] = random.randint(10000)\nprint(b)\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s594748426":{
    "code_string":"5\n1 1 1 1 1n=int(input())\nl=list(map(int,input().split()))\na=l[0]\nb=0\nc=[]\nfor i in range(1,n):\n  if l[i]==a:\n    b+=1\n  else:\n    c.append(b)\n    b=0\n  a=l[i]\nc.append(b)\nfor i in range(len(c)):\n  c[i]=(c[i]+1)\/\/2\nprint(sum(c))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s162279810":{
    "code_string":"from numpy.random import randint\nn = int(input())\nl = list(map(int, input().split()))\nans = 0\nfor i in range (len(a)-1) :\n  try:\n    if l[i] == l[i + 1]:\n        ans += 1\n        l[i + 1] = randint(0, 10000)\n  except:\n    continue\nprint(ans)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s223836370":{
    "code_string":"N = int(input())\nS = input()\nS_l = S[:N]\nS_r = S[N:][::-1]\ndict_l = {}\ndict_r = {}\nans = 0\nfor num in range(2**N):\n  tmpl_1 = \"\"\n  tmpl_2 = \"\"\n  tmpr_1 = \"\"\n  tmpr_2 = \"\"\n  for n in range(N):\n    if (num >> (N-1-n) & 1):\n      tmpl_1 += S_l[n]\n      tmpr_1 += S_r[n]\n    else:\n      tmpl_2 += S_l[n]\n      tmpr_2 += S_r[n]\n  dict_l[[tmpl_1,tmpl_2]] = dict_l.get([tmpl_1,tmpl_2], 0) + 1\n  dict_r[[tmpr_1,tmpr_2]] = dict_r.get([tmpr_1,tmpr_2], 0) + 1\nfor k, v in dict_l.items():\n  ans += v*dict_r.get(k,0)\nprint(ans)\n",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s602588555":{
    "code_string":"a, b = map(int,input().split())\nif a + b = 15:\n  print(\"+\")\nelif a * b = 15:\n  print(\"*\")\nelse:\n  print(\"x\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s932372714":{
    "code_string":"a,b = int (input ())\nif a+b == 15:\n  print ('+')\nelif a*b == 15:\n  print ('*')\nelse:\n  print ('x')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 11'"
  },
  "s332265761":{
    "code_string":"a,b=map(int,intput().split())\nif a + b == 15:\n  print('+')\nelif a * b == 15:\n  print('*')\nelse:\n  print('x')\n  ",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s269073525":{
    "code_string":"S = list(print(\"\"))\nw = int(input())\nfor i in range(len(S)):\n  if (i + 1) % w == 1:\n    print(S[i]),",
    "error_obj":"TypeError: 'NoneType' object is not iterable"
  },
  "s004296968":{
    "code_string":"n, m, d = map(int, input().split())\np = 1\/n if d==0 else p = 2*(n-d)\/n\/n\nans = (m-1)*p\nprint(ans)",
    "error_obj":"SyntaxError: cannot assign to conditional expression"
  },
  "s778848372":{
    "code_string":"n, m, d = map(int, input().split())\nif d == 0:\n    print((m-1) \/ double(n) )\nelse:\n    print(2 * (m-1) * (n-d) \/ double(n * n))",
    "error_obj":"NameError: name 'double' is not defined"
  },
  "s563861751":{
    "code_string":"from networkx import*\n(N,M,*S),*t=[map(int,t.split())for t in open(0)]\nG=Graph()\nfor*u,a,b in t:G.add_edge(*u,y=a,s=b)\nb=m=10**15\ny,s,*r=map(eval(dir()[761]),(G,G),S,(m,m),'ys')\nwhile N:b=min(b,y[N]+s[N]);r+=m-b,;N-=1\nprint(*r[::-1])",
    "error_obj":"TypeError: argmap_rooted_product_1() takes 3 positional arguments but 4 were given"
  },
  "s745166739":{
    "code_string":"N=int(input())\nif N%2==0:\n  print(N)\nelse\n  print(N*2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s244616819":{
    "code_string":"\nN = input()\n\ni = N + 1\nwhile True:\n    if(i % 2 == 0 and i % N == 0):\n        break\n    i = i + 1\n\nprint(i)\n",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s900420446":{
    "code_string":"def lcm_base(x,y):\n    return (x * y) \/\/ math.gcd(x,y)\n\ndef n_lcm(*numbers):\n    print(reduce(lcm_base,numbers,1))\n    \nn_lcm(2,int(input()))",
    "error_obj":"NameError: name 'reduce' is not defined"
  },
  "s234798567":{
    "code_string":"n = int(input)\nif n%2 == 0:\n  print(n)\nelse:\n  print(n*2)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s160690317":{
    "code_string":"n=int(input())\nprint(n if n%2==0 else 2n)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s330538023":{
    "code_string":"import math\nN=int(input())\nprint(2*N\/\/gcd(2,N))",
    "error_obj":"NameError: name 'gcd' is not defined"
  },
  "s513177352":{
    "code_string":"def solve():\n    n = int(input())\n    i = n\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            print(i)\n            exit()\n\n\nif __name__ == \"__main__\":\n    solve()\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s850053662":{
    "code_string":"n=input()\nif(n%2==0):\nprint(n)\nelse:\n  print(2\uff0an)\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s031584449":{
    "code_string":"n=int(input())\nm=max(n,2)+1\nwhile 1:\n    if m%2 and m%n:\n        print(m)\n    m+=1",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s660796277":{
    "code_string":"n = int(input().split())\nif n % 2 == 0:\n  print(n)\nelse:\n  print(n*2)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s853668374":{
    "code_string":"n=int(input())\nif n% !=0:\n    print(2*n)\nelse:\n    print(n)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s191854029":{
    "code_string":"n=input()\nif n%2==0:\n  print(n)\nelse:\n  print(n*2)",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s404580357":{
    "code_string":"n = int(input())\nmin_A = 10**9+7\nmax_A = -1\nfor i in range(n):\n  tmp = int(input())\n  max_A = max(tmp,max_A)\n  min_A = min(min_A,tmp)\n  \nprint(abs(max_A-min_A))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 4 6 3'"
  },
  "s937280503":{
    "code_string":"n = int(input())\na = map(int, input().split())\na.sort()\nans = a[-1] - a[0]\nprint(ans)",
    "error_obj":"AttributeError: 'map' object has no attribute 'sort'"
  },
  "s545619712":{
    "code_string":"N = int(input())\nA = input().split()\nprint(max(A)-min(A))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s794126335":{
    "code_string":"num_len = int(input())\nnumbers = list(map(int, input().split()))\nprint(max(numbers) - min(numbers)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s775349630":{
    "code_string":"_n = int(input())\nlists = list(map(int(), input().split()))\nlists.sort()\n\nprint(lists[-1] - lists[0])",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s224630508":{
    "code_string":"n = int(input())\nlist = map(int,input().split())\n\nlist.sort()\n\nanswer = list[-1] - list[0]\n\nprint(answer)",
    "error_obj":"AttributeError: 'map' object has no attribute 'sort'"
  },
  "s961592539":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\nb = max(a)-min(b)\nprint(b)",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s554845160":{
    "code_string":"N=int(input)\nA=list(map(int,input().split()))\nA.sort()\nprint(A[-1]-A[0])\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s737949589":{
    "code_string":"N = int(input())\nA = []\nfor i in range(N):\n    A.append(int(input()))\nprint(max(A)-min(A))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 4 6 3'"
  },
  "s411996300":{
    "code_string":"N = int(input())\nA = list(map(int,input()split()))\n\nAmax = max(A)\nAmin = min(A)\n\nans = Amax - Amin\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s348929170":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\nA.sort()\nprint(A[N]-A[0])",
    "error_obj":"IndexError: list index out of range"
  },
  "s657194804":{
    "code_string":"\nn = int(input())\nA = list(map(int,input().split())))\nA.sort()\nprint(abs(A[0]-A[-1]))\n\n",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s543479263":{
    "code_string":"N = int(input())\nList = list(map(int, input().split()))\nmid = 0\nres = 0\nfor i in range(N):\n  for j range(i+1,N):\n    mid = abs(List[i]-List[j])\n    res = max(res,mid)\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s932333450":{
    "code_string":"n = int(input())\nlists = list(map(int, input().split()))\n\nlists.sorted()\nprint(lists[-1] - lists[0])",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s632692978":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\n\nprint(max(N) - min(N))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s956022710":{
    "code_string":"N = int(input())\nls = map(int,input().split())\nprint(max(ls)-min(ls))",
    "error_obj":"ValueError: min() arg is an empty sequence"
  },
  "s370460822":{
    "code_string":"n, aaa = map(int, open(0).split())\nprint(max(aaa) - min(aaa))",
    "error_obj":"AttributeError: '_io.TextIOWrapper' object has no attribute 'split'"
  },
  "s261566864":{
    "code_string":"n = int(input())\na = map(int, input().split())\nprint(max(a) - min(a))\n",
    "error_obj":"ValueError: min() arg is an empty sequence"
  },
  "s881362534":{
    "code_string":"count=input()\nlist=int(input()).rstrip().split(\" \")\nlist_1=[int(s) for s in list]\nlist2= sorted(list_1)\nsa=(int(list2[0])-int(list2[int(count)-1]))\nif sa<0:\n  print(-1*int(sa))\nelse:\n  print(int(sa))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 4 6 3'"
  },
  "s043636763":{
    "code_string":"import numpy as np\n\nN = int(input())\nA = np.array(list(map(int, input().split(' '))))\nB = np.arange(1, N + 1)\n\nC = A - B\nmean = int(np.mean(C))\n\nprint(min(np.sum(np.abs(C - mean))), np.sum(np.abs(C + mean)))\n",
    "error_obj":"TypeError: 'numpy.int64' object is not iterable"
  },
  "s467296353":{
    "code_string":"n=int(input())\nalist=list(map(int, input().split()))\nblist=[]\nfor i in range(n):\n  blist.append(alist[i]-i-1)\nblist.sort()\nif n%2==1:\n  cnt=0\n  for i in range(n):\n    cnt+=abs(blist[i]-blist[(i+1)\/\/2])\n  print(cnt)\nelse:\n  cnt=0\n  num=(blist[i\/\/2]+blist[i\/\/2+1])\/\/2\n  for i in range(n):\n    cnt+=abs(blist[i]-num\n  print(cnt,cnt2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s556805091":{
    "code_string":"from statistics import median\n\nN = int(input())\nan = list(map(int,input().split()))\n\nfor i in range(N):\n    an[i] = an[i] - (i+1)\n    \nb = int(median(bn))\n\nk = []\nfor i in range(N):\n    y = abs(an[i] - b)\n    k.append(y)\nans = sum(k)\n\nprint(ans)",
    "error_obj":"NameError: name 'bn' is not defined"
  },
  "s078907568":{
    "code_string":"li = sorted([a[i]-(i+1) for i in range(n)])\nif n%2==0:\n    ave = (li[n\/\/2]+li[n\/\/2-1])\/\/2\nelse:\n    ave = li[(n-1)\/\/2]\n\nimport math\nave1 = math.floor(ave)\nave2 = math.ceil(ave)\n\nll = []\nc = 0\nfor i in range(n):\n    c += abs(a[i]-(ave1+i+1))\nelse:\n    ll += [c]\n\nc =0\nfor i in range(n):\n    c += abs(a[i]-(ave2+i+1))\nelse:\n    ll += [c]\n\nprint(min(ll))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s691439193":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\nB=[]\nfor i in range(N):\n  B.append(A[i]-(i+1))\nB.sort()\nif N%2==0:\n  a=N\/2\nelse:\n  a=(N+1)\/2\nb=B[a-1]\nfor i in range(N):\n  B[N-1]=abs(B[N-1]-b)\nprint(B)\n    \n  \n  ",
    "error_obj":"TypeError: list indices must be integers or slices, not float"
  },
  "s685388692":{
    "code_string":"import numpy as np\n\nn = int(input())\na = np.array(list(map(int, input().split())))\n\narr = np.arange(n) + 1\ndiff = a - arr\n\ndiff.sort()\n\ndiff -= np.median(diff)\n\nprint(int(np.abs(diff).sum()))",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p03311\/Python\/s685388692.py\", line 11, in <module>\n    diff -= np.median(diff)\nnumpy.core._exceptions.UFuncTypeError: Cannot cast ufunc 'subtract' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n"
  },
  "s424595760":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\ns = rr()\nans = 0\nfor i in s:\n  ans += 1 if i == '+' else ans -= 1\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s133822434":{
    "code_string":"a = input\nprint(a.count('+') - a.count('-'))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'count'"
  },
  "s905177311":{
    "code_string":"a=list(input())\ncount=1\nfor i in a:\n  if i==-:\n    count-=1\n  else:\n    count+=1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s040952163":{
    "code_string":"s = str(input())\nans=0\nfor in range s:\n    if '+' Then:\n        ans += 1\n    else:\n        ans -= 1\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s137984247":{
    "code_string":"S = int(input())\nans = 0\nfor s in S:\n    if s == '+':\n        ans += 1\n    else:\n        ans -= 1\nprint(ans)\n\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '+-++'"
  },
  "s386333795":{
    "code_string":"S = input()\nSteam = 0\nminecraft = 0\nfor i in range()len(S):\n    if S[i] == \"+\":\n        minecraft += 1\n    else:\n        Steam += 1\nL = minecraft * 1\nP = Steam * -1\nprint(L + P)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s335312998":{
    "code_string":"s = list(map(str, input()))\na = s.count(+)\nb = s.count(-)\nprint(a - b)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s280946705":{
    "code_string":"s=input()\ncon=[0]*2\nfor i in range(4):\n    if s[i]=='+':\n        c[0]+=1\n    else:\n        c[1]+=1\nprint(c[0]-c[1])           ",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s682270092":{
    "code_string":"S = map(str,input().split())\ns =1\nfor i in S:\n\tif i in \"+\":\n\t\ts +=1  \n\telse:\n    \ts -=1\nprint(s)\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s442332798":{
    "code_string":"S=input()\nprint(S.cout(\"+\")-S.count(\"-\"))\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'cout'"
  },
  "s072643051":{
    "code_string":"s=int(input())\nans=0\nfor i in range(4):\n  if s[i]==\"+\":\n    ans+=1\n  else:\n    ans-=1\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '+-++'"
  },
  "s311133584":{
    "code_string":"N = int(input())\ns = list(str(N))\nS = 0\nfor i in range(len(s)):\n    S += s[i]\n\nif N % S == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s683806450":{
    "code_string":"n=int(input())\ns=list(str(n))\na=n%(sum(s))\n\nif a==0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s757954722":{
    "code_string":"def s(n):\n  x = 0\n  for i in range(len(n)):\n    x += int(n[i])\n  return x\nn = input()\nprint(\"Yes\") if n % s(n) == 0 else print(\"No\")\n",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s114594536":{
    "code_string":"s = input()\nn = int(s)\nm = 0\nfor c in range(s):\n  m += int(c)\nprint('Yes' if n%m==0 else 'No')",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s857177087":{
    "code_string":"a=input()\nb=int(a)\nc=list(a)\nif b%(sum(c))==0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s877419205":{
    "code_string":"N = input()\nnum = int(N)\nNls = list(N)\nsum1 = sum([int(i) for in Nls])\nif num%sum1 == 0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s721369074":{
    "code_string":"n = list(input())\ns = sum([int(n[i]) for i in range(len(n))])\nif n%s==0:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for %: 'list' and 'int'"
  },
  "s288895486":{
    "code_string":"n = int(input())\ni = n\nm = 0\nwhile i > 0\n    m += i % 10\n    i = i \/\/ 10\n\nif n % m != 0:\n    print('No')\nelse:\n    print('Yes')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s515717534":{
    "code_string":"n = int(input())\n\ndef check(p):\n  c = 0\n  while p > 0:\n    c += p % 10\n    p \/\/= 10\n  return c\n\nif n % check(p) == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s610021360":{
    "code_string":"s=input()\nn=int(s)\nm=0\nfor i in s:\n    m+=i\nif n%m==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s814506375":{
    "code_string":"nlist = list(map(int,input()))\nrev_n = reversed(nlist)\nsn = sum(nlist)\nn = 0\n\nfor i in range(len(nlist)):\n    n += rev_n[i]*(10**i) \nif n%sn == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: 'list_reverseiterator' object is not subscriptable"
  },
  "s146337921":{
    "code_string":"N2 = N\nsum = 0\nwhile True:\n    sum += N % 10\n    N = N \/\/ 10\n    if N == 0:\n        break\nif N2 % sum == 0:\n    print('Yes')\nelse:\n    print('No')\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s425603011":{
    "code_string":"N = input()\n\nans = 0\nfor i in N:\n    ans += int(i)\n\nif N % ans ==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s158253089":{
    "code_string":"n=input()\ns=0\nfor i in range(len(n)):\n    s += n[i]\nif int(n)%s == 0:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s813275764":{
    "code_string":"N = int(input())\nS = 0\n\nfor i in range(len(str(N))):\n  S += int(str(S)[i])\n  \nif N % S == 0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"IndexError: string index out of range"
  },
  "s394093083":{
    "code_string":"num=input()\nj=0\nfor i in range(1,10):\n  j+=num\/\/10^i\nprint(num%j==0)",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'str' and 'int'"
  },
  "s600194939":{
    "code_string":"n = str(input())\ncnt = 0\nfor i in range(len(n)):\n\tcnt += n[i]\nif int(n)%cnt == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s242696551":{
    "code_string":"S=input()\nprint('YNEOS'[sum(map(int,S))%int(s)==0::2])",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s811416003":{
    "code_string":"N = int(input())\nn = list(str(N))\nprint(\"Yes\" if N%(sum(n)==0 else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s318737320":{
    "code_string":"n = int(input())\ns = sum(map(int, list(str(n)))\n\nif n % s == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s950069018":{
    "code_string":"a = int(input())\nb = sum(list(map(int,list(str(a)))))\nans = a\/b\nprint(\"Yes\" if ans == o else\"No\")",
    "error_obj":"NameError: name 'o' is not defined"
  },
  "s582010207":{
    "code_string":"N = int(input())\nn = N\nflag = True\nS = 0\na = 0\nwhile flag:\n  a = n % 10\n  S +=a\n  n = n -a \/\/10\n  if n == 0:\n    flag =False\nif N % S == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s631812739":{
    "code_string":"n = input()\nk = list(map(int, list(n)))\ns = sum(n)\nn = int(n)\nif n%k:\n  print(\"No\")\nelse:\n  print(\"Yes\")",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s608525052":{
    "code_string":"import sys\n\n\nstdin = sys.stdin\ndef ns(): return stdin.readline().rstrip()\ndef ni(): return int(stdin.readline().rstrip())\ndef nm(): return map(int, stdin.readline().split())\ndef nl(): return list(map(int, stdin.readline().split()))\n\n\ndef main():\n    n = ni()\n    Sn = sum(list(str(n)))\n    print('Yes' if n % Sn == 0 else 'No')\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s458475752":{
    "code_string":"a,b=int(input())\nfor x in input().split():\n  print(x)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 3'"
  },
  "s636876510":{
    "code_string":"\/\/#define _GLIBCXX_DEBUG\n\/\/#define rep(i,n) for (int i = 0; i < (int)(n); i++)\n#include <bits\/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int n,k; cin >> n >> k;\n    int a[n]; for (int i = 0; i<n; i++) cin >> a[i];\n    cout << (((n-k)+(k-2))\/(k-1))+1 << \"\\n\";\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s684719558":{
    "code_string":"n,k = map(int,input().split())\nA = list(map(int,input.split()))\n\nif (n-1)%%(k-1) == 0:\n  print(n-1\/k-1)\nelse:\n  print((n-1\/\/k-1)+1)\n  \n\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s635740156":{
    "code_string":"n,k=map(int,open(0).split())\nprint(0--~-n\/\/~-k)",
    "error_obj":"AttributeError: '_io.TextIOWrapper' object has no attribute 'split'"
  },
  "s390239514":{
    "code_string":"n,k = map(int,input().split())\nA = list(map(int,input().split()))\nimport math\nans = math.ceil(((n-1)\/(k-1))\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s032680798":{
    "code_string":"N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nimport math\nprint(ceil((N-1)\/(K-1)))",
    "error_obj":"NameError: name 'ceil' is not defined"
  },
  "s972077680":{
    "code_string":"n,k=int(input().split());print(0--~-n\/\/~-k)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s788442096":{
    "code_string":"a,b=map(int, input().split())\nc=list(map(int, input().split()))\nd -= 1\nprint(a\/\/d)",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s283428029":{
    "code_string":"ar = list(map(int,input().split(\" \")))\ni = ar.index(1)\ncount = 0\nam = 0\nif i % (m - 1) == 0:\n    count += i \/\/ (m - 1)\nelse:\n    count += i \/\/ (m - 1) + 1\n    am += i % (m - 1)\nif (n - 1 - i) % (m - 1) == 0:\n    count += (n - 1 - i) \/\/ (m - 1)\nelse:\n    count += (n - 1 - i) \/\/ (m - 1) + 1\n    am += (n - 1 - i) % (m - 1)\nif am >= m - 1:\n    count -= 1\nprint(count)",
    "error_obj":"ValueError: 1 is not in list"
  },
  "s023471514":{
    "code_string":"n,k=map(int,input().split())\nl=list(map(int,input()))\n\ncnt=1\nnum=k\nwhile num<n:\n  num+=(k-1)\n  cnt+=1\n  \nprint(cnt)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s197123680":{
    "code_string":"index = a.index(1)\ncnt = 0\n\nif (n==k):\n    print(1)\nelse:\n    if index <= (k - 1):\n        cnt += 1\n        i = k - 1\n        while i <= (len(a) - 2):\n            i += (k-1)\n            cnt += 1\n    elif index >= (n - k):\n        cnt += 1\n        i = n - k\n        while i >= 1:\n            i -= (k-1)\n            cnt += 1\n    else:\n        i = index\n        while i >= 1:\n            i -= (k-1)\n            cnt += 1\n\n        i = index\n        while i <= (len(a) - 2):\n            i += (k-1)\n            cnt += 1\n\n    print(cnt)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s256320119":{
    "code_string":"N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nmini = min(A)\nidx = N + 1\nmid = N \/ 2\n\nfor i, a in enumerate(A):\n  if a == mini and abs(idx - mid) > abs(i - mid):\n    idx = i\n\nans = i \/\/ (K - 1)\nrem = i % (K - 1)\nif rem:\n  ans += 1\n  if (N - i - 1 - (K - rem)) \/\/ (K - 1) > 0:\n    ans += (N - i - 1 - (K - rem)) \/\/ (K - 1)\n    if (N - i - 1 - (K - rem)) % (K - 1) != 0:\n      ans += 1\nelse:\n  if (N - i - 1) \/\/ (K - 1) > 0:\n    ans += (N - i - 1) \/\/ (K - 1)\n    if (N - i - 1) % (K - 1) != 0::\n        ans += 1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s733955513":{
    "code_string":"#!\/usr\/bin\/env python3\n\nk = int(input())\n\nnow = 1\nstep = 1\n\n\ndef sunuke(n):\n    r = 0\n    while n:\n        r += n % 10\n        n \/\/= 10\n    return r\n\n\ndef ok(a, b):\n    return a * s(b) <= b*s(a)\n\n\nwhile k:\n    if ok(now, now+step):\n        print(now)\n        k -= 1\n        now += step\n    else:\n        nstep = step*10\n        while now % nstep != nstep-1:\n            now += step\n        step = nstep\n",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s165064805":{
    "code_string":"a,b=map(int,input().split())\nif a=<8 and b=<8:\n    print(\"Yay!\")\nelse:\n    print(\":(\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s262195168":{
    "code_string":"a,b = int(input().split())\nif a>=9 or b>=9:\n  print(':(')\nelse:\n  print('Yay!')",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s078464865":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nif a<=8:\n  if b<=8:\n    print(\"Yay!\")\n      else:\n        print(\":(\")\nelse:\n  print(\":(\")",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s095858865":{
    "code_string":"a,b=map(int, input().split())\n\nif a+b=<16:\n  print('Yay!')\nelse:\n  print(':(')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s061778232":{
    "code_string":"a, b = map(int, inuput().split())\nif a >= 8 and b => 8:\n  print('Yay!')\nelse:\n  print(':(')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s922553904":{
    "code_string":"if int(input())>8 or int(input())>8:\n  print(\":(\")\nelse:\n  print(\"Yay!\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 4'"
  },
  "s254236306":{
    "code_string":"a,b=map(int,input())\nif a>8 or b>8:\n    print(\":(\")\nelse:\n    print(\"Yay!\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s433849122":{
    "code_string":"a b = list(map(int, input().split()))\nif a <= 8 and b <= 8:\n  print('Yay!')\nelse:\n  print(':(')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s490566562":{
    "code_string":"a,b = map(int,input().split())\n\nif a <= 8 ans b <= 8:\n  print('Yay!')\nelse:\n  print(':(')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s399537587":{
    "code_string":"N,M = map(int,input().split()))\n\nif N<=8 and M<= 8:\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s914866739":{
    "code_string":"a, b = map(input().split())\nif a < 8 and b < 8:\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s736590705":{
    "code_string":"a, b = map(int, input().split())\nif a <= 8 and b <= 8:\n  print(\"Yay!\")\nelif:\n  print(\":(\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s201788515":{
    "code_string":"a,b =int(input.split())\nif a<=8 and b<=8:\n  print('Yay!')\n else:\n  print(':(')",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s031508442":{
    "code_string":"a,b = map(int,input().split())\nprint(':(' if a > 8 or b > 8 'Yay!')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s068930221":{
    "code_string":"a,b=list(map(int,input().split()))\nif a<=8 and b<=8:\n  print('Yay!')\nesle :\n  print(':(')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s427111833":{
    "code_string":"a,b = map(int,input().split())\n\nfor a<9 and b<9:\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
    "error_obj":"SyntaxError: cannot assign to operator"
  },
  "s407920153":{
    "code_string":"a,b = map(int,input().split())\nif a<9 || b<9:\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s956004036":{
    "code_string":"a, b = map(int, input().split())\nprint(\"Yay!\" if a <= 8 and b <= 8 else: \":(\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s256652222":{
    "code_string":"d, n = map(int, input().split())\n\nif d = 0:\n  if n <= 99:\n    print(n)\n  else:\n    print(101)\nelif d = 1:\n  if n <= 99:\n    print(100*n)\n  else:\n    print(10100)\nelse:\n  if n <= 99:\n    print(10000*n)\n  else:\n    print(1010000)\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s516768614":{
    "code_string":"D,N = map(int,input().split())\nans = []\nfor i in range(10000000):\n  if i%(100**D) == 0:\n    ans.append(i)\n    if len(ans) == N:\n      break\nprint(ans[N])\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s383222217":{
    "code_string":"0 5",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s810717512":{
    "code_string":"d, n = map(int, input().split())\ncount = 0\nfor i in range(0, 10000 * 100 + 1):\n  if i % (pow(100 , d)):\n    count += 1\n    if count == n:\n      print(i)\n      return",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s226130741":{
    "code_string":"d, n = map(int, input().split())\nif d == 0:\n    print(x)\n    exit()\nx = 100 **d\nprint(x*n)",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s604133245":{
    "code_string":"d,n=map(int,intput().split())\nprint(n*10**(2*d))",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s879372929":{
    "code_string":"D, M=map(int, input().split())\nprint((100**D)*N)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s462633640":{
    "code_string":"D,N=input().split()\nprint(100**D*5)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'str'"
  },
  "s504100019":{
    "code_string":"d,n = map(int,input().split())\n\nif d == 0:\n    if n == 100:\n        print(101)\n    else:\n        if n == 100:\n        print(n)\nelse:\n    if n == 100:\n        print(100**d * 101)\n    else:\n        print(100**d * n)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s025362535":{
    "code_string":"\uff54d,n = map(int,input().split())\nprint(n*100**d)",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s722475077":{
    "code_string":"D, N = map(int, input().split())\n\nlst = []\nX = \"00\" ** D\n\nfor i in range(1,102):\n    if i % 100 == 0:\n        pass\n    else:\n        lst.append(str(i) + X)\n\nprint(lst[N-1])\n",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s929350855":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\n\nfor i in a:\n  count += bin(i).rfind(\"1\") - 1\n\nprint(count)",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s307297489":{
    "code_string":"#include <stdio.h>\nint main(void){\n    int n,i;\n    scanf(\"%d\",&n);\n    long long a[n],ans=0;\n    for(i=0;i<n;i++){\n        scanf(\"%lld\",&a[i]);\n    }\n    for(i=0;i<n;i++){\n        while(a[i]%2==0){\n            a[i]+=a[i]\/2;\n            ans++;\n        }\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s915735457":{
    "code_string":"N=int(input())\nA=list(int, input().split())\ncounter=[]\nfor num in range(len(A)):\n  counter.append(0)\nfor num in range(len(A)):\n  while A[num]%2==0:\n    A[num]=A[num]\/2\n    counter[num]+=1\nprint(sum(counter))\n  ",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s669553813":{
    "code_string":"def resolve():\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in a:\n        ans += prime_factorize(i).count(2)\n\n    print(ans)\n\n    return\n\nresolve()",
    "error_obj":"NameError: name 'prime_factorize' is not defined"
  },
  "s559081052":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\ncnt = 0\n\nfor i in range(N):\n  while A[i]%2 == 0:\n    cnt += 1\n\nprint(cnt)\n    ",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s636269989":{
    "code_string":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn = I()\nA = readInts()\nabc = 1\nfor v in A:\n    abc *= v\nans = 0\nwhile abc % 2 == 0:\n    ans += 1\n    abc\/\/=2\nprint(ans)\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s958753749":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\ncnt=0\nfor i in range(n):\n  while a[i]%2=0:\n    a[i]=a[i]\/2\n    cnt+=1\n    \nprint(cnt)\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s067515852":{
    "code_string":"if contest_num <= 999:\n    print('ABC' + str(contest_num).zfill(3))\nelif contest_num >= 1000:\n    over_thousand_num_fix = contest_num - 999\n    print('ABD' + str(over_thousand_num_fix).zfill(3))",
    "error_obj":"NameError: name 'contest_num' is not defined"
  },
  "s754564240":{
    "code_string":"\nn=input()\nif n < 1000:\n    prnt('ABC')\nelse:\n    print('ABD')",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s572849244":{
    "code_string":"if 1<= N < 1000:\n    print('ABC')\n\n\nelif 1000 <= N <= 1998:\n    print('ABD')",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s301720471":{
    "code_string":"name=input()\nif name<=999:\n    print('ABC')\nelif name>=1000:\n    print('ABD')\nelse:\n    print()\n",
    "error_obj":"TypeError: '<=' not supported between instances of 'str' and 'int'"
  },
  "s459846595":{
    "code_string":"n = int(input())\nif n > 999:\n    print(\"ABD)\nelse:\n    print(\"ABC\")\n",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s106044513":{
    "code_string":"# -*- coding: utf-8 -*-\n\nn = int(input())\n\nif (n \/ 1000) == 0:\n    print('ABC' + n % 1000)\nelse:\n    print('ABD' + (n % 1000) + 1)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s131268442":{
    "code_string":"a=int(input())\nif a<10:\n  print(\"ABC00\"+str(a))\nelif 10<=a<100:\n  print(\"ABC0\"+str(a))\nelif 100<=a<1000:\n  print(\"ABC\"+str(a))\nelif: 1000<=a<1010:\n  print(\"ABD00\"+str(a))\nelif: 1010<=a<1100:\n  print(\"ABD0\"+str(a))\nelse:\n  print(\"ABD\"+str(a))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s468688167":{
    "code_string":"n = int(input())\n\nif n < 1000:\n    input('ABC')\nelse:\n    input('ABD')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s495608784":{
    "code_string":"N = int(input().split())\n\nif N < 1000:\n    print('ABC')\nelse:\n    print('ABD')\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s166842299":{
    "code_string":"print(\"ABD\" if int(input())>999 else \"ABC)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s187777631":{
    "code_string":"n = int(input())\n\ns = input()\n\nif n < 1000:\n    print('ABC')\n\nelif 1000 <= n <= 1998:\n    print('ABD')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s920744276":{
    "code_string":"moji = map(int,input().split())\nprint((\"ABC\",\"ABD\")[moji >=1000])",
    "error_obj":"TypeError: '>=' not supported between instances of 'map' and 'int'"
  },
  "s256075053":{
    "code_string":"N = input()\n\nif N >= 1000:\n    print( 'ABD' )\n\nelse :\n    print( 'ABC' )\n",
    "error_obj":"TypeError: '>=' not supported between instances of 'str' and 'int'"
  },
  "s125959144":{
    "code_string":"N=int(input())\n\nif =1<N<=999:\n\tprint(\"ABC\")\nelif 999<N<=1998:\n \tprint(\"ABD\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s438585297":{
    "code_string":"N=int(input())\n1<=N<=1988\n\nif N<=999:\n    print('ABC')\nelse N>=1000:\n    print('ABD')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s957161237":{
    "code_string":"a, b = int(input())\nX = b - a\nans = 0\nfor i in range(X):\n    ans += i\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '8 13'"
  },
  "s730992679":{
    "code_string":"import sys\na,b = map(int,input().split())\nsum = 0\nfor i in range(1,1000):\nwhile(a > sum):\n\ti = 1\n    sum += 1\n    i += 1\nprint(sum-a)\n\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s290033953":{
    "code_string":"def Gauss_sum(n):\n  return n*(n+1)\/\/2\na,b=map(int,input())\nfor i in range(999):\n  if Gauss_sum(i+1)-a == Gauss_sum(i+2)-b:\n    print(Gauss_sum(i+1)-a)\n    break",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s030983754":{
    "code_string":"import itertools\n\nn, m = map(int, input().split())\nl = itertools.accumulate([1] * 999)\nprint(l[m-n-1] - m)",
    "error_obj":"TypeError: 'itertools.accumulate' object is not subscriptable"
  },
  "s330909392":{
    "code_string":"L=[1]\nn=int(input())\nx = 6\ny = 9\nwhile x <= n:\n  L.append(x)\n  x *= 6\nwhile y <= n:\n  L.append(y)\n  y *= 9\nL.sort()#[1,6,9,36,81]\ndp = [float(\"Inf\")]*(n+1)\ndp[0] = 0\nfor i in range(n+1):#0~81\n  for j in L:#1,6,9\n    dp[i+j] = min(dp[i+j],dp[i]+1)#dp=[0,1,...1,.1]\nprint(dp[n])",
    "error_obj":"IndexError: list index out of range"
  },
  "s659214406":{
    "code_string":"N = int(input())\nsix = [6**i for i in range(7)]\nnine = [9**i for i in range(6)]\nL = []\nfor s in six:\n  L.append(s)\nfor s in nine[1:]:\n  L.append(s)\nL.sort(reverse=True)\nans = 0\nfor l in L:\n  while N > 0:\n    ans += N \/\/ l\n    N %= l\nprint(ans)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s056294977":{
    "code_string":"from  itertools import combinations\nn,C=map(int,input().split())\nd=[list(map(int,input().split())) for _ in range(C)]\nc=[list(map(int,input().split())) for _ in range(n)]\na=[[0]*C for _ in range(3)]\nfor i in range(n):\n\tfor j in range(n):\n\t\ta[(i+j)%3][c[i][j]-1]+=1\nans=10**9\nfor v in combinations(range(C),3):\n\ttmp=0\n\tfor i in range(3):\n\t\tfor j in range(30):\n\t\t\ttmp+=a[i][j]*d[j][v[i]]\n\tans=min(ans,tmp)\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s240086312":{
    "code_string":"N=int(input())\n\nM=10**9\nfor i in range(1,N\/\/2+10):\n    a=list(str(i))\n    b=list(str(N-i))\n    #print(a,b)\n    k=0\n    for q in range(len(a)):\n        k+=int(a[q])\n    for p in range(len(b)):\n        k+=int(b[p])\n    M=min(M,k)\nprint(M)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '-'"
  },
  "s351285088":{
    "code_string":"I,i,R=input,int,range\nn,L,R,A,C=i(I()),[],[],0,0\nfor _ in R(n):l,r=map(i,I().split());L+=[l];R+=[r]\nL=sorted(l)[::-1];R.sort()\nfor j in R(n):C+=(L[j]-R[j])*2;A=max(A,C)\nprint(A)",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s565083426":{
    "code_string":"# ref https:\/\/atcoder.jp\/contests\/agc025\/submissions\/7307839\nimport numpy as np\nfrom card3.void.stop_watch import stop_watch\n\n@stop_watch\ndef main():\n    n = int(input())\n    L, R = [], []\n    for i in range(n):\n        l, r = map(int, input().split())\n        L.append(l)\n        R.append(r)\n    ll = np.array(L); ll.sort(); ll = ll[::-1]\n    rr = np.array(R); rr.sort()\n\n    lll = ll.cumsum()\n    rrr = rr.cumsum()\n\n    x = (lll - rrr).max()\n    y = (lll[1:] - rrr[:-1]).max()\n    z = (lll[:-1] - rrr[1:]).max()\n\n    print(2 * max(x, y, z))\nif __name__ == '__main__':\n    main()",
    "error_obj":"ModuleNotFoundError: No module named 'card3'"
  },
  "s693077807":{
    "code_string":"a,b=map(int,input().split())\nprint(max(A+B,A-B,A*B))",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s423256397":{
    "code_string":"a,b = map(int, input().split())\nprint(max(a+b,max(a-b,a*b))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s588219805":{
    "code_string":"a,b=map(int,input().split())\nprint(max(a+b,a=b,a*b))",
    "error_obj":"SyntaxError: positional argument follows keyword argument"
  },
  "s968789391":{
    "code_string":"A,B = max(int,input().split())\nprint(max(A+B,A-B,A*B))",
    "error_obj":"TypeError: '>' not supported between instances of 'list' and 'type'"
  },
  "s724528698":{
    "code_string":"a, b = map(int, input().split())\nprint(max(a+b, a-b, a*b)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s377848108":{
    "code_string":"a, b, c=map(int, input().split())\nk=max(a+b, a-b)\n\nprint(k)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s725728991":{
    "code_string":"a, b = map(imt, input().split())\nprint(max(a + b, a * b, a - b))",
    "error_obj":"NameError: name 'imt' is not defined"
  },
  "s217214341":{
    "code_string":"a, b, c = list(map(int, input().split()))\nmy_result = max(a+b, a-b, a*b)\nprint(my_result)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s320841335":{
    "code_string":"a,b=map(inr,input().split())\nprint(max([a+b,a-b,a*b]))",
    "error_obj":"NameError: name 'inr' is not defined"
  },
  "s760811924":{
    "code_string":"N = int(input())\nS = input()\n\ndef f(s, t):\n  set_s = set()\n  set_t = set()\n  for i in s:\n    set_s.add(i)\n  for i in t:\n    set_t.add(i)\n  return len( set_s & set_t )\n\nfor i in range(1,N):\n  s = S[i:]\n  t = S[:i]\n  ans = max(ans, f(s ,t))\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s048336507":{
    "code_string":"N=int(input())\nS=input()\nmaxa=-10\nfor i in range(N-1):\n  a=set(L[:i+1])\n  b=set([i+1:])\n  maxa=max(maxa,len(a&b))\nprint(maxa)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s105273437":{
    "code_string":"N = int(input())\nS = input()\nans = 0\na = [0] * 26\nfor i in range(N):\n    a[ord(S[i])-ord('a')] += 1\n\nb = [0] * 26\nfor i in range(26):\n    a[ord(S[i])-ord('a')] -= 1\n    b[ord(S[i])-ord('a')] += 1\n    cnt = 0\n    for j in range(26):\n        if a[j]*b[j]>0:\n            cnt += 1\n    ans = max(ans,cnt)\nprint(ans)\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s056645480":{
    "code_string":"N=int(input())\nS=input\n\nans=1\n\nfor i in range(1,N):\n    X=S[:i]\n    Y=S[i:]\n    setX=set(X)\n    setY=set(Y)\n    intersectionXY=setX & setY\n    _temp=len(intersectionXY)\n    if _temp>ans:\n        ans=_temp\n    else:\n        pass\nprint(ans)",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s686702222":{
    "code_string":"n = int(input())\ns = input()\nw = set(s)\nt = 0\nfor i in range(n):\n  if s.count(w[i]) >= 2:\n    t += 1\nprint(t)",
    "error_obj":"TypeError: 'set' object is not subscriptable"
  },
  "s889979323":{
    "code_string":"N = int(input())\nS = input()\na = s.count(\"E\")\nc = a \n\nfor s in S:\n  if s==\"E\":\n    c-=1\n  else:\n    c+=1\n  a=min(a,c)\n\nprint(a)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s780136537":{
    "code_string":"e = S.count(\"E\")\ncnt = e\nfor i in S:\n    if i == \"E\":\n        cnt -= 1\n    else:\n        cnt += 1\n    e = min(e, cnt)\nprint(e)",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s162385533":{
    "code_string":"import sys\ninput()\nd={k:0 for k in 'AC WA TLE RE'.split()}\nfor ln in sys.stdin:\n    d[ln.strip()]+=1\nfor k,v in d.items():\n    print(k,'x',v)\n",
    "error_obj":"KeyError: 'WEEWW'"
  },
  "s050689709":{
    "code_string":"N = int(input())\nS = list(input())\n\nCNT = []\nc = 0\nfor s in S:\n  if s == \"E\":\n    c += 1\n  CNT.append(c)\n  \nans = N + 10\nmn = N + 10\nfor i in range(N):\n  c = 0\n  if i > 0:\n    c += i - 1 - CNT[i-1]\n  if i < N - 1:\n    c +=  N - i - 1 - (CNT[N] - CNT[i+1])\n    \n  if c < mn:\n    ans = i+1\n\nprint(ans)\n    \n\n  ",
    "error_obj":"IndexError: list index out of range"
  },
  "s037472035":{
    "code_string":"A, B, C, K = map(int, split().input())\nprint(A - B if K % 2 == 0 else B - A)",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s319763955":{
    "code_string":"if K%2 == 0:\n    ans = A - B \nelse:\n    ans = B - A\nprint(ans)",
    "error_obj":"NameError: name 'K' is not defined"
  },
  "s303761001":{
    "code_string":"a,b,c,k = map(int, input().split())\n\nans = a - b\n\nif(k % 2 == 1):\n    ans = abs(ans)\n\nif(len(ans) >= 18):\n    ans = 'Unfair'\n\nprint(ans)",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s189147995":{
    "code_string":"a,b,c,k=map(int,input().split())\nif abs(a-b)>10**18:\n  print(\"unfair)\nelse:\n  if k%2==0:\n    print(a-b)\n  else:\n    print(b-a)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s555103313":{
    "code_string":"a,b,c,k=map(int,input().split())\n\nif k%2 == 0 and abs(a-b)<=10**8:print(a-b)\nelif k%2 != 0 abs(b-a)<=10**8:print(b-a)\nelse:print(\"Unfair\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s104893571":{
    "code_string":"A, B, C, K = input().split(' ')\nA = int(A)\nB = int(B)\nC = int(C)\nK = int(K)\nwhile True:\n  if A==B==C:\n    print(0)\n    break\n\n  else:\n    for i in range(K):\n      a = B + C\n      b = A + C\n      c = A + B\n      A = a\n      B = b\n      C = c\n    if A-B>10**18:\n      print('Unfair')\n    else:\n      print(A-B)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s765915743":{
    "code_string":"A, B, C, K = map(int, input().split())\nprint(A-B) if k%2==0 else print(B-A)",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s241432153":{
    "code_string":"print((-1)**k*(a-b))",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s063344360":{
    "code_string":"n = int(input())\np = [int(input()) for _ in range(n)]\n\nq = [0] * (n+1)\nfor i in range(n):\n    q[p[i]] = q[p[i]-1] + 1\n\nprint(q - max(q))\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'int'"
  },
  "s337038458":{
    "code_string":"n=int(input())\nl=[int(input()) for _ in range(n)]\nans=0\nif l[0]!=0:\n  print(-1)\n  exit()\nfor i in range(n-1):\n  if l[i+1]-l[i]>1:\n    print(-1)\n    exit()\n  elif (l[i]+1==l[i+1]):\n    ans+=1\n  else:\n\tans+=l[i+1]\nprint(ans)\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s472083489":{
    "code_string":"a, b, c, d=map(int,input().split)\nk1=abs(a-b)\nk2=abs(a-c)\nk3=abs(b-c)\nif k2<=d:\n  print(\"Yes\")\nelif k1<=d or k3<=d:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s428590650":{
    "code_string":"a,b,c,d=map(int,input().split())\na='Yes'\nif abs(a-c)>d:\n  if abs(a-b)>d or abs(b-c)>d:\n    a='No'\nprint(a)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s629575724":{
    "code_string":"if abs(c-a) <= d:\n    print('Yes')\nelif abs(b-a) <= d and abs(c-b) <= d:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s970413983":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nx = abs(a - b)\ny = abs(b - c)\nz = abs(a - c)\n\nif x <= d and y <= d:\n    print(\"Yes\")\nelif x > d and z <= d:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s792829950":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\n# a\u3068c\u306e\u7d76\u5bfe\u5024\u304c\uff44\u4ee5\u4e0b\nif abs(c - a) <= d:\n    print(\"Yes\")\n\nelif abs(b-a) <= d and abs(c - b)<= d:\n    print(\"Yes\")\n\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s121912320":{
    "code_string":"a\u3001b\u3001c\u3001d  =  map\uff08int\u3001input\uff08\uff09\u3002split\uff08\uff09\uff09\nif abs(a - c) <= d:\n    print('Yes')\nelif abs(a - b) <= d and abs(b - c) <=d:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"SyntaxError: invalid character '\u3001' (U+3001)"
  },
  "s122339689":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\nif abs(c -a) <= d :\n    print('Yes')\nelif abs(b -a) <= d and abs(c -b) <= d:\n    print('Yes')\nelse:\n    print('No')\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s278086976":{
    "code_string":"# \u5404\u6570\u5024\u306e\u53d6\u5f97\na,b,c,d = map(int,input().split)\n\n#\u5404\u6761\u4ef6\u306b\u6cbf\u3063\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\n#1:a\u3068c\u306e\u5dee\u5206\u306e\u7d76\u5bfe\u5024\u304cd\u4ee5\u4e0b\u306e\u5834\u5408\u3001\u76f4\u63a5\u4f1a\u8a71\u304c\u53ef\u80fd\u3067\u3042\u308b\u305f\u3081\u300cYes\u300d\u3092\u51fa\u529b\nif abs(a-c) <= d:\n    print(\"Yes\")\n#2:a\u3068b\u306e\u5dee\u5206\u53ca\u3073b\u3068c\u306e\u5dee\u5206\u304cd\u4ee5\u4e0b\u306e\u5834\u5408\u3001\u95a2\u7bc0\u4f1a\u8a71\u304c\u53ef\u80fd\u3067\u3042\u308b\u305f\u3081\u300cYes\u300d\u3092\u51fa\u529b\nelif abs(a-b) <=d and abs(b-c) <= d:\n    print(\"Yes\")\n# 1\u53ca\u30732\u306e\u3069\u3061\u3089\u306e\u6761\u4ef6\u306b\u3082\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u5834\u5408\u3001\u4f1a\u8a71\u304c\u4e0d\u53ef\u80fd\u306e\u305f\u3081\u300cNo\u300d\u3092\u51fa\u529b\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s231056819":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif abs(a - c) <= d:\n    print(\"Yes\")\nelif (abs(a - b) <= d) and (abs(b - c) <= d):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s162354047":{
    "code_string":"a, b, c, d = map(int, input().split())\n\nif e(a-b) <= d and e(b-c) <= d or e(a-c) <= d:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"NameError: name 'e' is not defined"
  },
  "s467700891":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif abs(a - c) <= d:\n    print('Yes')\nelif (a < b and b < c) or (a > b and b > c) :\n    if abs(a - b) <= d and abs(b - c) <= d:\n        print('Yes')\n    else:\n        print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s244264266":{
    "code_string":"x = int(input())\nif x == 1:\n  print(\"1\")\n  exit()\n  \nans = 0\nfor b in range(2,int(x**(1\/2)+1)):\n  for p in range(2,1000):\n    tmp = pow(b,p)\n    if tmp<=x:\n      ans = max(ans,pow(b,p))\n    else:\n      break\n      \nprint(ans)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s259584256":{
    "code_string":"if d >= z:\n    print(\"Yse\")\nelif d >= x and d >= y:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s145073160":{
    "code_string":"if d >= abs(a - c) or (d >= abs(a - b) and d >= abs(b - c)):\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s739446398":{
    "code_string":"def main():\n a,b,c,d = map(int,input().split())\n if abs(a - c) <= d or abs(a - b) + abs(b - c) <= d:\nmain()",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s191441544":{
    "code_string":"a, b, c, d = map(int, input().split())\n\nAB = abs(a - b)\nBC = abs(b - c)\nAC = abs(a - c)\n\nif AC <= d or ( AB <= d and BC <= d:):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s001836873":{
    "code_string":"a,b,c,d = map(int,input(),split())\n\nif abs(a-c) <= d:\n    print('Yes')\n\nelif abs(a-b) <= d and abs(b-c) <= d:\n    print('Yes')\n\nelse:\n    print('No')\n\n",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s872005341":{
    "code_string":"a,b,c,d=map(int,input().split())\nprint([\"No\",\"Yes\"][abs(a-c)<=d or (abs(a-b)<=d and abs(b-c)<=d])",
    "error_obj":"SyntaxError: closing parenthesis ']' does not match opening parenthesis '('"
  },
  "s447726777":{
    "code_string":"a, b, c, d = map(int, input().split())\n\nif a - d <= c <= a + d:\n  print(\"Yes\"):\nelif a - d <= b <= a + d and c - d <= b <= c + d:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s177067042":{
    "code_string":"data = input()\n\ndataa,datab,datac,datad = data.split(' ')\n\ndataa = int(dataa)\ndatab = int(datab)\ndatac = int(datac)\ndatad = int(datad)\n\nlength1 = dataa - datab\nlength2 = datab - datac\nlength11 = abs(length1) + abs(length2)\nlength3 = dataa - datac\n\nif abs(length1) <>= datad:\n    print('Yes')\nelif abs(length2) <= datad:\n    print('Yes')\nelif abs(length11) <= datad:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s203137354":{
    "code_string":"A, B, C, D = int(input())\n\nif D >= A + C:\n    print(\"Yes\")\nelif D >= A + B:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s140411898":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n \nif c - a <= d:\n    print(\"Yes\")\nelif b - a <= d and c - b <= d:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s482280624":{
    "code_string":"if abs(a-c) <= d:\n    print('Yes')\n\nelif abs(b - c) <= d and abs(a - b):\n    print('Yes')\n\nelse:\n    print('No')",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s329327777":{
    "code_string":"#\u914d\u5217\u306e\u6e96\u5099\n\uff03\u30a4\u30f3\u30d7\u30c3\u30c8\u5206\u3092\u6570\u5024\u578b\u306b\u5909\u63db\u5f8c\u3001\u30b9\u30d7\u30ea\u30c3\u30c8\u3067\u5404\u5909\u6570\u306b\u6301\u305f\u305b\u308b\n\na,b,c,d=map(int,input().split())  \n\n\uff03abs\u95a2\u6570\u3067\u5f15\u6570\u3092\u7d76\u5bfe\u5024\u3068\u3059\u308b\u3002\nif abs(c-a)>d:  \n  if abs(a-b)>d or abs(b-c)>d:  \n    print(\"No\")  \n  else:  \n    print(\"Yes\")  \nelse:  \n  print(\"Yes\")  ",
    "error_obj":"SyntaxError: invalid character '\uff03' (U+FF03)"
  },
  "s738084656":{
    "code_string":"if abs(a - c) <= d:\n    print('Yes')\nelif abs(a - b) <= d and abs(b - c) <= d:\n    print('Yes')\nelse:\n    print('No')\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s626177869":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif c - a <= d:\n    print(\"Yes\")\nelif b - a <= d and c - b <= d:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s700619782":{
    "code_string":"a = input()\nb = input()\nc = input()\nd = input()\n\nab = a - b\nbc = b - c\nac = a - c\n\nif a <= b <= c <= or  c < b < a:\n  if ab <= d and bc <= d or ac <= d:\n      print(\"Yes\")\n  else:\n      print(\"No\")\nelse:\n  if ac <= d:\n    print(\"Yes\")\n  else:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s795822057":{
    "code_string":"\na=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\n\nif abs(b-a)<d and abs(c-b)<d:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n\n\n\n\n\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 7 9 3'"
  },
  "s172920243":{
    "code_string":"a = int(input())\nn = []\nfor i in range(2, 10):\n  for j in range(32):\n\tif j ** i <= a:\n      n.append(j ** i)\nprint(max(n))\n  ",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s244739488":{
    "code_string":"import math\nx = int(input())\nans = (int(math.sqrt(X)))**2\nfor i in range(2,int(math.sqrt(x))+2):\n  for j in range(1,10):\n    if i ** j <= x and i**j > ans:\n      ans = i**j\n\nprint(ans)\n\n\n",
    "error_obj":"NameError: name 'X' is not defined"
  },
  "s711290106":{
    "code_string":"X=int(input())\nres=[]\nfor b in range(1,1000):\n  for p in range(2,1000):\n    if b**p<=X :\n      res.append(b**p)\nprint(res[-1])",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s351350114":{
    "code_string":"X = int(input())\n\nif X == 1:\n  print(1)\n  exit()\n\nans = 0\n\nfor b in range(2, int(x**0.5)+2):\n  temp = b\n  while temp <= X:\n    ans = max(ans, temp)\n    temp *= b\n\nprint(ans)",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s266990454":{
    "code_string":"import sys\n\nX = int(sys.stdin.readline())\nans = 0\nfor i in range(X+1):\n  \tfor j in range(11):\n      \ttmp = pow(i, j)\n        if tmp <= X:\n          \tans = max(ans, tmp)\nprint(ans)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s479032302":{
    "code_string":"import math\ndef main():\n  x = int(input())\n  sum=0\n  if x==0 or x==1:\n    sum=x\n  else:\n    for i in range(2,int(math.sqrt(x))+1):\n      j=2\n      while True:\n         if pow(i,j)<=x:\n          if pow(i,j)>sum:\n            sum=pow(i,j)\n        else:\n          break\n        j+=1\n  print(sum)\nmain()\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s915161523":{
    "code_string":"x = int(input())\nfor b in range(1,x):\n    for p in range(2,x):\n        if b**p<=x:c=max(c,b**p)\n        else:break\nprint(c)",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s730648299":{
    "code_string":"x = int(input())\nif x <= 3:\n  print(1):\nelse:\n  a = []\n  for i in range(2, x + 1):\n    j = 2\n    while i ** j < x:\n      a.append(i ** j)\n  print(max(a))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s651657642":{
    "code_string":"import math\n\nres = 1\nfor b in range(2, math.ceil(math.sqrt(x))):\n    p = 2\n    while b**(p+1) <= x:\n        p += 1\n    res = max(res, b ** p)\nprint(res)",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s316236483":{
    "code_string":"A=int(input())\nB=[1]*8\nfor i in range(2,10):\n  for j in range(A+1):\n    if j**i <= A:\n      B[i-2]= j**i\n    else:break\nB=B.sort()\nprint(B[-1])",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s905344935":{
    "code_string":"a=int(input())\nd=0\nfor i in range(33):\n  b=i\n  while b<a:\n    b=b*i\n  c=b\/i\n  if d>c:\n    d=c\nprint(d)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s174678909":{
    "code_string":"x = int(input())\n\nif x == 1:\n    print(\"1\")\n    exit()\n\n\ndef func(p):\n    q = p\n    while q < x:\n        q *= p\n        if q == x:\n            return q\n            break\n\n    if q \/ p == p:\n        return 1\n    else:\n        return q \/ p\n\n\nz = []\na = 1\n\nwhile a <= x:\n    z.append(func(a))\n    a += 1\n\nprint(max(z))\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s577095471":{
    "code_string":"import math\n\nx = int(input())\nans = [1]\ns = int(math.sqrt(x))\nif s >= 2:\n    for i in range(2,s+1):\n        temp = i\n        while True:\n            temp *= i\n            if temp <= n:\n                ans.append(temp)\n            else:\n                break\n\nprint(max(ans))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s257130612":{
    "code_string":"s=input()\nK=int(input())\np=set()\nfor i in range(len(s)):\n  for j in range(1,6):\n    if i+j<=len(s)-1:\n      p.add(s[i:j+i])\np=sorted(p)\nprint(p[K-1])",
    "error_obj":"IndexError: list index out of range"
  },
  "s387669740":{
    "code_string":"s=input()\nn=len(s)\nt=int(input())\nif t==1:\n    print(s)\n    exit()\nans=set()\nfor l in range(n-1):\n    for r in range(1,min(t,n-l)):\n        ans.add(s[l:r])\naa=list(ans)\naa.sort()\nprint(aa[t-1])",
    "error_obj":"IndexError: list index out of range"
  },
  "s125621154":{
    "code_string":"def main2():\n    S=list(input())\n    K=int(input())\n    N=len(S)\n\n    P=sorted(S)\n    l=[]\n    k=0\n    while len(l)<=5:\n        for n in range(N):\n            if S[n]==P[k]:\n                for i in range(1,6):\n                    if n+i<N-1:\n                        tmp=\"\".join(S[n:n+i])\n                        if tmp not in l:\n                            l.append(tmp)\n        k+=1\n    l.sort()\n    print(l[K-1])\n\nif __name__==\"__main__\":\n    main2()",
    "error_obj":"IndexError: list index out of range"
  },
  "s135368641":{
    "code_string":"s = input()\nk = int(input())\na = []\n\nfor i in range(5):\n    for j in range(i+1, len(s)):\n        if j - i >= 5: break\n        a.append(s[i:j])\n\nres = sorted(set(a))\nprint(res[k-1])",
    "error_obj":"IndexError: list index out of range"
  },
  "s936266131":{
    "code_string":"class uft():\n    def __init__(self,n):\n        self.p=[ -1 for i in range(n)]\n        self.r=[ 1 for i in range(n)]\n        \n    def find(self,x):\n        if(self.p[x]==-1):\n            return x\n        else:\n            self.p[x]=self.find(self.p[x])\n            return self.find(self.p[x])\n        \n    def unite(self,x,y):\n        x=self.find(x)\n        y=self.find(y)\n        if(self.r[x]>self.r[y]):\n            tmp=x\n            x=y\n            y=tmp\n            \n        if(self.r[x]==self.r[y]):\n            self.r[y]+=1\n            \n        if(x!=y):\n            self.p[x]=y\n        return\n    \nn,m=map(int,input().split())\np=list(map(int,input().split()))\nuf=uft(n)\nfor i in range(m):\n    x,y=map(int,input().split())\n    x-=1\n    y-=1\n    uf.unite(x,y)\nans=0\nfor i in range(n):\n    if(uf.find(i)==uf.find(p[i])):\n        ans+=1\n        \nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s375304323":{
    "code_string":"from numba import jit\n\nn , m = map(int, input().split())\np = list(map(int,input().split()))\n\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n    @jit\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\nuf = UnionFind(n)\n\nfor i in range(m):\n    x , y = map(int, input().split())\n    x-=1\n    y-=1\n    uf.union(x,y)\nans = 0\n\nro=uf.roots()\n\nfor i in ro:\n    mem = uf.members(i)\n    for j in mem:\n        if p[j]-1 in mem:\n            ans+=1\nprint(ans)\n\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s920853620":{
    "code_string":"n,m,p=map(int,input().split())\np=list(map(int,input().split()))\npar=[i for i in range(n)]\n\ndef find(x):\n  if par[x]==x:\n    return par[x]\n  else:\n    par[x]=find(par[x])\n    return par[x]\n\ndef union(x,y):\n  fx=find(x)\n  fy=find(y)\n  if fx!=fy:\n    par[fx]=fy\n\nf=lambda x:int(x)-1\nfor mm in range(m):\n  x,y=map(f,input().split())\n  union(x,y)\n\nans=0\nfor i in range(n):\n  if find(p[i])==i:\n    ans+=1\nprint(ans)\n  ",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s195664852":{
    "code_string":"s= input()\nK = int(input())\n\nans_list = []\nfor i in range(len(s)-K+1):\n    for j in range(i+1,i+K+1):\n        ans_list.append(s[i:j])\n\nans_set = set(ans_list)\nans_list_min = sorted(list(ans_set))\nprint(ans_list_min[K-1])",
    "error_obj":"IndexError: list index out of range"
  },
  "s308365969":{
    "code_string":"import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N, A, B, C, D = LI()\n    A -= 1\n    B -= 1\n    C -= 1\n    D -= 1\n    S = SS()\n\n    ## \u79fb\u52d5\u7d4c\u8def\u306b2\u9023\u7d9a\u4ee5\u4e0a\u306e\u5ca9\u304c\u3042\u3063\u305f\u3089\u30c0\u30e1\n    if '##' in S[A:C+1] or '##' in S[B:D+1]:\n        print('No')\n    else:\n        ## \u3075\u306c\u3051\u541b\u3092\u5148\u306b\u79fb\u52d5\u3055\u305b\u308c\u3070\u3044\u3044\n        if C < D:\n            print('Yes')\n        ## \u3075\u306c\u3051\u541b\u3092\u98db\u3073\u8d8a\u3048\u3089\u308c\u308b\u77ac\u9593\u304c\u5b58\u5728\u3059\u308c\u3070\u3044\u3044\n        else:\n            # \u5ca9\u306e\u9593\u306e\u3069\u3053\u304b\u306b3\u4ee5\u4e0a\u306e\u9699\u9593\u304c\u3042\u308b\u3053\u3068\n            if '...' in S[B:D+1]:\n                print('Yes')\n            else:\n                print('No')\n\nif __name__ == '__main__':\n    resolve()\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'aba'"
  },
  "s351379541":{
    "code_string":",# \u6700\u5927\u30675\u6587\u5b57\u306b\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u4e0a\u4f4dK\u500b\u3092\u4fdd\u6301\u3057\u3064\u3064\u5168\u63a2\u7d22\ns = input() + \" \"\nk = int(input())\nans = []\nfor i in range(len(s)):\n    for j in range(i + 1, min(len(s), i + 5 + 1)):\n        t = \"\".join(s[i:j])\n        if t not in ans:\n            ans.append(t)\n            ans = sorted(ans)[:6]\nprint(ans[k - 1])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s243028433":{
    "code_string":"import sys\nreadline = sys.stdin.readline\n\nclass UnionFind(object):\n    def __init__(self, n):\n        self._par = list(range(n))\n        self.size = [1]*n\n\n    def root(self, v):\n        if self._par[v] == v:\n            return v\n        self._par[v] = self.root(self._par[v])\n        return self._par[v]\n    \n    def unite(self, u, v):\n        u, v = self.root(u), self.root(v)\n        if u==v:\n            return False\n        if self.size[u] > self.size[v]:\n            u, v = v, u\n        self.size[v] += self.size[u]\n        self._par[u] = v\n\n    def is_connected(self, u, v):\n        return self.root(u)==self.root(v)\n\nn, m = map(int, readline().split())\nP = list(map(lambda x:int(x)-1, readline().split()))\nuf = UnionFind(n)\nfor _ in range(m):\n    x, y = map(lambda x:int(x)-1, readline().split())\n    uf,unite(x,y)\n\nans = 0\nfor i in range(n):\n    if uf.is_connected(i, p[i]):\n        ans += 1\nprint(ans)",
    "error_obj":"NameError: name 'unite' is not defined"
  },
  "s392331648":{
    "code_string":"a,b,c,d = map(int, input().split())\nif abs(a-c) <= d or (abs(a-b) <= d and abs(b-c) <= d):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 2)"
  },
  "s744648289":{
    "code_string":"a,b=map(int,input().split())\nprint(sum(a-1+(a<=b)))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s943189253":{
    "code_string":"a,b=map(int(input().split()))\nif b>=a:\n  print(a)\nelse:\n  print(a-1)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s101846798":{
    "code_string":"x,y=int(input()),int(input())\nif y<x:\n  x-=1\nprint(x)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 5'"
  },
  "s414514699":{
    "code_string":"a,b = map(int,input())\nans = (a-1)\nif a<=b:\n  ans+=1\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s155201137":{
    "code_string":"a,b = map(int,input.split())\nif a==i and b==1:\n  print(1)\nelse:\n  print(min(a,b)-1)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s911177490":{
    "code_string":"abc = list(map(int, input().split()))\nk = int(input())\nmx = abc.pop(max(abc))\nprint(mx * k + sum(abc))",
    "error_obj":"IndexError: pop index out of range"
  },
  "s435984973":{
    "code_string":"a = map(int, input().split())\nk = int(input())\n\na.sort()\na[-1] *= 2 ** k\n\nprint(sum(a))",
    "error_obj":"AttributeError: 'map' object has no attribute 'sort'"
  },
  "s707142828":{
    "code_string":"a=list(map(int,input().split()))\nb=int(input())\na.sort()\nprint(a[0]+a[1]+(a[2]*(2**b))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s759962470":{
    "code_string":"a = [int(x) for x in input().split()]\nk = int(input())\nprint(sum(a) + max(a) * (2 ** (K - 1)))",
    "error_obj":"NameError: name 'K' is not defined"
  },
  "s954225583":{
    "code_string":"a,b,c=map(int,input().split())\n\nx=max(a,b,c)\n\nprint((a+b+c)-x+x*(2**k))",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s117077395":{
    "code_string":"ls = map(int,input().split())\nK = int(input())\nls.sort()\nans = ls[0]+ls[1]+ls[2]*2**K\nprint(ans)",
    "error_obj":"AttributeError: 'map' object has no attribute 'sort'"
  },
  "s646761206":{
    "code_string":"H, W = map(int, input().split())\nS = [\".\"*(W+2)] + [\".\" + input() + \".\" for _ in range(H)] + [\".\"*(W+2)]\nfor y in range(1, H+1):\n    for x in range(1, W+1):\n        if S[y][x] = '#' and (S[y-1][x] + S[y+1][x] + S[y][x-1] + S[y][x+1]).count('#') == 0:\n            print(\"No\")\n            exit()\nprint(\"Yes\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s241961472":{
    "code_string":"H, W = map(int, input().split())\nS = [list(map(int, input().split())) for _ in range(H)]\n\nf = False\nfor h in range(H):\n  pre = '.'\n  now = S[h][0]\n  nxt = S[h][1]\n  abv = '.' if h == 0 else S[h-1][0]\n  blw = '.' if h == H-1 else S[h+1][0]\n  for w in range(W):\n    if now == '.':\n      f = False\n    elif now in [pre, nxt, abv, blw]:\n      f = False\n    else:\n      f = True\n    \n    pre = now\n    now = nxt\n    nxt = '.' if w == W-1 else S[h][w+1]\n    abv = '.' if h == 0 else S[h-1][w]\n    blw = '.' if h == H-1 else S[h+1][w]\n    \n    if f:\n      print('No')\n      exit()\nprint('Yes')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '.#.'"
  },
  "s376834282":{
    "code_string":"H,W = map(int,input().split())\nfigure = [input() for _ in range(H)]\nD = [(1,0), (-1, 0), (0,1), (0,-1)]\n\nfor h in range(H):\n  for w in range(W):\n    if figure[h][w] == '#':\n      for dh,dw in D:\n        nh, nw = h+dh, w+dw\n        if not (0 <= nh <=H and 0 <= nw <= W):\n          continue\n        if figure[nh][nw] == '#':\n          break\n      else:\n        print('No')\n        exit()\nprint('Yes')",
    "error_obj":"IndexError: string index out of range"
  },
  "s058998917":{
    "code_string":"h, w = map(int, input().split())\nsrc = [input() for i in range(h)]\n\nans = []\nfor row in src:\n        ans.append(list(row))\n\nflag = 0\ndxy = [(1, 0), (-1, 0), (0, 1), (0, -1)]\nfor x in range(h):\n        for y in range(w):\n                if src[x][y] == \".\":\n                        continue\n                else:\n                        for dx, dy in dxy:\n                                if x + dx < 0 or x + dx > h -1 or y + dy < 0 or y + dy > w - 1:\n                                        continue\n                                if src[x + dx][y + dx] == \"#\":\n                                        flag = 1\n                                        break\n                        if flag == 0:\n                                print(\"No\")\n                                exit()\n\nprint(\"Yes\")",
    "error_obj":"IndexError: string index out of range"
  },
  "s338603627":{
    "code_string":"ans = True\nd = [(0,1),(0,-1),(1,0),(-1,0)]\nfor y in range(H):\n    for x in range(W):\n        if s[y][x] == \"#\":\n            for dy, dx in d:\n                ny = y + dy\n                nx = x + dx\n                if ny<0 or H<=ny or nx<0 or W<=nx:\n                    continue\n                if s[ny][nx]==\"#\":\n                    break\n            else:\n                ans = False\nprint(\"Yes\" if ans else \"No\")",
    "error_obj":"NameError: name 'H' is not defined"
  },
  "s439568111":{
    "code_string":"import sys\n\ninput = sys.stdin.readline\n\nd = '.'\ndn = '#'\n\ndef isPaintable(h, w, x, y, canvas):\n    ret = False\n    if x > 0:\n        if canvas[x-1, y] == dn:\n            ret = True\n    elif x < w:\n        if canvas[x+1, y] == dn:\n            ret = True\n    elif y > 0:\n        if canvas[x, y-1] == dn:\n            ret = True\n    elif y < h:\n        if canvas[x, y+1] == dn:\n            ret = True\n    return ret\n\ndef main():\n    ans = 'Yes'\n    h, w = map(int, input().split())\n    canavs = []\n    for _ in range(h):\n        s = list(input().split().rstrip('\\n'))\n        canvas.append(s)\n    for i in h:\n        if ans == 'No':\n            break\n        for j in w:\n            if not isPaintable(h, w, j, i, canvas):\n                ans = 'No'\n                break\n    print(ans)\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"AttributeError: 'list' object has no attribute 'rstrip'"
  },
  "s023089393":{
    "code_string":"print(*[x for x in sieve(55555) if x % 10 == 7][:int(input())])",
    "error_obj":"NameError: name 'sieve' is not defined"
  },
  "s404710284":{
    "code_string":"N = int(input())\nS = [input() for _ in range(N)]\nT = [\"\".join(s) for s in zip(*S)]\n \nans = 0\nfor _ in range(N):\n    ans += (S == T)\n    S = [s[-1] + s[:-1] for s in S]\n    T = T[-1:] + T[:-1]\n \nprint(N * ans)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s326758548":{
    "code_string":"A,B,C,X,Y = map(int,input().split())\n\n#\u5168\u90e8C\u3067\u8cb7\u3046\u3068\u304d\na = 2*C*min(X,Y) + 2*C*(max(X,Y)-min(X,Y))\n\n#\u7247\u65b9\u3092\u5168\u90e8C\u3067\u8cb7\u3046\u3068\u304d\nif X > Y:\n    b = 2*C*Y + (X-Y)*A\nelif Y > X:\n    b = 2*C*X + (Y-X)*B\nelse:\n    b = a\nprint(b)\n    \n#\u5168\u90e8A\u3068B\u3067\u8cb7\u3046\u3068\u304d\nc = A*X + B*Y\nprint(c)\n\nprint(min(a,b,c))    ",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'oxo'"
  },
  "s912301192":{
    "code_string":"S=input()\nprint(S.count(o)*100+700)",
    "error_obj":"NameError: name 'o' is not defined"
  },
  "s955326243":{
    "code_string":"n=input()\nc=0\nfor i in range(n):\n  if n[i]=='o':\n    c+=1\nif c>0:\n  print(700*c)\nelse:\n  print(700)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s517977475":{
    "code_string":"opt=input()\nsum=700\nif opt[0] == o:\n  sum+=100\nif opt[1] == o:\n  sum+=100\nif opt[2] == o:\n  sum+=100\nprint(sum)",
    "error_obj":"NameError: name 'o' is not defined"
  },
  "s270131260":{
    "code_string":"to = list(input())\ncounter = 0\n\nif to[0] == \"o\":\n  counter += 1\nif to[1] == \"o\":\n  counter += 1:\nif to[2] == \"o\":\n  counter += 1:\n    \nprice = 700 + 100 * int(counter)\n\nprint(price)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s921440139":{
    "code_string":"s=input()\nc=0\nif(s[0]=='o')c+=700\nif(s[1]=='o')c+=100\nif(s[2]=='o')c+=100\nprint(c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s824525377":{
    "code_string":"n = input()\ncount = 0\nfor i in n:\n  \tif i == \"\u00d7\":\n      \tbreak\n    else:\n      \tcount += 1\nprint(700+count*100)\n  \t",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s054559518":{
    "code_string":"print(700+input.count('o')*100)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'count'"
  },
  "s530761767":{
    "code_string":"a = input()\nprint(700 + int(input()).count('o'))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s711386383":{
    "code_string":"S = input()\nprint(700 + int(S.count() * 100))",
    "error_obj":"TypeError: count() takes at least 1 argument (0 given)"
  },
  "s230944668":{
    "code_string":"S = input()\nprice = 700 + 100*s.count('o')\nprint(price)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s640847286":{
    "code_string":"s = input()\n\ncount = 700\n\nfor i in range(s):\n  if i == \"o\":\n    count += 100\n    \nprint(count)\n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s646208318":{
    "code_string":"s = str(input())\nfor i in range(3):\n\tif s[i] == \"o\":\n\t\tcnt += 1\nprint(700+100*cnt)",
    "error_obj":"NameError: name 'cnt' is not defined"
  },
  "s909503008":{
    "code_string":"s=list(input())\nprint(700+s.count(\u25cb))\n",
    "error_obj":"SyntaxError: invalid character '\u25cb' (U+25CB)"
  },
  "s402721288":{
    "code_string":"import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\tString S = scan.nextLine();\n      \n      \tint v = 700;\n      \tfor(int i = 0; i < S.length(); i++){\n        if(S.charAt(i) == 'o'){\n        \tv += 100;\n        }\n      }\n      \n      System.out.println(v);\n    }\n}\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s422748401":{
    "code_string":"A,B,C,X,Y = map(int,input().split())\nmin_ = min(X,Y)\nmax_ = max(X,Y)\n\nres = A*X + B*Y\n\nm = 2 * C * max(X, Y);\n\nsum = C * 2* min_\n\nif(C<=0.5 * A and C <= 0.5 * B):\n    sum += 2*C*(max_-min_)\n\nelif(max_==X):\n    sum += (max_-min_)*A\nelse:\n    sum += (max_-min_)*B\n    \nprint(min(m,min(res,sum)))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'oxo'"
  },
  "s401276183":{
    "code_string":"n, x, *m = map(int, open(0).read().split())\nans = -1\nfor i in sorted(m):\n    if x>=i:\n        x -= i                                                                                                                                                                                ans+=1\nprint(ans+x\/\/min(m))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s294147941":{
    "code_string":"n,x = map(int,input())\nm = list(int(input()) for i in range(n))\n\nprint((x - sum(m)) \/\/ min(m) + n)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s548607785":{
    "code_string":"n,x = map(int,input().split())\nans = n\nmi = 10**4\nfor i in range(n):\n  m = int(input())\n  x -= m\n  mi = min(m,mi)\nasn += (x\/\/mi)*mi\nprint(ans)\n  \n",
    "error_obj":"NameError: name 'asn' is not defined"
  },
  "s536787124":{
    "code_string":"n,x=map(int,input().split())\na=[int(input()) for _ range(n)]\nprint(n+((x-sum(a))\/\/min(a)))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s052443103":{
    "code_string":"n, x = list(map(int, input().split()))\nm = []\nfor _ in range(n):\n  m.append(int(input()))\nsort(m)\n\ndef main():\n  for i in range(n):\n    if sum(m[0:i+1]) > x:\n      print(i)\n      return\n  print(n)\n\nmain()",
    "error_obj":"NameError: name 'sort' is not defined"
  },
  "s490432500":{
    "code_string":"A,B,C,X,Y=map(int,input().split)\na=A*X+B*Y\nb=max(X,Y)*C*2\np=B if X<Y else A\nc=min(X,Y)*2*C+abs(X-Y)*p\nprint(min(a,b,c))",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s974325074":{
    "code_string":"a, b, c, x, y = map(int, input().split())\nprint(min(a*x+b*y, 2*c*x + b*max(0,y-x), 2*c*y + a*max(0, x-y))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s817002125":{
    "code_string":"A,B,C,X,Y = map(int, input().split())\nans = X*A + Y*B\nfor i in range(max(X+Y)+1):\n    C = 2*C*i + max(0,X-i)*A + max(0,Y-i)*B\n    ans = min(ans, C)\nprint(ans)  ",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s002906104":{
    "code_string":"a,b,c,x,y = map(int, input().split())\nans = 10**12\nfor i in range(0, max(x,y)*2+1, 2):\n    xr = max(x-i\/\/2, 0)\n    yr = max(0, y-i\/\/2)\n\n    if ans > (i*c)+(xr*a)+(yr*b):\n        ans = (i*c)+(xr*a)+(yr*B)\n\nprint(ans)",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s029052168":{
    "code_string":"a, b, c, x, y = map(int,input().split())\n\nmast = max(x,y)\nans = max(a * x + b * y,c *2 *i)\n\nfor i in range(mast+1):\n    price = a * max(x-i,0) + b * max(y-i,0) + c *2 *i\n    ans =min(ans,price) \n    \nprint(ans)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s840382491":{
    "code_string":"a,b,c,x,y=map(int,input().split())\n\nm=max(x,y)\nans=10**9+7\nfor e in range(m+1):\n  ans=min(ans,2*e*c+a*max(0,x-e)+b*(0,y-e))\n  \nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'tuple'"
  },
  "s526116238":{
    "code_string":"a,b,c,x,y = map(int, input().split())\nkei = 0\nif c > a\/2 + b\/2:\n    kei = a * x + b*y\n\nelif c*2 =< a+ b and a >= c*2 and b >= c*2:\n    kei += c * (min(x,y)*2)\n    if x > y:\n        kei += c * ((x - y)*2)\n    else:\n        kei += c * ((y - x)*2)\n\nelif c =< a\/2 + b\/2:\n    kei += c * (min(x,y)*2)\n    if x > y:\n        kei += a * (x -y)\n    else:\n        kei += b *(y-x)\n\n\nprint(kei)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s300363514":{
    "code_string":"A,B,C,X,Y=map(int,input().split())\n\nif A<=2*C amd B<=2*C:\n    print(A*X+B*Y)\n    \nelse:\n    if X>=Y:\n        print(min(A*(X-Y)+2*C*Y,2*C*X))\n    else:\n        print(min(B*(Y-X)+2*C*X,2*C*Y))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s817549295":{
    "code_string":"import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\ndef gcd(*numbers): reduce(math.gcd, numbers)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncount = 0\nans = 0\n\na,b,c,x,y = I()\np = []\nfor i in range(10**5+1):\n    cash = 2*c*i+a*max(0,x-i)+b*max(0,y-i)\n    c.append(cash)\n\nprint(min(p))\n",
    "error_obj":"AttributeError: 'int' object has no attribute 'append'"
  },
  "s635056928":{
    "code_string":"#!\/usr\/bin\/env python3\n\n\nn, c = list(map(int, input().split()))\nxv = [[0, 0]]+[list(map(int, input().split())) for i in range(n)] + [[c, 0]]\nxv_rev = reversed(xv)\n\nprint(xv)\nans = 0\ncal = 0\ndis = 0\n\nfor i in range(1, len(xv)):\n    cal += xv[i][1]\n    cal -= (xv[i][0]-xv[i-1][0])\n    ans = max(cal, ans)\n\nfor i in range(1, xv_rev):\n    cal += xv[i][1]\n    cal -= (xv[i][0]-xv[i-1][0])\n    ans = max(cal, ans)\n\nprint(ans)\n",
    "error_obj":"TypeError: 'list_reverseiterator' object cannot be interpreted as an integer"
  },
  "s327896475":{
    "code_string":"A,B,C,X,Y = map(int,input().split())\nans=0\n\n\nif A+B > c*2:\n    Z = min(X,Y)\n    ans += 2*C*Z\n    X -= Z\n    Y -= Z\na = min(A,2*C)\nb = min(B,2*C)\n\nans += a*X\nans += b*Y\n\nprint(ans)\n",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s041811292":{
    "code_string":"a,b,x=map(int,input())\nif x>=a+b:print(\"YES\")\nelse:print(\"NO\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s103742123":{
    "code_string":"a, b, x = map(int, input().split())\nprint(\"YES\" if a <= x and a + b >= x or \"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s215829606":{
    "code_string":"A, B, C = map(int, input().split())\nprint(\"YES\" if (A<=C && B>=C) else \"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s829749320":{
    "code_string":"A=int(input())\nB=int(input())\nX=int(input())\nif A<=X and A+B>=X:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 5 4'"
  },
  "s046903432":{
    "code_string":"a,b,x=map(int,input().split())\nprint([\"NO\",\"YES\"]][a<=x<a+b])",
    "error_obj":"SyntaxError: closing parenthesis ']' does not match opening parenthesis '('"
  },
  "s434704992":{
    "code_string":"    a,b,x = map(int,input().split())\n    print(\"YES\" if (a+b)>=x else \"NO\")",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s798798214":{
    "code_string":"if 0 <= X - A <= B:\n    print('YES')\nelse:\n    print('NO')",
    "error_obj":"NameError: name 'X' is not defined"
  },
  "s815615114":{
    "code_string":"def actual(N, M, X, A):\n    # \u30de\u30b9X\u306e\u5de6\u53f3\u305d\u308c\u305e\u308c\u306b\u3042\u308b\u6599\u91d1\u6240\u306e\u6570\u3092\u8abf\u3079\u308c\u3070OK\n    toll_gates_left = [a_i for a_i in A if a_i < X]\n    toll_gates_right = [a_i for a_i in A if X < a_i]\n\n    return min(len(toll_gates_left), len(toll_gates_right))\n\nN, M, X = map(int, input().split())\nA = [int(input()) for _ in range(N + 1)]\n\nprint(actual(N, M, X, A))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 2 4'"
  },
  "s872190750":{
    "code_string":"a, b, c = map(int, input().split())\ns = list(map(int, input().split()))\nfor i in s:\n  if i < c:\n    l += 1\n  else:\n    r += 1\nprint(min(l, r))\n",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s675028373":{
    "code_string":"n, m, x = map(int, input().split())\na = map(int, input().split())\nprint(min(sum([1 for i in a if i>x]),sum([1 for i in a if i<x]))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s781724139":{
    "code_string":"n,m,x,*a=map(int,open(0).read().split());print(min(c:=sorted(a).index(x),m-c))",
    "error_obj":"ValueError: 3 is not in list"
  },
  "s107219955":{
    "code_string":"a,b,c=input().split()\nd=list(map(int,input().split()))\ne=0\nf=0\nfor i in range(b):\n  if d[i]>c:\n    e=e+1\n  if d[i]<c:\n    f=f+1\nif e>f:\n  print(f)\nelse:\n  print(e)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s691664427":{
    "code_string":"N,M,X=map(int,input().split())\na = [int(input()) for in range(M)]\ncount_low = 0\ncount_high = 0\nfor i in range(a):\n  if a[i-1]<X:\n    count_low +=1\nfor i in range(a):\n  if a[i-1]>X:\n    count_high +=1\nprint(min(count_low,count_high))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s452950854":{
    "code_string":"n, m, x = map(int, input().split())\ns = sum(i if int(i)<x for i in input().split())\nprint(min(s, m-s))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s129677687":{
    "code_string":"a,b,c=map(int,input().split())\nd=list(map(int, input().split())\nd.append(c)\nd.sort()\nprint(min(d.index(c), len(d)-d.index(c)-1))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s737490951":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=a.sort()\nx=b[n\/\/2-1]\ny=b[n\/\/2]\nfor i in a:\n    if a<=x:\n      print(y)\n    else:\n      print(x)\n",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s332898152":{
    "code_string":"fuckoff\n",
    "error_obj":"NameError: name 'fuckoff' is not defined"
  },
  "s101963302":{
    "code_string":"import math\nimport numpy as np\n\ndef combinations_count(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\ndef getNearestValue(list, num):\n    \"\"\"\n    \u6982\u8981: \u30ea\u30b9\u30c8\u304b\u3089\u3042\u308b\u5024\u306b\u6700\u3082\u8fd1\u3044\u5024\u3092\u8fd4\u5374\u3059\u308b\u95a2\u6570\n    @param list: \u30c7\u30fc\u30bf\u914d\u5217\n    @param num: \u5bfe\u8c61\u5024\n    @return \u5bfe\u8c61\u5024\u306b\u6700\u3082\u8fd1\u3044\u5024\n    \"\"\"\n\n    # \u30ea\u30b9\u30c8\u8981\u7d20\u3068\u5bfe\u8c61\u5024\u306e\u5dee\u5206\u3092\u8a08\u7b97\u3057\u6700\u5c0f\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return list[idx]\n\nn = int(input())\na = [int(i) for i in input().split()]\ncheck = 0\na.sort()\nb = a[-i]\nc = getNearestValue(a,b\/2)\nans = str(b) + ' ' + str(c)\nprint(ans)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s207896046":{
    "code_string":"\nfrom bisect import bisect_left,bisect\n\nn=int(input())\na=list(map(int,input().split()))\n\na.sort()\nai=max(a)\n\n\nif ai%2==0:\n    ai2=ai\/\/2-1\nelse:\n    ai2=ai\/\/2\n\njj=bisect(a,ai2)\n\nif jj+1<n:\n    if abs(a[jj]-ai2)>abs(a[jj+1]-ai2):\n        jj2=jj+1\nif jj-1>=0:\n    if abs(a[jj]-ai2)>abs(a[jj-1]-ai2):\n        jj2=jj-1\n    \nif jj2==n-1:\n    jj2=jj2-1\n    \naj=a[jj2]\n\nprint(ai,aj)\n\n",
    "error_obj":"NameError: name 'jj2' is not defined"
  },
  "s498934011":{
    "code_string":"s = input()\ns.sort()\nif \"\".join(s) = \"abc\":\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s973977091":{
    "code_string":"s = input()\nprint('Yes' if s[0]!=s[1]&&s[1]!=s[2]&&s[0]!=s[2] else 'No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s207331490":{
    "code_string":"a=input()\na=a.sort()\nif a==\"abc\":\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s838868517":{
    "code_string":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.buffer.readline\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    S = input()\n    S = sorted(S)\n    if S = ['a','b','c']:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s488206086":{
    "code_string":"s = sort(input())\nif s[0] == 'a' and s[1] == 'b' and s[2] == 'c':\n\tprint('Yes')\nelse:\n\tprint('No')",
    "error_obj":"NameError: name 'sort' is not defined"
  },
  "s808883820":{
    "code_string":"#ABC093\ns = [input().split()]\nprint(\"Yes\" if len(set(s))==3 else \"No\")",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s724252821":{
    "code_string":"S = input()\nif set(S) == {'a', 'b', 'c'}:   \n    print('Yes')                   \nelse:                             ",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s454981485":{
    "code_string":"s = input()\n\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('No')\nelse:\n    print('Yes')",
    "error_obj":"IndexError: string index out of range"
  },
  "s170080550":{
    "code_string":"S = input()\nif S == 'abc':\n    return 'Yes'\nelif S == 'acb':\n    return 'Yes'\nelif S == 'acb':\n    return 'Yes'\nelif S == 'bac':\n    return 'Yes'\nelif S == 'bca':\n    return 'Yes'\nelif S == 'cab':\n    return 'Yes'\nelif S == 'cba':\n    return 'Yes'\nelse:\n    return 'NO'",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s190525818":{
    "code_string":"A,B,K = map(int, input().split())\n\nif B-A+1<= 2*K:\n    print(*range(A,B+1), sep=\"\\n\")\nelse:\n    a = list(range(A,A+K))\n    b = list(range(B-K+1,B+1))\n    C = set(a,b)\n    print(*C, sep=\"\\n\")",
    "error_obj":"TypeError: set expected at most 1 argument, got 2"
  },
  "s654402480":{
    "code_string":"def actual(A, B, K):\n    min_left = A\n    max_left = min(A + (K - 1), B)\n\n    min_right = max(B - (K - 1), max_left + 1)\n    max_right = B\n\n    left = set(range(min_left, max_left + 1))\n    right = set(range(min_right, max_right + 1))\n\n    unique_nums = left | right\n\n    return '\\n'.join(map(str, sorted(unique_nums)))\n\nA, B, K = map(int, input().split())\nprint(actual_TLE(A, B, K))",
    "error_obj":"NameError: name 'actual_TLE' is not defined"
  },
  "s651713074":{
    "code_string":"a,b,k=map(int,input().split())\nans=[]\nfor i in rangea(a,k+a):\n  if a<=i<=b:\n    ans.append(i)\n    \nfor i in rangea(b-k+1,b+1):\n  if a<=i<=b:\n    ans.append(i)\nans=list(set(ans))\nans.sort()\nfor i in ans:\n  print(i)",
    "error_obj":"NameError: name 'rangea' is not defined"
  },
  "s641322255":{
    "code_string":"a,b,k = map(int,input().split())\nn = b - a + 1\nif n <= k*2:\n  for i in range(a,b+1):\n    print(i)\nelse:\n  for i in range(a,k+1):\n    print(i)\n  fot j in range(b-k+1,b+1)\n  print(j)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s541928204":{
    "code_string":"a,b,k=map(int,input().split())\nif b-a+1>k*2:\n  print([a:a+k]+[b-k:b],end=\"\\n\")\nelse:\n  print([a:b],end=\"\\n\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s413079184":{
    "code_string":"a,b,n=map(int,input().split())\nenda = min(a+n,b)\nstab = max(a,b-n)\nC = sorted(set(list(range(a,enda)))|set(list(range(stab+1:b+1))))\nfor i in C:\n  print(i)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s249166466":{
    "code_string":"a,b,k=map(int,input().split());r=range(a,b+1);print(*sorted({*(r[:k]+r[-k:])}))",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'range' and 'range'"
  },
  "s706031959":{
    "code_string":"2 9 100",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s405326438":{
    "code_string":"a,b,k=map(int, input().split())\nif b-a+1>2k:\n  for i in range(a,a+k):\n    print(i)\n  for i in range(b-k+1,b+1):\n    print(i)\nelse:\n  for i in range(a,b+1):\n    print(i)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s830329089":{
    "code_string":"A,B,C=map(int,input().split())\neven += A%2+B%2+C%2\nanswer = 0\nif even == 1:\n  answer = 1\n  if A%2:\n    A += 1\n  if B%2:\n    B += 1\n  if C%2:\n    C += 1\nelif even == 2:\n  answer = 1\n  if not A%2:\n    A += 1\n  if not B%2:\n    B += 1\n  if not C%2:\n    C += 1\nD = sorted([A,B,C])\nanswer += (D[2]-D[0])\/\/2+(D[2]-D[1])\/\/2",
    "error_obj":"NameError: name 'even' is not defined"
  },
  "s208371745":{
    "code_string":"List = list(map(int, input().split()))\nList.sort()\nres = List[2]-List[1]\nLitt[1] = List[2]\nList[0] += res\nmid = List[2] - List[0]\nif mid % 2 == 1:\n  res += mid \/\/2 +1\nelse:\n  res += mid \/\/2\nprint(res)",
    "error_obj":"NameError: name 'Litt' is not defined"
  },
  "s243580522":{
    "code_string":"n = int(input())\nx = list(map(int,input().split()))\ny = sorted(x)\nm1,m2 = y[n\/\/2-1],y[n\/\/2]\nfor i in x:\n    if i<=m1: print(m2)\n    else: print(m1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 5 4'"
  },
  "s154497344":{
    "code_string":"q=int(input())\nab=[list(map(int,input().split())) for _ in range(q)]\nfor a,b in ab:\n    if a>b:a,b=b,a\n    if a==b:\n        print(2*a-2)\n    elif a+1==b:\n        print(2*a-2)\n    else:\n        c=int((a*b)**0.5)\n        if c*(c+1)>=a*b:\n            print(2*c-2)\n        elif c**2<a*b:\n            print(2*c-1)\n\n\nq=int(input())\nab=[list(map(int,input().split())) for _ in range(q)]\nfrom math import floor\nfor a,b in ab:\n    # a*b\u3092\u304e\u308a\u304e\u308a\u307e\u3067\u653b\u3081\u305f\u3044\n    # (1,1)\u3068\u304b\u306f\u3082\u3063\u305f\u3044\u306a\u3044\u3002(1,a*b-1)\u306f\u826f\u3044\u3002\u7247\u65b9\u306f\u221aa*b\u672a\u6e80\u3067\u3001\u7247\u65b9\u306f\u221aa*b\u3088\u308a\u5927\u304d\u3044\u7d44\u307f\u5408\u308f\u305b\u3002\n    # a==b\u306a\u3089a\u672a\u6e80\u306e\u6574\u6570y\u306b\u3064\u3044\u3066\u9069\u5207\u306a\u6570\u5b57x\u3092\u9078\u3079\u3070y*x<a*b\u3068\u3067\u304d\u308b\u3002x\u306f\u4ed6\u306ex\u3068\u88ab\u3089\u306a\u3044\u3088\u3046\u306b\u9078\u629e\u3067\u304d\u308b\u3002\n    if a==b:\n        print(2*a-2)\n    else:\n        # t,t+1 \u7d44\u307f\u5408\u308f\u305b\u306e\u7a4d\u304ca*b\u3067\u6291\u3048\u3089\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3002(t+1)*(t+1)\u306f\u5fc5\u305aa*b\u3092\u8d85\u3048\u308b\u3002\n        # t\u672a\u6e80\u306e\u81ea\u7136\u6570\u306b\u3064\u3044\u3066\u306f\u9069\u5207\u306a\u6574\u6570\u3092\u9078\u3079\u3070a*b\u4ee5\u4e0b\u306b\u3067\u304d\u308b\u3002\n        t=floor((a*b)**0.5)\n        # (1,2*t-1),(2,2*t-2),(3,(a*b-1)\/\/3),...,(t-1,(a*b-1)\/\/(t-1))\n        if t*t>=a*b: \n            # t*t\u306f\u3060\u3081\u3002t*t=a*b\u3001a!=b\u306e\u3068\u304d\u3002t\u672a\u6e80\u306e\u6570\u5b57\u3068\u9069\u5207\u306a\u6570\u5b57\u3092\u9078\u3079\u3070\u3088\u3044\u304c\u3001t\u672a\u6e80\u306e\u6570\u5b57\u306e\u5185\u4e00\u3064\u306fa\u306a\u306e\u3067\u3001\u305d\u306e\u5206\u3092\u5f15\u304f\u3002\n            print(2*t-3)\n        elif t*(t+1)>=a*b: \n            # t*t\u306fOK\u3002t*(t+1)\u306f\u3060\u3081\u3002t\u672a\u6e80\u306e\u6570\u5b57\u3068\u9069\u5207\u306a\u6570\u5b57\u3092\u9078\u3079\u3070\u3088\u3044\u304c\u3001t\u672a\u6e80\u306e\u6570\u5b57\u306e\u5185\u4e00\u3064\u306fa\u306a\u306e\u3067\u3001\u305d\u306e\u5206\u3092\u5f15\u304f\u3002\n            # \u3055\u3089\u306b\u4e00\u56de\u76eet\u306e\u4eba\u306f2\u56de\u76ee\u3082t\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3002\u3053\u306e\u5206\u3092\u8db3\u3059\u3002t!=a,t!=b\u306a\u306e\u3067(t,t)\u306f\u9078\u629e\u3067\u304d\u308b\u3002\n            print(2*t-2)\n        else:\n            # t*t\u3082t*(t+1)\u3082OK\u3002(t,t+1),(t+1,t)\u3092\u307e\u305a\u9078\u3076\u3002\u3042\u3068\u306ft\u672a\u6e80\u306e\u6570\u5b57\u3068\u9069\u5207\u306a\u6570\u5b57\u3092\u9078\u3079\u3070\u3088\u3044\u304c\u3001t\u672a\u6e80\u306e\u6570\u5b57\u306e\u5185\u4e00\u3064\u306fa\u306a\u306e\u3067\u3001\u305d\u306e\u5206\u3092\u5f15\u304f\u3002\n            print(2*t-1)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s305783004":{
    "code_string":"lst = list(map(int, input().split())).sort()\n\nmval = lst[-1]\nsval = sum(lst)\ncn = mval + (sval-mval) % 2\nn = (cn * 3 - sval) \/\/ 2\nprint(n)\n\n",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s819036081":{
    "code_string":"s = list(input())\nm = list('zyxwvutsrqponmlkjihgfedcba')\nif len(s) < 26:\n    for i in m[::-1]:\n        if not j in s:\n            s.append(j)\n            break\n    print(''.join(s))\nelse:\n    if s == m:\n        print(-1)\n    else:\n        x = s[-1]\n        for i in range(25)[::-1]:\n            if x > s[i]:\n                s = s[:i]\n                s.append(x)\n                break\n            if i == 0:\n                z = m.index(s[0])\n                s = m[z-1]\n                break\n        print(''.join(s))",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s619006547":{
    "code_string":"s=str(input())\nt=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\nif len(s)!=26:\n  for i in range(26):\n    if t[i] not in s:\n      s.append(t[i])\n      break\n  print(\"\".join(s))\nelse:\n  if \"\".join(s)==\"zyxwvutsrqponmlkjihgfedcba\":\n    print(-1)\n  else:\n    a=[]\n    for i in range(26):\n      a.append(s[25-i])\n      for j in a:\n        if s<s[:25-i]+j:\n          print(s[:25-i]+j)\n          exit()",
    "error_obj":"AttributeError: 'str' object has no attribute 'append'"
  },
  "s835419502":{
    "code_string":"s = input()\n\nabc = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\nif s == ''.join(abc)[::-1]:\n    print(-1)\n    exit()\nif len(s) != 26:\n    for a in abc:\n        if a not in abc:\n            print(s+a)\n            exit()\ni = 25\nwhile s[i-1] > s[i]:\n    i -= 1\n    #print(s[i-1], s[i])\n#print(s[i-1], s[i])\ntt = s[i-1]\nss = list(s[i-1:])\nss.sort()\nprint(s[:i-1]+ss[ss.index(tt)+1])\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s641210003":{
    "code_string":"A, B, C, D = int(input())\n\ntrain = [A,B]\nbus = [C,D]\n\nprint(min(train) + min(bus))",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s089894416":{
    "code_string":"A, B, C, D = map(int,input().split())\n\nif A <= B:\n    train = A\nelse:\n    train = B\nif C <= D:\n    bus = C\nelse:\n    bus = D\n    \nanswer = train + bus\nprint(answer)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s526350435":{
    "code_string":"a = [int(input()) for i in range(4)]\nif a <= b:\n  if c <= d:\n    print(a + c)\n  else:\n    print(a + d)\nelse:\n  if c <= d:\n    print(b + c)\n  else:\n    print(b + d)",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s647991051":{
    "code_string":"# # Make IO faster\n# import sys\n# input = sys.stdin.readline\n\n# # get single (or) multiple str\n# X = input()\n\n# # get single int\n# N = int(input())\n# # get multiple int (e.g., 2)\n# X, Y = map(int, input().split())\n# # get multiple int (e.g., 2) for N lines\n# XY = [list(map(int, input().split())) for _ in range(N)]\n\n# from IPython import embed; embed(); exit();\n\n# \u5168\u90e8\u5165\u308a\nimport sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nimport numpy as np\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nA, B, C, D = MAP()\nprint(min([A, B]) + min([C, D]))\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s106482092":{
    "code_string":"a=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\nprint(mix(a,b)+min(c,d))",
    "error_obj":"NameError: name 'mix' is not defined"
  },
  "s755623276":{
    "code_string":"a,b,c,d=input().split()\na=int(a)\nb=int(b)\nc=int(c)\nd=int(d)\nif a>=b:\n  if c>=d:\n    print(b+d)\n  else:\n    print(b+c)\nelse:\n  if c>=d:\n    print(a+d)\n  else:\n    print(a+c)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s750159602":{
    "code_string":"A, B, C, D = map(int, input().split())\n\nprint(min(A, B) + min(C, D))",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s465700681":{
    "code_string":"a,b,c,d=[int(input()) for_ in range(4)]\nprint(min(a,b)+min(c,d))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s181659195":{
    "code_string":"n=int(input())\nd,x=map(int,input().split())\nres = x\nfor i in range(n):\n    a=int(input())\n    if a == 1:\n        res +=d\n    else :\n        res += (d-1)\/\/a + 1\nprint(res)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s687483016":{
    "code_string":"# 092\n\n# 1.\u5024\u3092\u6b63\u3057\u304f\u53d6\u5f97\na, b, c, d = (int(x) for x in input().split())\n\n# 2.\u6b63\u3057\u304f\u51e6\u7406\ngokei1 = a + b\ngokei2 = a + c\ngokei3 = a + d\ngokei4 = b + c\ngokei5 = b + d\ngokei6 = c + d\n\nresalt = [gokei1,gokei2,gokei3,gokei4,gokei5,gokei6]\nprint(min(resalt))",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s074901825":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\nprint(sum(min(a, b), min(c, d)))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s813280286":{
    "code_string":"B = int(input())\nC = int(input())\nD = int(input())\n\nif A <= B:\n    densya = A\n\nelse:\n    densya = B\n\nif C <= D:\n    bus = C\n\nelse:\n    bus = D\n\nuntin = densya + bus\n\nprint(untin)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s484654207":{
    "code_string":"A,B,C,D = map(int,input().split())\nprint(min(A,B)+ min(C,D))",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s024344743":{
    "code_string":"a,b,c,d = map(int,input().split())\n\nprint(min(a,b)+min(c,d))",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s920683976":{
    "code_string":"n=int(input())\nd,x=map(int,input().split())\na=list(map(int,input().split('\\n')))\nb=[]\ncnt=n\nfor i in range(n):\n    b[i] = 1\n    while b[i]<=d:\n        b[i] += a[i]\n        cnt += 1\nprint(cnt+x)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s584864421":{
    "code_string":"a=int(input())\nb,c=input().split()\nb=int(b)\nc=int(c)\nd=[int(input()) i in range(a)\n   e=e+int((b-1)\/d[i])+1\nprint(e)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s678707524":{
    "code_string":"N = int(input())\nD, X = [int(x) for x in input().split()]\nA = [int(input()) for _ in range(N)]\nans = X\nfor i in range(N):\n  a = 1\n  l = 1\n  while a <= D:\n    ans += 1\n    a = l*A[i] + 1\n    l += 1\nprint(ans)N = int(input())\nD, X = [int(x) for x in input().split()]\nA = [int(input()) for _ in range(N)]\nans = X\nfor i in range(N):\n  a = 1\n  l = 1\n  while a <= D:\n    ans += 1\n    a = l*A[i] + 1\n    l += 1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s394974139":{
    "code_string":"def resolve():\n    '''\n    code here\n    '''\n    N = int(input())\n    D, X = [int(item) for item in input().split()]\n    As = [int(input()) for _ in range(N)]\n\n    cnt = 0\n    for i in range(N):\n        day = 0\n        j = 0\n        while day <= D:\n            day = j * As[i] + 1 \n            cnt +=1\n    print(cnt)\n\n\nif __name__ == \"__main__\":\n    resolve()\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s987333254":{
    "code_string":"5\n30 44\n26\n18\n81\n18\n6",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s487460252":{
    "code_string":"N=int(input())\nD,X=map(int, input().spilt())\nA=[int(input()) for i in range(N)]\n\nans=0\n\nfor i in range(len(A)):\n    ans += (D-1)\/\/A[i]+1\nprint(ans+X) ",
    "error_obj":"AttributeError: 'str' object has no attribute 'spilt'"
  },
  "s979456571":{
    "code_string":"jfrom math import gcd\n\nfrom math import factorial as f\n\nfrom math import ceil, floor, sqrt\nimport math\n\nimport bisect\nimport re\nimport heapq\n\nfrom copy import deepcopy\nimport itertools\nfrom itertools import permutations\n\nfrom sys import exit\n\nii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(map(int, input().split()))\n\nyes = \"Yes\"\nno = \"No\"\n\n\ndef main():\n    n = ii()\n    d, x = mi()\n    a = []\n    for i in range(n):\n        tmp = ii()\n        a.append(tmp)\n    ans = 0\n    for i in a:\n        tmp = 1\n        while tmp <= d:\n            ans += 1\n            tmp += i\n    ans += x\n    print(ans)\n\n\nmain()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s847427234":{
    "code_string":"def actual(N, D, X, A):\n    count = 0\n\n    for a_i in A:\n        for i in range(100+1):\n            eating_day = 1 + (a_i * i)\n\n            if eating_day <= D:\n                count += 1\n\n    return X + count\n\nN = int(input())\nD, X = map(int, input().split())\nA = [int(input) for _ in range(N)]\n\nprint(actual(N, D, X, A))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s291607562":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\na = [0] + a + [0]\n\nd_1 = []\nfor i in range(1, n+2):\n  d_1.append(abs(a[i]-a[i-1]))\nd_2 = [0]\nfor i in range(1, n+1):\n  d_2.append(abs(a[i+1]-a[i-1]))\n\ns_d = sum(d_1)\nfor i in range(1, n+1):\n  print(s_d - d_1[i] - d_1[i+1] + d_2[i])\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s662659208":{
    "code_string":" = int(input())\nA = list(map(int,input().split()))\nj = abs(A[0]) + abs(A[N-1])\nfor i in range(N-1):\n    j += abs(A[i]-A[i+1])\nfor i in range(N):\n    if i == 0:\n        ans = j-abs(A[0])-abs(A[0]-A[1])+abs(A[1])\n    elif i == N-1:\n        ans = j-abs(A[N-2]-A[N-1])-abs(A[N-1])+abs(A[N-2])\n    else:\n        ans = j - abs(A[i]-A[i-1]) - abs(A[i]-A[i+1]) + abs(A[i-1]-A[i+1])\n    print(ans)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s686354144":{
    "code_string":"from itertools import accumulate\nN = int(input())\nA = tuple([0,] + list(map(int, input().split())) + [0,])\nD = []\nsum = 0\nfor i, a in enumarate(A[1:-1]):\n  i += 1\n  pre = A[i - 1]\n  tem = A[i]\n  nex = A[i + 1]\n  x = abs(pre - tem) + abs(tem - nex)\n  sum += x\n  D.append(abs(pre - nex) - x)\nfor d in D:\n  print(sum + d)",
    "error_obj":"NameError: name 'enumarate' is not defined"
  },
  "s294791384":{
    "code_string":"n = int(input())\na = list(map(int,input().split))\nans = [0] * n\nfor i in range(n):\n    ac = a\n    del ac[i]\n    for j in range(0, n):\n        if j == 0:\n            ans[i] += abs(ac[0])\n        else:\n            ans[i] += abs(ac[j]-ac[j - 1])\n\nfor k in ans:\n    print(str(k))",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s986749238":{
    "code_string":"n=input()\nl=[0]+list(map(int,input().split()))+[0]\nans=0\npre=0\nfor i in l:ans+=abs(pre-i);pre=i\nfor i in range(1,int(n)+1):\n  dif=-abs(l[i]-l[i-1])-abs(l[i]-l[i+1])+abs(l[i-1]-l[i+1])\n  if l[i]in(l[i-1],l[i+1]):print(ans)\n  elif l[i]<l[i-1]:\n    print(ans if l[i+1]<l[i] else ans+dif)\n  else:print(ansans if l[i+1]>l[i] else ans+dif)",
    "error_obj":"NameError: name 'ansans' is not defined"
  },
  "s931216621":{
    "code_string":"line = ''.join(['.#']*50)\ndot=['.','#']\ncl=[''.join(['.']*100),''.join(['#']*100)]\nba=[b-1,a-1]\nans=[]\nfor c in [0,1]:\n    ans.append(cl[c])\n    for i in range(ba[c]\/\/50):\n        ans.append(line)\n        ans.append(cl[c])\n    ans.append(''.join(['.#']*(ba[c]%50))+cl[c][(ba[c]%50)*2:])\n    ans.append(cl[c])\nprint(len(ans))\nfor l in ans:print(''.join(l))",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s927863365":{
    "code_string":"a, b, c = int(input())\nif a +  b >= c:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '50 100 120'"
  },
  "s341551953":{
    "code_string":"A,B,C = map(int,input().split())\nprint(\"Yes\" if sum(A,B) >= C else \"No\")",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s834371771":{
    "code_string":"a,b,c = map(int, input().split())\nprint(\"Yes\") if c =< a+b else print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s926360110":{
    "code_string":"a,s,d=map(int, input().split())\nprint('Yes' if a+b>=c else 'No')",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s644611120":{
    "code_string":"A, B, C = map(int, input())\nprint('Yes' if A+B*2 >= C else 'No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s799058962":{
    "code_string":"A, B, C = map(int, input())\n\nif A + B >= C:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s589059546":{
    "code_string":"a,b,c=map(int,input.split())\nif a+b=>c:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s124349029":{
    "code_string":"from collections import defaultdict\nd = defaultdict(int)\nfor _ in range(int(input())):\n    d[input()] += 1\nfor _ in range(int(input())):\n    d[input()] -= 1\nprint(max(0, d.values()))\n",
    "error_obj":"TypeError: '>' not supported between instances of 'dict_values' and 'int'"
  },
  "s591057339":{
    "code_string":"x = int(input())\na = [input() for i in range(x)]\ny = int(input())\nb = [input() for h in range(y)]\n\ncount_max = 0\nfor j in a:\n  if (a.count(j) - b.count(j)) > count_max:\n    a.count(j) - b.count(j) = count_max\nprint(count_max)",
    "error_obj":"SyntaxError: cannot assign to operator"
  },
  "s384113534":{
    "code_string":"N  = int(input())\nS = [input() for i in range(N)]\nM = int(input())\nT = [input() for i in range(M)]\n\nT1 = [x+'*' for x in T]\narr = S + T1\nlist1 = []\nfor i in range(len(arr)):\n  if arr[i] not\n\nlist2 = [] in list2:\n    s = arr.count(arr[i])\n    t = arr.count(arr[i]+'*')\n    a = s-t\n    list1.append((arr[i], a))\n    list2.append(arr[i])\n\nfor i in list1:\n  \n  if i[0].endswith('*'):\n    list1.remove(i)\n  print(list1)\n\nans1 = max(list1, key= lambda x:x[1])\n\nif int(ans1[1]) <= 0:\n  print(0)\nelse:\n  print(ans1[1])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s057884006":{
    "code_string":"n=int(input())\ns=[input() for i in range(n)]\nm=int(input())\nt=[input() for i in range(n)]\n\nprint(max(0,max(s.count(i)-t.count(i) for i in set(s))))\n    \n\n\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s890288822":{
    "code_string":"def resolve():\n    A, B, C, K = list(map(int, input().split()))\n    if A + B >= K:\n        print(A)\n    else:\n        print(A-(K - A - B))\n\n    return\n\n\nresolve()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s457468130":{
    "code_string":"n = int(input())\ns = list()\n\nfor a in range(n):\n    s.append(input())\n\nt = list()\nm = int(input())\n\nfor a in range(m):\n    t.append(input())\n\nkind = list(set(s))\nkind_length = len(kind)\n\ncounter = dict()\nfor a in range(kind_length):\n    counter[kind[a]] = 0\n\nfor a in range(n):\n    counter[s[a]] += 1\n\nfor a in range(m):\n    if t[a] not in counter:\n        continue\n    counter[t[a]] -= 1\n\nprint(max(counter.values(), 0))\n",
    "error_obj":"TypeError: '>' not supported between instances of 'int' and 'dict_values'"
  },
  "s533259663":{
    "code_string":"n = int(input())\ns = [input() for i in range(n)]\nm = int(input())\nt = [input() for i in range(m)]\n\ns = set(s)\ntot = 0\nfor i in s:\n  tot = max(s.count(i) - t.count(i),tot)\n  \nprint(tot)\n",
    "error_obj":"AttributeError: 'set' object has no attribute 'count'"
  },
  "s260327900":{
    "code_string":"n = int(input())\ns=[input() for _ in range(n)]\nm = int(input())\nt=[input() for _ in range(m)]\n \nres=0\nfor i in set(s):\n    res=max(s.count(i)-t.count(i),ans)\nprint(res)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s389014558":{
    "code_string":"#!\/usr\/bin\/env python3\n\ndef main():\n    blue = [int(input()) for i in range(int(input()))]\n    red = [int(input()) for i in range(int(input()))]\n    l = list(set(blue))\n    print(max(0, max(blue.count(l[i]) - red.count(l[i]) for i in range(len(l)))))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'apple'"
  },
  "s006869369":{
    "code_string":"import collections\nn = int(input())\ns = [str(input()) for _ in range(n)]\nm = int(input())\nt = [str(input()) for _ in range(m)]\ns = collections.Counter(s)\nt = collections.Counter(t)\n\nfor k, j in t.items():\n    if k in s:\n        s[k] -= j\n\nvalues, counts = zip(*s.most_common())\nprint(max(0,counts[0))\n",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s127418818":{
    "code_string":"N = int(input())\nRed = sorted([tuple(map(int, input().split())) for _ in range(N)])\nBlue = sorted([tuple(map(int, input().split())) for _ in range(N)])\n\nans = 0\nswitch = lambda X:(X[1],X[0])\nfor b in Blue:\n    C = [switch(r) for r in Red if r < b] #\u5019\u88dc\n    if len(C) == 0:\n        continue\n    ans += 1\n    C.sorted(reverse=True)\n    Red.remove(switch(C[0]))\nprint(ans)",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s788992743":{
    "code_string":"\nn = int(input().strip())\nred = [list(map(int, input().split())) for i in range(n)]\nblue = [list(map(int, input().split())) for j in range(n)]\n\nfor i in range(n):\n    '''\n    kagi_r = [min(red[i][0], red[i][1]), max(red[i][0], red[i][1])]\n    kagi_b = [min(blue[i][0], blue[i][1]), max(blue[i][0], blue[i][1])]\n    red[i] = red[i] + kagi_r\n    blue[i] = blue[i] + kagi_b\n    '''\nred.sort(key=lambda x: (x[0], x[1]), reverse=True)\nblue.sort(key=lambda x: (x[0], x[1]))\nflg_r = [0]*n\ncnt = 0\n\nfor i in range(n):\n    for j in range(n):\n        if flg_r[j]:\n            continue\n        if red[j][0] < blue[i][0] and red[j][1] < blue[i][1]:\n            flg_a[j] = 1\n            cnt += 1\n            break\n\nprint(cnt)",
    "error_obj":"NameError: name 'flg_a' is not defined"
  },
  "s335148829":{
    "code_string":"N = int(input())\nab = [[int(i) for i in input().split()] for _ in range(N)]\ncd = [[int(i) for i in input().split()] for _ in range(N)]\n\nab.sort(key = lambda x: x[1], reverse=True)\ncd.sort()\n\na = 0\nfor c, d in cd:\n    for a, b in ab:\n        if a < c and b < d:\n            a += 1\n            ab.remove([a, b])\n            break\n\nprint(a)\n",
    "error_obj":"ValueError: list.remove(x): x not in list"
  },
  "s541062236":{
    "code_string":"N=int(input())\nR=[list(map(int,input().split())) for n in range(N)]\nB=[list(map(int,input().split())) for n in range(N)]\n\nsorted(R,key=itemgetter(1),reverse=True)\nB.sort()\nans=0\n\nfor c,d in B :\n    for a,b in R :\n        if a<c and b<d :\n            ans+=1\n            R.remove([a,b])\n            break\n\nprint(ans)",
    "error_obj":"NameError: name 'itemgetter' is not defined"
  },
  "s713541404":{
    "code_string":"N = int(input())\nreds = sorted([list(map(int,input().split())) for i in range(n)])\nblues = sorted([list(map(int,input().split())) for i in range(n)])\n\nreds = reds[::-1]\nres = 0\n\nfor c,d in blues:\n  for a,b in reds:\n    if a<c and b<d:\n      reds.remove([a,b])\n      res+=1\n      break\n      \nprint(res)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s597691429":{
    "code_string":"n = int(input())\nred  = [tuple(map(int, input().split())) for _ in range(n)]\nblue = [tuple(map(int, input().split())) for _ in range(n)]\nred.sort(key=lambda x:-x[1])\nblue.sort()\ncount = 0\nfor xb, yb in blue:\n    for xr, yr in red:\n        if xb > xr and yb > yr:\n            red[max_i] = (201, 201)\n            count += 1\n            break\nprint(count)",
    "error_obj":"NameError: name 'max_i' is not defined"
  },
  "s308706905":{
    "code_string":"s=input()\nk=int(input())\nl=list(s)\nfor i in range(len(s)):\n if 26-(ord(s[i])-ord(\"a\"))<=k:k-=26-(ord(s[i])-ord(\"a\"));l[i]=\"a\"\nprint(\"\".join(l[:-1]+list(chr((ord(l[-1])-97+k)%26+97))))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 0'"
  },
  "s923109725":{
    "code_string":"a = []\nfor i in range(3):\n  a[i] = input()\nprint(a[0][0]+a[1][1]+a[2][2])",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s012464300":{
    "code_string":"a=list(input().split())\nb=list(input().split())\nc=list(input().split())\nprint(a[0]+b[1]+c[2])",
    "error_obj":"IndexError: list index out of range"
  },
  "s564632804":{
    "code_string":"a,b,c=input().split()\nd,e,f=input().split()\ng,h,i=input().split()\nprint(a+e+i)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s619979471":{
    "code_string":"U=input()\nM=input()\nB=input()\n\nprint(U[0].M[1].B[2])",
    "error_obj":"AttributeError: 'str' object has no attribute 'M'"
  },
  "s163051586":{
    "code_string":"for i in range(3)\n\tA[i] = input()\nprint(A[0][0] + A[1][1] + A[2][2])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s604244282":{
    "code_string":"x = list(map(input().split()) for i in range(3))\nprint(x[0][0]+x[1][1]+x[2][2])",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s408441619":{
    "code_string":"x=[input() for _ in range(3)]\nfor i in range(3):\n    print(x[i][i],seq=\"\")",
    "error_obj":"TypeError: 'seq' is an invalid keyword argument for print()"
  },
  "s401677444":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nprint(a[0] + b[1] + c[2])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'ant'"
  },
  "s560996451":{
    "code_string":"c1 = input().split()\nc2 = input().split()\nc3 = input().split()\nprint(c1[0]+c2[1]+c3[2])",
    "error_obj":"IndexError: list index out of range"
  },
  "s028319380":{
    "code_string":"31415 92653",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s466077646":{
    "code_string":"A,B = map(int,input().split())\ncount = 0\n\nfor i in range(A,B+1):\n  if i[0] == i[4] and i[1] == i[3]:\n    count += 1\n    \nprint(count)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s745255738":{
    "code_string":"def f(x):\n    l = len(x)\n    i = 0\n    while x[i] == x[l-i-1]:\n        i += 1\n        if i > (l\/\/2):\n            return True\n            break\n    return False\n\nA, B = map(input().split())\ncount = 0\nfor i in range(A, B+1):\n    if f(i):\n        count += 1\nprint(count)\n",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s897610978":{
    "code_string":"a,b=map(str,input().split())\ncount = 0\nfor i in range(a,b):\n  if i[0]==i[4] and i[1]==i[3]:\n    count+=1\nprint(count)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s106382979":{
    "code_string":"#\n# abc090 b\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"11009 11332\"\"\"\n        output = \"\"\"4\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"31415 92653\"\"\"\n        output = \"\"\"612\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    A, B = map(int, input().split())\n    ans = 0\n    for i in range(A, B+1):\n        s = str(i)\n        for j in range((3):\n            if s[j] != s[-1-j]:\n                break\n        else:\n            ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s341881172":{
    "code_string":"a,b=map(int,input().split())\n\nc=0\nfor i in range(a,b+1):\n  s=list(map(str,i))\n  if s=reversed(s):\n    c+=1\nprint(c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s681826061":{
    "code_string":"n, m = map(int, inout().split())\nif n * m == 1:\n  print(1)\nelif n == 1 or m == 1:\n  print(n + m - 1)\nelse:\n  print((n - 2) * (m - 2))",
    "error_obj":"NameError: name 'inout' is not defined"
  },
  "s559175722":{
    "code_string":"def f(x):\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 0\n\nN, M = map(int, input().split())\n\na = [[0]*(M+2) for _ in range(N+2)]\nfor i in range(N):\n    for j in range(M):\n        a[i][j] = f(a[i][j])\n        a[i][j+1] = f(a[i][j+1])\n        a[i][j+2] = f(a[i][j+2])\n        a[i+1][j] = f(a[i+1][j])\n        a[i+1][j+1] = f(a[i+1][j+1])\n        a[i+1][j+2] = f(a[i+1][j+2])\n        a[i+2][j] = f(a[i+2][j])\n        a[i+2][j+1] = f(a[i+2][j+1])\n        a[i+2][j+2] = f(a[i+2][j+2])\nprint(sum(a[1:N+1, 1:M+1]))\n",
    "error_obj":"TypeError: list indices must be integers or slices, not tuple"
  },
  "s882916894":{
    "code_string":"N,M = map(int,input().split())\n#N>=M\u3068\u3057\u3066\u4e00\u822c\u6027\u3092\u5931\u308f\u306a\u3044\nif N==M==1:\n    print(1)\nif N==1 and M>=2:\n    print(M-2)\nif N==2 and M>=2:\n    print(0)\nif N>=3 and M>=3:\n    print((N-2)*(M-2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s014256015":{
    "code_string":"n,m = map(int,input().split())\nelif(n==1)or(m==1):\n  if(n==1)and(m==1):\n    print(1)\n  else:\n    print(max(0,max(n,m)-2))\nelse:\n  print((n-2)*(m-2))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s743595252":{
    "code_string":"N,M = map(int, input().split())\nif n == 1:\n    if m == 1:\n      print(1)\n    else:\n      print(m - 2)\nelif m == 1:\n  print(n - 2)\nelse: \n  print((N-2)*(M-2))\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s572624544":{
    "code_string":"if N > 1 and M > 1:\n    four = 4\n    six = (N - 2) * 2 + (M - 2) * 2\n    nine = N * M - four - six\n    print(nine)\nelse:\n    two = 2\n    three = N * M - two\n    print(three)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s191019605":{
    "code_string":"import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef s(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nS = s()\nif len(S)==26:\n    print(-1)\n    sys.exit()\n\nalpha=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n\nfor i in alpha:\n    if i not in S:\n        print(S+ans)\n        sys.exit()\n",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s070139225":{
    "code_string":"N= map(int,input().split())\n\nif N=",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s161389944":{
    "code_string":"#\u751f\u5f92\u306e\u4eba\u6570\u3092\u53d6\u5f97\nN = int(input())\n \n# \u751f\u5f92\u306e\u4eba\u6570\u30923\u3067\u5272\u3063\u305f\u5546\u306e\u5c0f\u6570\u70b9\u4ee5\u4e0b\u3092\u5207\u308a\u6368\u3066\u305f\u6570\u5024\u3092\u5909\u6570\u306b\u683c\u7d0d\ngroupnum = math.floor(N \/ 3)\n \n# \u6700\u5927\u306e\u30b0\u30eb\u30fc\u30d7\u6570\u306e\u51fa\u529b\nprint(groupnum)",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s681522113":{
    "code_string":"n=input()\nprint(str(n\/\/3))",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'str' and 'int'"
  },
  "s174039510":{
    "code_string":"n=input()\nprint(n\/\/3)",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'str' and 'int'"
  },
  "s865550779":{
    "code_string":"N=int(intput())\n\nprint(N\/\/3)",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s820658107":{
    "code_string":"N = int(input())\n\nx == N \/\/ 3\n\nprint(x)\n",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s567499635":{
    "code_string":"N = int(input())\n\nif N>=3:  \u3000\u3000\u3000\u3000\u3000   #\u751f\u5f92\u6570\u304c\uff13\u4eba\u4ee5\u4e0a\u304c\u5fc5\u9808\u6761\u4ef6\n    print(int(N\/3))\u3000 #\u751f\u5f92\u6570\u3092\u6700\u4f4e\u6761\u4ef6\u306e\uff13\u4eba\u3067\u5272\u308b\nelse:\n    print(0)",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s063728818":{
    "code_string":"n = map(int, input())\nprint(n \/\/ 3)",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'map' and 'int'"
  },
  "s228421751":{
    "code_string":"print(int(input)\/\/3)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s670354565":{
    "code_string":"N=int(input())\nA=list(map(str, input().split()))\ncounter=0\nif 'P', 'W', 'G', 'Y' in A:\n  print('Four')\nelse:\n  print('Three')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s274747312":{
    "code_string":"import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef i(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nINF = 10**9\nmod = 10**9+7\n\ns = [0]*4\nN = i()\nS = l()\nfor i in range(N):\n    if S[i] == 'P':\n        s[0] = 1\n    if S[i] == 'W':\n        s[1] = 1\n    if S[i] == 'G':\n        s[2] = 1\n    if S[i] == 'Y':\n        s[3] = 1\nprint(sum(s))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s015164586":{
    "code_string":"_ = input()\n*S, = map(int, input().split())\nl = len(set(S))\nif l == 4:\n    print(\"Four\")\nelse:\n    print(\"Three\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s437631622":{
    "code_string":"N = int(input())\nD = [input() for _ in range(N)]\nprint('Four' if len(set(D))==4 else 'Three')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s201423821":{
    "code_string":"n,*s=map(int,open(0).read().split())\nprint('TFhoruere'[len(set(s))==4::2])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s788438179":{
    "code_string":"n = int(input())\ns = input().split()\n\nif Y in s:\n  print('Four')\nelse:\n  print('Three')",
    "error_obj":"NameError: name 'Y' is not defined"
  },
  "s927995920":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nif len(set(a))==3:\n  print(\"Three\")\nelse:\n  print(\"Four\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s874568959":{
    "code_string":"N=int(input())\nS=list(map(int, input().split()))\nX=set()\nfor s in S:\n  X.add(s)\n  \nif len(X)==3:\n  print('Three')\nelse:\n  print('Four')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s283880314":{
    "code_string":"n = int(input())\nk = len(set(map(str, input().split())))\nif k = 4:\n  print('Four')\nelse:\n  print('Three')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s871609765":{
    "code_string":"i = int(input())\nl = list(map(int,input().split()))\nprint(\"Four\" if l.count(\"Y\")>0 else \"Three\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s702937056":{
    "code_string":"N = int(input())\nS = list(map(int, input().split()))\n\nif \"Y\" in S:\n    print(\"Four\")\nelse:\n    print(\"Three\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s815373965":{
    "code_string":"n=int(input())\nlis=list(map(int,input().split()))\nans=0\nfor i in range(n):\n  if i == \"P\":\n    ans=1\nprint([\"Three\",\"Four\"][ans])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s583697602":{
    "code_string":"a=input()\nb=list(map(input().split()))\nif \"Y\" in b:\n  print(\"Four\")\nelse:\n  print(\"Three\")",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s061182922":{
    "code_string":"N=int(input())\nL=list(map(int,input().split()))\nL=set(L)\nif len(L)==4:\n  print(\"Four\")\nelse:\n  print(\"Three\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s048143912":{
    "code_string":"N=int(input())\nS=list(map(string, input().slipt()))\n\nif 'Y' in S:\n  print('Four')\nelse:\n  print('Three')",
    "error_obj":"NameError: name 'string' is not defined"
  },
  "s890186978":{
    "code_string":"N=int(input());print(\"Three\" if len(set(map(input().split())))==3 else \"Four\")",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s573617337":{
    "code_string":"n = int(input())\nlists = list(map(int, input().split()))\n\nsets = set(lists)\nans = len(sets)\n\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s046006910":{
    "code_string":"N = int(input())\nList = list(map(int, input().split()))\ns_l = set(List)\nif len(s_l) == 3:\n  print(\"Three\")\nelse:\n  print(\"Four\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'G'"
  },
  "s976747534":{
    "code_string":"n=int(input())\nd={'M':0,'A':0,'R':0,'C':0,'H':0}\nfor i in range(n):\n  s=input()\n  if s[0]=='M':\n    d['M']+=1\n  if s[0]=='A':\n    d['A']+=1\n  if s[0]=='R':\n    d['R']+=1\n  if s[0]=='C':\n    d['C']+=1\n  if s[0]=='H':\n    d['H']+=1\n\nans=0\nfor i,j,k in combinations('MARCH',3):\n  ans+=d[i]*d[j]*d[k]\n\nprint(ans)",
    "error_obj":"NameError: name 'combinations' is not defined"
  },
  "s778935506":{
    "code_string":"using System;\nusing static System.Console;\nusing System.Linq;\nusing System.Collections.Generic;\nclass Program\n{\n    static void Main(string[] args)\n    {\n      int n = int.Parse(ReadLine());\n      List<string> s = new List<string>();\n      \n      for (int i=0;i<n;i++)\n      {\n        s.Add(ReadLine());\n      }\n      var hashSet = new HashSet<string>(s);\n      s = hashSet.ToList();\n      List<int> ans = new List<int>();\n      \n      for (int i=0;i<5;i++)\n      {\n        ans.Add(0);\n      }\n      \n      for (int i=0;i<s.Count;i++)\n      {\n        if (s[i].Substring(0,1)==\"M\")\n        {\n          ans[0]+=1;\n        }\n        else if (s[i].Substring(0,1)==\"A\")\n        {\n          ans[1]+=1;\n        }\n        else if (s[i].Substring(0,1)==\"R\")\n        {\n          ans[2]+=1;\n        }\n        else if (s[i].Substring(0,1)==\"C\")\n        {\n          ans[3]+=1;\n        }\n        else if (s[i].Substring(0,1)==\"H\")\n        {\n          ans[4]+=1;\n        }\n      }\n      int answ=0;\n      for (int i=0;i<5;i++)\n      {\n        for (int j=i+1;j<5;j++)\n        {\n          for (int k=j+1;k<5;k++)\n          {\n            if (i!=j && j!=k && i!=k)\n            {\n              answ+=ans[i]*ans[j]*ans[k];\n            }\n          }\n        }\n      }\n      WriteLine(answ);\n    }\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s865699900":{
    "code_string":"import sys\nimport itertools\n\ninput = sys.stdin.readline\n\ndef main():\n    common = common_function()\n    N = int(input())\n    l = ['M', 'A', 'R', 'C', 'H']\n    m = [0]*5\n    for _ in range(N):\n        S = input()[:-1]\n        Shead = S[0]\n        for i, s0 in enumerate(l):\n            if Shead == s0:\n                m[i] += 1\n                break\n    ll = []\n    for i, n in enumerate(m):\n        if n >= 1:\n            ll.append(l[i])\n    if len(ll) <= 2:\n        print(0)\n        return\n    ans = 0\n    for i, j, k in itertools.combinations(ll, 3):\n        ans += m[l.index(i)] * m[l.index(j)] * m[l.index(k)]\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"NameError: name 'common_function' is not defined"
  },
  "s772228175":{
    "code_string":"import itertools\nn = int(input())\nnames = [input() for i in range(n)]\nnames = [i for i in names if i[0] in \"MARCH\"]\n\n\nprint(len(list(itertools.combinations(seq,3))))",
    "error_obj":"NameError: name 'seq' is not defined"
  },
  "s175413295":{
    "code_string":"n = int(input())\nMnum = 0\nAnum = 0\nRnum = 0\nCnum = 0\nHnum = 0\nfor i in range(n):\n  a = input()\n  if a[0] == \"M\":\n    Mnum+=1\n  elif a[0] == \"A\":\n    Anum+=1\n  elif a[0] == \"R\":\n    Rnum+=1\n  elif a[0] == \"C\":\n    Cnum+=1\n  elif a[0] == \"H\":\n    Hnum+=1\nalist = []\nalist.append(Mnum)\nalist.append(Anum)\nalist.append(Rnum)\nalist.append(Cnum)\nalist.append(Hnum)\nfrom itertools import combinations\nblist =list(combinations(alist,3))\nfrom functools import reduce\nsum = 0\nfor i in range(len(blist)):\n  sum+=reduce(mul,blist[i])\nprint(sum)",
    "error_obj":"NameError: name 'mul' is not defined"
  },
  "s759112335":{
    "code_string":"import numpy as np\nfrom itertools\nfrom functools import reduce\nfrom collections import defaultdict\n\nN = int(input())\nd = defaultdict(int)\nfor i in range(N):\n    c = input()\n    if c[0] in ('M', 'A', 'R', 'C', 'H'):\n        d[c[0]] += 1\n\nl = len(d)\nif l < 3:\n    print(0)\nelse:\n    ans = 0\n    for l in list(itertools.combinations(d.values(), 3)):\n        ans += reduce(np.multiply, l)\n    print(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s968775339":{
    "code_string":"N = int(input())\nname = [0]*5\nans = 0\nfor i in range(N):\n    a = input()\n    if a[0] == 'M': name[0] += 1\n    elif a[0] == 'A': name[1] += 1\n    elif a[0] == 'R': name[2] += 1\n    elif a[0] == 'C': name[3] += 1\n    elif a[0] == 'H': name[4] += 1\nif sum(name) < 3:\n    print(0)\nelse:\n    for i in combinations(name, 3):\n        ans += i[0]*i[1]*i[2]\n    print(ans)\n\n",
    "error_obj":"NameError: name 'combinations' is not defined"
  },
  "s857530612":{
    "code_string":"N = int(input())\nM_Dict = {\"M\":0,\"A\":0,\"R\":0,\"C\":0,\"H\":0}\nfor i in range(N):\n    moji = str(input())\n    if moji[0] in M_Dict.keys():\n        M_Dict[moji[0]] += 1\nM_Dict = {k: v for k, v in M_Dict.items() if v != 0}    \nif len(M_Dict) < 3:\n    ans = 0\nelse:\n    ans = 0\n    for k in itertools.combinations(list(M_Dict.keys()),3):\n        ans += M_Dict[k[0]]*M_Dict[k[1]]*M_Dict[[2]]\n    \nprint(ans)    ",
    "error_obj":"NameError: name 'itertools' is not defined"
  },
  "s396956742":{
    "code_string":"import sys\n\nimport numba as nb\nimport numpy as np\n\ninput = sys.stdin.readline\n\n\n@nb.njit(\"void(i8,i8,i8,i8[:,:],i8,i8[:,:],i8[:])\", cache=True)\ndef dfs(H, W, D, A, Q, LR, ans):\n    position = [(-1, -1)] * (H * W + 1)\n    for h in range(H):\n        for w in range(W):\n            position[A[h][w]] = (h, w)\n\n    mp = np.zeros(shape=(H * W + 1), dtype=np.int64)\n\n    for i in range(1, H * W + 1 - D):\n        h, w = position[i]\n        y, x = position[i + D]\n        mp[i] = abs(x - w) + abs(y - h)\n\n    for i in range(Q):\n        l, r = LR[i]\n        ans[i] = mp[l:r:D].sum()\n\n\ndef main():\n    H, W, D = map(int, input().split())\n    A = np.zeros(shape=(H, W), dtype=np.int64)\n    for i in range(H):\n        A[i] = tuple(map(int, input().split()))\n    Q = int(input())\n    LR = np.zeros(shape=(Q, 2), dtype=np.int64)\n    for i in range(Q):\n        LR[i] = tuple(map(int, input().split()))\n\n    ans = np.zeros(shape=Q, dtype=np.int64)\n    dfs(H, W, D, A, Q, LR, ans)\n\n    print(\"\\n\".join(map(str, ans)))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s815127154":{
    "code_string":"import numpy as np\n\nh, w, d = map(int, input().split())\narr = np.zeros([h, w], dtype=np.int64)\n\nfor i in range(h):\n    arr[i] = list(map(int, input().split()))\n\nq = int(input())\nlr = np.zeros([q, 2], dtype=np.int64)\n\nfor i in range(q):\n    lr[i] = list(map(int, input().split()))\n\n\ncnt = h * w\nresult = [[0] for _ in range(d)]\nfor i in range(d):\n    l = i\n    score = 0\n    while l + d <= cnt:\n        if l == 0:\n            result[i].append(score)\n            l += d\n            continue\n        u = np.where(arr == l)\n        v = np.where(arr == l + d)\n        score += abs(v[0][0] - u[0][0]) + abs(v[1][0] - u[1][0])\n        result[i].append(score)\n        l += d\n\n\nresult = solve(h, w, d, arr)\n\n\nfor l, r in lr:\n    ans = result[l % d]\n    print(ans[r \/\/ d] - ans[l \/\/ d])",
    "error_obj":"NameError: name 'solve' is not defined"
  },
  "s927882198":{
    "code_string":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10**9 + 7\n#from decimal import *\n\nH, W, D = MAP()\nA = [LIST() for _ in range(H)]\n\ndic = defaultdict(tuple)\n\nfor y in range(H):\n\tfor x in range(W):\n\t\tdic[A[y][x]] = (y+1, x+1)\n\npower = [[] for _ in range(D)]\nfor i in range(1, H*W+1):\n\tif i <= D:\n\t\tpower[i%D].append(0)\n\telse:\n\t\tidx = i%D\n\t\ttmp = abs(dic[i][0]-dic[i-D][0]) + abs(dic[i][1]-dic[i-D][1])\n\t\tpower[i%D].append(tmp)\n\npower_acc = []\nfor x in power:\n\tpower_acc.append(list(accumulate(x)))\n\nQ = INT()\nfor _ in range(Q):\n\tL, R = MAP()\n\tprint(power_acc[R%D][R\/\/D] - power_acc[L%D][L\/\/D])",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s849267912":{
    "code_string":"n=int(input())\nif n<=9:\n  print(n)\nelse:\n  n=str(n)\n  x=n[0]\n  x=int(x)-1\n  if n[1:].count('9')==len(n-1):\n    print(x+1(len(n)-1)*9)\n  else:\n    print(x+(len(n)-1)*9)\n",
    "error_obj":"SyntaxWarning: 'int' object is not callable; perhaps you missed a comma?"
  },
  "s757244169":{
    "code_string":"n = int(input())\nk = len(str(n))\na = 9 * (k - 1)\nb = 0\nfor i in range(k):\n  b += int(str(n)[i])\nc = 0\nif k > 2:\n  m = str(int(n))[:k - 2] + str(int(int(str(n)[-2]) - 1)) + '9'\n  for i in range(k):\n    c += int(m[i])\nans = max(a, b, c)\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '-'"
  },
  "s328930221":{
    "code_string":"n = input()\nans1=int(n[0])\nfor i in n:\n  ans1 += int(i)\nans2=int(n[0])-1+9*(len(n)-1)\nprint(max(ans1,ans2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s947358355":{
    "code_string":"n = int(input())\n\nsum = int(n[0]) + (len(n)-1) * 9\nprint(sum if set(n[1:]) == {\"9\"} else sum - 1)\n",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s572625336":{
    "code_string":"Num = str(input())\nL = len(Num)\nif Num[1:] == '9'*(l-1):\n  val = int(Num[0]) + 9*(l-1)\nelse:\n  val = int(Num[0])-1 + 9*(l-1)\nprint(val)",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s143576528":{
    "code_string":"def resolve():\n    n = input()\n    l = len(n)\n    if n[:1] == \"9\" * l-1: #c9999...99\u306e\u3068\u304d\n        print(int(n[0]) + 9*(l-1))\n    else:\n        print((int(n[0])-1) + (9*(l-1)))\nresolve()",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s036640422":{
    "code_string":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10**9 + 7\n#from decimal import *\n\ndef ketawa(x):\n\treturn sum(map(int, list(str(x))))\n\nN = input()\n\nif len(N) == 1:\n\tprint(N)\n\nelse:\n\tpint(max(ketawa(N), int(N[0])-1 + 9*(len(N)-1)))\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s705103653":{
    "code_string":"def maxf(n):\n    a = list(map(int, list(n)))\n    for i, item in enumerate(a):\n        if i == 0 and item != 9:\n            a[i] -=1\n            a[i+1:] = [9]*(len(a)-1)\n            break\n        elif item != 9:\n            a[i-1] -= 1\n            a[i:] = [9]*(len(a)-i)\n            break\n    return sum(a)\n\nprint(maxf(input())\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s848598837":{
    "code_string":"N = int(input())\nn = len(str(N))\nNS = str(N)\nans0 = 0\nfor i in range(NS):\n    ans0 += int(i)\nans1 = int(NS[0])-1 + 9 * (n-1)\nans2 = 9 * (n-1)\n\nprint(max(ans0, ans1, ans2))\n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s935769111":{
    "code_string":"s = list(input())\nans = [sum(map(int, s)), 9*(len(s)-1) + int(s[0]-1)]\nprint(max(ans))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s524520961":{
    "code_string":"N = int(input())\n\nfor i in range(17):\n    if 10**i <=N <10**(i+1):\n        m=i+1\n        break\n\nfor j in range(1,10):\n    if (10**(m-1))*j + 10**(m-1)-1 <=N< (j+1)*(10**(m-1))+10**(m-1)-1:\n        a = j\n        break\n\nprint(a+9*(m-1))",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s608766684":{
    "code_string":"n,k,p=map(int,input().split()),998244353\nr=range\nf=[1]\nfor i in r(k):f+=[-~i*f[i]]\nprint(sum(f[-1]*pow(f[i]*f[-1-i],-1,p)for i in r(n-1,k))%p)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s277338578":{
    "code_string":"N,A=map(int,input().split())\nif N%500<=A:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s389249283":{
    "code_string":"import math\nN = int (input ())\nL = input ().split ()\nl = [int(s) for s in L]\nlist.sort (l, reverse=True)\na = 0\nx = 0\nm = math.ceil(N\/2)\nfor i in range (m):\n    x += int (l[a])\n    a += 2\na = 1\ny = 0\nfor i in range (N-m):\n    y += int (l[a])\n    b += 2\nprint (x-y)",
    "error_obj":"IndexError: list index out of range"
  },
  "s472017097":{
    "code_string":"N, A = map(int, input().split())\n\nif N \/\/ 500 <= A: print('Yes')\nelse: print('No')",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s489732957":{
    "code_string":"a=int(input())\nb=int(input())\nif a%500 =< b:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s085342995":{
    "code_string":"n = int(input())\na = int(input())\nif n%500<=a:\n    plint(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'plint' is not defined"
  },
  "s026529957":{
    "code_string":"N = int(input(\"N--->\"))\nA = int(input(\"A--->\"))\n\nb = n%500\n\nif A > b:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s934518692":{
    "code_string":"a = [int(input()) for i in range(2)]\nn = a[0] % 500\nif a >= n:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: '>=' not supported between instances of 'list' and 'int'"
  },
  "s529956172":{
    "code_string":"N = input()\nA = input()\n\namari = N % 500\nif amari <= A:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s662335149":{
    "code_string":"n = int(input())\na = int(input())\nif n%500<= a:\n    plint(\"Yes\")\nelse:",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s064822920":{
    "code_string":"n=int(input())\na=int(input())\nprint(['Yes','No'][n%500>a]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s685649305":{
    "code_string":"N=int(input())\nlst=list(map(int,input().split()))\nlst.sort(reverse=True)\n\nA=0\nB=0\nfor i in range(N):\n    if i==0 or i%2==0:\n        A+=lst[i]\n    else:\n        B+=lst[i]\n\nprint(int(A)-int(B))",
    "error_obj":"IndexError: list index out of range"
  },
  "s805229800":{
    "code_string":"N=int(input())\na=sorted([int(i) for i in input().split()],reverse=True)\nprint(sum(a[0::2]-sum(a[1::2]))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s730680240":{
    "code_string":"N = int(input())\nK = int(input())\nX = list(map(int, input().split()))\nres = 0\nfor x in X:\n    res += 2 * min(x, K - x)\nprint(res)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1'"
  },
  "s416003410":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\nA.sort(reverse=True)\n\nprint(sum(l[0::2])-sum(l[1::2]))",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s286353580":{
    "code_string":"N = int(input())\nA = sorted(list(map(int, input().split())))[]\nprint(sum(A[-1::-2])-sum(A[-2::-2]))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s616695044":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\na.reverse(key=int)\nAli=0\nBob=0\nfor i in range(n):\n\tif i%2==0:\n       Ali+=a[i]\n\telse:\n       Bob+=a[i]\nans(Ali-Bob)\n       ",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s797137443":{
    "code_string":"N = int(input())\na = list(map(int, input().split()))\n\ndef sort_reverse(n):\n    n.sort(reverse=True)\n    return n\n\nN_Even = list(range(0, N+1, 2))\nN_Odd = list(range(1, N+1, 2))\na1 = sort_reverse(a)\nsum1 = 0\nsum2 = 0\n\nfor i in N_Even:\n    sum1 += a1[i]\nfor j in N_Odd:\n    sum2 += a1[j]\n\nprint(sum1 - sum2)",
    "error_obj":"IndexError: list index out of range"
  },
  "s950175951":{
    "code_string":"def main():\n    N = int(input())\n    a = sorted(map(int, input().split()))[::-1]\n    diff = sum([::2]) - sum([1::2])\n    print(diff)\n\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s927998684":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\na.sort() \nalice_sum=0\nbob_sum=0\nif len(a)%2==0:\n  for i in range(,n,2):\n    bob_sum+=a[i]\n  for l in range(1,n,2):\n    alice_sum+=a[i]\nelse:\n  for i in range(,n,2):\n    alice_sum+=a[i]\n  for k in range(1,n,2):\n    bob_sum+=a[i]\n    \nprint(alice_sum-bob_sum)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s938315542":{
    "code_string":"N=int(input())\nA=list(map(int, input().split()))\nA.sort(reverse=True)\nsum1=0\nsum2=0\nfor num in range(N+1):\n  if num % 2 ==0:\n    sum1 += A[num]\n  else:\n    sum2 += A[num]\nprint(sum1-sum2)",
    "error_obj":"IndexError: list index out of range"
  },
  "s511681112":{
    "code_string":"n=int(input())\nA=[int(x) for x in input().split()]\nB=sorted(A)\nAlice=[]\nBob=[]\nwhile len(B)!=0 or len(B)!=1:\n  Alice.append(B[-1])\n  B.pop()\n  Bob.append(B[-1])\n  B.pop()\nif len(B)==1:\n  Alice.append(B[0])\n  B.pop()\nprint(sum(Alice)-sum(Bob))",
    "error_obj":"IndexError: list index out of range"
  },
  "s100483062":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\na.sort(reverse = True)\nAlice = sum(a[::2])\nBob = sum(a[1::2])\nprint(Alice - )",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s944348754":{
    "code_string":"N = int(input())\na = list(map(int,input().split()))\na.sorted()\nalice = 0\nbob = 0\nfor i in range(N) :\n    if i%2 == 0 : \n        alice += a[i]\n    elif i%2 == 1 :\n        bob += a[i]\nprint(alice-bob)\n    \n",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s816891262":{
    "code_string":"N = int(input())\na = map(int, input().split())\n\na.sort(reverse=True)\n\nprint(sum(a[::2])-sum(a[1::2]))",
    "error_obj":"AttributeError: 'map' object has no attribute 'sort'"
  },
  "s979520824":{
    "code_string":"input()\nl = list(map(int,input().split()))\nl.sort(reverse\u3000=\u3000True)\nans = 0\nfor i in range(len(l)):\n  if i % == 0:\n    ans += l[i]\n  else:\n    ans -= l[i]\nprint(ans)",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s400061560":{
    "code_string":"N = int(input())\na = [map(int, input().split()) for _ in range(N)]\na = sorted(a)[::-1]\nAlice = 0\nBob = 0\nfor i in range(N):\n  if i % 2 == 0:\n    Alice += a[i]\n  else:\n    Bob += a[i]\nprint(Alice - Bob)\n  \n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s253507611":{
    "code_string":"\n\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    n = int(input())\n    a = input().split()\n\n    bob = 0\n    alice = 0\n    sort_a = sorted(a, reverse=True)\n    count = 0\n    for m in sort_a:\n        if m % 2 == 0:\n            alice = alice + int(m)\n        else:\n            bob = bob + int(m)\n\n    print(alice - bob)\n",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s483511901":{
    "code_string":"n=int(input())\na=list(int,input().split())\nal=[a[2*i] for i in range(n\/\/2)]\nbo=[a[2*i+1] for i in range(n\/\/2)]\nprint(sum(al)-sum(bo))",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s249693351":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\n\nif n%2 != 0:\n  a.append(0)\n  n += 1\n \na.sort()\nd = 0\n\nfor i in range(int(n\/2):\n               d += a[2*i+1]-a[2*i]\n           \nprint(d)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s868339680":{
    "code_string":"N = int(input())\nlist_a = list(map(int,input().split()))\nlist_a.sort(reverse=True)\nalice = 0; bob = 0\nfor i in range(0,100):\n    if i % 2 == 0:\n        alice += list_a[i]\n    else:\n        bob += list_a[i]\nprint(alice-bob)\n    \n",
    "error_obj":"IndexError: list index out of range"
  },
  "s002683011":{
    "code_string":"import math\nN = int (input ())\nL = input ().split ()\nl = [int(s) for s in L]\nlist.sort (l, reverse=True)\na = 0\nx = 0\nm = math.ceil(N\/2)\nfor i in range (m):\n    x += int (l[a])\n    a += 2\na = 1\ny = 0\nfor i in range (N-m):\n    y += int (l[a])\n    b += 2\nprint (x-y)",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s433420421":{
    "code_string":"n = int(input())\ncards = sorted(list(map(int, input().split())), reverse=True)\nalice = []\nbob = []\nfor i in range(0, n, 2):\n    alice.append(max(cards[i]))\n    try:\n        bob.append(max(cards[i+1]))\n    except:\n        break\nprint(sum(alice) - sum(bob))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s879257066":{
    "code_string":"N = int(input())\na = list(map(int, input().split()))\n\nalice = 0\nbob = 0\n\nfor n in range(N):\n    card = max(a)\n    alice += card\n    a.remove(card)\n    if len(a) == 0:\n        break\n    card = max(a)\n    bob += card\n    a.remove(card)\n\nprint(alice - bob)",
    "error_obj":"ValueError: max() arg is an empty sequence"
  },
  "s304503249":{
    "code_string":"N = int(input())\na = list(map(int,input().split())).sort(reverse=True)\nanswer = 0\nfor i in range(0,N,2):\n  answer += a[i]\nfor i in range(1,N,2):\n  answer -= a[i]\nprint(answer)",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s816341128":{
    "code_string":"l=[list(map(int,input())) for i in range(3)]\n\nsum_l=0\nans=\"No\"\n\nfor i in l:\n  sum_l+=sum(i)\n  \nif sum_l%3==0:\n  ans=\"Yes\"\n\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s614182327":{
    "code_string":"\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \n\nCopy\nCopy\ny1_list = list(map(int,input().split()))\ny2_list = list(map(int,input().split()))\ny3_list = list(map(int,input().split()))\n \na1 = list()\na2 = list()\na3 = list()\nfor i in range(3):\n    a1.append(y1_list[i] - y2_list[i])\n    a2.append(y2_list[i] - y3_list[i])\n    \nif a1[0] == a1[1] and a1[2] == a1[0]:\n    if a2[0] == a1[1] and a2[2] == a1[0]:\n        print(\"Yes\")\n        \n    else:\n        print(\"No\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name '\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9' is not defined"
  },
  "s560795513":{
    "code_string":"a=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\nans='No'\nif a[1]-a[0]==b[1]-b[0]==c[1]-c[0] and a[2]-a[1]==b[2]-b[1]==c[2]-c[1]:\n  b[0]-a[0]==b[1]-a[1]==b[2]-b[2] and c[0]-b[0]==c[1]-b[1]==c[2]-b[2]:\n    ans='Yes'\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s907567885":{
    "code_string":"l=[list(map(int,input().split())) for i in range(3)]\nx=l[0][0],y=l[0][1],z=l[0][2]\na=0,b=l[1][0]-x,c=l[2][0]-x\nif b+y==l[1][1] and b+z==l[1][2] and c+y==l[2][1] and c+z==l[2][2]:\n  print('Yes')\nelse:\n  print('No')\n  ",
    "error_obj":"SyntaxError: cannot assign to literal"
  },
  "s570313754":{
    "code_string":"c1 = list(map(int,input().split()))\nA = np.array(c1)\nc1 = list(map(int,input().split()))\nB = np.array(c1)\nc1 = list(map(int,input().split()))\nC = np.array(c1)\n\nD = A-B \nD1 = list(D)\nD1 = set(D1)\nif len(D1) == 1:\n    continue \nelse:\n    print('No')\n    exit()\n\nE = B-C\nE1 = list(E)\nE1 = set(E1) \nif len(E1)== 1:\n    print('Yes') \nelse:\n    print('No')",
    "error_obj":"SyntaxError: 'continue' not properly in loop"
  },
  "s479238646":{
    "code_string":"print(-1",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s636583362":{
    "code_string":"from collections import deque\n\n\ndef bfs():\n  d = [[float('inf')]* w for i in range(h)]\n  \n  dx = [1, 0, -1, 0]\n  dy = [0, 1, 0, -1]\n  \n  que = deque([])\n  que.append((sx, sy))\n  d[sx][sy] = 0\n  \n  while que:\n    p = que.popleft()\n    if p[0] == gx and p[1] == gy:\n      break\n    for i in range(4):\n      nx = p[0] + dx[i]\n      ny = p[1] + dy[i]\n      \n      if 0 <= nx < h and 0 <= ny < w and maze[nx][ny] != '#' and d[nx][ny] == float('inf'):\n        que.append((nx, ny))\n        d[nx][ny] = d[p[0]][p[1]] + 1\n        \n  return d[gx][gy]\n  \n  \nh, w = map(int, input().split())\nmaze = [list(input()) for i in range(h)]\nsx, sy = 0, 0\ngx, gy = h-1, w-1\n\nwhite = 0\nfor i in range(h):\n  for j in range(w):\n    if maze[i][j] == '.':\n      white += 1\n      \nres = bfs()\nif 0 < res < float('inf'):\n  print(white - res - 1)\nelse:",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s572199397":{
    "code_string":"import sys\nfrom collections import deque\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef LSH(h):\n    return [list(input()) for _ in range(h)]\n\n\nH, W = LI()\nA = LSH(H)\nMAP = [[0 for i in range(W)]for j in range(H)]\nwhite = 0\nfor i in range(H):\n    S = A[i]\n    for j in range(W):\n        if S[j] == \"#\":\n            MAP[i][j] = \"#\"\n        else:\n            MAP[i][j] = \".\"\n            white += 1\nd = deque()\nd.append([0, 0])\nlooked = [[0 for i in range(W)]for j in range(H)]\nlooked[0][0] = 1\nmove = [[1, 0], [0, 1], [-1, 0], [0, -1]]\ncount = -1\n\nwhile d:\n    h, w = d.popleft()\n    for i in move:\n        a = h+i[0]\n        b = w+i[0]\n        if not(0 <= a < H) or not(0 <= b < W) or looked[a][b] == 0 or MAP[a][b] == \"#\":\n            continue\n        if a == H-1 and b == W-1:\n            count = looked[h][w]+1\n            break\n        d.append([a, b])\n        looked[a][b] = looked[h][w]+1\n    if count != -1:\n        break\nif count == -1:\n    print(count)\n    sys.exit()\n\nprint(white-count)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s993453960":{
    "code_string":"\n\nH,W=map(int,input().split())\n\nc=[list(str(input())) for i in range(H)]\n#1<=sy<=R\nd=[[0 for j in range(W)]for i in range(H)]\ninf=10**6\nans=0\nfor i in range(H):\n    for j in range(W):\n        if c[i][j]=='#':\n            d[i][j]=-1\n        else:\n            d[i][j]=inf\n            ans+=1\n\n\nd[0][0]=0\nqueue=collections.deque([[0,0]])\ngy,gx=H-1,W-1\n\nmoves=[[1,0],[-1,0],[0,1],[0,-1]]\n\nflag=False\nwhile len(queue)>0:\n    now=queue.popleft()\n    for i in range(4):\n        ny=now[0]+moves[i][0]\n        nx=now[1]+moves[i][1]\n        \n        if 0<=ny and ny<H and 0<=nx and nx<W and c[ny][nx]=='.' and d[ny][nx]==inf:\n            d[ny][nx]=d[now[0]][now[1]]+1\n            queue.append([ny,nx])\n            if ny==gy and nx==gx:\n                print(ans-d[ny][nx]-1)\n                exit()\nprint(-1)     ",
    "error_obj":"NameError: name 'collections' is not defined"
  },
  "s457265121":{
    "code_string":"from collections import deque\n\n\ndef bfs(sy, sx, gy, gx):\n    # y\u304c\u4e0b\u65b9\u5411\uff0cx\u304c\u53f3\u65b9\u5411\n    d = [[float(\"inf\")] * w for _ in range(h)]\n\n    dy = [0, 1, 0, -1]\n    dx = [1, 0, -1, 0]\n\n    que = deque([])\n    que.append((sy, sx))\n    d[sy][sx] = 0\n\n    while que:\n\n        p = que.popleft()\n\n        if p[0] == gy and p[1] == gx:\n            break\n\n        for i in range(4):\n            ny = p[0] + dy[i]\n            nx = p[1] + dx[i]\n\n            if 0 <= ny < h and 0 <= nx < w and maze[ny][nx] != \"#\" and d[ny][nx] == float(\"inf\"):\n                que.append((ny, nx))\n                d[ny][nx] = d[p[0]][p[1]] + 1\n \n    if d[gy][gx] == float(\"inf\"):\n        return -1\n    else:\n        return [gy][gx]\n\n\nh, w = map(int, input().split())\nmaze = [list(input()) for _ in range(h)]\n\nres = 0\nfor y in range(h):\n    for x in range(w):\n        if maze[y][x] == '#':\n            res += 1\n\ndis = bfs(0, 0, h - 1, w - 1)\n\nif dis == -1:\n    print(-1)\nelse:\n    print(h * w - res - dis - 1)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s771731995":{
    "code_string":"#create date: 2020-07-03 14:46\n\nimport sys\nstdin = sys.stdin\nfrom collections import deque\n\ndef ns(): return stdin.readline().rstrip()\ndef ni(): return int(ns())\ndef na(): return list(map(int, stdin.readline().split()))\n\ndef main():\n    h, w = na()\n    g = [[1] * (w+2)]\n    white = 0\n    for i in range(h):\n        r = ns()\n        white += r.count(\".\")\n        g.append([1] + [1 if s==\"#\" else 0 for s in r] + [1])\n    g.append([1] * (w+2))\n    q = deque([[1,1]])\n    move = ((1, 0), (-1, 0), (0, 1), (1, 0))\n    while q:\n        x, y = q.popleft()\n        for dx, dy in move:\n            nx, ny = x + dx, y + dy\n            if g[nx][ny] > 0:\n                continue\n            g[nx][ny] = g[x][y] + 1\n            q.append((nx, ny))\n    if g[h][w] = 0:\n        print(-1)\n    else:\n        print(white - g[h][w] - 1)\n\n\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s418657830":{
    "code_string":"from collections import deque\nH,W = map(int,input().split())\ngrid = [0] * H\nnum_black = 0\nfor i in range(H):\n    s = input()\n    for j in range(len(s)):\n        if s[j] == '#':\n            num_black += 1\n    grid[i] = list(s)\ntime_grid = [[-1] * W for _ in range(H)]\ntime_grid[0][0] = 0\nqueue = deque()\nqueue.append([0,0,0])\nwhile queue:\n    y,x,t = queue.popleft()\n    for next_y, next_x in [[y+1,x],[y,x+1],[y-1,x],[y,x-1]]:\n        if 0 <= next_x < W and 0 <= next_y < H and grid[next_y][next_x] == '.':\n            queue.append([next_y,next_x,t+1])\n            time_grid[next_y][next_x] = t+1\n            grid[next_y][next_x] = '#'\nif time_grid[H][W] != -1:\n    print(H*W-time_grid[-1][-1]-1-num_black)\nelse:\n    print(-1)\n\n\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s084973241":{
    "code_string":"from collections import deque\n\ndef bfs():\n    # \u305f\u3069\u308a\u7740\u304f\u307e\u3067\u306b\u304b\u304b\u3063\u305f\u56de\u6570\u3092\u3044\u308c\u308b\u591a\u91cd\u30ea\u30b9\u30c8\u3002\n    d = [[float(\"inf\")] * w for i in range(h)]\n    # 1\u30ce\u30fc\u30c9\u964d\u308a\u308b\u3068\u304d\u306bfor\u3067\u56de\u305b\u308b\u3088\u3046\u30ea\u30b9\u30c8\u5316\u3057\u3066\u304a\u304f\n    dx = [1, 0, -1, 0]\n    dy = [0, 1, 0, -1]\n    # \u63a5\u3057\u305f\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u308a\u8fbc\u3080\u7528\u306eque\u3092\u5b9a\u7fa9\n    que = deque([])\n    # \u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u3092que\u306b\u52a0\u3048\u308b\u3002\u63a2\u7d22\u306e\u969b\u306fque\u304b\u3089\u53d6\u308a\u51fa\u3059\u30eb\u30fc\u30d7\u3092\u56de\u3059\u306e\u3067\u6700\u521d\u3060\u3051\u5148\u306b\u5165\u308c\u3066\u304a\u304f\n    que.append(sx,sy)\n    # \u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u306b\u304b\u304b\u308b\u8ddd\u96e2\u306f0\u306a\u306e\u3067inf\u30920\u306b\u304b\u3048\u308b\u3002\n    d[sx][sy] = 0\n    # que\u304c\u3042\u308b\u304b\u304e\u308a\u7d9a\u3051\u308b\n    while que:\n        p = que.popleft()\n        # \u53d6\u308a\u51fa\u3057\u305f\u70b9\u304c\u30b4\u30fc\u30eb\u306a\u3089\u7d42\u4e86\n        if p[0] == gy and p[1] == gx:\n            break\n        #\u3000\u305d\u308c\u4ee5\u5916\u306e\u6642\u306f\uff0c\u63a5\u3057\u3066\u3044\u308b\u70b9\u30924\u65b9\u5411\u9806\u306b\u53d6\u5f97\u3002\u4e00\u3064\u305a\u3064\u51e6\u7406\u3059\u308b\u3002\n        for i in range(4):\n            nx = p[0] + dx[i]\n            ny = p[1] + dy[i]\n            # \u65b0\u3057\u304f\u53d6\u5f97\u3057\u305f\u5ea7\u6a19\u306b\u5bfe\u3057\u3066\u306e\u51e6\u7406\n            # \u8ff7\u8def\u5185\u306b\u5b58\u5728\u3059\u308b\u5ea7\u6a19\u3067\u3042\u308a\uff0c\u58c1\u3067\u306f\u306a\u304f\uff0c\u307e\u3060\u901a\u3063\u305f\u3053\u3068\u304c\u306a\u304fd\u304cinf\u306e\u70b9\u306a\u3089\u51e6\u7406\u3059\u308b = \u65b0\u3057\u304f\u53d6\u5f97\u3057\u305f\u9053\u5019\u88dc\u306e1\u3064\n            if 0 <= nx < r and 0 <= ny < c and maze[nx][ny] != \"#\" and d[nx][ny] == float(\"inf\"):\n                # \u9053\u5019\u88dc\u3092que\u306b\u52a0\u3048\u308b\u3002\n                que.append((nx, ny))\n                # \u305d\u306e\u9053\u5019\u88dc\u3078\u306e\u7d4c\u8def\u307e\u3067\u306b\u304b\u304b\u3063\u305f\u7d4c\u8def\u3092d\u306b\u52a0\u3048\u308b\u3002\n                d[nx][ny] = d[p[0]][p[1]] + 1\n    return d[gy][gx]\n\nh, w = map(int, input().split())\nmaze = [list(input()) for i in range(h)]\nsx, sy = 0, 0\ngx, gy = h - 1, w - 1\n\nwhite = 0\nfor i in range(h):\n    for j in range(w):\n        if maze[i][j] == \".\":\n            white += 1\n\nres = bfs()\nif 0 < res < float(\"inf\"):\n    # \u767d\u3044\u30de\u30b9\u306e\u6570\u304b\u3089\u6700\u77ed\u7d4c\u8def\u3067\u304b\u304b\u308b\u30b3\u30b9\u30c8\u5206\u3092\u5f15\u304f\n    # \u30b4\u30fc\u30eb\u3092\u9ed2\u3044\u30de\u30b9\u306b\u5909\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u305d\u306e\u5206\u3082\u5f15\u304f\n    print(white - res - 1)\nelse:\n    print(-1)\n",
    "error_obj":"TypeError: deque.append() takes exactly one argument (2 given)"
  },
  "s846146564":{
    "code_string":"import collections\n\nH, W = map(int, input().split())\ns = [list(input()) for i in range(H)]\n\nz = [[\"b\"] * W for _ in range(H)] #\u30c1\u30a7\u30c3\u30af\u3057\u305f\u30de\u30b9\u306fb(before)\u304b\u3089a(after)\u306b\u3059\u308b\nblack = 0\nfor i in range(H):\n    black += s[i].count(\"#\") #\u6700\u521d\u306e\u9ed2\u306e\u6570\u3092\u6570\u3048\u308b\nv = [[1,0] [0,1] [-1,0] [0,-1]] #\u52d5\u304d\u65b94\u30d1\u30bf\u30fc\u30f3(\u2193 \u2192 \u2191 \u2190)\nque = collections.deque() #\u8abf\u3079\u308b\u5019\u88dc\u30ea\u30b9\u30c8 #\u8abf\u3079\u7d42\u308f\u3063\u305f\u8981\u7d20\u306f\u6d88\u3059\n\n#\u307e\u305a[0,0]\nz[0][0] = \"a\"\ns[0][0] = 1 #\u4f55\u6b69\u3067\u6765\u308c\u305f\u304b\u3092\u4ee3\u5165\u3057\u3066\u3044\u304f #\u6700\u521d\u306f1\nque.append([0,0]) #\u6700\u521d\u306e\u5019\u88dc\u306f[0,0]\n\n#\u6700\u77ed\u30eb\u30fc\u30c8\u3092\u63a2\u3059\nwhile len(que) != 0: #\u5019\u88dc\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n    i = que.popleft() #\u5019\u88dc\u306e\u3046\u30611\u3064\u3092\u53d6\u308a\u51fa\u3057\u3001\u30ea\u30b9\u30c8\u304b\u3089\u6d88\u3059\n    for dy, dx in v: #4\u30d1\u30bf\u30fc\u30f3\u306e\u52d5\u304d\u65b9\u3092\u8003\u3048\u308b\n        y = i[0] + dy\n        x = i[1] + dx\n        if (0<=y<H and 0<=x<W and s[y][x]==\".\" and z[y][x]==\"b\"):\n            z[y][x] == \"a\"\n            s[y][x] == s[i[0]][i[1]] + 1\n            que.append([y,x]) #\u9032\u3093\u3060\u30de\u30b9\u3092\u65b0\u3057\u304f\u5019\u88dc\u306b\u5165\u308c\u308b\n\nif s[-1][-1] == \".\": #[H,W]\u306e\u30de\u30b9\u306b\u6570\u5b57\u304c\u5165\u3063\u3066\u306a\u3044\u2192\u30b4\u30fc\u30eb\u3067\u304d\u306a\u3044\n    print(-1)\nelse: #\u300c\u6d88\u305b\u308b\u767d\u306e\u6700\u5927\u6570\u300d=\u300c\u5168\u30de\u30b9\u300d-\u300c\u9ed2\u30de\u30b9\u300d-\u300c\u6700\u77ed\u30eb\u30fc\u30c8\u300d\n    print(H*W - black - s[-1][-1])\n",
    "error_obj":"SyntaxWarning: list indices must be integers or slices, not tuple; perhaps you missed a comma?"
  },
  "s348081264":{
    "code_string":"def MI(): return map(int, input().split())\nfrom collections import deque\nH,W=MI()\n#Map=[[]*W for _ in range(H)]\nMap=[]\nwhite=0\nfor _ in range(H):\n  Map.append(list(input()))\ndef bfs():\n  dx=[-1,0,1,0]\n  dy=[0,-1,0,1]\n  INF=float('inf')\n  dist=[[INF]*W for _ in range(H)]\n  dist[0][0]=0\n  que=deque()\n  que.append((0,(0,0)))\n\n  while que:\n    d,(x,y) =que.popleft()\n    for i in range(4):\n      nx=x+dx[i]\n      ny=y+dy[i]\n      if 0<=nx<H and 0<=ny<W:\n        if Map[nx][ny]!='#':\n          if dist[nx][ny]==INF:\n            dist[nx][ny]=d+1\n            que.append((d+1,(nx,ny)))\n  return dist\nres=bfs()  \nfor i in range(H):\n  for j in range(W):\n    if Map[i][j]=='.':\n      white+=1\nans=white-res[H-1][W-1]-1\nif 0<ans<INF:\n  print(ans)\nelse:\n  print(-1)",
    "error_obj":"NameError: name 'INF' is not defined"
  },
  "s416994507":{
    "code_string":"X,Y = map(int.input().split())\nif X%Y == 0:\n  print(-1)\nelse:\n  print(X*Y-1)",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s651529454":{
    "code_string":"X, Y = map(int, input().split())\nnum = X\nl = 10**18\nwhile num <= l:\n    if num % Y != 0:\n        print(num)\n    num += X\nelse:\n    print(-1)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s144102233":{
    "code_string":"x,y = int(input())\nif x == y:\n  print(-1)\nelse:\n  for i in range(1,10000):\n    a = i * x\n    if a % y != 0:\n      print(a)\n      exit()",
    "error_obj":"ValueError: invalid literal for int() with base 10: '8 6'"
  },
  "s805612466":{
    "code_string":"def L():\n    return list(map(int, input().split()))\n\n[x,y]=L()\n\nif x%y==0:\n  print(-1)\nelse:\n  print x",
    "error_obj":"SyntaxError: Missing parentheses in call to 'print'. Did you mean print(x)?"
  },
  "s251753351":{
    "code_string":"N = int(input())\na = list(map(int, input.split()))\nb = list(map(int, input.split()))\n\nba = 0, bb = 0\nfor i in range(N):\n    if a[i] > b[i]:\n        ba += a[i] - b[i]\n    if b[i] > a[i]:\n        bb += (b[i] - a[i])\/\/2\n\nif bb >= ba:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: cannot assign to literal"
  },
  "s032212015":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\ncou = 0\nfor j,k in zip(a,b):\n  if j<k:\n    cou += (k-j)\/\/2\n  elif j>k:\n    cou -= (j-k)\nif cou=>0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s980053626":{
    "code_string":"n=int(input())\n\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\na.sort()\nb.sort()\n\n#sum(a)+2*k=sum(b)+k\n#k=(sum(a)-sum(b))\n\nk=suma-sumb\n#\n#1 1 1 6\n#2 2 2 3\n\ncnt=0\nfor i in range(n):\n    if a[i]>b[i]:\n        cnt+=b[i]-a[i]\n    elif a[i]<b[i]:\n        cnt+=(-1)*((a[i]-b[i])\/\/2)\n\nif cnt>=k:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'suma' is not defined"
  },
  "s318281166":{
    "code_string":"n,*a=map(int,open(0).read().split())\nu=d=z=r=0\nfor i,j in zip(a[:n],a[n:]):\n    if j-i>0:u+=(j-i)\/\/2*2;r+=(j-i)%2\n    elif j-i==0:z+=1\n    else:d+=[j-i]\nprint(\"Yes\" if u+2*d>=0 else \"No\")",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'list'"
  },
  "s766337354":{
    "code_string":"def main():\n    import sys\n\n    def input(): return sys.stdin.readline().rstrip()\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = 0\n    sm = 0\n    for x, y in zip(a,b):\n        tmp = x-y\n        sm += tmp\n        if tmp == -1\n            tmp = 0\n        if tmp > 0:\n            tmp *= 2\n        s += tmp\n    if s > 0 or sm > 0:\n        print('No')\n    else:\n        print('Yes')\n\n    \nif __name__ == '__main__':\n    main()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s821362462":{
    "code_string":"from collections import*\nfrom heapq import*\n(n,m),a,*q=[[*map(int,o.split())]for o in open(0)]\nt=[-1]*n\ndef r(x):\n while t[x]>=0:x=t[x]\n return x\ndef u(x,y):\n x,y=r(x),r(y)\n if x!=y:\n  if t[x]>t[y]:x,y=y,x\n  t[x]+=t[y];t[y]=x\nd=defaultdict(list)\nfor x,y in q:u(x,y)\ni=c=0;b=[];k=(n+~m)*2;p=print\nfor v in a:d[r(i)]+=v,;i+=1\nif k<1:p(0)\nelif k>n:p('Impossible')\nelse:\n for r,p in d.items():p.sort();c+=p.pop(0);b+=p;k-=1\n p(c+sum(sorted(b)[:k]))",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s008486384":{
    "code_string":"x,a,b=map(int,input().split())\nprint((x-a)%b)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s739620583":{
    "code_string":"x, a, b = map(int, input().split())\n\nxa = x - a\nxab = xa \/\/ b\nanswer = xa - (b * xab)\n\nprint(answer)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s610281146":{
    "code_string":"x=int(input())\na=int(input())\nb=int(input())\n\naf=x-a\n\nwhile af>0:\n    af-b\n\nprint(af)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s670736874":{
    "code_string":"X, A, B = map(int, input().split())\nprint((X - A) % B)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s689609772":{
    "code_string":"\ndef main():\n    x = int(input())\n    a = int(input())\n    b = int(input())\n    print((x - a) - (b * ((x - a) \/\/ b)))\n\n\nif __name__ == \"__main__\":\n    main()\ni",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s871543288":{
    "code_string":"X,A,B = map(int,input().split())\nprint((X - A)%B)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s646280238":{
    "code_string":"\nx, a, b = map(int, input().split())\n\nanswer = (x-a) % b\n\nprint(answer)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s241089764":{
    "code_string":"a,b,c = map(int,input().split())\n\nprint(a - b - (c *((a-b) \/\/ c)))",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s163959572":{
    "code_string":"import sys\n\ninput = sys.stdin.buffer.readline\nin_n = lambda: int(input())\nin_nn = lambda: map(int, input().split())\nin_s = lambda: input().rstrip().decode('utf-8')\nin_map = lambda: [s == ord('.') for s in input() if s != ord('\\n')]\n\nMOD = 10**9 + 7\nINF = 8 * 10**18\n\n\ndef main():\n\n    X, A, B = in_nn()\n    print((X - A) % B)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s057340108":{
    "code_string":"s = [int(input()) for i in range(3)]\nn = s[0]\na = n[1]\nb = n[2]\nc = n-a\nd = int(c\/b)\nprint(c-b*d)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s553100948":{
    "code_string":"X,A,B = int(input()) for i in range(3)\nprint((X-A)%B)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s360127355":{
    "code_string":"x,a,b=map(int,input().split())\nprint((x-a)%b)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s599099989":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nprint(x = a - b \/\/ c)\n",
    "error_obj":"TypeError: 'x' is an invalid keyword argument for print()"
  },
  "s840047616":{
    "code_string":"\nX=input()\nA=input()\nB=input()\nX -= A\nY = X % B\nprint(Y)",
    "error_obj":"TypeError: unsupported operand type(s) for -=: 'str' and 'str'"
  },
  "s778716119":{
    "code_string":"x,a,b = map(int,input().split())\nprint((x-a)%b)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s818383856":{
    "code_string":"import math\nx,a,b=[int(input()) for i int range(3)]\nprint((x-a)%b)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s848201308":{
    "code_string":"A = int(input())\nB = int(input())\nC = int(input())\nX = int(input())\nres = 0\nfor a500 in range(A + 1):\n    for b100 in range(B + 1):\n        for c50 in range(C + 1):\n            if a500 * 500 + b100 * 100 + c50 * 50 = X:\n                res += 1\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s663897648":{
    "code_string":"abc = [int(input()) for i in range(3)]\nx = int(input())\n\ncount = 0\n\nfor i in range(a+1):\n    for j in range(b+1):\n        for k in range(c+1):\n            if 500*i + 100*j + 50*k == x:\n                count += 1\nprint(count)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s731710858":{
    "code_string":"a,b,c,d = map(int, input().open(0).split())\nprint(sum(500*x+100*y+50*z==d for x in range(a+1) for y in range(b+1) for z in range(c+1)))",
    "error_obj":"AttributeError: 'str' object has no attribute 'open'"
  },
  "s375363140":{
    "code_string":"A = int(input())\nB = int(input())\nC = int(input())\nX = int(input())\ncount = 0\nfor a in range(A + 1):\n    for b in range(B + 1):\n        for c in range(C + 1):\n        if X == 500 * a + 100 * b + 50 * c:\n            count = count + 1\nprint(count)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s061759988":{
    "code_string":"# distutils: language=c++\n# cython: language_level=3\n# cython: boundscheck=False\n# cython: wraparound=False\n# cython: infer_types=True\n# cython: cdivision=True\n# False:Cython \u306fC\u306e\u578b\u306b\u5bfe\u3059\u308b\u9664\u7b97\u30fb\u5270\u4f59\u6f14\u7b97\u5b50\u306b\u95a2\u3059\u308b\u4ed5\u69d8\u3092\u3001(\u88ab\u6f14\u7b97\u5b50\u9593\u306e\u7b26\u53f7\u304c\u7570\u306a\u308b\u5834\u5408\u306e\u632f\u308b\u821e\u3044\u304c\u7570\u306a\u308b)Python\u306eint\u306e\u4ed5\u69d8\u306b\u5408\u308f\u305b\u3001\u9664\u7b97\u3059\u308b\u6570\u304c0\u306e\u5834\u5408\u306bZeroDivisionError\u3092\u9001\u51fa\u3057\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u3092\u884c\u308f\u305b\u308b\u3068\u3001\u901f\u5ea6\u306b 35% \u3050\u3089\u3044\u306e\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u751f\u3058\u307e\u3059\u3002 True:\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u305b\u3093\u3002\n\n\n\n# define \nctypedef long long LL\n\n# \u8aad\u307f\u8fbc\u307f\u306fpython\u5074\u3067\u884c\u3046\nimport sys\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline #\u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\ncdef LL a_int(): return int(readline())\n\ncdef LL i,j,k,_\n\n\ncdef LL A=a_int()\ncdef LL B=a_int()\ncdef LL C=a_int()\ncdef LL X=a_int()\n\n# \u611a\u76f4\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\ncdef LL a,b,c,ans\nfor a in range(A+1):\n    for b in range(B+1):\n        for c in range(C+1):\n            ans += (500*a + 100*b + 50*c == X)\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s647958261":{
    "code_string":"A,B,C,D = map(int, input().split())\nprint(sum(500*i+100*j+50*k==D for i in range(A+1) for j in range(B+1) for k in range(C+1)))",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s731276993":{
    "code_string":"A = int(input())\nB = int(input())\nC = int(input())\nN = int(input())\n\nfor a in range(A+1):\n  for b in range(B+1):\n    for c in range(C+1):\n      if a * 500 + b * 100 + c * 50 == N:\n        ans += 1\n\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s582089151":{
    "code_string":"a = input() # 500\nb = input() # 100\nc = input() # 50\nx = input() # objecive\n\ncounter = 0\nfor use_a in range(a+1):\n  if 500*use_a > x:\n    continue\n  rest = x - 500*use_a\n  for use_b in range(b+1):\n    if 100*use_b > rest:\n      continue\n    rest = rest - 100*use_b\n    for use_c in range(c+1):\n      if 50*use_c != rest:\n        continue\n      counter += 1\n\nprint(counter)\n",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s828614333":{
    "code_string":"a = [int(input()) for i in range(4)]\ncount = 0\n\nfor (i = 0; i <= a[0]; i++) :\n  for (j = 0; j <= a[1]; j++) :\n    for (k = 0; k <= a[2]; k++) :\n      sum = 500*i + 100*j + 50*k\n      if sum == a[3] :\n        count += 1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s611515798":{
    "code_string":"a=int(input())\nb=int(input())\nc=int(input())\ns=int(input())\nn=0\nfor x in range(a):\n  for y in range(b):\n    for z in range(c):\n      if 500x+100y+50z==s:\n        n=n+1\nprint(n)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s993401541":{
    "code_string":"a,b,c,x = map(int,open(0).read().split())\n\nans = 0 \ncounta = 0\n\nfor i in range(a+1):\n  for j in range(b+1):\n    for k in range(c+1):\n      ans = ((i*500 + (j*100 + (k*50)\n      if ans == x:\n        counta += 1\n      else:\n        pass\n      \nprint(counta)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s618674708":{
    "code_string":"a=int(input())\nb=int(input())\nc=int(input())\nx=int(input())\ns=50*c\nprint(len[1 for i in range(a+1) for m in range(b+1) if 0<=x-500*i+100*m<=s])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s100055710":{
    "code_string":"a, b, c, x = map(int, [input() fot z in range(4)])\n \nans = 0\n \nfor i in range(a+1):\n  for j in range(b+1):\n    for k in range(c+1):\n      if i*500 + j*100 + k*50 == x:\n        ans += 1\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s630472560":{
    "code_string":"A = int(input())\nB = int(input())\nC = int(input())\nX = int(input())\n\npat = 0\nfor a in range(A):\n\tfor b in range(B):\n    \tfor c in range(C):\n          if a*500+B*100+c*50 == X:\n            pat += 1\nprint(pat)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s091328784":{
    "code_string":"a,b,c,x=map(int,input().split())\nans=0\nfor i in range(a+1):\n    for j in range(b+1):\n        for k in range(c+1):\n            if 500*i+100*j+50*k==x:\n                ans+=1\nprint(ans)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s191663795":{
    "code_string":"A = int(input())\nB = int(input())\nC = int(input())\nX = int(input())\n\nfor a in range(0,A+1):\n  y = X-500*a\n  if y<500:\n    break\n\nfor b in range(0,B+1):\n  z = y-100*b\n  if z<100:\n    break\n\nfor c in range(0,C+1):\n  w = z-50*a\n  if w<50:\n    break\nif w != 0:\n  print(0)\nelse:\n  d = (X-y)\/500\n  e = (y-z)\/100\n  f = (z-w)\/50\n  i = -1\n  for n in range(0,d+1):\n    if B-e-5*n >= 0:\n      i=i+1\n  for m in range(0,e+5*i):\n    if C-f-2*m >= 0:\n      i=i+1\n  print(i)\n    \n  \n \n    \n    \n\n",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s284785279":{
    "code_string":"c500 = int(input)\nc100 = int(input)\nc50 = int(input)\nx = int(input)\ncount = 0\n\nfor c500_n in range(1, c500):\n  for c100_n in range(1, c100):\n    for c50_n in range(1, c50):\n      if c500_n*500 + c100_n*100 + c50_n*50 == x:\n        count += 1\n\nprint(count)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s676450017":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nx = int(input())\ncounts = 0\nfor A in range(a + 1):\n    for B in range(b + 1):\n        for C in range(c + 1):\n            if (500 * a + 100 * b + 50 * c) == X:\n                counts += 1\nprint(counts)",
    "error_obj":"NameError: name 'X' is not defined"
  },
  "s804692374":{
    "code_string":"a=int(input(\"\"))\nb=int(input(\"\"))\nc=int(input(\"\"))\nx=int(input(\"\"))\ndef countcourse(r,t,y,u):\n    cnt=0\n    for h in range(r):\n        for l in range(t):\n            for o range(y):\n                if 500*h+100*l+50*o==u:\n                    cnt+=1\n    return cnt\nprint(countcourse(a,b,c,x))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s417389209":{
    "code_string":"a=int(input())\nb=int(input())\nc=int(input())\nx=int(input())\n\nfor i in range(a+1):\n  for j in range(b+1):\n    for k in range(c+1):\n      num_500=500*i\n      num_100=100*j\n      num_50=50*k\n      if num_500+num_100+num_50==x:\n        ans+=1\n        \nprint(ans)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s420353091":{
    "code_string":"cnt = 0\nfor a in range(A+1):\n#     _a = a*500\n    for b in range(B+1):\n#         _b = b*100 + _a\n#         if _b > X: break\n        for c in range(C+1):\n#             _c = c*50 + _a + _b\n#             if _c > X: break\n#             if _c == X:\n            if (a*500 + b*100 + c*50) == X:\n                cnt+=1\nprint(cnt)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s368675320":{
    "code_string":"a , b, c , x = map(int, input().split())\ncount = 0\n\nfor i in range(a+1):\n    for j in range(b+1):\n        for k in range (c+1):\n            if i * 500 + j * 100 + k * 50 == x:\n                count += 1\n\nprint(count)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s712192602":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nx = int(input())\/50\nans=0\nfor i in range(a+1):\n    for j in range(b+1):\n        for k in range(c+1):\n            if i*10+j*2+k=x:\n                ans+=1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s876211976":{
    "code_string":"a, b, c, x = int(input()) for _ in range(4) \n\nans = [(i, j, k) for i in range(a+1) for j in range(b+1) for k in range(c+1) if 500*i+100*j+50*k == x]\nprint(len(ans))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s736765358":{
    "code_string":"a=int(input())\nb=int(input())\nc=int(input())\nx=int(input())\n\ncount=0\n\nfor i in range(a+1):\n  for j in range(b+1):\n    for k in range(c+1):\n      if 500*a+100*b+50*c=x:\n        count+=1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s669474115":{
    "code_string":"[a,b,c,d]=[int(input()) for i in range(1,4+1)]\na1 = d \/\/ 500\nb1 = d\/\/ 100\nc1 = d\/\/ 50\ncoun = 0\nfor i in range(0,min([a+1,a1+1])):\n    a = 500*i\n    if a == d:\n        coun = coun +1\n        break\n    for j in range(0,min([b+1,b1+1-5*i])):\n        s = a + 100*j\n        if s == d :\n            coun = coun +1\n            break\n        for k in range(0,min([c+1,c1+1-10*i-2*j]):\n            v = s + 50*k\n            if v == d :\n                coun = coun+1\n                break\nprint(coun)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s505381174":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nmaxn=0\nfor i in range(n):\n  maxn=max(maxn,sum(a[:i+1],b[i:]))\nprint(maxn)",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s476748213":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=list(map(int, input().split()))\nans = 0\n        for i in range(n):\n                        ans = max(ans,sum(a[:i+1])+sum(b[i:n]))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s483042981":{
    "code_string":"n = int(input())\nl = []\nfor _ in range(3):\n    a = list(map(int,input().split()))\n    l.append(a)\n\nif n == 1:\n    print(l[0][0]+l[1][0])\n    exit()\n    \nm1 = []\nm2 = []\nm1.append(l[0][0])\nm2.append(l[1][0])\nfor i in range(1,n):\n    m1.append(m1[i-1]+l[0][i])\n    m2.append(m2[i-1]+l[1][i])\n\nans = [0]*n\nfor j in range(n):\n    ans[j] = m1[j]+(m2[n-1]-m2[j-1])\n\nprint(max(ans))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s523248122":{
    "code_string":"n  = int(input())\n\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nans = []\nfor i in range(n):\n  ans.append(sum(a[0:i+1] + sum(b[i:n]))\n\nprint(max(ans))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s383257647":{
    "code_string":"import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nfrom itertools import accumulate\nfrom itertools import chain\nfrom collections import deque\ndef main():\n    n = int(input())\n    a1 = chain(tuple([0]), tuple(map(int, input().split())))\n    a2 = chain(tuple([0]), tuple(map(int, input().split())))\n\n    a1a = tuple(accumulate(a1))\n    a2a = tuple(accumulate(a2))\n    scores = deque()\n    for i1 in range(1, n + 1):\n        scores.append([i1] + a2a[n] - a2a[i1 - 1])\n    r = max(scores)\n    print(r)\nif __name__ == '__main__':\n    main()",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s680920790":{
    "code_string":"N = int(input())\ncandies_i = list(map(int, input().split()))\ncandies_j = list(map(int, input().split()))\n\nl = []\ncount = 0\n\nfor i in range(N):\n    count+=1\n    total_li = sum(candies_i[:count])\n    total_lj = sum(candies_j[+=1:])\n    total = total_li + total_lj\n    l.append(total)\n\nprint(max(l))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s896293907":{
    "code_string":"N = int(input())\na = [list(map(int,input().split())) for i in range(2)]\ns = 0; t = 0; u = 0; v = 0\nfor i in range(0,N):\n    for j in range(0,i+1):\n        s += a[0][j]\n        t += a[1][j]\n        u += a[0][N-j-1]\n        v += a[1][N-j-1]\n\tif s>=t and v>=u:\n        print(s+v)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s344351427":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nlist1 = []\name = A[0]\nfor i in range(N-1):\n  list1.append(sum(A[:i+1])+sum(B[i:]))\n  \nif list1 = []:\n  print(A[0]+b[0])\nelse:\n  print(max(list1))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s965412390":{
    "code_string":"N= int(input())\nA1=list(map(int,input().split()))\nA2=list(map(int,input().split()))\nans=[]\n\nif N==1:\n    print(A1[0]+A2[0])\n    exit()\nelse:\n    for i in range(N):\n        ansA1=0\n        ansA2=0\n        for j in range(i):\n            ansA1+=A1[j]\n        for k in range(j,N):\n            ansA2+=A2[k]\n        ans1=ansA1+ansA2\n        ans.append(ans1)\n    print(max(ans))",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s360122869":{
    "code_string":"class WeightedUnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n        self.weight = [0] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            px = self.find(self.parents[x])\n            self.weight[x] += self.weight[self.parents[x]]\n            self.parents[x] = px\n            return px\n\n    def union(self, x, y, w):\n        w += self.weight[x] - self.weight[y]\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.parents[x] > self.parents[y]:\n            x, y, w = y, x, -w\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n        self.weight[y] = w\n        return\n\n    def weig(self, x):\n        self.find(x)\n        return self.weight[x]\n\n    def diff(self, x, y):\n        return self.weigh(y) - self.weigh(x)\n\n(n, m), *q = [[*map(int, o.split())] for o in open(0)]\nUF = WeightedUnionFind(n + 1)\nfor l, r, d in q:\n    if UF.same(l, r):\n        if d != abs(UF.diff(l, r)):\n            print(\"No\"); exit()\n    else:\n        UF.union(l, r, d)\nprint(\"Yes\")",
    "error_obj":"AttributeError: 'WeightedUnionFind' object has no attribute 'same'"
  },
  "s643980021":{
    "code_string":"N, M = map(int, input().split())\nroot = [-10 ** 10] * N\nfor i in range(M):\n  l, r, d = map(int, input().split())\n  if (root[l] < -10 ** 9 - 1) and (root[r] < -10 ** 9 - 1):\n    root[l] = 0\n    root[r] = d\n  elif (root[l] < -10 ** 9 - 1):\n    root[l] = root[r] - d\n  elif (root[r] < -10 ** 9 - 1):\n    root[r] = root[l] + d\n  else:\n    if root[l] + d != root[r]:\n      print(\"No\")\n      quit()\n\nfor i in range(N):\n  if root[i] < -10 ** 9 - 1:\n    root[i] = 0\n    \nx = min(root)\ny = max(root)\nif y - x > 10 ** 9:\n  print(\"No\")\n  quit()\n    \nprint(\"Yes\")      \n   \n  ",
    "error_obj":"IndexError: list index out of range"
  },
  "s940053601":{
    "code_string":"n, m = map(int, input().split())\npar = [i for i in range(n)]\ndiff = [0]*n\n\ndef find(x):\n    if par[x] == x:\n        return x, 0\n    else:\n        a, b = find(par[x])\n        par[x] = a\n        diff[x] += b\n        return a, diff[x]\n\n\ndef unite(x,y,z):\n    s, ws = find(x)\n    t, wt = find(y)\n    #print(ws, wt)\n    if s==t:\n        if ws - wt == z:\n            pass\n        else:\n            print('No')\n            exit(0)\n    else:\n        par[s] = t\n        diff[s] = z\n\nunites =[]\nfor _ in range(m):\n    l,r,d = map(int, input().split())\n    unites.append((l,r,d))\n    unite(l-1,r-1,d)\nfor x, y, z in unites:\n    unites(x-1, y-1, d)\n\nprint('Yes')",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s196928315":{
    "code_string":"# --- coding: utf-8 ---\n\na, b = map(int, input().split())\nif a * b % 2 = 0:\n  return \"Even\"\nelse:\n  return \"Odd\"",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s579701705":{
    "code_string":"input_list = input().split(' ')\na = int(input_list[0])\nb = int(input_list[0])\n\nN = a*b\n\nif N%2==0:\n    print('Even')\nelse:\n    print('Odd')\n\nreturn 0",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s772857863":{
    "code_string":"# coding: -*- utf-8 -*-\n\nin_str = input()\na, b = in_str.split(\" \")\nif a*b % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"SyntaxError: encoding problem: -"
  },
  "s289039951":{
    "code_string":"a,b = input().split()\n\nif (a*b % 2 == 0):\n  print(\"Even\")\nelse:\n  print('Odd')",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s772440249":{
    "code_string":"a = int(input())\n\nb = int(input())\n\nseki = a * b\n\nif seki % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s443169362":{
    "code_string":"print('Odd' if eval(input().replace(\"\",'*')%2) else 'Even')",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s520839065":{
    "code_string":"a,b = map(int,input(),split())\nif a*b % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s290644928":{
    "code_string":"a,b = map(int, input().split())\nif a*b \/\/ 2 == 0:\n  print('Even')\n  else:\n  \tprint('Odd')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s883641117":{
    "code_string":"\uff56a,b = [int(x) for x in input().split()]\n\nif (a*b) % 2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s598428054":{
    "code_string":"a = list(map(int,input().split()))\nif a[0]%2==0 || a[1]%2==0 :\n  print(\"Even\")\nelse:\n  print(\"Odd\")\t",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s390963453":{
    "code_string":"a,b = map(int, input(),split())\n\nif (a*b)%2 == 0:\n  print(\"Even\")\n  \nelse:\n  print(\"Odd\")",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s657182197":{
    "code_string":"a = int(input())\nb = int(input())\nc = a*b\nif(c%2==0):\n    print(\"Even\")\nelif(c%2==1):\n    print(\"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s725685027":{
    "code_string":"a, b = map(int, input().split())\nreturn 'Even' if a * b % 2 == 0 else 'Odd'",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s195149224":{
    "code_string":"a, b = int(input()),int(input())\n \nans = a * b\n \nif ans % 2 == 1:\n  print(\"Odd\")\nelse:\n  print(\"Even\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s442566014":{
    "code_string":"a, b = int(input().split())\nif a % b == 0:\n  print(\"odd\")\nelse:\n  print(\"even\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s068764178":{
    "code_string":"# \u6b63\u306e\u6574\u6570a\u3068b\n\n# a\u3068b\u306e\u7a4d\u304c\u5076\u6570\u304b\u5947\u6570\u304b\u5224\u5225\u3059\u308b\na = int( input() )\nb = int( input() )\n\n# \u7a4d\u304c\u5947\u6570\u306a\u3089'Odd'\u3001\u5076\u6570\u306a\u3089'Even'\u3068\u51fa\u529b\u3059\u308b\nif int(a * b \/ 2) == int(a * b \/ 2 + 0.5):\n    print('even')\nelse:\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s392708450":{
    "code_string":"n, m = (int(x) for x in input().split())\nif int((n+m)\/2)==n+m:\n  print(Even)\nelse:\n  print(Odd)",
    "error_obj":"NameError: name 'Odd' is not defined"
  },
  "s169065749":{
    "code_string":"a = int(input())\nb= int(input())\nx = a*b\nif x%2==0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n\n    ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s059783494":{
    "code_string":"# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nb, c = map(int, input().split())\n\nif B * C % 2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s478838259":{
    "code_string":"a=int(input())\nb=int(input())\n\nif (a*b)%2==0:\n    print(\"Even\")\n\nelse:\n    print(\"Odd\")\n ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s411844802":{
    "code_string":"a, b = map(int, input())\n\nc = a*b\n\nif c%2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s290032123":{
    "code_string":"a, b = map(int.input().split())\n\nanswer = a * b\n\nif answer % == 0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s289168680":{
    "code_string":"a,b=map(int,input().replace(\" \"))\nprint([\"Even\",\"Odd\"][(a*b)%2])",
    "error_obj":"TypeError: replace expected at least 2 arguments, got 1"
  },
  "s389580695":{
    "code_string":"a = int(input())\nb = int(input())\nif a*b%2 ==0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s856764515":{
    "code_string":"a , b = map(int,input().spilit())\n\nx =  a * b \n\nif x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"odd\")\n\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'spilit'"
  },
  "s591878849":{
    "code_string":"N = int(input())\ntm_pos = [list(map(int, input().split())) for i in range(N)]\nfor i in tm_pos:\n    if i[0] < i[1] + i[2] or i[0] % 2 != (i[1] + i[2]) % 2:\n        print('No')\n        exit()\nprint('Yes')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s487207082":{
    "code_string":"x , y = map(int(input().split()))\n \nif (x * y )%2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s547249457":{
    "code_string":"a = int(input())\nb = int(input())\n\nX = a*b\nif X%2 ==1:\n    print('Odd')\nelse:\n    print('Even')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s468824221":{
    "code_string":"# coding= utf-8\nrab=input(\"\")\nab=rab.split(\" \")\na=int(rab[0])\nb=int(rab[1])\nif (a*b)%2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s120445089":{
    "code_string":"a, b = map(int, input().split())\nprint(`Even` if a*b % 2 = 0 else `Odd`)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s320037483":{
    "code_string":"if (a * b & 1 == 1):\n    print('Odd')\nelse:\n    print('Even')",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s358716558":{
    "code_string":"a = int(input())\nb = int(input())\nprint('Odd' if a%2!=0 and b%2!=0 else 'Even')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s378329966":{
    "code_string":"a, b = map(int, input().split())  \nc = a*b\nif c\/2 = 0\nprint(\"Even\")\nelif c\/2 = 1\nprint(\"Odd\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s840603323":{
    "code_string":"import sys\n\nargs = sys.argv\n\n# print(args[0])\n\nx1 = int(args[1])\nx2 = int(args[2])\n\nif (x1 * x2) % 2 == 0 :\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s280338626":{
    "code_string":"a,b = map(int,input().split()) \nc=\n \nif (a*b)%2==0:\n  print(\"even\")\nelse:\n  print(\"odd\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s234411303":{
    "code_string":"a, b = amp(int, input().split())\nc = a * b\nif(c % 2):\n    print(\"Odd\")\nelse:\n    print(\"Even\")",
    "error_obj":"NameError: name 'amp' is not defined"
  },
  "s732730974":{
    "code_string":"a , b = map(int , input())\nif a * b % 2 == 1:\n    print(\"Odd\")\nelif a * b % 2 == 0:\n    print(\"Even\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s840419345":{
    "code_string":"result = a*b\nif result%2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s674205897":{
    "code_string":"# \u5165\u529b\na = int(input())\nb = int(input())\n\n# \u51e6\u7406\nif a * b % 2 == 0:\n    answer = \"Even\"\nelse:\n    answer = \"Odd\"\n\nprint(answer)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s513175038":{
    "code_string":"a = int (input())\nb = int (input())\n\nif a*b % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s505262376":{
    "code_string":"a =int(input())\nb =int(input())\nif a & 2 ==0 or b % 2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s546673786":{
    "code_string":"mycode = r'''\n# distutils: language=c++\n# cython: language_level=3\n# cython: boundscheck=False\n# cython: wraparound=False\n# cython: infer_types=True\n# cython: cdivision=True\n\n# define \nctypedef long long LL\n\n# \u8aad\u307f\u8fbc\u307f\u306fpython\u5074\u3067\u884c\u3046\nimport sys\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline #\u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\n\ndef ints(): return np.fromstring(readline(), sep=' ', dtype=np.int64)\n\ncdef LL a,b\na,b=ints()\nprint('Odd' if (a*b)&1 else 'Even')\n'''\n\nimport sys\nif sys.argv[-1] == 'ONLINE_JUDGE':  # \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\n    import os\n    with open('mycode.pyx', 'w') as f:\n        f.write(mycode)\n    os.system('cythonize -i -3 -b mycode.pyx')\n\nimport mycode\n",
    "error_obj":"ModuleNotFoundError: No module named 'mycode'"
  },
  "s129333304":{
    "code_string":"x = split().input()\ny = int(x[0])*int(x[1])\nif y%2 = 0:\n  print(Even)\nelse:\n  print(Odd)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s046117920":{
    "code_string":"num = input().split(' ')\na = num[0]\nb = num[1]\nif (a*b)%2 == 0:\n  print('Even')\nelse:\n  print('Odd')",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s116681044":{
    "code_string":"a,b=map(int,input().split(''))\nm=a*b\nif m%2==1:\n  print('Odd')\nelse:\n  print('Even')",
    "error_obj":"ValueError: empty separator"
  },
  "s142047522":{
    "code_string":"a.b =map(int,input().split())\nprint(\"Odd\" if (a*b)%2!=0 else \"Even\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s718775082":{
    "code_string":"a,b=input(int())\nif (a*b)%2==0:\n    print(\"\u5076\u6570\")\nelse:\n    print(\"\u5947\u6570\")",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s944431149":{
    "code_string":"# -*- coding: utf-8 -*-\n\na,b=map(int,input().split())\n \nif a*b%2=0:\n\tprint('Even')\nelse:\n  \tprint('Odd')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s120387921":{
    "code_string":"a, b = input().split()\na = int(a)\nb = int(b)\nprint('Even' if a * b % == 0 else 'Odd')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s582502141":{
    "code_string":"x = imput().split()\ny = int(x[0])*int(x[1])\nif y % 2:\n  print(\"Odd\")\nelse:\n  print(\"Even\")",
    "error_obj":"NameError: name 'imput' is not defined"
  },
  "s243134695":{
    "code_string":"a = input()\nb = input()\n\nmulti = int(a) * int(b)\n\nif multi %2 == 0:\n    print(\"\u7b54\u3048:Even\")\nelse:\n    print(\"\u7b54\u3048:Odd\")\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s368792161":{
    "code_string":"a, b = [int(e) for e in raw_input().split()]\nif a * b % 2 == 0:\n  print 'Even'\nelse:\n  print 'Odd'",
    "error_obj":"SyntaxError: Missing parentheses in call to 'print'. Did you mean print('Even')?"
  },
  "s178562806":{
    "code_string":"n = (a * b) % 2\nif n == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s347599846":{
    "code_string":"a,b = map(int, input().split())\nif a*b\/2 == 0:\n    print(Even)\nelse:\n    print(Odd)",
    "error_obj":"NameError: name 'Odd' is not defined"
  },
  "s537416264":{
    "code_string":"int main (){\nint a ,b;\ncin >>a > >b;\nint c = a * b ;\nif ( c %2 == 0) puts (\" Even \");\nelse puts (\" Odd \");\nreturn 0;\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s901491210":{
    "code_string":"a = 20\nb = map(int, input().split())\nprint(\"Odd\" if a % b == 0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s246170856":{
    "code_string":"a,b = map(int,input())\nif a * b % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s830187321":{
    "code_string":"a = int(input())\nb = int(input())\nprint(a)\nprint(b)\nif a*b % 2 == 0:\n  print(\"Couple\")\nelse:\n  print(\"Odd\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s404317122":{
    "code_string":"a, b = map(imt, input().split())\nif a * b % 2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")\n",
    "error_obj":"NameError: name 'imt' is not defined"
  },
  "s940977583":{
    "code_string":"a, b = input().split(' ')\nif int(a) * int(b) % 2 == 0:\n    print('Even')\n    continue\nprint('Odd')",
    "error_obj":"SyntaxError: 'continue' not properly in loop"
  },
  "s678141019":{
    "code_string":"a, b = map(int, input().split())\nif a*b % 2 == 0:\n  print('Even')\nelse:\n  print('Odd)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s038515133":{
    "code_string":"a = int(input(\"\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"))\nb = int(input(\"\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"))\nc = a*b\nif c % 2 ==0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s298837844":{
    "code_string":"a,b=map(int,input().split())\nif a*b%2=0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s086356018":{
    "code_string":"a = int(input())\nb = int(input())\nif (a*b)%2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s298956896":{
    "code_string":"a, b = map(int, input().split())\nprint(\"Even\" if a*b % 2 == else \"Odd\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s468152487":{
    "code_string":"# Product\n# \u30b7\u30ab\u306eAtCoDeer\u304f\u3093\u306f\u4e8c\u3064\u306e\u6b63\u6574\u6570a,b\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002a\u3068b\u306e\u5e2d\u304c\u5076\u6570\u304b\u5947\u6570\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# 1<a,b<10000\n# a.b\u306f\u6574\u6570\n\na = int(input())\nb = int(input())\n\n# print(a,b,x)\n\n# \u7a4d\u304c\u5947\u6570\u306a\u3089\"Odd\"\u3001\u5076\u6570\u306a\u3089\"Even\"\u3068\nif (a * b) % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s712983167":{
    "code_string":"a, b = map(int .input().split())\nif (a*b) % 2:\n  print(\"Odd\")\nelse:\n  print(\"Even\")",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s008481529":{
    "code_string":"a, b = map(int, input().split())\nif (a*b%2):\n\tprintf(\"Even\")\nelse:\n\tprintf(\"Odd\")",
    "error_obj":"NameError: name 'printf' is not defined"
  },
  "s246314500":{
    "code_string":"# \u6574\u6570\u306e\u5165\u529b\na, b = input(), input()\n# \u4e8c\u3064\u306e\u6570\u3092\u639b\u3051\u30662\u3067\u5272\u3063\u305f\u3068\u304d\u306e\u4f59\u308a\nc = (a * b) % 2\nif c != 0:\n    print('Odd')\nelse:\n    print('Evev')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s819362893":{
    "code_string":"a=int(input())\nb=int(input())\nif a*b%2==0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s535082032":{
    "code_string":"a = int(input())\nb = int(input())\nif a * b % 2 == 0:\n  print(\"Even\")\nelse:\n  print(\"odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s147836090":{
    "code_string":"input_line = int(input().split())\n\nresult = input_line[0]*input_line[1]\n \nif result % 2 == 0:\n  print('Even')\nelse:\n  print('Odd')",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s464950698":{
    "code_string":"a = input()\n\uff42 = input()\nc =  int(a) * int(b)\n\nif c%2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s434766458":{
    "code_string":"a = int(input())\nb = int(input())\n\nif a * b % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s704388964":{
    "code_string":"a = int(input())\nb = int(input())\n\nprint(\"Even\" if a*b % 2 == 0 else \"Odd\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s353296080":{
    "code_string":"x = input().split()\ny = int(x[0])*int(x[1])\nif y%2 = 1:\n  print(\"Odd\")\nelse:\n  print(\"Even\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s690579133":{
    "code_string":"a,b = map(int, input().strip())\nif a * b % 2 == 0:\n  print('Even')\nelse:\n  print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s789466235":{
    "code_string":"a,b = map(int, input().split())\n\nif num (a*b) % 2 == 0:\n  print(Even)\n  \nelse:\n  print(Odd)",
    "error_obj":"NameError: name 'num' is not defined"
  },
  "s821255126":{
    "code_string":"a,b= map(int(input()).split())\nif (a*b)%2==0:\n  print(\"Even\")\nelse :\n  print(\"Odd\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s852046339":{
    "code_string":"a,b=map(int,input().split())\nif a*b%2==0:\n  print(Even)\nelse:\n  print(Odd)",
    "error_obj":"NameError: name 'Even' is not defined"
  },
  "s664518325":{
    "code_string":"if (a * b) % 2 == 1:\n    print(\"Odd\")\nelse:\n    print(\"Even\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s286814441":{
    "code_string":"a = int(input())\nb = int(input())\n\nif (a*b)%2 == 0 :\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s858069449":{
    "code_string":"a=int(input())*int(input())\nprint(\"Even\" if a%2 == 0 else \"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s607965750":{
    "code_string":"a = int(input())\nb = int(input())\n\nn = a*b\n\nif n%2 == 0:\n  print('Even')\nelse :\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s109011345":{
    "code_string":"a = int(input())\nb = int(input())\n\nx = a * b\n\nif x % 2 == 0:\n    answer = 'Even'\nelif x % 2 == 1:\n    answer = 'Odd'\n\nprint(answer)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s258717545":{
    "code_string":"def main():\n    a, b = map(int, input().split())\n    print('Odd') if a*B % 2 != 0 else print('Even')\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s081173427":{
    "code_string":"a,b=map(int(input().split()))\n\nif (a*b)%2==0:\n    print(\"Even\")\n\nelse:\n    print(\"Odd\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s770232773":{
    "code_string":"a,b = map(int,input().split())\nif a*b%2 = 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s188215800":{
    "code_string":"a = int(input())\nb = int(input())\n\nif (a * b) % 2 == 0:\n    print(\"Even\")\nelif (a * b) % 2 != 0:\n    print(\"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s011321251":{
    "code_string":"a,b = int(input().rstrip().split())\n\nc = a * b\n\nd = c \/ 2\n\nif(d==0):\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s455697165":{
    "code_string":"# 2\u3064\u306e\u6574\u6570\u306e\u53d6\u5f97\na,b = map(int,input().split())\n \n# a\u3082\u3057\u304f\u306fb\u304c\u5076\u6570\u3067\u3042\u308b\u304b\u3092\u3082\u3068\u306b\u7d50\u679c\u3092\u51fa\u529b\nif (a % 2) = 0 or (b % 2) = 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s984608016":{
    "code_string":"a=input()\nb=input()\n\nint(a)\nint(b)\n\nif a*b%2 ==0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s241594171":{
    "code_string":"a,b=map(int,input().split())\nprint(\"Even\" if a*b % == 0 else \"Odd\") ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s820565913":{
    "code_string":"z = a * b\nif (z % 2) == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n\n    ",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s005242553":{
    "code_string":"a, b = map(int, input().split())\nmult = a * b\nif mult % 2 = 0:\n  print('Even')\nelse:\n  print('Odd')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s961636997":{
    "code_string":"a,b=map(int,input().split())\nif a*b %2=0:\n\tprint(\"Even\")\nelse:\n\tprint(\"Odd\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s146067219":{
    "code_string":"A, B = map(int, input().split())\n\nif (A*B) % 2 == 0:\n  print(Even)\nelse:\n  print(Odd)",
    "error_obj":"NameError: name 'Even' is not defined"
  },
  "s895567135":{
    "code_string":"\ndef product(a, b):\n    return a * b\n\ndef judge(num):\n    if num % 2 == 0:\n        print('Even')\n    else:\n        print('Odd')\n\na, b = map(int, input())\n\njudge(product(a, b))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s538631327":{
    "code_string":"a = int(input())\nb = int(input())\n \nif a * b % 2 == 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s866498021":{
    "code_string":"print(['Even','Odd'][max(0,sum(map(lambda x:int(x)%2,input()))-1)])",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s042001980":{
    "code_string":"a, b = map(int, input().split())\ns = a * b\nif s % 2 == 0:\n  return \"Even\"\nelse:\n  return \"Odd\"",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s265223057":{
    "code_string":"a = int(input())\nb = int(input())\nif ( a * b ) % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s838998751":{
    "code_string":"a,b = map(int,input().split()) \nif (a * b) \/ 2 %= 0:\n  print(\"Even\")\nelse:\n  print(\"Odd\")\n\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s662193769":{
    "code_string":"a = int(input())\nb = int(input())\n\nif (a * b) % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s431391823":{
    "code_string":"# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\na, b = map(int,input().split())\nc = (a*b)%2\nif c = 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s314654443":{
    "code_string":"\na = int(input())\n\n\n\nb= int(input())\n\nif (a*b)%2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s327986637":{
    "code_string":"x,y = map(int,input().split())\nz = int(str(x)+str(y))\nfor i in range(int(z**(1\/2))+1):\n  if i**2 = z:\n    print(\"Yes\")\n    exit()\nprint(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s443213529":{
    "code_string":"a,b = input().split()\nc = a+b\nimport math\nif int(math.sqrt(c)) ** 2 == c:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: must be real number, not str"
  },
  "s189085111":{
    "code_string":"import numpy as np\na,b=input().split()\nc=a+b\nd=np.sqrt(c)\nif isinstance(d,int):\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: ufunc 'sqrt' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
  },
  "s477135656":{
    "code_string":"a, b = input().split()\nnum = int(a+b)\n\nfor i in range(1, 101):\n  if num == i*i:\n    print('Yes')\n    return\n    \nprint('No')",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s362774206":{
    "code_string":"a,b = map(str,input().split())\n\nc = int(a + b)\n\nimport math\n\nif math.sprt(c).isdigit() == True:\n  print(\"Yes\")\n  \nelse:\n  print(\"No\")\n\n\n",
    "error_obj":"AttributeError: module 'math' has no attribute 'sprt'"
  },
  "s553405015":{
    "code_string":"\nlist=input().split()\n\nnum=int(list[0]+list[1])\n\nnum_squrt=math.sqrt(num)\n\nif num_squrt.is_integer()==True:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s653423586":{
    "code_string":"a,b = input().split()\n\nS = int(a+b)\n\nif math.sqrt(S).is_integer() == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s527548768":{
    "code_string":"if str(int(str(map(int,input().split())[0]) + str(map(int,input().split())[1]))**0.5).split(\".\")[1:][0] == \"0\":\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s044832642":{
    "code_string":"import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef i(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\n\na = l()\nans = \" \".join(a)\nfor i in range(1,101):\n    if ans == i**2:\n        print(\"Yes\")\n        sys.exit()\n\nprint(\"No\")\n",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s436974473":{
    "code_string":"a=str(input())\nb=str(input())\n\nn=a+b\n \nfor i in range(int(n)\/\/2):\n  if i**2==int(n):\n    ans=\"Yes\"\n    break\n  else:\n    ans=\"No\"\nprint(ans)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s437553373":{
    "code_string":"heck = int(input().replace(\" \",\"\"))\nprint(\"Yes\" if (check**0.5)%1==0 else \"No\" )",
    "error_obj":"NameError: name 'check' is not defined"
  },
  "s216580066":{
    "code_string":"ab=int(input().replace(' ',''))\nprint(['No','Yes'][any(i**2==ab for i in range(ab))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s787756503":{
    "code_string":"a = int(list(input().split()).join(''))\nprint('Yes' if int(a**.5) == (a**.5) else 'No')\n",
    "error_obj":"AttributeError: 'list' object has no attribute 'join'"
  },
  "s916898551":{
    "code_string":"a, b = map(int, input().split)\nif isinstance((10 * a + b)^(1\/2), int) == True:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s375134397":{
    "code_string":"a, b = map(str, input().split())\n\nc = a + b\nc = int(c)\n\nfor i in range(400)[1:]:\n    if c = i**2:\n        print('Yes')\n        exit()\n\nprint('No')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s433519038":{
    "code_string":"a,b=map(int,input().split())\ns=0\ns += b\ns += a*(10**len(b))\nfor i in range(320):\n    if s==i*i:\n        print(i)\n        exit()\n",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s623040542":{
    "code_string":"a,b=map(input().split())\nc=a+b\nc=int(c)**0.5\nif isinstance(c, int)==True:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s059819196":{
    "code_string":"a,b=input()\nab=int(\"a\"+\"b\")\nans=0\nfor i in range(350):\n\tif int(ab**(1\/2))==i:\n      print(\"Yes\")\n      ans+=1\n      quit()\nif ans==0:\n  print(\"No\")\n    ",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s082441496":{
    "code_string":"a, b = map(int,input().split())\nif str(int(str(a) + str(b))**0.5) % 1 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s577249999":{
    "code_string":"a = input()\nb = input()\na += b\ncan = 0\nfor i in range(1,100):\n  if(i*i == int(a)):\n    can = 1\nif(can == 1):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s392360742":{
    "code_string":"a, b = map(str, input().split())\nres = int(a+b)\nans = \"No\"\nfor i in range(res**0.5):\n    if i**2 == res:\n        ans = \"Yes\"\n        break\nprint(ans)",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s672924063":{
    "code_string":"a,b=imput().split()\na=int(a+b)\nfor i in range(1,320):\n  if i**2==a:\n    print('Yes')\n    exit(0)\nprint('No')",
    "error_obj":"NameError: name 'imput' is not defined"
  },
  "s275935691":{
    "code_string":"# import math\n# import statistics\n#a=input()\n#b,c=int(input()),int(input())\n# c=[]\n# for i in a:\n#    c.append(i)\ne1,e2 = map(str,input().split())\n#K = input()\n# f = list(map(int,input().split()))\n#g = [input() for _ in range(a)]\ncount=0\na=e1+e2\nfor i in range(int(a)):\n\tif a\/i==i:\n\t\tcount+=1\nif count>0:\n\tprint('Yes')\nelse:\n\tprint('No')",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'str' and 'int'"
  },
  "s746663374":{
    "code_string":"import math\na,b= input().split()\ngosei = int(a+b)\ntekito = math.ceil(mast.sqrt(100100))\nr = 'No'\nfor i in range(1,tekito+1):\n  if i**2 == gosei:\n    r = 'Yes'\n    break\nprint(r)",
    "error_obj":"NameError: name 'mast' is not defined"
  },
  "s751113696":{
    "code_string":"a,b=map(str,input().split())\nn=int(a+b)\nfor i in range(0,110):\n  if i**2==n:\n    print('Yes')\n\texit()\nprint('No')\n  ",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s283596970":{
    "code_string":"N = int(input().remove(\" \", \"\"))\n\nprint(\"Yes\" if round(N**0.5)**2 == N else \"No\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'remove'"
  },
  "s290130149":{
    "code_string":"N=int(input())\nP=[(0,0,0)]*(N+1)\n\nD=[0]*(N+1)\n\nP[0]=(0,0,0)\nD[0]=1\nfor i in range(1,N+1):\n    t,x,y=map(int,input().split())\n    dt=t-P[i-1][0]\n    dx=abs(x-P[i-1][1])\n    dy=abs(y-P[i-1][2])\n    if dt < (dx+dy): \u6642\u9593<\u79fb\u52d5\u8ddd\u96e2\n        print('No')\n        break\n    if ((dx+dy)==0 and dt%2!=0):\u79fb\u52d5\u3057\u306a\u3044\u5834\u5408\u306b\u306f\u6642\u9593\u306fmod2==0\n        print('No')\n        break\n    #if (dt-(dx+dy))%2==0 or dt%(dx+dy)==0:\n    if (dt-(dx+dy))%2!=0:\n        print('No')\n        break\n    \n    P[i]=(t,x,y)\nelse:\n    print('Yes')    ",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s134059408":{
    "code_string":"N = int(input())\nxy=[]\ntry :\n  while True:\n    t = input().split()\n    t = list(map(int,t))\n    xy.append(t)\nexcept EOFError:\n  pass\nloc = [0,0]\ntime = 0\nfor i in range(N+1):\n  a = xy[i]\n  time = a[0]-time\n  dis = abs(loc[0]-a[1])+abs(loc[1]-a[2])\n  if (time-dis)<0 :\n    print(\"No\")\n    break\n  elif (time-dis)%2 == 0:\n    loc = [a[1],a[2]]\n    \n  else :\n    print(\"No\")\n    break\nelse :\n  print(\"Yes\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s999654117":{
    "code_string":"N=int(input())\nflag='Yes'\np,q,r=0,0,0\nfor _ in range(N):\n  t,x,y=map(int,input().split())\n  a=x+y-p-q\n  e=t-r\n  if a<=e:\n    if (e-a)%2!=0:\n      flag='No'\n      break\n  else:\n    flag='No'\n    break\n  p=x\n  q=y\n  r=t\nprint(flag)N=int(input())\nflag='Yes'\np,q,r=0,0,0\nfor _ in range(N):\n  t,x,y=map(int,input().split())\n  a=x+y-p-q\n  e=t-r\n  if a<=e:\n    if (e-a)%2!=0:\n      flag='No'\n      break\n  else:\n    flag='No'\n    break\n  p=x\n  q=y\n  r=t\nprint(flag)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s911197770":{
    "code_string":"dt = 0\ndx = 0\ndy = 0\nfor i in range(N):\n    if abs(txy[i][1]-dx)+abs(txy[i][2]-dy) > txy[i][0]-dt or (txy[i][1]+txy[i][2])%2 != txy[i][0]%2:\n        print(\"No\")\n        break\n    dt = txy[i][0]\n    dx = txy[i][1]\n    dy = txy[i][2]\nelse:\n    print(\"Yes\")",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s226599608":{
    "code_string":"n=int(input())\narr=[[0,0,0]+[list(map(int,input().split())) for _ in range(n)]]\nfor i in range(n):\n  t1,x1,y2=arr[i]\n  t2,x2,y2=arr[i+1]\n  if abs(x1-x2)+abs(y1-y2)>t1+t2:\n    print('No')\n    exit()\n  if (abs(x1-x2)+abs(y1-y2))%2!=(t1+t2)%2:\n    print('No')\n    exit()\nprint('Yes')",
    "error_obj":"ValueError: too many values to unpack (expected 3)"
  },
  "s238097840":{
    "code_string":"N = int(input())\nt=0\nx=0\ny=0\nfor i in range(N)\n    nt, nx, ny = map(int, input().split())\n    km = abs(nx-x) + abs(ny-y)\n    if km > (nt-t) or (km - (nt-t)) % 2 == 1:\n        print(\"No\")\n        exit(0)\n    t, x, y = nt, nx, ny\nprint(\"Yes\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s795933832":{
    "code_string":"n = int(input())\nfound = True\nfor _ in range(n):\n  t,x,y = map(int,input().split())\n  if t==0:\n  \tif x==0 and y==0:\n      found = False\n  else:\n    if t%(x+y) != 0:\n      found = False\nif found:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s020475202":{
    "code_string":"N = int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\n\npT, pX, pY = 0, 0, 0\n\nfor i in range(N):\n    cT, cX, cY = l[i]\n    mvT, mvX, mvY = abs(cT-pT), abs(cX-pX), abs(cY-pY)\n    \n    dam = mvT - (mvX+mvY)\n\n    if dam %2 == 1 or dam < 0:\n        print('No')\n        exit()\n\n    pT, pX, pY = l[i]\n\nprint('Yes')\n\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s406103079":{
    "code_string":"N = int(input())\nT = [[0,0,0]]+[map(int, input().split()) for _ in range(N)]\nflag = 'Yes'\ni = 0\nwhile flag=='Yes' and i<len(T)-1:\n    dis = abs(T[i][2]-T[i][2])+abs(T[i][1]-T[i][1])\n    _t = T[i][0]-T[i][0]\n    if dis > _t or _t%2 != dis%2:\n        flag = 'No'\n    i += 1        \nprint(flag)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s841680686":{
    "code_string":"using namespace std;\n\nint main() {\n    int N;\n    int t[110000], x[110000], y[110000];\n    cin >> N;\n    t[0] = x[0] = y[0] = 0;  \/\/ \u521d\u671f\u72b6\u614b\n    for (int i = 0; i < N; ++i) cin >> t[i+1] >> x[i+1] >> y[i+1];  \/\/ 1-index \u306b\u3057\u3066\u304a\u304f\n\n    bool can = true;\n    for (int i = 0; i < N; ++i) {\n        int dt = t[i+1] - t[i];\n        int dist = abs(x[i+1] - x[i]) + abs(y[i+1] - y[i]);\n        if (dt < dist) can = false;\n        if (dist % 2 != dt % 2) can = false;  \/\/ dist \u3068 dt \u306e\u5076\u5947\u306f\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u3042\u308a\uff01\n    }\n\n    if (can) cout << \"Yes\" << endl;\n    else cout << \"No\" << endl;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s222756221":{
    "code_string":"#!\/usr\/bin\/env python3\n# coding=utf-8\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\ntxy = [(0,0,0)]+[tuple(map(int, l.strip().split(\" \"))) for l in sys.stdin.readlines()]\ncheck_txy = [abs(_x - _xp) + abs(_y -_ yp) <= _t - _tp and (_t + _x + _y) % 2 == 0 for (_t, _x, _y), (_tp, _xp, _yp) in zip(txy[1:], txy)]\nif all(check_txy):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s428221720":{
    "code_string":"N = int(input())\nex_t, ex_x, ex_y = 0, 0, 0\ncount = 0\nfor i in range(N):\n    t, x, y = map(int, input().split())\n    if abs(x-ex_x) + abs(y-ex_y) <= abs(t-ex_t) and t%2 = (x+y)%2:\n        count += 1\n    ex_t, ex_x, ex_y = t, x, y\nprint(\"Yes\" if count == N else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s134492418":{
    "code_string":"#13 C - Traveling\nN = int(input())\n\nplan = []\nfor _ in range(N):\n    ti,xi,yi = map(int,input().split())\n    plan.append((ti,xi,yi))\n    \n#\u4eca\u3044\u308b\u5834\u6240\u306e\u5ea7\u6a19\u3068\u6642\u9593\nspot = (0,0,0)#\u59cb\u70b9\nresult = 'Yes'\nfor t,x,y in plan:\n    tdiff = t-spot[0]\n    xdiff = abs(x-spot[1])\n    ydiff = abs(y-spot[2])\n    #(x,y)\u306e\u5909\u5316\u91cf\u306e\u548c\u306e\u5076\u5947\u3068\u6642\u9593\u306e\u5dee\u306e\u5076\u5947\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\n    #\u6642\u9593\u306e\u5909\u5316\u91cf\u3088\u308a(x,y)\u306e\u5909\u5316\u91cf\u306e\u65b9\u304c\u5c0f\u3055\u3044\n    if (tdiff%2 == (xdiff+ydiff)%2) and ((xdiff + ydiff)<=tdiff):\n    '''\n    xdiff<=tdiff and ydiff<=t \u3060\u3068(3,3,2)\u306a\u3069\u306e\u7bc4\u56f2\u5916\u306b\u5bfe\u5fdc\u3067\u304d\u306a\u3044\n    if (tdiff%2 == (xdiff+ydiff)%2) and (xdiff<=tdiff) and (ydiff<=tdiff):\n    '''\n        spot = (t,x,y)\n    else:\n        result = 'No'\n        break\nprint(result)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s081822159":{
    "code_string":"N = int(input())\nT = []\nX = []\nY = []\nT[0] = X[0] = Y[0] = 0\nfor i in range(N):\n    t,x,y = map(int,input().split())\n    T.append(t)\n    X.append(x)\n    Y.append(y)\n\nflag = True\nfor i in range(N):\n    time = T[i+1]-T[i]\n    dist = abs(X[i+1]-X[i])+abs(Y[i+1]-Y[i])\n    if time < dist or (dist%2!=time%2):\n        flag = False\n        break\nif flag:\n    print('Yes')\nelse:\n    print('No')\n",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s206941577":{
    "code_string":"n = int(input())\n\nfor _ in range(n):\n    t, x, y = map(int, n.split())\n    if x + y > t or (t - x - y) % 2:\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n\n",
    "error_obj":"AttributeError: 'int' object has no attribute 'split'"
  },
  "s805127183":{
    "code_string":"    n = int(input())\n    pos = [list(map(int, input().split())) for _ in range(n)]\n     \n    def func(n, pos):\n        c_t, c_x, c_y = 0, 0, 0\n     \n        for i in pos:\n            d_t = i[0] - c_t\n            z = abs(i[1] - c_x) + abs(i[2] - c_y)\n     \n            if z > d_t or (d_t - z) % 2 != 0:\n                return \"No\"\n            else:\n                c_t, c_x, c_y = 0, 0, 0\n     \n        return \"Yes\"\n     \n     \n    print(func(n, pos))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s296680548":{
    "code_string":"#!\/user\/bin\/env \n\nn = int(input())\nt = [-1 for _ in\nx = [-1 for _ in\ny = [-1 for _ in\nfor i in range(n\n    t[i], x[i], \n\ndt = [-1 for _ i\ndx = [-1 for _ i\ndy = [-1 for _ i\nfor i in range(n\n    if i == 0:\n        dt[0] = \n        dx[0] = \n        dy[0] = \n    else:\n        dt[i] = \n        dx[i] = \n        dy[i] = \n\nok = True\nfor i in range(n\n    tr = dt[i]%2\n    pr = (dx[i]+\n    if (tr == pr\n        pass\n    else:\n        ok = Fal\n#        import \n        break\n\nif ok:\n    print('Yes')\nelse:\n    print('No')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s846182625":{
    "code_string":"n = int(input())\ntp, xp, yp = 0, 0, 0\nfor _ in range(n):\n  t, x, y = map(int, input().split())\n  td = t - tp\n  xd = x - xp\n  yd = y - yp\n  if td < abs(xd) + abs(yd) or (td - abs(xd) - abs(yd)) % 2 == 1:\n    print('No')\n    break\n    tp = t\n    xp = x\n    yp = y\n    else:\n      print('Yes')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s810044860":{
    "code_string":"# coding: utf-8\nimport math\nn = int(input())\nt = 0\nx = 0\ny = 0\n# txy = []\n# for i in range(n):\n#     ti, xi, yi = list(map(int, input().split()))\n#     txy.append((ti, xi, yi))\n\nfor ti, xi, yi in map(int, input().split()):\n    if abs(xi - x) + abs(yi - y) > abs(ti - t):\n        print(\"No\")\n        exit()\n    elif (abs(xi - x) + abs(yi - y) - abs(ti - t)) % 2 != 0:\n        print(\"No\")\n        exit()\n    else:\n        t = ti\n        x = xi\n        y = yi\nprint(\"Yes\")\n",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s536049386":{
    "code_string":"N = int(input())\nt, x, y = map(int, input().split())\nif t < x+y :\n  print(\"NO\")\nelif t%2 != p%2:\n  print(\"NO\")\nelse:\n  print(\"YES\")",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s105980340":{
    "code_string":"Row = int(input())\nList = []\nfor i in range (Row):\n  List.append(list(map(int, input().split())))\nx = 0\ny = 0\nflag = True\nfor i in range(Row):\n  reqT = List[i][1]-x+List[i][2]-y\n  chck= reqT - T\n  if chck < 0 or chck % 2 == 1:\n    flag = False\n    break\n  x = List[i][1]\n  y = List[i][2]\nif flag:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 'T' is not defined"
  },
  "s466918629":{
    "code_string":"n,a,b=map(int,input.split())\nif (a-b)%2==0:print('Alice')\nelse:print('Borys')",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s331575266":{
    "code_string":"n, a, b = map(int, input().split())\nif (n + b) % 2 == 0:\n  print(\"Alice\")\nelif (n + b) % 2 != 0:\n  print(\"Bor",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s880351896":{
    "code_string":"n = int(input())\nAs = list(map(int, input().split()))\n    \ndef f(m):\n    debug = m\n    for a in As:\n        i = m \/\/ a\n        m = i * a\n    return m\n\n# \u4e8c\u90e8\u63a2\u7d22?\nl = 1\nr = 10**5+1\nwhile r-l > 1:\n    m = (r+l)\/\/2\n    if f(m) <= 1: l = m\n    else: r = m\nans1 = r\nl = 1\nr = 10**5 + 1\nwhile r-l > 1:\n    m = (r+l)\/\/2\n    if f(m) <= 2: l= m\n    else: r = m\nans2 = l\n\nif ans1 >= ans2:\n    print(-1)\nelse:\n    print(ans1[1],ans2[0])",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s827001396":{
    "code_string":"s = input()\nprint(s.replace(2017, 2018))",
    "error_obj":"TypeError: replace() argument 1 must be str, not int"
  },
  "s009357342":{
    "code_string":"S = input()\n\nS[4] = '8'\nprint(S)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s341225332":{
    "code_string":"n = int(input())\n\nd_i_list = [int(input()) for i in range(n)]\n\nprint(len(list(set(d_i_list))))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2017\/01\/07'"
  },
  "s324941094":{
    "code_string":"s=list(input())\ns[3]=8\nprint(\"\".join(s))",
    "error_obj":"TypeError: sequence item 3: expected str instance, int found"
  },
  "s397472009":{
    "code_string":"s = input()\nprint(2018 + s[3:])",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s666288489":{
    "code_string":"N,Y = map(int, input().split())\n\nfor j in range(N+1):\n    for i in range(N+1):\n        sum = 10000*j + 5000*i + 1000*(N-i-j)\n        if(sum==Y and N-i-j>=0):\n            print(j,i,N-i-j)\n            exit()\n            \nprint('-1 -1 -1')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2017\/01\/07'"
  },
  "s477602714":{
    "code_string":"a=input()\na[3]=\"8\"\nprint(a)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s662061553":{
    "code_string":"s = input()\ns[:4] = '2017'\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s197388773":{
    "code_string":"n = int(input())\nd = [int(input()) for i in range(n)]\nans = []\n \nfor i in range(n):\n    if d[i] not in ans:\n        ans.append(d[i])\n \nprint(len(ans))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2017\/01\/07'"
  },
  "s042384706":{
    "code_string":"s= List(input())\ns[3]=\"8\"\nprint(s)",
    "error_obj":"NameError: name 'List' is not defined"
  },
  "s097624825":{
    "code_string":"S = input()\nprint(S.replace(7, 8, 1))",
    "error_obj":"TypeError: replace() argument 1 must be str, not int"
  },
  "s873779570":{
    "code_string":"a,b,c=map(int,inpput().split('\/'))\na=2018\nprint(a,'\/',b,'\/',c)\n",
    "error_obj":"NameError: name 'inpput' is not defined"
  },
  "s137477693":{
    "code_string":"S=list(input())\nS[3]=8\nprint(\"\".join(S))",
    "error_obj":"TypeError: sequence item 3: expected str instance, int found"
  },
  "s442466170":{
    "code_string":"s = input()\ns[3] = '8'\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s845325843":{
    "code_string":"N,Y = map(int,input().split())\nexist_flag = False\nfor i in range(N+1):\n    for j in range(N+1-i):\n        if Y == 10000*i + 5000*j + 1000*(N-i-j):\n            exist_flag = True\n            break\n    if exist_flag:\n        break\nif not exist_flag:\n    i,j,k = -1, -1, -1\nprint(i, j, k)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2017\/01\/07'"
  },
  "s878705787":{
    "code_string":"a = input()\na[3] = '8'\nprint(a)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s832355398":{
    "code_string":"s=list(input())\ns[3]=8\nfor in in s:\n  print(s,end=\"\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s377261993":{
    "code_string":"S = str(input())\nS[3] = 8\nprint(S)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s594873185":{
    "code_string":"N,Y=map(int,input().split())\nfor x in range(N+1):\n    for y in range(N+1):\n        z=N-x-y\n        if x+y+z==N and 10000*x+5000*y+1000*z==Y:\n            print(x,y,z)\n            exit()\n\nprint(-1,-1,-1,sep=\" \")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2017\/01\/07'"
  },
  "s083260100":{
    "code_string":"s=input()\nprint(s[:2]+\"8\"+s[4:]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s082705203":{
    "code_string":"S=input()\nprint(S[4]\"8\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s031348830":{
    "code_string":"s = input()\ns[3] = '8'\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s251264512":{
    "code_string":"s = input()\npirnt(s[:3]+'7'+s[4:])",
    "error_obj":"NameError: name 'pirnt' is not defined"
  },
  "s702861770":{
    "code_string":"s= input()\nres = \"2018\"+s[4,len(s)]\nprint(res)",
    "error_obj":"TypeError: string indices must be integers"
  },
  "s262287847":{
    "code_string":"S = input()\n\nprint(S.replace('2017','2018')",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s056274969":{
    "code_string":"a = input()\na[3] = '8'\nprint(a)\n",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s325826302":{
    "code_string":"a,b,c = map(int,input().split(\"\/\"))\nprint(\"2018\/\"+int(b)+\"\/\"+int(c))",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s123962662":{
    "code_string":"s=  input()\ns[3] = '8'\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s260164809":{
    "code_string":"s = str(input())\ns[3]=\"8\"\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s148160347":{
    "code_string":"S=input()\nS[3]=\"8\"\nprint(S)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s889546407":{
    "code_string":"Row = int(input())\nList = []\nfor i in range (Row):\n  List.append(list(map(int, input().split())))\ns_l = set(List)\nprint(len(s_l))",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s752644848":{
    "code_string":"n=int(input())\nd=list(int(input()) for i in range(n))\ncnt=0\nst=100\nl=[]\nfor i in range(n):\n    if d<st:\n        cnt += 1\n        st = d\n    else:\n        l.append(cnt)\n        st = 100\n        cnt = 0\nl.sort()\nprint(l[len(l)-1])",
    "error_obj":"TypeError: '<' not supported between instances of 'list' and 'int'"
  },
  "s930907355":{
    "code_string":"n = int(input())\nd = []\nfor i in range(n):\n    d.extend(int(input()))\nprint(len(set(d)))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s221322866":{
    "code_string":"n = int(input())\nList=[int(input()) for i in range(n)]\nans = 0\nwhile True\nfor i,j in range(n):\n  if i == j:\n    ans +=1\nprint(n-ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s831417702":{
    "code_string":"N=int(input())\nA=[input() for i in range(N)]\nB=[]\nwhile len(A)!=0:\n  if A[0] not in B:\n    B.append(A[0])\n  A.popleft()\nprint(len(B))",
    "error_obj":"AttributeError: 'list' object has no attribute 'popleft'"
  },
  "s125148422":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\nB=A.copy()\ncounter=0\nfor num in range(N-2):\n  if A[num] in B:\n    counter+=1\n    while A[num] in B:\n      B.remove(A[num])\n  \nprint(counter)",
    "error_obj":"IndexError: list index out of range"
  },
  "s512620072":{
    "code_string":"n = int(input())\n\ns = set()\nfor i in range(n):\n  s.add(int(input())\n\nprint(min(3,len(s)))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s692223157":{
    "code_string":"N = int(input())\nd = list(int(input()) for _ in range(N))\nprint(len(set(sortd(d))))",
    "error_obj":"NameError: name 'sortd' is not defined"
  },
  "s344131135":{
    "code_string":"N = int(input())\nA = sorted[input() for _ in range(N)]\nprint(len(set(A)))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s275883386":{
    "code_string":"n = int(input())\ncake = [input() for i range(n)]\n    \nprint(len(set(cake)))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s446808485":{
    "code_string":"N  = int(input())\nnum = list(map(int, input().split()))\nnum.sort()\ncount = 1\n\nfor i in range(N-1):\n    if not num[i] == num[i+1]:\n        count += 1\nprint(count)",
    "error_obj":"IndexError: list index out of range"
  },
  "s407714660":{
    "code_string":"n = int(input())\n \nm = {}\n \nfor i in range(n):\n  x = int(input())\n  m.add(x)\n  \nprint(len(m))",
    "error_obj":"AttributeError: 'dict' object has no attribute 'add'"
  },
  "s364492507":{
    "code_string":"N = int(input())\nd = list(map(int, input().split()))\n\nx = sorted(d, reverse=True)\n\nans = 1\nfor i in range(N-1):\n    if x[i] - x[i+1] >0:\n        ans += 1\n    else:\n        continue\n\n\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s979610225":{
    "code_string":"N = int(input())\nlist_a = [int(input()) for i in range(N)]\ns = []\nfor i in list_a:\n    if s.count(i) == 0\n        s.append(i)\nprint(len(s))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s141346430":{
    "code_string":"N = int(input())\n\nfor i in range(N):\n\td = int(input())\n\ndset = set(d)\nprint(len(dset))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s161166542":{
    "code_string":"N=int(input())\nd = [int(input()) for i in range(n)]\n\nprint(len(set(d)))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s006939902":{
    "code_string":"N = int(input())\nD = [int(input()) for _ in range(n)]\nprint(len(set(D)))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s399504236":{
    "code_string":"N = int(input())\nmochi = []\nfor i in range(N):\n  a = int(input())\n  if not a in mochi:\n    mochi.append(a)\n    \nmochi.sorted()\nprint(len(mochi))",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s093646747":{
    "code_string":"N = int(input())\n\nList = sorted(list(set(list(int(input()) for i in range(N)))))\n\nprint(len(List()))\n",
    "error_obj":"TypeError: 'list' object is not callable"
  },
  "s559193862":{
    "code_string":"mycode = r'''\n# distutils: language=c++\n# cython: language_level=3\n# cython: boundscheck=False\n# cython: wraparound=False\n# cython: infer_types=True\n# cython: cdivision=True\n# False:Cython \u306fC\u306e\u578b\u306b\u5bfe\u3059\u308b\u9664\u7b97\u30fb\u5270\u4f59\u6f14\u7b97\u5b50\u306b\u95a2\u3059\u308b\u4ed5\u69d8\u3092\u3001(\u88ab\u6f14\u7b97\u5b50\u9593\u306e\u7b26\u53f7\u304c\u7570\u306a\u308b\u5834\u5408\u306e\u632f\u308b\u821e\u3044\u304c\u7570\u306a\u308b)Python\u306eint\u306e\u4ed5\u69d8\u306b\u5408\u308f\u305b\u3001\u9664\u7b97\u3059\u308b\u6570\u304c0\u306e\u5834\u5408\u306bZeroDivisionError\u3092\u9001\u51fa\u3057\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u3092\u884c\u308f\u305b\u308b\u3068\u3001\u901f\u5ea6\u306b 35% \u3050\u3089\u3044\u306e\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u751f\u3058\u307e\u3059\u3002 True:\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u305b\u3093\u3002\n\nimport numpy as np\n\n# \u8aad\u307f\u8fbc\u307f\u306fpython\u5074\u3067\u884c\u3046\nimport sys\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline #\u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\ncdef LL a_int(): return int(readline())\n\ndef ints(): return np.fromstring(readline(), sep=' ', dtype=np.int64)\n\ncdef read_matrix(LL H,LL W):\n    #return np.ndarray shape=(H,W) matrix\n    lines=[]\n    cdef LL _\n    for _ in range(H): \n        lines.append(read())\n    lines=' '.join(lines) #byte\u540c\u58eb\u306e\u7d50\u5408\u304c\u3067\u304d\u306a\u3044\u306e\u3067readline\u3067\u306a\u304fread\u3067\n    return np.fromstring(lines, sep=' ',dtype=np.int64).reshape(H,W)\n\n\nN=a_int()\nD=read_matrix(N,1)[:,0]\nprint(len(np.unique(D)))\n\n'''\n\nimport sys\nif sys.argv[-1] == 'ONLINE_JUDGE':  # \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\n    import os\n    with open('mycode.pyx', 'w') as f:\n        f.write(mycode)\n    os.system('cythonize -i -3 -b mycode.pyx')\n\nimport mycode\n",
    "error_obj":"ModuleNotFoundError: No module named 'mycode'"
  },
  "s484273182":{
    "code_string":"N = int(input())\nD = [int(input()) for _ in range(N)]\n \nl = [0]*100\nfor i in range(N):\n  l[d[i]-1] = 1\n  \nprint(sum(l))",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s614079378":{
    "code_string":"N,Y = map(int,input().split())\n\nans = [-1,-1,-1]\n\nfor n1 in range(N+1):\n  for n2 in range(N-n1+1):\n    yen = n1 * 10000 + n2 * 5000 + (N-n1-n2) * 1000\n    if yen == Y:\n      ans = [n1,n2,N-n1-n2]\n      break\nprint(\" \".join(ans))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s778437636":{
    "code_string":"n,y=map(int,input().split())\ny \/\/=1000\nfor i in range(n+1):\n    for j in range(n-i+1):\n        if n -(i+j) < 0\n            break\n        if 9*i+4*j+n == y:\n            print(i,j,n-(i+j))\n            exit()\nprint('-1','-1','-1')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s644581630":{
    "code_string":"N, Y = map(int, input().split())\n\nfor x in range(N+1):\n    for y in range(N-x+1):\n        z = N - x -y\n        if 10000*a + 5000*b + 1000*c == Y:\n            print(a, b, c)\n        else:\n            print(-1, -1, -1)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s814398009":{
    "code_string":"n, y = map(int, input().split())\nfor i in range(n+1):\n  for g in range(n-i):\n    s = n-i-g\n    if 10000*i + 5000*g 1000*s == y:\n      print(i, g, s)\n      exit()\nprint('-1 -1 -1')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s039667728":{
    "code_string":"n, y = map(int,input().split())\ny = y \/ 1000\nfor i in range(n+1):\n    for j in range(n-i+1):\n        if 10 * i + 5 * j + 1 * (n - i - j) == y:\n            print(i)\n            print(j)\n            print(n - i - j)\n            exit(1)\nprint(-1)\nprint(-1)\nprint(-1)",
    "error_obj":""
  },
  "s634634685":{
    "code_string":"N,Y = map(int,input().split())\nres = (-1,-1,-1)\nfor x in range(N+1):\n  for y in range(N+1-x):\n    if N-x-y >=0 and 10000*x + 5000*y + 1000*z == Y:\n      res = (x,y,N-x-y)\nprint(res[0],res[1],res[2])\n",
    "error_obj":"NameError: name 'z' is not defined"
  },
  "s876783062":{
    "code_string":"N, Y = map(int, input().split())\n\nfor a in range(n + 1):\n    for b in range(n - a + 1):\n        c = n - a - b\n        if 10000*a+5000*b+1000*c == Y:\n            print(a,b,c)\n            exit()\n                \nprint(-1,-1,-1)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s150965248":{
    "code_string":"n, y = map(int, input().split())\n\n#.\ny = y \/\/ 1000\n\n#.\nfor i in range(n+1):\n    for j in range(n+1):\n        #.\n        money = y - i*10 - j*50\n\n        #.\n        if money == n - i - j:\n            print(\"{} {} {}\".format(i, j, money))\n            return 0\n",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s645725837":{
    "code_string":"n,y=map(int,input().split())\nif y>10000*n:\n  print('-1 -1 -1')\nelse:\n  for p in range(n+1):\n    for q in range(n-p+1):\n      if 10000*p+5000*q+1000*(n-p-q)==y:\n        print(p,q,r)\n        exit()\n  print('-1 -1 -1')\n        ",
    "error_obj":"NameError: name 'r' is not defined"
  },
  "s521167586":{
    "code_string":"n,y=map(int,input().split())\na,b,c=-1,-1,-1\nx=y\/\/1000-n\nif y%1000==0:\n  for i in range(n+1):\n    for j in range(n+1-j):\n      if x==9*i+4*j:\n        a=i\n        b=j\n        c=n-i-j\n        break\n    if a!=-1:\n      break\nprint(a,b,c)",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s890770256":{
    "code_string":"N, Y = map(int, input().split())\nres_x = -1, res_y = -1, res_z = -1\nfor x in range(N):\n  for j in range(N-x):\n    z = N - x - y\n    if 10000 * x + 5000 * y + 1000 * z == Y:\n      res_x = x\n      res_y = y\n      res_z = z\nprint('{} {} {}'.format(res_x, res_y, res_z))",
    "error_obj":"SyntaxError: cannot assign to operator"
  },
  "s770975577":{
    "code_string":"n,y = map(int,input().split())\nfor i in range(n+1):\n  for j in range(n+1):\n    if (y - 1000*i - 5000*j)\/10000 = n-i-j:\n      print(i,j,n-i-j)\n      exit()\nprint(-1,-1,-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s434120362":{
    "code_string":"N,Y = map(int,input().split())\nexist_flag = False\nfor i in range(N+1):\n    for j in range(N+1-i):\n        if Y == 10000*i + 5000*j + 1000*(N-i-j):\n            exist_flag = True\n            break\n    if exist_flag:\n        break\nif not exist_flag:\n    i,j,k = -1, -1, -1\nprint(i, j, k)",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s511580387":{
    "code_string":"N,Y = map(int,input().split())\n\nflag = 0\nfor x in range(N+1):\n    if flag > 0:\n        break\n    for y in range(N-x+1):\n        if 10000*x+5000*y+1000*z == Y and flag == 0:\n            z = N-x-y\n            flag+=1\n            print(x,y,z)\n            break\n            \nif flag == 0:\n    print('-1 -1 -1')",
    "error_obj":"NameError: name 'z' is not defined"
  },
  "s294485407":{
    "code_string":"n,y = map(int,input().split())\n\nor i in range(n+1):\n    for j in range(n-i+1):\n        print(i,j,n-i-j)\n        if 10000*i + 5000*j + 1000*(n-i-j) == y:\n            print(i, j, n-i-j)\n            exit()\n        print(-1,-1,-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s416526525":{
    "code_string":"N, Y = map(int, input().split())\na = -1\nb = -1\nc = -1\njudge = False\n\nmoney = x * 10000 + y * 5000 + z * 1000\nfor x in range(20, -1, -1):\n    money_max = x * 10000 + (N-x) * 5000\n    money_min = x * 10000 + (N-x) * 1000\n    if money_min <= Y and Y <=money_max:\n        for y in range(N-x, -1, -1):\n            money = x * 10000 + y * 5000 + (N - x - y)* 1000\n            if money == Y:\n                a = x\n                b = y\n                c = N - (x + y)\n                judge = True\n                break\n    if judge:\n        break\nprint(a, b, c)\n",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s224016019":{
    "code_string":"N = int(input())\nY = int(input())\n\nanswer = []\ncomb = []\nfor j in range(N+1):\n    for i in range(N+1):\n        sum = 10000*j + 5000*i + 1000*(N-i-j)\n        if(sum==Y and N-i-j>=0):\n            print(j,i,N-i-j)\n            exit()\n            \nprint('-1 -1 -1')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '9 45000'"
  },
  "s867729728":{
    "code_string":"N,Y = input().split()\nN = int(N)\nY_k=int(Y)\/1000\n\nanswer - [-1,-1,-1]\nfor i in range(N+1):\n    for j in range(N+1 - i):\n        k = N-i-j\n        if 10*i + 5*j + 1*k == Y_k:\n            answer = [i,j,k]\n\nprint(answer[0],answer[1],answer[2])\n",
    "error_obj":"NameError: name 'answer' is not defined"
  },
  "s083897942":{
    "code_string":"N, Y = map(int, input().split())\n \nfor x in range(N + 1):\n    for y in range(N + 1- x):\n        if 10000 * x + 5000 * y + 1000 * (N - x - y) == Y:\n            print(x,y,z)\n            exit()\nprint('-1 -1 -1')",
    "error_obj":"NameError: name 'z' is not defined"
  },
  "s268760092":{
    "code_string":"A=10000\nB=5000\nC=1000\nans_A=-1\nans_B=-1\nans_C=-1\nx,y=map(int,input().split())\nfor a in range(x+1):\n  for b in range(x-a+1):\n    for c in range(x-a-b+1):\n      if a*A+b*B+c*C=y:\n        ans_A=a\n        ans_B=b\n        ans_C=c\nprint(ans_A,ans_B,ans_C)\n      ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s503255812":{
    "code_string":"import sys\nN,Y=map(int,input().split())\nans=0\nfor x in range (N):\n    for y in range(N):\n        if 10000*x+5000*y+1000*(N-x-y)==Y:\n            print(x+' '+y+' '+N-x-y)\n            sys.exit()\nprint(-1,-1,-1)",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s728754853":{
    "code_string":"N, Y = map(int, input().split())\n\nfor a in range(N + 1):\n    for b in range(N + 1 - a):\n        if 10000 * a + 5000 * b + 1000 * c == Y:\n            print(a, b, N - a - b)\n            break\n    else:\n        continue\n    break\nelse:\n    print(-1, -1, -1)",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s518976113":{
    "code_string":"n, y = map(int,input().split())\ny = y\/\/1000\nfor i in range(n+1):\n    for j in range (n+1-i):\n        k = n - i - j\n        if 10*i + 5* j + 1 * k == y:\n            print(str(i) +' '+str(j)+' '+str(k))\n            syexit()\nprint('-1 -1 -1')",
    "error_obj":"NameError: name 'syexit' is not defined"
  },
  "s263260030":{
    "code_string":"N, Y = map(int, input().split())\nans = False\nfor i in range(N+1):\n  for j in range(N+1):\n    k = N-i-j\n    if 10000*i + 5000*j + 1000*k == Y and z>=0:\n      ans = True\n      print(i, j, k)\n    break\n      \nif ans == False:\n  print(-1, -1, -1)",
    "error_obj":"NameError: name 'z' is not defined"
  },
  "s377805653":{
    "code_string":"#include <stdio.h>\n\nint main()\n{\n    int N, a, b, c;\n    long Y, yn;\n\n    scanf(\"%d\", &N);\n    scanf(\"%ld\", &Y);\n\n    Y = Y \/ 1000;\n    yn = Y - N;\n\n    for (c = 0; c <= N; c++) {\n        b = (yn - 9 * c) \/ 4;\n        if ((yn - 9 * c) % 4 == 0) {\n            a = N - b - c;\n            if ((a >= 0) && (yn == 4 * b + 9 * c)) {\n                printf(\"%d %d %d\", a, b, c);\n                return 0;\n            }\n        }\n    }\n    printf(\"%d %d %d\", -1, -1, -1);\n    return 0;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s443935766":{
    "code_string":"N,Y = map(int, input().split())\nfor i in range(N+1):\n  for j in range(N+1-i):\n    if Y==i*10000+j*5000+(N-i-j)*1000:\n      print(i,j,(n-i-j))\n      exit()\nprint('-1 -1 -1')",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s865753831":{
    "code_string":"N, Y = map(int, input().split())\ntotal = 0\nfor x in range(N + 1):\n    for y in range(N + 1 - x):\n        for z in range(N + 1 - x - y):\n            if Y == 10000 * x + 5000 * y + 1000 * z:\n                total = total + 1\n                ans = str(x) + \" \" + str(y) + \" \" + str(z)\n                print(ans)\n                break\n        else:\n            continue\n        break\n    else:\n        continue\n    break\nbreak\nif total ==0:\n    print(\"-1 -1 -1\")",
    "error_obj":"SyntaxError: 'break' outside loop"
  },
  "s075119926":{
    "code_string":"N, Y = map(int, input().split())\n \nfor x in range(N+1):\n  for y in range(N-x+1):\n    z = N - x - y\n    if 10000 * i + 5000 * j + z*1000 == Y:\n      print(x,y,z)\n      exit()\n\nprint(-1,-1,-1)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s671705011":{
    "code_string":"for i in range(0, N+1):\n    for j in range(0, N+1-i):\n        if i == ((Y - 1000*N - 4000*j) \/ 9000):\n            if (N-i-j) >= 0: print(str(i) + \" \" + str(j) + \" \" +str(N-i-j))\n            exit()\nprint (\"-1 -1 -1\")",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s098235839":{
    "code_string":"N=int(input())\nY=int(input())\n\na=-1\nb=-1\nc=-1\nfor i in range(0,N+1):\n    for j in range(0,N-i+1):\n        if 10000*i+5000*j+1000*(N-i-j)==Y:\n            a=i\n            b=j\n            c=N-i-j\n            break\n                            \nprint(a,b,c)\n    ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '9 45000'"
  },
  "s357349571":{
    "code_string":"import sys\n\nn, h = map(int, input().split())\na = [list(map(int, x.split())) for x in sys.stdin.readlines()]\na.sort(reverse=True)\nb = sorted(a, key=lambda x:x[1], reverse=True)\ncnt = 0\nfor i in b:\n    if i[1] < a[0][0]:\n        break\n    cnt += 1\n    h -= i[1]\n    if h <= 0:\n        print(cnt)\nprint(min(cnt + -(-h\/\/a[0][0])))\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s853186842":{
    "code_string":"N,H = map(int,input().split())\nAB = [list(map(int,input().split())) for _ in range(n)]\nA,B = zip(*AB)\n\na = max(A)\nB = [b for b in B if b > a] #\u6295\u3052\u308b\nB.sort(reverse = True)\n\nanswer = 0\nhp = H\nattack_cnt = 0\n\nfor b in B:\n  if hp <= 0:\n    break\n  attack_cnt += 1\n  hp -= b\n\nif hp > 0:\n  attack_cnt += (hp-1)\/\/a + 1\n\nprint(attack_cnt)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s158505812":{
    "code_string":"N, H = map(int, input().split())\nslash = 0\nThrow = []\nfor _ in range(N):\n    a, b = map(int, input().split())\n    slash = max(slash, a)\n    if b > a: Throw.append(b)    \n#slash=\u65ac\u6483\u6700\u5927\u30c0\u30e1\u30fc\u30b8\u3001\u6295\u3052\u3066slash\u8d85\u306e\u30c0\u30e1\u30fc\u30b8\u304c\u51fa\u308b\u306a\u3089\u3070\u305d\u306e\u5200\u3092\u30c0\u30e1\u30fc\u30b8\u304c\u5927\u304d\u3044\u9806\u306b\u6295\u3052\u308b\nThrow = sorted([th for th in Throw if th > slash], reversed=True)\ndmg, cnt = 0, 0\nfor throw in Throw:\n    if dmg >= H: break\n    dmg += throw\n    cnt += 1\nif dmg < H:\n    from math import ceil\n    cnt += ceil((H-dmg)\/slash)\nprint(cnt)",
    "error_obj":"TypeError: 'reversed' is an invalid keyword argument for sort()"
  },
  "s799240706":{
    "code_string":"N,H=map(int,input().split())\nB=[]\nA=0\nfor _ in range(N):\n    a,b = map(int,input().split())\n    A = max(A,a)\n    B.append(b)\nB = sorted(reverse=True) + [0]\n\ni = 0\nwhile B[i] >= A:\n    i += 1\nB = B[:i]\n\nans = 0\nfor i in range(len(B)):\n    H -= B[i]\n    ans += 1\n    if H <= 0:\n        print(ans)\n        exit()\nprint(ans + (H -1)\/\/A + 1)\n",
    "error_obj":"TypeError: sorted expected 1 argument, got 0"
  },
  "s948971007":{
    "code_string":"n, H = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\nans = 0\namax = max(a)\nb.sort(reverse=True)\n# print(amax, b)\ni = 0\nwhile H > 0:\n    if amax < b[i]:\n        H -= b[i]\n        ans += 1\n        i += 1\n    else:\n        ans += H\/\/amax\n        if H%amax != 0:\n            ans += 1\n        break\n\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s118337185":{
    "code_string":"from math import ceil\nn, h = map(int, input().split())\ndata1, data2 = [], []\nfor i in range(n):\n    a, b = map(int, input().split())\n    data1.append([a, b])\n    data2.append([a, b])\n\ndata1 = sorted(data1, key = lambda x: x[0], reverse = True)\ndata2 = sorted(data2, key = lambda x: x[1], reverse = True)\nans = 0\nwhile data1[0][0] < data2[0][1]:\n    h -= data2[0][1]\n    ans += 1\n    del data2[0]\nans += ceil(h \/ data1[0][0])\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s251863602":{
    "code_string":"N, H = map(int, input().split())\n# B = []\nA = []\nB = []\namax = -1\nbmax = -1\n\nfor _ in range(N):\n    a, b = map(int, input().split())\n    # B.append((a,b))\n    A.append(a)\n    B.append(b)\n\n    if amax < a:\n        amax = a\n    \n    if bmax < b:\n        bmax = b\n\nif amax >= bmax:\n    m = H % amax\n    if m != 0:\n        ans = H \/\/ amax + 1\n    else:\n        ans = H \/\/ amax\n\nelse:\n    ans = 0\n    throw_lst = list(filter(lambda x: x > amax, B)).sort(reverse=True)\n\n    for tb in throw_lst:\n        H -= tb\n        ans += 1\n        if H <= 0:\n            break\n\n    m = H % amax\n    if m != 0:\n        ans += H \/\/ amax + 1\n    else:\n        ans += H \/\/ amax\n\nprint(ans)",
    "error_obj":"TypeError: 'NoneType' object is not iterable"
  },
  "s277086872":{
    "code_string":"def resolve():\n    '''\n    code here\n    '''\n    N, H = [int(item) for item in input().split()]\n    ab = [[int(item) for item in input().split()] for _ in range(N)]\n\n    a_max = max(ab, key=lambda x:x[0])\n    res = H \/\/ a_max\n    if H % a_max != 0:\n        res += 1\n    \n    temp_attack = res * a_max\n    b_delta = [b - a_max for a, b in ab]\n\n    throw_atk_sum = 0\n    throw_num = 0\n\n    for item in b_delta:\n        if b_delta > 0:\n            throw_atk_sum += item\n            throw_num += 1\n\n    if throw_atk_sum < temp_attack:\n        reduce_num = throw_atk_sum\/\/a_max\n        print(res - reduce_num)\n    else:\n        res = 0\n        for a, b in ab:\n            H -= b\n            res += 1\n            if H <= 0:\n                break\n        print(res)\n\n\nif __name__ == \"__main__\":\n    resolve()\n",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'int' and 'list'"
  },
  "s352399540":{
    "code_string":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\n\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n  return int(readline())\nn,h = readInts()\nA = [0] * n\nB = [0] * n\nfor i in range(n):\n    a,b = readInts()\n    A[i] = a\n    B[i] = b\nA = sorted(A, reverse = True)\nB = sorted(B, reverse = True)\nMAX = a[0]\nans = 0\nfor v in b:\n    # \u6295\u3052\u308c\u308bMAX\u3088\u308a\u5927\u304d\u3044\u7269\u306f\u3076\u3093\u6295\u3052\u308d\n    if h <= 0:\n        break\n    if v > MAX: # \u6295\u3052\u308d\n        # \u3044\u3064\u6295\u3052\u3066\u3082\u4e00\u7dd2\u3060\u306d\u3048\n        ans += 1\n        h -= v\n    else:\n        break\nif h > 0:\n    ans += (h + MAX - 1) \/\/ MAX # \u632f\u308c\u308b\u3084\u3064\u9650\u754c\u307e\u3067\u632f\u3063\u3066\u3084\u308d\u3046\nprint(ans)",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s274519348":{
    "code_string":"a=int(input())\nprint(24+(24-a)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s453475644":{
    "code_string":"m = input()\nprint(48 - m)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'str'"
  },
  "s622750146":{
    "code_string":"a = input()\na = 48 - a\nprint(a)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'str'"
  },
  "s451036318":{
    "code_string":"i=(48-i)\nprint(input())",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s939572169":{
    "code_string":"a = input()\nb = 24 - a\nc = 24 + b  \nprint(c)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'str'"
  },
  "s327561488":{
    "code_string":"a=input()\nprint(48-a)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'str'"
  },
  "s971630504":{
    "code_string":"print(48 - input())",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'int' and 'str'"
  },
  "s187509888":{
    "code_string":"M = int(input())\nans = 48 - M\nprintg(ans)",
    "error_obj":"NameError: name 'printg' is not defined"
  },
  "s630051169":{
    "code_string":"print(48-int(input())",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s702053056":{
    "code_string":"print(48-int(input())",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s490789362":{
    "code_string":"a, b = map(int, input().split())\nprint(\"Yes\" if input()[a] == \"-\" and input().count(\"-\") == 1 else \"No\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s347230961":{
    "code_string":"a,b = map(int,input().split())\nn = input()\nif n[a]==\"-\":\n  n = n.pop(a)\n  if n.isdecimal():\n    print(\"Yes\")\n    exit()\nprint(\"No\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'pop'"
  },
  "s668612780":{
    "code_string":"A, B = map(int, input().split())\nS = list(map(str, input().split(-)))\nans = \"No\"\nif A == len(S[0]):\n    if B == len(S[1]):\n        ans = \"Yes\"\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s017025572":{
    "code_string":"A, B = map(int, input().split())\nS = input()\nprint ('Yes' if re.search(r'\\A\\d{{{}}}-\\d{{{}}}\\Z'.format(A, B), S) else 'No') ",
    "error_obj":"NameError: name 're' is not defined"
  },
  "s099940179":{
    "code_string":"A,B=map(int,input().split())\nS=input()\na='Yes'\nfor i in range(A+B+2):\n  if i!=A:\n    if S[i]!='-':\n      a='No'\n  else:\n    if S[i]=='-':\n      a='No'\nprint(a)",
    "error_obj":"IndexError: string index out of range"
  },
  "s238241677":{
    "code_string":"    A, B = map(int, input().split())\n    S = input()\n    C = \"1234567890\"\n    for i in range(len(S)):\n        if i == A:\n            if S[i] == \"-\":\n                continue\n            else:\n                print(\"No\")\n                exit()\n        else:\n            if S[i] in C:\n                continue\n            else:\n                print(\"No\")\n                exit()\n    print(\"Yes\")\nresolve()",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s913726671":{
    "code_string":"a,b=map(int,input().split())\ns=input.split('-')\nif len(s[0])==a and len(s[1])==b and len(s)==2:\n  print('Yes')\nelse:\n  print('No')\n",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s886954273":{
    "code_string":"a, b = map(int, input().split())\ns = input()\nprint(\"Yes\" if (s.count(\"-\") == 1 and s[a] == \"-\" and s.count() == a+b+1) else \"No\")",
    "error_obj":"TypeError: count() takes at least 1 argument (0 given)"
  },
  "s806051088":{
    "code_string":"a,b=map(int,input().split())\ns=str(input())\ne=[\"0\",'1','2','3','4','5','6','7','8','9']\nfor i in range(len(s)):\n  if a=i:\n    if s[i]!='-':\n      print(\"No\")\n      exit()\n  else:\n    if s[i] not in e:\n      print(\"No\")\n      exit()\n\nprint(\"Yes\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s750680615":{
    "code_string":"def actual(a, b, s):\n    if s[a] != '-':\n        return 'No'\n\n    for i in range(0, a):\n        if not '0' <= s[i] <= '9':\n            return 'No'\n\n    for j in range(a + 1, len(s) + 1):\n        if not '0' <= s[j] <= '9':\n            return 'No'\n\n    return 'Yes'\n\n\na, b = map(int, input().split())\ns = input()\n\nprint(actual(a, b, s))\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s415623911":{
    "code_string":"a, b = map(int, input().split())\ns = input()\nflg = 0\nfor i in range(a +b):\n    if not(0 <= int(s[i]) <= 9): \n        if s[a] == \"-\":\n            flg = 1\n        \nprint(\"Yes\" if flg == 1 else \"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '-'"
  },
  "s234196534":{
    "code_string":"def main():\n    n=int(input())\n    csf=[list(map(int,input().split())) for _ in range(n-1)]\n    for i in range(n):\n        if i == n-1:\n            print(0)\n        else:\n            t=0\n            for c,s,f in csf[i:]:\n                t = max(s,t)\n                t = math.ceil(t\/f)*f+c\n                #print(\"start:\", i, t)\n            print(t)\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s051211369":{
    "code_string":"import sys\nsys.setrecursionlimit(10**10)\n\nn = int(input())\ninfo = []\nfor _ in range(n-1):\n    c, s, f = map(int, input().split())\n    info.append([c, s, f])\n# print(info)\n\ndef func(i, low):\n    if i == low:\n        return info[i][1] + info[i][0]\n\n    return func2(func(i-1, low), info[i][2], info[i][1]) + info[i][0]\n\ndef func2(n, f, s):\n    if n <= s:\n        return s\n    if n % f == 0:\n        return n\n    else:\n        return n\/\/f * f + f\n\n# print(func(n-2, 0))\nfor i in range(n):\n    if i == n-1:\n        print(0)\n    print(func(n-2, i))\n",
    "error_obj":"OverflowError: Python int too large to convert to C int"
  },
  "s906303768":{
    "code_string":"int(input())\nyo=[]\nfor _ in range(n-1):\n  a=list(map(int,input().split()))\n  yo.append(a)\n  \ndef ans(x):\n  if x==n-1:\n    return 0\n  else:\n    t=0\n    for i in range(x,n-1):\n      if t<=yo[i][1]:\n        t=yo[i][1]+yo[i][0]\n      else:\n        s=t-yo[i][1]\n        if s%yo[i][2]==0:\n          t=t+yo[i][0]\n        else:\n          mo=s%yo[i][2]\n          t=t+yo[i][2]-mo+yo[i][0]\n    return t\n    \nfor j in range(n):\n  print(ans(j))\n        \n        ",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s044241809":{
    "code_string":"import numpy as np\n\ndef seachPrimeNum(N):\n    max = int(np.sqrt(N))\n    seachList = [i for i in range(2,N+1)]\n    primeNum = []\n    while seachList[0] <= max:\n        primeNum.append(seachList[0])\n        tmp = seachList[0]\n        seachList = [i for i in seachList if i % tmp != 0]\n    primeNum.extend(seachList)\n    return primeNum\n\n#def numsearch(list):\n    #for i in list:\n        #print(i)\n        #if (i+1)\/2 not in list:\n            #list.remove(i)\n    #return list\n\ndef main():\n    Q = int(input())\n    list = seachPrimeNum(100000)\n    #list2 = numsearch(list)\n    #print(list2)\n    c = [0]*100001\n    c[0] = 0\n    for i in range(1,100001,1):\n        #print(i)\n        if i in list and (i+1)\/2 in list:\n            c[i] = c[i-1]+1\n        else:\n            c[i] = c[i-1]\n    #print(c)\n    for i in range(Q):\n        l,r = map(int,input().split())\n        print(c[r]-c[l-1])\n\nmain()\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s136409577":{
    "code_string":"import math\nfrom itertools import accumulate\n\ndef eratosthenes(n):\n    prime_list = []\n    num_list=[i for i in range(2, n+1)]\n    limit = math.sqrt(n)\n    while True:\n        if limit <= num_list[0]:\n            return prime_list + num_list\n        prime_list.append(num_list[0])\n        num_list = [e for e in num_list if e % num_list[0] != 0]\n\ner_list = eratosthenes(100000)\ncount = []\n\nj = 0\nfor i in range(er_list[-1]):\n    if i == er_list[j]:\n        j += 1\n        if (i+1)\/\/2 in er_list:\n            count.append(1) \n        else:\n            count.append(0)\n    else:\n        count.append(0)\ncount = list(accumulate(count))\n            \nQ = int(input())\nfor i in range(Q):\n    l, r = map(int, input().split())\n    print(count[r]-count[l-1])",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s809718260":{
    "code_string":"def era(M):\n    p = [1] * M\n    p[0] = p[1] = 0\n    for x in range(2, int(~-M**.5) + 1):\n        if p[x]:\n            for y in range(x*x, M, x):\n                p[y] = 0\n    return p\nINF = 10**5 + 1\nE = erat(INF)\nQ = [0] * INF\nfrom itertools import*\nfor i in range(INF):\n    q[i] = i%2 * p[i] * p[-~i\/\/2]\n*a, = accumulate([0] + q)\nfor _ in [None] * int(input()):\n    l, r = map(int, input().split())\n    print(a[-~r] - a[l])",
    "error_obj":"NameError: name 'erat' is not defined"
  },
  "s186530793":{
    "code_string":"import sys\nfrom itertools import accumulate\ndef input(): return sys.stdin.readline().strip()\n\n\ndef get_sieve_of_eratosthenes(n):\n    \"\"\"\n    \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3002\u221aN\u4ee5\u4e0b\u306e\u6570\u306b\u5bfe\u3057\u30662\u304b\u3089\u9806\u306b\u305d\u306e\u6570\u306e\u500d\u6570\u3092\u6d88\u3057\u3066\u3044\u304f\u3002\n    \u8a08\u7b97\u91cf\u306f\u300c\u8abf\u548c\u7d1a\u6570\u300d\u306b\u306a\u308b\u306e\u304c\u30df\u30bd\u3002\u5177\u4f53\u7684\u306b\u306f\n        N\/2 + N\/3 + N\/5 + ... + N\/(\u221aN) = N * (1\/2 + 1\/3 + 1\/5 + ... + 1\/\u221aN)\n                                       = N * loglog(\u221aN) (\u7d20\u6570\u306e\u9006\u6570\u548c\u306e\u767a\u6563\u30b9\u30d4\u30fc\u30c9\u304c\u3053\u308c)\n                                       = N(loglogN - log2)\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError('n is int type.')\n    if n < 2:\n        return []\n    prime = [2]\n    limit = int(n**0.5)\n    data = [i + 1 for i in range(2, n, 2)]\n    while True:\n        p = data[0]\n        if limit < p:\n            return prime + data\n        prime.append(p)\n        data = [e for e in data if e % p != 0]\n\n\ndef main():\n    primes = get_sieve_of_eratosthenes(100000)\n    like = [0] * 10**5\n    for i in range(3, 10**5):\n        if i in primes and (i + 1) \/\/ 2 in primes:\n            like[i] = 1\n    like = list(accumulate(like))\n\n    q = int(input())\n    for _ in range(q):\n        l, r = map(int, input().split())\n        if l < 3: l = 3\n        if r < 3:\n            print(0)\n            continue\n        print(like[r] - like[l - 1])\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s568201656":{
    "code_string":"import math\ndef eratosthenes(n):\n    prime_list = []\n    num_list=[i for i in range(2, n+1)]\n    limit = math.sqrt(n)\n    while True:\n        if limit <= num_list[0]:\n            return prime_list + num_list\n        prime_list.append(num_list[0])\n        num_list = [e for e in num_list if e % num_list[0] != 0]\n\nls = eratosthenes(100000)\nls2 = []\ncount = 0\nfor i in ls:\n    ls2.append(count)\n    if (i+1)\/\/2 in ls:\n        count += 1\nQ = int(input())\nfor i in range(Q):\n    l, r = map(int, input().split())\n    print(ls2[r-1]-ls2[l-1])",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s116907516":{
    "code_string":"import math\nimport numpy as np\ndef get_prime(n):\n    if n<= 1:\n        return[]\n    prime = [2]\n    limit = int(math.sqrt(n))\n    \n    data = [i + 1 for i in range(2,n,2)]\n    while limit > data[0]:\n        prime.append(data[0])\n        data = [j for j in data if j % data[0] != 0]\n    return prime + data\ndef is_prime(n):\n    if n == 1: return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\nn = int(input())\na = get_prime(10**5+1)\nb = np.array([0]*(10**5+2))\nc =0\nd = 0\nadd = 0\nfor i in range(1,len(a)):\n    if is_prime((a[i]+1)\/2):\n        d = a[i] \n        b[c:d] = add \n        c = d\n        add +=1\nb[c:] = add \nb[0::2] = 0\n\nfor i in range(n):\n    l, r =map(int,input().split())\n    print(b[max(0, l[i] - 2)] - b[r[i]])\n    ",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s317228050":{
    "code_string":"q = int(input())\nl, r = [0] * q, [0] * q\nfor i in range(q):\n    l[i], r[i] = map(int, input().split())\n\nmini = min(min(l), min(r))\nmaxi = max(max(l), max(r))\nans = [0] * (maxi + 1)\nprime = [0] * (maxi + 1)\ndef judge_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True if n != 1 else False\n\nfor i in range((mini + 1) \/\/ 2, maxi + 1):\n    prime[i] = judge_prime(i)\n\nfor i in range(mini, maxi + 1, 2):\n    ans[i] = ans[i - 2] + 1 if prime[i] and prime[(i + 1) \/\/ 2] else ans[i - 2\nfor i in range(q):\n    print(ans[r[i]] - ans[max(0, l[i] - 2)])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s896055398":{
    "code_string":"import numpy as np\ndef isP(x):\n    for i in range(2,int(np.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\n#\u30af\u30a8\u30ea\u306bO(1)\u3067\u8fd4\u3059\u305f\u3081\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u7528\u610f\nMAX = int(10e5+1)\nP = [isP(x) for x in range(MAX)]\nAns = [0] * MAX\ncnt = 0\nfor i in range(1,MAX):\n    if P[i] and P[(i+1)\/\/2]:\n        cnt += 1\n    Ans[i] = cnt\n\nq = int(input())\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(Ans[r]-Ans[l-1])",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s444039640":{
    "code_string":"import math\n\nQ=int(input())\nlr=[list(map(int,input().split())) for _ in range(Q)]\n\nMAX=10**5\nlimit=int(math.sqrt(MAX))\nprimes=[2]\ntable=[i+1 for i in range(2,MAX,2)]\nwhile limit>table[0]:\n  primes.append(table[0])\n  table=[j for j in table if j%table[0] != 0]\ntable=primes+table\n\nsimilars=[]\nfor i in range(len(table)):\n  n=table[i]\n  if (n+1)\/\/2 in table:\n    similars.append(n)\n\nfor i in lr:\n  l=i[0]\n  r=i[1]\n  cand=[x for x in similars if l<=x<=r]\n  print(len(cand))",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s498532456":{
    "code_string":"from bisect import bisect_left as bsl\n\ndef main():\n    with open(0) as f:\n        Q = int(f.readline())\n        Query = [tuple(map(int, line.split())) for line in f.readlines()]\n    \n    p_table = makePtable(10**5)\n    p_set = set(p_table)\n    Like2017 = [p for p in p_table if (p+1)\/\/2 in p_set]\n    database = [bsl(Like2017, i) for i in range(1,10**5+1)]\n\n    for l,r in Query:\n        print(database[r] - database[l-1])\n\ndef makePtable(N):\n    table = list(range(2,N+1))\n    result = []\n    while len(table) != 0:\n        p = table[0]\n        result.append(p)\n        table = [x for x in table[1:] if x % p != 0]\n    return result\n\nmain()",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s720577779":{
    "code_string":"A,B,C,D=map(int, input().split())\nif A+B>C+D:\n  print('Left')\nelif A+B>C+D::\n  print('Right')\nelse:\n  print('Balanced')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s684709730":{
    "code_string":"a,b,c,d=map(int,input().split())\nprint([[\"Balanced,\"Left\"][a+b>c+d],\"Right\"][a+b<c+d])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s757693759":{
    "code_string":"import sys\ninput = sys.stdin.readline\n\nA,B,C,D=list(map(int,input().split()))\nif A+B == C+D:\n    print('Balanced')\nelif A+B \uff1e C+D:\n    print('Left')\nelse:\n    print('Right')\n",
    "error_obj":"SyntaxError: invalid character '\uff1e' (U+FF1E)"
  },
  "s085489425":{
    "code_string":"a,b,c,d=map(int,input())\nif a+b>c+d:\n  print('Right')\nelif (a+b)==(c+d):\n  print('Balanced')\nelse:\n  print('Left')\n ",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s425891461":{
    "code_string":"A, B, C, D = map(int, input())\nprint(\"Right\" if (A+B) < (C+D) else \"Balanced\" if (A+B) == (C+D) else \"Left\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s347363098":{
    "code_string":"A,B,C,D=map(int,input(),split())\nif A+B>C+D:\n  print(\"Left\")\nelif:\n  A+B<C+D:\n    print(\"Right\")\nelse:\n  print(\"Balanced\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s751662249":{
    "code_string":"A = input()\nB = input()\nC = input()\nD = input()\nL = int(A)+int(B)\nR = int(C)+int(D)\nif L>R:\n  print(\"Left\")\nelif L == R:\n  print(\"Balanced\")\nelse :\n  print(\"Right\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s661610830":{
    "code_string":"A, B, C, D = [int(input()) for i in range(4)]\nif A+B>C+D:\n  print('Left')\nelif A+B==C+D:\n  print('Balanced')\nelif A+B<C+D:\n  print('Right')\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 8 7 1'"
  },
  "s589901761":{
    "code_string":"I = input().split()\nA, B, C, D = [int(i) for i in I]\n\nif int(A + B > C + D:\n    print('Left')\nelif A + B < C + D:\n    print('Right')\nelse:\n    print('Balanced')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s625640445":{
    "code_string":"a, b, c, d=map(int,input().split())\nif a+b<c+d:\n  print(\"Right\")\nelif a+b=c+d:\n  print(\"Balanced\")\nelse:\n  print(\"Left\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s525165097":{
    "code_string":"N = int(input())\nA = int(input())\nB = int(input())\nans_list = []\n\nfor i in range(0,N+1):\n    if i < 10:\n        if i >= A and i <=B:\n            ans_list.append(i)\n    else:\n        temp = list(map(int,str(i)))\n        temp = temp[0]+temp[1]\n        if temp >=A and temp<=B:\n            ans_list.append(i)\n            \nprint(sum(ans_list))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '20 2 5'"
  },
  "s015444050":{
    "code_string":"n, a, b = map(int, input().split())\nans = 0\n\nfor i in range(1,n+1):\n    mod = 0\n    while n > 0:\n        mod += (i % 10)\n        i \/\/= 10\n    if mod >= a and mod <= b:\n        ans += mod\n\nprint(ans)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s265323582":{
    "code_string":"N, A, B = map(int, input().split())\ncount = 0\n\nfor i in range(N + 1):\n    if A <= i <= B:\n        count += sum(list(str(i)))\n\nprint(count)",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s906729585":{
    "code_string":"N, A, B = map(int,input().split())\nans = 0\nfor i in range(len(N)):\n  i = str(i)\n  count = 0\n  for j in i:\n    count += int(j)\n  if A <= count and B >= count:\n    ans += int(i)\nprint(ans)",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s492825627":{
    "code_string":"N,A,B = map(int,input().split())\n\nans = 0\nfor i in range(1,N+1):\n  d = sum(list(map(int,list[str(i)])))\n  if A <= d <= B:\n    ans += 1\n\nprint(ans)\n",
    "error_obj":"TypeError: 'types.GenericAlias' object is not iterable"
  },
  "s055608984":{
    "code_string":"def sum(n):\n    str_n = str(n)\n    ans = 0\n    for i in range(len(str_n)):\n        ans += int(str_n[i])\n    return ans\n\nN,A,B = map(int, [input() for i in range(3)])\n\nans1 = 0\nfor i in range(N+1):\n    if A <= sum(i) <= B:\n        ans1 += i\n    else:\n        pass\nprint(ans1)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s029013396":{
    "code_string":"n, a, b = map(int, input().split()))\nprint(sum(i for i in range(1 + n+1) if a <= sum(map(int, str(i)) <=b)))",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s850186255":{
    "code_string":"N,A,B = map(int,input().split())\nS = sum(i for i in range(1,N+1) if A <= sum(list(map(int,str(i))) <= B)\nprint(S)\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s720169626":{
    "code_string":"N, A, B = map(int, input().split())\n\nsum = 0\nfor i in range(1, N+1):\n    if A <= sum(list(map(int, str(i)))) <= B:\n        sum += i\n\nprint(sum)",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s581389012":{
    "code_string":"n,a,b=(int(x) for x in input().split())\nc=0\ndef sual(N,A,B):\n  l=list('{}'.format(N))\n  s=sum(l)\n  if A<=s<=B:\n    return True\n  else:\n    return False\nfor x in range(n):\n  if sual(x+1,a,b):\n    c=c+x+1\nprint(c)\n",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s760100229":{
    "code_string":"n, a, b = map(int, input().split())\n \ntotal = 0\nfor i in range(n+1):\n  x = str(i)\n  y = 0\n  for j in X:\n    y += int(j)\n    \n  if a <= y <= b:\n    total += i\nprint(total)",
    "error_obj":"NameError: name 'X' is not defined"
  },
  "s053265012":{
    "code_string":"[a,b,c] = [int(i) for i in input().split(\" \")]\ngoukei = 0\nfor i in range(1,a+1):\n  kurainowa = 0\n  kisuu = [int(k) for k in list(str(i))]\n  for j in range(0,len(kissu)-1+1):\n    kurainowa = kurainowa + kissu[j]\n  if kurainowa < b+1 and a-1 <kurainowa :\n    goukei = goukei + i\nprint(goukei)",
    "error_obj":"NameError: name 'kissu' is not defined"
  },
  "s421390580":{
    "code_string":"N,A,B = list(map(int,input().split()))\n\ncnt = 0\nfor n range(1,N):\n    val = 0\n    tmp = N\n    while tmp \/\/ N > 0:\n        val = tmp % 10\n        tmp = tmp \/\/ 10\n    \n    if val >= A and val <= B:\n        cnt += 1\nprint(cnt)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s678581114":{
    "code_string":"a,b,c=input().split()\na=int(a)\nb=int(b)\nc=int(c)\nd=0\nfor i in range(1,a+1):\n  if b<=(i\/\/10000+(i\/\/1000-(i\/\/10000)*10000))+(i\/\/100-(i\/\/1000)*1000))+(i\/\/10-(i\/\/100)*100)+(i\/\/1-(i\/\/10)*10)<=c:\n    d=d+i\nprint(d)",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s436806426":{
    "code_string":"N,A,B=map(int,input().split())\nsouryou=0\nfor i in range(N):\n  j=i+1\n  j_str=str(j)\n  goukei=0\n  for k in range(len(j_str)):\n    goukei=goukei+int(j_str[k])\n  if goukei>=A&&goukei<=B:\n    souryou=souryou+j\nprint(str(souryou))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s153233776":{
    "code_string":"n,a,b=map(int,input().split())\n\nsum=0\n\nfor i in range(n+1):\n    if a<=sum(map(int,str(i)))<=b:\n        count+=i\n\nprint(sum)",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s780419937":{
    "code_string":"    n, a, b = map(int, input().split())\n     \n    ans = 0\n    for num in range(n):\n      num += 1\n      num_0 = num\n      place_of_10000 = num\/\/10000\n      num -= 10000*place_of_10000\n      place_of_1000 = num\/\/1000\n      num -= 1000*place_of_1000\n      place_of_100 = num\/\/100\n      num -= 100*place_of_100\n      place_of_10 = num\/\/10\n      num -= 10*place_of_10\n      \n      tmp = place_of_10000 + place_of_1000 + place_of_100 + place_of_10 + num\n      if a<=tmp and tmp<=b:\n        ans += num_0\n        \n    print(ans)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s754712838":{
    "code_string":"N,A,B = map(int, input().split())\n\nans = 0\n\nfor n in range(1, N+1):\n    if A <= sum(n) <= B:\n        ans += n\n\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s271009009":{
    "code_string":"n,a,b = map(int,input().split())\nans = 0\nfor i in range(1,n+1):\n    s = 0\n    for t in str(i):\n        s\u3000 += int(t)\n    if a-1< s < b+1:\n        ans += str(i)\nprint(ans)",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s766826001":{
    "code_string":"N,A,B=map(int, [input() for i in range(3)])\ns=0\nfor i in range(1,N+1):\n    k=0\n    j=i\n    while(j>0):\n        k+=j%10\n        j=j\/\/10\n    if (A<=k and k<=B):\n        s=s+i\nprint(s)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s183877619":{
    "code_string":"n,a,b = map(int, input().split())\nans = 0\nfor i in range(1,n+1):\n    if a <= sum([int(c) for c in str(i)]) => b:\n        ans += i\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s535283805":{
    "code_string":"n,a,b=map(int,input().split())\nn=0\nfor i in range (1,n+1):\n    result=sum(list(map(int,str(i))))\n    if result>=a and result<=b:\n        ans+=i\nprint(ans) ",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s204848476":{
    "code_string":"N,A,B = map(int,input().split())\nfor M in range(1,N+1,1)\n  n =\u3000str(M)\n  a=0\n  b=0\n  c=0\n  d=0\n  e=0\n  y=0\n  if N=10000:\n    e=n[0]\n  if 1000<=N<10000:\n    d=n[0]\n    c=n[1]\n    b=n[2]\n    a=n[3]\n  if 100<=N<1000:\n    c=n[0]\n    b=n[1]\n    a=n[2]\n  if 10<=N<100:\n    b=n[0]\n    a=n[1]\n  if N<10:\n    a=n[0]\n  x = int(d) + int(c) + int(b) + int(a) + int(e)\n  if A <= x <= B:\n    y = y + int(n)\n  print(y)\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s080733998":{
    "code_string":"N, A, B = map(int, input().split())\nsum = 0\nfor num in range(N + 1):\n    if A <= sum([int(x) for x in str(num)]) <= B:\n        sum += num\nprint(sum)",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s123865633":{
    "code_string":"n,a,b=map(int,input().split())\ncnt=0\nfor i in range(n):\n  n_list=list(int(i))\n  if sum(n_list)>=a and sum(n_list)<=b:\n    cnt+=i\nprint(cnt)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s962315722":{
    "code_string":"n,a,b=map(int,input().split())\nans=0\nfor i in range(1,n+1):\n  ii=list(i)\n  ii=sum(ii)\n  if ii in range(a,b+1):\n    ans+=i\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s665924626":{
    "code_string":"N=int(input())\nA=int(input())\nB=int(input())\n\nsum=0\nfor i in range(N+1):\n    nums = list(str(i))\n    tmp = 0\n    for j in nums:\n        tmp = tmp + int(j)\n    if A<=tmp:\n        if tmp<=B:\n            sum = sum + i\nprint(sum)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '20 2 5'"
  },
  "s862336992":{
    "code_string":"import math\nX,Y = map(int,input().split())\nprint(int(math.floor(Y\/X,2)+1))",
    "error_obj":"TypeError: math.floor() takes exactly one argument (2 given)"
  },
  "s458436015":{
    "code_string":"import math\n\nx = input()\ny = input()\n\n\ncnt = 0\n\nwhile x <= y:\n    x *= 2\n    cnt += 1\n\nprint (cnt)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s147690157":{
    "code_string":"s = list(map(int, list(input())))\nans = n\nfor i in range(len(s)-1):\n    if s[i]!=s[i+1]:\n        ans = min(ans, max(i+1, len(s)-i-1))\nprint(ans)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s677655317":{
    "code_string":"S=input()\nl=len(S)\nif l%2==1:\n    m=S[l\/\/2]\n    c=1\n    for i in range l\/\/2:\n        if S[l\/\/2-i-1]==m and S[l\/\/2+i+1]==m:\n            c+=2\n        else:\n            break\n    ans=c+(l-c)\/\/2\nelse:\n    m1=S[l\/\/2-1]\n    m2=S[l\/\/2]\n    c=0\n    if m1==m2:\n        c=2\n        for i in range l\/\/2-1:\n        if S[l\/\/2-i-2]==m1 and S[l\/\/2+i+1]==m1:\n            c+=2\n        else:\n            break\n    ans=c+(l-c)\/\/2\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s427676420":{
    "code_string":"S = input()\n\na = n\nn = len(S)\nfor i in range(n-1):\n    if S[i] != S[i+1]:\n        a = min(a, max(i+1, n-i+1))\n\nprint(a)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s109114709":{
    "code_string":"# coding: utf-8\n\n\ndef main():\n    X, Y = map(int, input().split())\n    ans = 0\n    while (X <= Y){\n        x *= 2\n        ans += 1\n    }\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s810715871":{
    "code_string":"a, b = map(int, input().split())\nmulti = math.ceil((a + b) \/ 2)\n\nprint(str(multi))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s279785223":{
    "code_string":"x,y = map(int, input().split())\nimport math\nprint(math.celi((x+y)\/2))",
    "error_obj":"AttributeError: module 'math' has no attribute 'celi'"
  },
  "s076066004":{
    "code_string":"a,b = map(int,input())\nx = (a+b)\/\/2\nprint(x)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s257459483":{
    "code_string":"a, b = map(int, input().split())\nimport math\nprint(math.ceil(a + b \/ 2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s138115243":{
    "code_string":"a, b = map(int, input().spoit())\nprint((a + b + 1) \/\/ 2)",
    "error_obj":"AttributeError: 'str' object has no attribute 'spoit'"
  },
  "s843548687":{
    "code_string":"a=int(input())\nb=int(input())\n\nx=(a+b)\/2\nif x%1==0:\n    print(int(x))\nelse:\n    print(int(x)+1)\n  ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 3'"
  },
  "s374073356":{
    "code_string":"import math\nprint(math.ceil((int(input())+int(input()))\/2))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 3'"
  },
  "s016058021":{
    "code_string":"N,A,B = map(int,input().split())\n\nprint(min(N*A,B))",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s880391500":{
    "code_string":"a, b = map(int, input())\nimport math\nprint(math.ceil((a + b) \/ 2))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s037093387":{
    "code_string":"a,b = int(input().split())\n \nx = (a+b)\/2\n \nif x == int(x):\n  print(x)\n \nelse:\n  x += 1\n  print(int(x))\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s596822770":{
    "code_string":"from math import ceil\na,b = map(int, input().split())\nprint(ceil((a+b)\/2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s982643466":{
    "code_string":"import math\na, b = map(int, input().split())\nmean = (a + b) \/ 2.0\nprint(int(math.ceil(mean))\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s485742628":{
    "code_string":"a,b=map(int,input()split())\nprint((a+b)\/\/2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s342583453":{
    "code_string":"a, b = (int(x) for x in input().split())\ns = (a + b) % 2\nt = (a + b) \/ 2\nif s == 0:\n\tprint(t)\n\telse:\n\tprint(t + 0.5)\t",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s101913193":{
    "code_string":"a, b = map(int, input().split())\nans = math.ceil((a + b) \/ 2)\nprint(ans)\n\n",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s755415568":{
    "code_string":"\nimport math\n\n\ndef main():\n    x, y = map(int, input())\n    print(math.floor((x + y) \/ 2))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s470307858":{
    "code_string":"a,b=map(int,input().split())\nprint((a+b+1)\/2))\n",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s561181330":{
    "code_string":"a",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s855230679":{
    "code_string":"import math\na,b=input().split()\nprint(math.ceil(a+b\/2))",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'str' and 'int'"
  },
  "s068412274":{
    "code_string":"import math\na, b = map(int, input().split())\nprint(math.celi((a+b)\/2)))",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s295947271":{
    "code_string":"a,b =map(int,input().split())\nif (a+b)% ==0:\n  print((a+b)\/\/2)\nelse:\n  print(((a+b)\/\/2)+1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s485867245":{
    "code_string":"import numpy as np\nab = input().split(\" \")\nprint(np.round(np.mean(int(ab[0]), int(ab[1]))))",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p03485\/Python\/s485867245.py\", line 3, in <module>\n    print(np.round(np.mean(int(ab[0]), int(ab[1]))))\n  File \"<__array_function__ internals>\", line 5, in mean\n  File \"\/home\/alex\/.local\/lib\/python3.9\/site-packages\/numpy\/core\/fromnumeric.py\", line 3440, in mean\n    return _methods._mean(a, axis=axis, dtype=dtype,\n  File \"\/home\/alex\/.local\/lib\/python3.9\/site-packages\/numpy\/core\/_methods.py\", line 167, in _mean\n    rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)\n  File \"\/home\/alex\/.local\/lib\/python3.9\/site-packages\/numpy\/core\/_methods.py\", line 76, in _count_reduce_items\n    items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]\nnumpy.AxisError: axis 3 is out of bounds for array of dimension 0\n"
  },
  "s476430198":{
    "code_string":"import math\nnum1 = int(input())\nnum2 = int(input())\nX = (num1 + num2)\/2\nprint(math.ceil(X))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 3'"
  },
  "s619248644":{
    "code_string":"a,b = map(int,input().split())\nif (a + b)%2 ==0:\n    print(round((a + b) \/ 2))\nelse: \n    print(round((a + b + 1) \/ 2)\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s034092465":{
    "code_string":"import math\na,b=map(int,input())\nprint(math.ceil((a+b)\/2))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s202433910":{
    "code_string":"s=list(input())\nt=list(input())\ns1=s.sort()\nt1=t.sort()\nif s1<t1:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  ",
    "error_obj":"TypeError: '<' not supported between instances of 'NoneType' and 'NoneType'"
  },
  "s689195643":{
    "code_string":"s=input()\nt=input()\n\nu=sorted([s])\nv=sorted([t],reversed=True)\n\nprint(\"Yes\" if u<v else \"No\")",
    "error_obj":"TypeError: 'reversed' is an invalid keyword argument for sort()"
  },
  "s618663393":{
    "code_string":"S = list(input())\nT = list(input())\ns = []\nt = []\nfor i in S:\n  s.append(int(ord(i)))\nfor i in T:\n  t.append(int(ord(i)))\n\ns.sort(reverse = True)\nt.sort(reverse = True)\nfor i in range(max(len(s),len(t))):\n  if t[i] > s[i]:\n    print(\"Yes\")\n    exit(0)\n  elif s[i] != t[i]:\n    break\n  \nif len(t) > len(s):\n  for i in s:\n    if i == len(s):\n      print(\"Yes\")\n    elif i not in t:\n      print(\"No\")\n      exit(0)\n    else:\n      t.remove(i)\nelse:\n  print(\"No\")\n  exit(0)\nprint(\"No\")\n\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s827782025":{
    "code_string":"x=sorted(list(input()))\ny=sorted(list(input()),reverse=true)\na=\"\"\nb=\"\"\nfor (p,q) in zip x,y:\n  a+=p\n  b+=q\nif a<b:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s729187625":{
    "code_string":"s = list(input())\nt = list(input())\nfor i in s:\n  for j in t:\n    if ord(i)<ord(j):\n      print(\"Yes\")\n      exit()\n \ncount = 0\nif len(s)<len(t):\n  for i in range(len(s)):\n    if s[i]=t[i]:\n      count+=1\n  if count = len(s):\n    print(\"Yes\")\n    exit()\n \nprint(\"No\")\n    \ns = list(input())\nt = list(input())\nfor i in s:\n  for j in t:\n    if ord(i)<ord(j):\n      print(\"Yes\")\n      exit()\n\nS = sorted(s)\nT = sorted(t)\ncount = 0\nif len(s)<len(t):\n  for i in range(len(s)):\n    if S[i]=S[i]:\n      count+=1\n  if count = len(s):\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")\n    \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s357790381":{
    "code_string":"a = [input() for i in range(2)]\n\nsp = \"\".join(sorted(list(a[0])))\ntmp = list(a[1])\ntmp.sort().reverse()\ntp = \"\".join(tmp)\n\nif sp < tp:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"AttributeError: 'NoneType' object has no attribute 'reverse'"
  },
  "s786525450":{
    "code_string":"s = input().sorted()\nt = input().sorted(reverse=True)\nif(new_s < new_t): print(\"Yes\")\nelse: print(\"No\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'sorted'"
  },
  "s488226688":{
    "code_string":"import sys\nfrom string import ascii_lowercase as alph\nfrom itertools import zip_longest\n\ns,t=[list(l) for l in sys.stdin.read().split()]\nd=dict((w,x) for w,x in zip(alph,range(26)))\nd['?']=-1\ns.sort(key=d.get)\nt.sort(key=d.get, reverse=True)\nfor x,y in zip_longest(s,t,fillvalue='?'):\n  if d[x]<d[y]:\n      print('Yes')\n      break\n  elif d[x]>d[y]\n      print('No')\n      break\nelse:\n  print('No')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s253964183":{
    "code_string":"s=input()\nt=input()\ns=s.sort()\nt=t.sort(reverse=True)\nif s<t:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s069238837":{
    "code_string":"import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef i(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\ndef gcd(*numbers): reduce(math.gcd, numbers)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncount = 0\nans = 0\n\na = s()\nt = s()\n\na.sort()\ny = \"\".join(a)\nt = sorted(t,reverse = True)\nx = \"\".join(t)\nif y < x:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s601800060":{
    "code_string":"a = input()\nb = input()\na = list(a)\nb = list(b)\n\nif (a.sort(reverse=True) < b.sort()):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"TypeError: '<' not supported between instances of 'NoneType' and 'NoneType'"
  },
  "s945514851":{
    "code_string":"S = sorted(input())\nT = sorted(input())\n\nprint(\"Yes\" if (S < t) else \"No\")\n\n",
    "error_obj":"NameError: name 't' is not defined"
  },
  "s960328718":{
    "code_string":"s,t=map(str,input().split())\ns_array=[]\nt_array=[]\nfor i in range(len(s)):\n  s_array.append(s[i])\nfor i in range(len(t)):\n  t_array.append(t[i])\n\ns_array=sorted(s_array)\n\nt_array=sorted(t_array,reverse=True)\nfor i in range(min([len(s_array),len(t_array)])):\n  if s_array[i]<t_array[i]:\n    print('Yes')\n    exit()\n  elif s_array[i]>t_array[i]:\n    print('No')\n    exit()\nprint('No')",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s019823491":{
    "code_string":"s=input()\nt=input()\ns.sort()\nt.sort(reverse=True)\nfor i in range(min(len(s),len(t))):\n  if ord(s[i])==ord(t[i]):\n    continue\n  elif ord(s[i])<ord(t[i]):\n    print(\"Yes\")\n    break\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s966752556":{
    "code_string":"s=list(list(i for i in input()).sort())\nt=list(list(i for i in input()).sort()(reverse=True))\nA=True\nfor i in range(min(len(s),len(t))):\n    if s[i]<t[i]:\n        A = True\n    elif s[i]>t[i]:\n        A = False\n        break\n    else:\n        if len(s)<len(t): A=True\n        else:A= False\nprint('Yes' if A else 'No')\n",
    "error_obj":"TypeError: 'NoneType' object is not iterable"
  },
  "s437100237":{
    "code_string":"s = input()\nt = input()\nListS= list(s)\nListT = list(t)\nListS.sort()\nListT.sort(reverse= True)\nS = \"\"\nT = \"\"\nfor i in range(len(ListS)):\n  S += ListS[i]  \nfor i in range(len(ListT)):\n  T += ListT[i]\nif S == T:\n  print(\"No\")\nelse:\n  List.append(S)\n  List.append(T)\n  List.sort()\n  if List[0]==S:\n    print(\"Yes\")\n  else:\n    print(\"No\")\n  \n\n",
    "error_obj":"NameError: name 'List' is not defined"
  },
  "s029224390":{
    "code_string":"N = input()\nA = sorted([int(x) for x in input().split()])\nimport bisect as bs\nans = 0\nf = lambda X, x: bs.bisect_right(X,x) - bs.bisect_left(X.x)\nfor a in set(A):\n    cnt = f(A,a)\n    if cnt < a:\n        ans += cnt\n    else:\n        ans += cnt-a\nprint(ans)",
    "error_obj":"AttributeError: 'list' object has no attribute 'x'"
  },
  "s291305327":{
    "code_string":"n = int(input())\nalist = list(map(int,input().split()))\nfrom collections import Counter\nadic = Counter(alist)\ncount = 0\nfor k,v in adic:\n  if int(k) <= v:\n    count+=(v-int(k))\n  else:\n    count+=v\nprint(count)",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s981584277":{
    "code_string":"N = int(input())\n*A, = map(int, input().split())\ndic = {}\nfor a in A:\n    if a in dic:\n        dic[a] += 1\n    else:\n        dic[a] = 1\nfor k, v in dic.items():\n    if k == v:\n        continue\n    elif k > v:\n        ans += v\n    else:\n        ans += v - k\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s369952534":{
    "code_string":"import numpy as np\nMOD = 10**9 + 7\n\ndef fft_convolve(f, g):\n  Lf, Lg = f.shape[-1], g.shape[-1]\n  L = Lf + Lg - 1\n  fft_len = 1 << L.bit_length()\n  fh, fl = f >> 15, f & (1 << 15) - 1\n  gh, gl = g >> 15, g & (1 << 15) - 1\n  def conv(f, g):\n    Ff = np.fft.rfft(f, fft_len)\n    Fg = np.fft.rfft(g, fft_len)\n    h = np.fft.irfft(Ff * Fg)\n    return np.rint(h)[..., :L].astype(np.int64) % MOD\n  x = conv(fl, gl)\n  z = conv(fh, gh)\n  y = conv(fl + fh, gl + gh) - x - z\n  return (x + (y << 15) + (z << 30)) % MOD\n\ns = input()\nx, y = map(int, input().split())\n\nRob = list(s.split(\"T\"))\n\nX = [len(r) for r in Rob[::2]]\nY = [len(r) for r in Rob[1::2]]\n\ndef solve():\n  y = abs(y)\n  Xst = X[0]\n  X = X[1:]\n  if abs(x-Xst) <= sum(X) and y <= sum(Y):\n    f = np.array([1], np.int64)\n    for i in X:\n      L = [0]*(2*i+1)\n      L[0], L[-1] = 1, 1\n      f = np.convolve(f, np.array(L, np.int64))\n    FlagX = f[abs(x-Xst)+sum(X)]\n    g = np.array([1], np.int64)\n    for j in Y:\n      L = [0]*(2*j+1)\n      L[0], L[-1] = 1, 1\n      g = np.convolve(g, np.array(L, np.int64))\n    FlagY = g[y+sum(Y)]\n    if FlagX and FlagY:\n      print(\"Yes\")\n    else:\n      print(\"No\")\n  else:\n    print(\"No\")\n\nsolve()",
    "error_obj":"UnboundLocalError: local variable 'y' referenced before assignment"
  },
  "s640620830":{
    "code_string":"a = input()\nprint(a.count(1))",
    "error_obj":"TypeError: must be str, not int"
  },
  "s856226898":{
    "code_string":"n = input()\ndef sum(n):\n  s = str(n)\n  a = list(map(int, s))\n  return sum(a)\n\nprint(sum(n))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '['"
  },
  "s847683339":{
    "code_string":"S = map(int, input().split())\nc = 0\n\nif S%10 == 1:\n  c += 1\nif S\/\/100 == 1:\n  c += 1\nif (S\/\/10)%10 == 1:\n  c += 1\nprint(c)",
    "error_obj":"TypeError: unsupported operand type(s) for %: 'map' and 'int'"
  },
  "s015173491":{
    "code_string":"a = input()\nprint(a.count(1))",
    "error_obj":"TypeError: must be str, not int"
  },
  "s733166314":{
    "code_string":"str1 = input()\ns_list = list(str1)\nstr_len = len(str1)\nn = 0\nfor i in range(str_len):\n  if == s_list[i]:\n    n = n + 1\nprint(n)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s126404606":{
    "code_string":"s=list(input())\nfrom collections import Counter\ns_count=s.Counter()\nprint(s_count['1'])",
    "error_obj":"AttributeError: 'list' object has no attribute 'Counter'"
  },
  "s802364719":{
    "code_string":"s = input()\nprint(s.sount('1'))",
    "error_obj":"AttributeError: 'str' object has no attribute 'sount'"
  },
  "s139749652":{
    "code_string":"num_list = list(map(int, input().split()))\ncount = 0\n\nfor i in range(3):\n  count += num_list[i]\n\nprint(count)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s655020173":{
    "code_string":"s=input()\nprint(s.count(\u201c1\u201d))",
    "error_obj":"SyntaxError: invalid character '\u201c' (U+201C)"
  },
  "s662469967":{
    "code_string":"s = input()\nans = 0\nif s=1:\n    ans += \"1\"\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s409811952":{
    "code_string":"s = string(input())\ncounter = 0\n\nfor i in range(3):\n  print(s[i])\n  if s[i]==1:\n    counter+=1\nprint(counter)\t",
    "error_obj":"NameError: name 'string' is not defined"
  },
  "s727121398":{
    "code_string":"a = list(input())\ncount = 0\nfor i in a:\n  if a[i] == 1: count += 1\nprint(count)",
    "error_obj":"TypeError: list indices must be integers or slices, not str"
  },
  "s864201974":{
    "code_string":"from sys import stdin\na = [int(x) for x in list(stdin.readline())]\ny = 0\n\nfor x in a:\n    if x == 1:\n        y += 1\n\nprint(y)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '\\n'"
  },
  "s244416516":{
    "code_string":"a,b,c = map(int,input().split())\n\nprint(a+b+c)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s323580453":{
    "code_string":"nums=input()\nprint(nums.count(1))",
    "error_obj":"TypeError: must be str, not int"
  },
  "s942108940":{
    "code_string":"a = input()\ncount = 0\n\ncount += 1 if a[0] == 1\ncount += 1 if a[1] == 1\ncount += 2 if a[2] ==1\nprint(count)\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s752374637":{
    "code_string":"s = map(input())\ncount = 0\nif s[0] == '1':\n  count += 1\nif s[1] == '1':\n  count +=1\nif s[2] == '1':\n  count += 1\nprint(count)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s552152856":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\ncount = 0\nexist_odd = False\n\nwhile exist_odd == False:\n    for i in range(n):\n        if a[i] % 2 != 0:\n            exist_odd = True\n            if n != i:\n                count -= 1\n            break\n        else:\n            a[i] = a[i] \/ 2\n    count += 1\nprint(count)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s294043417":{
    "code_string":"s = input()\nans = 0\nans += [int(i) for i in s]\nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'list'"
  },
  "s702526137":{
    "code_string":"# coding= utf-8\nlol=input(\"\")\nS1=int(lol[0:0])\nS2=int(lol[1:1])\nS3=int(lol[2:2])\nSs=[S1,S2,S3]\ncnt=0\nSs.sort()\nfor 1 in Ss:\n  cnt += 1\n  del Ss[0]\nelse:\n  print(cnt)\n  break",
    "error_obj":"SyntaxError: cannot assign to literal"
  },
  "s043813799":{
    "code_string":"s = input()\nprint(s.count(1))",
    "error_obj":"TypeError: must be str, not int"
  },
  "s973568072":{
    "code_string":"print(input(),count('1'))",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s175634548":{
    "code_string":"print(input().count(1))",
    "error_obj":"TypeError: must be str, not int"
  },
  "s261509153":{
    "code_string":"for int(j) in input():\n    if j == 1:\n        Count +=1\nprint(Count)",
    "error_obj":"SyntaxError: cannot assign to function call"
  },
  "s459377142":{
    "code_string":"# \uff13\u6841\u306e\u6574\u6570\u306e\u5165\u529b\ns = input('')\ni = 0\n# 1\u304b\u30893\u6841\u76ee\u307e\u3067\u306e\u7e70\u308a\u8fd4\u3057\n\tfor j in range(3):\n# 1\u6841\u76ee\u306e\u30c1\u30a7\u30c3\u30af\n\t\tif s[j] == '1':\n\t\t\ti += 1\n\t\telse:\n\t\t\ti += 0\nprint(i)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s346946206":{
    "code_string":"print(intput().count(\"1\"))",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s720271760":{
    "code_string":"a,b,c = (int(x) for x in input() . split())\n\nprint(a + b + c)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s853679088":{
    "code_string":"inp = map(str,input())\n\nprint(inp.count(1))\n\n",
    "error_obj":"AttributeError: 'map' object has no attribute 'count'"
  },
  "s257785322":{
    "code_string":"S = list(input())\nprint(sum(S))",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s958489435":{
    "code_string":"print(input().count(1))",
    "error_obj":"TypeError: must be str, not int"
  },
  "s099049505":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\n\nans=0\nwhile all(i%2==0 for i in a):\n    ans+=1\n    for j in range(n):\n        a[j]\/\/=2\nprint(ans)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s608255704":{
    "code_string":"N=int(input())\na=[int(x) for x in input().split()]\nb=a\nt=-1\ns=0\nwhile s==0:\n  for i in range(N):\n    if b[i]%2!=0:\n      s=1\n    b[i]=b[i]\/2\n  t=t+1\nprint(t)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s384994015":{
    "code_string":"str(s)=input()\ncount = 0\nfor v in range(1,4):\n    if 1 in s[v]:\n        count +=1\nprint(count)",
    "error_obj":"SyntaxError: cannot assign to function call"
  },
  "s026214663":{
    "code_string":"A, B, C = int(input())\nprint(int(A)+int(B)+int(C))",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s330524274":{
    "code_string":"a = map(int, input().split())\nprint(a.count(1))\n",
    "error_obj":"AttributeError: 'map' object has no attribute 'count'"
  },
  "s555926040":{
    "code_string":"s = input()\ncout = 0\nfor a in s:\n  if a == \"1\"\n  \tcout += 1\nprint(cout)\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s577355256":{
    "code_string":"x = str(input())\na =int(x[0])\nb=int(x[1]9\nc=int(x[2])\n\n\nprint(a+b+c)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s202808968":{
    "code_string":"print(count(\"1\"))",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s394418799":{
    "code_string":"a = input()\nprint(a.count('1')\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s943084777":{
    "code_string":"a,b,c = input().split()\n\ni=0\nif a==1:\n    i++\nif b==1:\n    i++\nif c==1:\n    i++\nprint(i)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s778275895":{
    "code_string":"s = input()\na, b, c = int(s[0]),int(s[1]),int(s[2])\ncount = 0\nif a == 1:\n  count+=1\nif b == 1:\n  count+=1\nif C == 1:\n  count+=1\nprint(count)",
    "error_obj":"NameError: name 'C' is not defined"
  },
  "s088226190":{
    "code_string":"x=input()\nX=list('{}'.format(x))\nA=sum(X)\nprint(A)",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s142159490":{
    "code_string":"marbles = input()\nnum = marbles.count(1)\nprint(num)\n",
    "error_obj":"TypeError: must be str, not int"
  },
  "s720582406":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nc=0\nwhile True:\n    for i in range(N):\n        if A[i] % 2 !=0:\n            print(c)\n            exit()\n        else:\n            A[i] = A[i] \/ 2\n    c=c+1",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s320971561":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nans=0\nwhile 1:\n    for i in range(n):\n        if a[i]%2:\n            print(ans)\n            exit()\n        a[i]\/\/=2\n    ans+=1",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s272442317":{
    "code_string":"s=input()\nif s=\"111\":\n  print(3)\nelif s=\"110\" or \"101\" or \"011\":\n  print(2)\nelif s=\"100\" or \"010\" or \"001\":\n  print(1)\nelse s=\"000\":\n  print(0)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s276582583":{
    "code_string":"s = input()\nans = s.count(1)\nprint(ans)",
    "error_obj":"TypeError: must be str, not int"
  },
  "s578669095":{
    "code_string":"s = input()\nfor x in s:\n  if x != '0':\n    count = count + 1\nprint(count)",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s292303599":{
    "code_string":"s = int(input())\na = s.count(1)\nprint(a)",
    "error_obj":"AttributeError: 'int' object has no attribute 'count'"
  },
  "s940565759":{
    "code_string":"s=input()\ncount=0\nfor i for range(3):\n  if s[i]=='1':\n    count+=1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s301320629":{
    "code_string":"S1, S2, S3 = map(str,input().split())\ninput_sum = str(S1+S2+S3)\n\nprint(input_sum.count(\"1\"))",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s711930589":{
    "code_string":"s=input()\nprint(s.count(\"1\")",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s362141621":{
    "code_string":"s = input()\nprint(count('1'))",
    "error_obj":"NameError: name 'count' is not defined"
  },
  "s049162037":{
    "code_string":"n=int(input())\nprint(n.count(1))",
    "error_obj":"AttributeError: 'int' object has no attribute 'count'"
  },
  "s320933187":{
    "code_string":"import sys\n\nargs = sys.argv\n\n# print(args)\n\ndef f(arg_list):\n    even_arg_list = []\n    for i in arg_list:\n        if i % 2 == 0:\n            even_arg_list.append(i\/2)\n        else:\n            return False\n    return even_arg_list\n\n\ncounter = 0\n_list = map(lambda x:int(x),args[1:])\nwhile True:\n    _list = f(_list)\n    if _list == False:\n        print(counter)\n        sys.exit()\n    counter+=1\n    # print(_list)\n    ",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s204191074":{
    "code_string":"N = input()\nA = list(map(int,input().split()))\nans = 0\ndef GCD(a,b):\n    if a < b:\n        a,b = b,a\n    while a % b != 0:\n        a,b = b, a % b\n    print(b)\n\nif __name__ ==\"__main__\":\n    for i in range(N-1):\n       ans = GCD(A[i],A[i+1])\n    print(ans)\n\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s550390960":{
    "code_string":"n = int(input())\na = np.array(list(map(int,input().split())))\n\ncount = 0\nwhile 1:\n    count+=1\nprint(count)\n",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s807856154":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nans = []\nfor i in range(N):\n    cnt = 0\n    while A[i] % 2 == 0:\n        A[i] = A[i] \/ 2\n        cnt = cnt + 1\n    ans.append(cnt)\nprint(min(sns))",
    "error_obj":"NameError: name 'sns' is not defined"
  },
  "s831804857":{
    "code_string":"from sys import stdin\n\nn = stdin.readline().rstrip()\na = [int(x) for x in stdin.readline().rstrip().split()]\n\ncount = 0\nb = a[0]\nwhile True:\n    if b % 2 == 1: break\n    b = b\/\/2\n    count = count + 1\nminc = count\n\nfor b in a[1:]:\n  \tcount = 0\n    while True:\n        if b % 2 == 1: break\n        b = b\/\/2\n        count = count + 1\n\n    minc = min([minc, count])\n\nprint(minc)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s808168795":{
    "code_string":"a = int(input())\nb = list(map(int, input().split()))\ncount = 0\nwhile(true):\n  flag = 0\n  for i in range(0, a, 1):\n    if (b[i] % 2 == 1) :\n      flag = 1\n  if flag == 1:\n    break\n  for i in range(0, a, 1):\n    b[i] \/= 2\n  count += 1\nprint(count)",
    "error_obj":"NameError: name 'true' is not defined"
  },
  "s585533958":{
    "code_string":"a=input()\nb=map(int,input().split())\nans=[]\nmax_b=max(b)\nd=0\nfor i in b\n while i%2=0\n   i=i\/2\n   d+=1\n ans.append(d)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s980301480":{
    "code_string":"n = input()\na = list(map(int, input().split())\nans = 0\nwhile all(_%2 == 0 for _ in a):\n\ta = [_\/2 for _ in a]\n    ans += 1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s058857591":{
    "code_string":"n = input()\nl = input().split()\ncnt = 0\nwhile len([True for x in l if x%2==0]):\n  l = [x\/2 for x in l]\n  cnt += 1\nprint(cnt)",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s555047698":{
    "code_string":"import math \nN = input().int()\nA = map(int,input().split())\nB = map(bin,A)\ndef Y(x):\n  y = len(x)-x.rfind(\"1\")-1\n  return y\nC = map(Y,B)\nprint(min(C))\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'int'"
  },
  "s269336593":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\ncnt = 0\n\nwhile all(i%2==0 for i in a ):\n  A = [i\/\/2 for i in a]\n  cnt+=1\n\nprint(cnt)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s815683714":{
    "code_string":"n=int(input())\nn_length=list(map(int,input().split()))\n\ncounter=0\nwhile all(i%2==0 for i in n_length):\n    n_list=[i\/2 for i in n_length]\n    counter=+1\nprint(counter)\n    ",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s189270452":{
    "code_string":"x = int(input())\ny = list(map(int, input().split()))\n\ncount = 0\n\nfor i in y:\n    if i % 2 = 0:\n        y[i] == i % 2\n        count += 1\n    else:\n        pass\n        \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s929810282":{
    "code_string":"num = int(input())\n\nvals = list(map(int,input().split()))\n\ncnt = 0\nwhile(True)\n\tfor i in range(num):\n    \tif vals[i] % 2 == 1:\n        \tprint(cnt)\n        \tbreak\n        else:\n    \t\tvals[i] = vals[i] \/ 2\n        cnt += 1",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s998355090":{
    "code_string":"n=int(input())\na = list(map(int,input().split()))\ncount =1\n \nwhile all(a[i]%(2**count)==0):\n  count+=1\nprint(count-1)\n",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s096150153":{
    "code_string":"N = input()\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True: \n    odd_flag = False\n    for i in range(N):\n        if A[i] % 2 == 1:\n            odd_flag = True\n    if odd_flag:\n        break\n    for i in range(N):\n        A[i] = A[i] \/\/ 2\n    cnt += 1\n\nprint(cnt)\n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s391901355":{
    "code_string":"n = input()\n \nA = list(map(int, input().split()))\n \ncounts = 0\nwhile all(a%2==0 for a in A):\n\tA = [a\/2 for a in A]\n    counts += 1\nprint(counts)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s518522305":{
    "code_string":"n = int(input())\nli = list(map(int, input().split())\nb = float('inf')\n\nfor a in li:\n    c = 0\n\twhile a%2 == 0:\n      a = a\/2\n      c += 1\n    b = min(b,c)\nprint(b)\n          \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s380325845":{
    "code_string":"import math \nN = input()\na =list(map(int,input().split()))\nfor i in a:\n  B = min(len(bin(i)) -  bin(i).rfind(\"1\") - 1)\nprint(B)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s325600184":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\ncnt = 0\n\nwhile all(i%2==0 for i in a ):\n  A = [i\/\/2 for i in a]\n  cnt+=1\n\nprint(cnt)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s314078446":{
    "code_string":"#3\n#8 12 40\nn=int(input())\nai=list(map(int(),input.split()))\nb=[]\nfor a in ai:\n  count =0\n  while a%2==0 :\n    count+=1\n    a\/=2\n  b.append(count)\nprint(min(b))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s127183100":{
    "code_string":"n = input()\na_list = input().split(\" \")\n\ndef count_divide(number, max_cnt=-1):\n  count = 0\n  mod = -1\n  while mod != 0:\n    q, mod = divmod(number)\n    count += 1\n    if max_cnt != -1 & count >= max_cnt:\n      return max_cnt\n  return count\n\nresult = -1\nfor a in a_list:\n  result = count_divide(int(a), result)\nprint(result)\n",
    "error_obj":"TypeError: divmod expected 2 arguments, got 1"
  },
  "s665354619":{
    "code_string":"import math\nn = input()\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint(round(ans)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s122421051":{
    "code_string":"N=int(input())\nan=list(map(int,input().split()))\nn=0\nfor i in range(N):\n    if an%2==0:\n        n+=1\nprint(an\/2)",
    "error_obj":"TypeError: unsupported operand type(s) for %: 'list' and 'int'"
  },
  "s509000932":{
    "code_string":"n=int(input())\nflag=0\nnums=list(map(int,input().split()))\ncnt=0\n\nwhile flag==0:\n    for i in range(n):\n        num=nums[0]\/2\n        key=nums[0]%2\n        if key==1:\n            flag==1\n            break\n        else:\n            del nums[0]\n            nums.append(num)\n    if flag==0:\n        cnt+=1\nprint(cnt)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s318019573":{
    "code_string":"n=int(input())\nl=list(map(int,input().split()))\n\nans=0\nwhile True:\n  for i in l:\n    if i%2!=0:\n      break\n  ans+=1\n  l=[i\/2 for i in l]\n  \nprint(ans)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s151951857":{
    "code_string":"INPUT = [input() for i in range(2)]\nINPUT = list(map(int, INPUT))\n\ndef check_even(l):\n    return sum([i % 2 for i in INPUT]) == 0\n\ncheck_even(INPUT)\n\ncount = 0\nwhile True:\n    if check_even(INPUT):\n        INPUT = [i \/ 2 for i in INPUT]\n        count+=1\n    else:\n        break\nprint(count)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '8 12 40'"
  },
  "s122560738":{
    "code_string":"import numpy as num\nN = int(input())\nA = list(map(int,input().split()))\nary = num.array(A)\nb = len(A)\nS=1\nans = 0\nwhile True:\n  for i in range(b):\n    S*=A[i]\n  if S %2 == 0:\n    ans+=1\n    ary = ary\/2\n    ary=A\n    S=1\n  else:\n    print(ans)\n    exit()",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'list' and 'int'"
  },
  "s059279341":{
    "code_string":"N =int(input())\nList = list(map(int, input().split()))\nflag = True\nres = 0\nwhile flag:\n  for i in range(N):\n    if List[i] & 2 == 1:\n      flag = False\n      break\n  if not flag:\n    res += 1\nprint(res)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s313939430":{
    "code_string":"n=int(input())\ns=list(map(it,input().split()))\ncount=-0\nwhile all(i%2==0 for i in s):\n  s=[i\/2 for i in s]\n  count+=1\nprint(count)",
    "error_obj":"NameError: name 'it' is not defined"
  },
  "s744252886":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\ncount = 0\nwhile all(a%2==0 for a in A):\n  count += 1\nprint(count)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s631062412":{
    "code_string":"N = int(input())\nA = list(input().split())\n\nans = float(\"inf\")\nfor i in range(N):\n  a = A[i]\n  ans_tmp = 0\n  while a%2==0:\n    a = a\/\/2\n    ans_tmp += 1\n  ans = min(ans_tmp, ans)\nprint(ans)",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s315429032":{
    "code_string":"n = int(input())\nl = list(map(int, input().split()))\n\ncnt = 0\nwhile all(a % 2 == 0 for a in l):\n\tl = [a \/ 2 for a in l]\n    cnt += 1\nprint(cnt)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s556352167":{
    "code_string":"n = int(input())\na = [map(int, input().split())]\nl = [0 for i in range(n)]\nfor i in range(len(a)):\n    while a[i] % 2 == 0:\n        a[i] \/= 2\n        l[i] += 1\nprint(min(l))",
    "error_obj":"TypeError: unsupported operand type(s) for %: 'map' and 'int'"
  },
  "s318729655":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\n\nt = True\nx = 0\n\nwhile T == True:\n  x +=1\n  for i in a:\n    if i%2 == 0:\n      a = list(map(lambda x:x\/2, a))\n    else:\n      t = False\n      \nprint(x)\n    ",
    "error_obj":"NameError: name 'T' is not defined"
  },
  "s792862489":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\ncount = 0\n\nwhile all(i % 2 == 0 for i in A):\n    a = [j\/2 for j in a]\n    count += 1\nprint(count)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s017737596":{
    "code_string":"n = int(input())\na = map(int, input().split())\nwhile True:\n  for i in range(n):\n    if a[i] % 2 == 1:\n      break\n    a[i] = a[i] \/\/ 2\n  else:\n    ans += 1\n    continue\n  break\nprint(ans)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s890825606":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\ncnt=0\nwhile True:\n    if [a%2 for a in A]==[0]*N:\n        A=[a\/\/2 for a in A]\n        cnt+=1\nprint(cnt)\n\n       \n       ",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s019789167":{
    "code_string":"import(sys)\nn=int(input())\na = list(map(int,input().split()))\nb=0\nwhile(True):\n  for i in range(n):\n    if(a[i]%2!=0):\n      print(b)\n      sys.exit()\n    a[i]=a[i]\/\/2\n  b+=1\nprint(b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s173779012":{
    "code_string":"def actual(N, A):\n    count = 0\n\n    while True:\n        is_all_even = all([a % 2 == 0 for a in A])\n\n        if is_all_even:\n            A = [a \/\/ 2 for a in A]\n            count += 1\n        else:\n            break\n\n    return count\n\nN = int(input())\nA = map(int, input().split())\n\nprint(actual(N, A))",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s169842435":{
    "code_string":"import sys\n\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nread = sys.stdin.buffer.read\nsys.setrecursionlimit(10 ** 7)\nINF = float('inf')\n\nN = int(input())\nA = list(map(int, input().split()))\n\n\nans = INF\nfor a in A:\n    cnt = 0\n    while True:\n        q, mod = divmod(a, 2)\n        if mod != 0:\n            break\n        cnt += 1\n        a = q\n    ans = min(ans, cnt)\nprint(ants)\n",
    "error_obj":"NameError: name 'ants' is not defined"
  },
  "s697622201":{
    "code_string":"import copy\n \nkaisu = int(input())\n \ns_suji_list = input().split(' ')\nsuji_list = []\ncount = 0\ncotinule_flg = True\nfor suji in s_suji_list:\n  i_suji = int(suji)\n  if suji % 2 == 0:\n    suji_list.append(suji \/ 2)\n  else:\n    continue_flg = False\n    break\ncount = 1\n \nwhile(continue_flg):\n  temp_list = copy.copy(suji_list)\n  suji_list.clear()\n  count += 1\n  for suji in temp_list:\n    if suji % 2 == 0:\n      suji_list.append(suji \/ 2)\n    else:\n      count -= 1\n      continue_flg = False\n      break\n \nprint(count)",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s101520216":{
    "code_string":"def d(n):\n  while n%2 == 0:\n    n \/= 2\n    ans += 1\n  return ans\n\nn = int(input())\na = map(int,input().split())\nt = min(list(map(d,a)))\n\nprint(t)\n    \n",
    "error_obj":"UnboundLocalError: local variable 'ans' referenced before assignment"
  },
  "s750525922":{
    "code_string":"N=int(input())\na=[int(x) for x in input().split()]\nb=a\nt=0\ns=sum(b)\nwhile s%2==0:\n  for i in range(N):\n    b[i]=b[i]\/2\n    t=t+1\nprint(t)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s903611138":{
    "code_string":"n,k= map(int,input().split())\nXl = list(map(int,input().split()))\nfrom collections import Counter\nXdic = Counter(xl)\nvaluelist = sorted(list(Xdic.values()), reverse=True)\nprint(sum(valuelist[k:]))",
    "error_obj":"NameError: name 'xl' is not defined"
  },
  "s160230204":{
    "code_string":"n,k = map(int,input().split())\na = list(map(int,input().split()))\n\nif(len(set(a)) <= k):\n    print(0)\nelse:\n    dic_a = {x:0 for x in set(A)}\n    for i in a:\n        dic_a[i] += 1\n    sum = 0\n    a = sorted(dic_a.items(), key=lambda x: x[0])\n    for i in range(k,len(a)):\n        sum += a[i][1]\n    print(sum)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s631831190":{
    "code_string":"n,k = map(int,input().split())\nl = list(map(int, input().split()))\nfreq = [0]*n+1\nfor i in l:\n    freq[i]+=1\nfreq.sort()\nvf = len(freq) - k if len(freq)> k else 0\nprint(sum(freq[:vf]))",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s863975076":{
    "code_string":"n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n    b[a[i]] += 1\nc = [i for i in b if i != 0]\nc.sort()\nif len(c) - k > 0:\n    print(sum((c[0:len(c)-k])))\nelse:\n    print(0)",
    "error_obj":"IndexError: list index out of range"
  },
  "s377219428":{
    "code_string":"N, K = map(int, input().split())\nA = list(map(int, input().split()))\na=[0]*10**8\ncnt=0\nfor i in range(N):\n    if a[A[i]]==0:\n        cnt+=1\n    a[A[i]]+=1\na.sort(reverse=True)\nsum=0\nfor i in range(cnt-K):\n    sum+=a[cnt-i-1]\n\nprint(sum)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s842687738":{
    "code_string":"from collections import defaultdict\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nd = defaultdict(int)\nfor x in a:\n  d[x] += 1\n\nav = reverse(sorted(d.values()))\nks = 0\nidx = 0\nwhile ks < k:\n  ks += av[idx]\n  idx += 1\nprint(idx)",
    "error_obj":"NameError: name 'reverse' is not defined"
  },
  "s611127925":{
    "code_string":"N,K = map(int,input().split()) \nA = list(map(int,input().split()))\nA.sort()\ntemp = 1\nV = [] \nfor i in range(n-1):\n    if A[i] == A[i+1]:\n        temp+=1 \n    else:\n        V.append(temp)\n        temp = 1\n\nV.append(temp)\nV.sort() \nans = N- sum(V[-k:])\nprint(ans)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s847749835":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\n\nmina = min(A)\nmini = A.index(mina)\nmaxa = max(A)\nmaxi = A.index(mixa)\n\nif mina >= 0:\n  print(N-1)\n  for i in range(N-1):\n    print(\"{} {}\".format(i+1, i+2))\nelif maxa < 0:\n  print(N-1)\n  for i in range(N-1):\n    print(\"{} {}\".format(N-i, N-i-1))\nelse:\n  if -mina < maxa:\n    print(2*N-1)\n    for i in range(N):\n      print(\"{} {}\".format(maxi+1, i+1))\n    for i in range(N-1):\n      print(\"{} {}\".format(i+1, i+2))\n  else:\n    print(2*N-1)\n    for i in range(N):\n      print(\"{} {}\".format(mini+1, i+1))\n    for i in range(N-1):\n      print(\"{} {}\".format(N-i, N-i-1))",
    "error_obj":"NameError: name 'mixa' is not defined"
  },
  "s771630240":{
    "code_string":"I = int(input())\nL = list(map(int, input().split()))\n\nprint(2*I-1, flush=True)\n\nm = 0\nfor i, item in enumerate(L):\n    if abs(item) > abs(m):\n        m = item\n        m_index = i\n\nfor i in range(L):\n    print(m_index+1, i+1, flush=True)\n\nif m >= 0:\n    for i in range(0, I-1):\n        print(i+1, i+2)\nelse:\n    for i in range(I, 0):\n        print(i, i-1)\n",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s914170492":{
    "code_string":"n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na1 = sorted(a)\na2 = []\ncount = 0\nfor i in range(n - 1):\n    if a1[i] == a1[i + 1]:\n        count += 1\n    else:\n        a2.append(count)\n        break\na2.append(count)\nl = sorted(a2)\nprint(sun(l[:len(l) - k - 1]))",
    "error_obj":"NameError: name 'sun' is not defined"
  },
  "s797037768":{
    "code_string":"from collections import Counter\nN,K=map(int,input().split())\nN=list(map(int,input().split()))\nA=Counter(N)\nC=list(A.values())\nC=C.sort(reverse=True)\nif len(C)<=K:\n    print(0)\nelse:\n    ans=sum(C[-(len(C)-K):])\n    print(ans)",
    "error_obj":"TypeError: object of type 'NoneType' has no len()"
  },
  "s809223824":{
    "code_string":"n,k = map(int,input().split())\na = list(map(int,input().split()))\nkaburi = []\n\nfor i in range(n):\n    if not a[i] in kaburi:\n        kaburi.append(a[i])\n\nkaisu = 0\n\nwhile True:\n    p = n\n    q = 0\n    if k >= len(kaburi):\n        print(kaisu)\n        break\n    else:\n        for j in range(len(kaburi)):\n            p = min(p,a.count(kaburi[j]))\n            if p > a.count(kaburi[j]):\n                q = kaburi[j]\n        kaisu += p\n        print(p,q,kaisu,len(kaburi))\n        kaburi.remove(q)",
    "error_obj":"ValueError: list.remove(x): x not in list"
  },
  "s429148486":{
    "code_string":"def main():\n    import sys\n    import numpy as np\n    ikimasu = sys.stdin.buffer.readline\n    ini = lambda: int(ins())\n    ina = lambda: list(map(int, ikimasu().split()))\n    ins = lambda: ikimasu().strip()\n    \n    n = ini()\n    tmp = ina()\n    num,index = 0,0\n    for i in range(n):\n        if(abs(tmp[i])>num):\n            num,index = tmp[i],i\n    print(2n-2)\n    if(num<=0):\n        for i in range(n):\n            if(i!=index):\n                print(index+1,i+1)\n        for i in range(n,1,-1):\n            print(i,i-1)\n    else:\n        for i in range(n):\n            if(i!=index):\n                print(index+1,i+1)\n        for i in range(1,n):\n            print(i,i+1)\n\n\n        \n        \n        \n\n\n    \n        \n\n\n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s775485476":{
    "code_string":"\nif N * A < B:\n    print(N*A)\nelse:\n    print(B)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s240589115":{
    "code_string":"a,b,c=input().split()\nif a*b<=c:\n  print(int(a*b))\nelse:\n  print(c)",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s993016303":{
    "code_string":"N, A, B = map(int, input())\n\nif N * A <= B:\n  print(N*A)\nelse:\n  print(B)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s795876042":{
    "code_string":"N,A,B=map(int,input(),split())\nprint(min(N*A,B))",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s449177658":{
    "code_string":"N, A, B = map(int, input().split)\nprint(min(N * A, B))",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s728007703":{
    "code_string":"n, a, b = map(int, intput().split())\na = n*a\nprint(min(a, b))",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s544003392":{
    "code_string":"N, A, B=map(int, input().split())\nprint(min(A*T, B))",
    "error_obj":"NameError: name 'T' is not defined"
  },
  "s627895750":{
    "code_string":"# coding = SJIS\n\nn, a, b = map(int, input().split())\n\nprint(min(n * a), b)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s326440580":{
    "code_string":"#ABC080B\nn = input()\nprint(\"Yes\" if sum(map(int,n))%n == 0 else \"No\")",
    "error_obj":"TypeError: unsupported operand type(s) for %: 'int' and 'str'"
  },
  "s606609605":{
    "code_string":"N = input()\nif N % sum(map(int, N)):\n    print(\"No\")\nelse:\n    print(\"Yes\")",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s154525672":{
    "code_string":"N = input()\nNnum = int(N)\nNls = list(N)\nFN = sum(Nls)\nif Nnum%FN == 0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s696880802":{
    "code_string":"N=input()\na=int(N)\nb=list(N)\nsum=0\n\nfor i in b:\n  sum+=i\n \nif a%sum==0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s133628302":{
    "code_string":"x = input()\na = int(x)\nb = list(x)\nb = sum(b)\n\nif a%b==0:\n  print('Yes')\n  \nelse:\n  print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s782894459":{
    "code_string":"N = int(input())\ns = 0\nwhile N\/\/10 > 0\n    a = N % 10\n    s += a\n    N = N \/\/ 10\nif N % s == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s365456362":{
    "code_string":"n = input()\nm = list(n)\nif int(n) % sum(m)==0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s350278063":{
    "code_string":"n=input()\nf=0\nfor i in range(len(n)):\n    f += n[i]\nif int(n) % f == 0:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'str'"
  },
  "s632352295":{
    "code_string":"n = int(input())\nsum = 0\nfor i in str(n):\n    sum += int(i)\nif(N%sum==0):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s739530784":{
    "code_string":"n = int(input())\nstr_n = str(n)\nwa = 0\nfor i in range(len(str_n)):\n    wa += int(str_n[i])\nif x%wa==0:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s746209002":{
    "code_string":"N=input()\na=sum(map(int,str(N)))\nif N%a==0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s579365572":{
    "code_string":"n = list(input())\nN = int(sum(n))\nM = 0\nfor i in range(len(n)):\n    M += int(n[i])\nif N % M == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\") ",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s461532404":{
    "code_string":"N = int(input())\nF = [list(map(int,input().split())) for i in range(N)]\nP = [list(map(int,input().split())) for i in range(N)]\n \nans = -10**9\nfor i in range(2**10-1):\n  Bit = [1]**10\n  for j in range(10):\n    if (i>>j)&1:\n      Bit[j]=0\n  count = 0\n  for k in range(N):\n    op = sum(b&f for b,f in zip(Bit,F[k]))\n    count+=P[k][op]\n  ans = max(ans,count)\n \nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'"
  },
  "s617078087":{
    "code_string":"N = int(input())\nF = [[int(i) for i in input().split()] for j in range(N)]\nP = [[int(i) for i in input().split()] for j in range(N)]\n\nci = 0\nc = []\nP_max = -1000000000\nfor i in range(2):\n    for j in range(2):\n        for k in range(2):\n            for l in range(2):\n                for m in range(2):\n                    for n in range(2):\n                        for o in range(2):\n                            for p in range(2):\n                                for q in range(2):\n                                    for r in range(2):\n                                        if i==j==k==l==m==n==o==p==q==r==0:\n                                            pass\n                                        for s in range(N):\n                                            ci = F[s][0]*i + F[s][1]*j + F[s][2]*k + F[s][3]*l + F[s][4]*m + F[s][5]*n + F[s][6]*o + F[s][7]*p + F[s][8]*q + F[s][9]*r\n                                            c.append(ci)\n                                        P_sample = P[0][c[0]] + P[1][c[1]] + P[2][c[2]] + P[3][c[3]] + P[4][c[4]] + P[5][c[5]] + P[6][c[6]] + P[7][c[7]] + P[8][c[8]] + P[9][c[9]]\n                                        P_max = max(P_max, P_sample)\n\nprint(P_max)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s917305909":{
    "code_string":"N = int(input())\nF = [[] for TF in range(0,N)]\nfor TF in range(0,N):\n    F[TF] = [int(T) for T in input().split()]\nP = [[] for TP in range(0,N)]\nfor TP in range(0,N):\n    P[TP] = [int(T) for T in input().split()]\n    \nMAXB = -10**9\nfor TB in range(1,2**10):\n    BaseConv,BaseSInd = ForBaseConvert(TB,10,2)\n    Benefit = 0\n    for TN in range(0,N):        \n        Count = sum(1 if F[TN][TT]==1 else 0 for TT in BaseSInd[1])\n        Benefit += P[TN][Count]\n    if MAXB<Benefit:\n        MAXB = Benefit\nprint(MAXB)",
    "error_obj":"NameError: name 'ForBaseConvert' is not defined"
  },
  "s187102661":{
    "code_string":"import sys\nn = int(input())\nF = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\nP = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\nans = 0\nfor i in range(1,pow(2,10)):\n    b = bin(i)[2:].zfill(10)\n    t = 0\n    for j in range(n):\n        c = 0\n        for k in range(10):\n            if int(b[k]) and F[j][k]:\n                c += 1\n        a += P[j][c]\n    ans = max(ans, a)\nprint(ans)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s821829398":{
    "code_string":"import sys\nimport numpy as np\nreadline=sys.stdin.readline\nread=sys.stdin.read\n\nn,c,*stc=map(int,read())\nm=2*10**5\ncht=np.zeros((c,m+1),dtype='int64')\nfor s,t,c in zip(*[iter(stc)]*3):\n  cht[c-1,2*t-1:2*s]=np.ones(2*t-2*s+1)\nprint(max(np.sum(cht,axis=0)))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s445167590":{
    "code_string":"def main():\n    from itertools import accumulate\n    n, c, *stc = map(int, open(0).read().split())\n    table = [0] * (10 ** 5 + 2)\n    m = list(zip(stc[::3], stc[1::3], stc[2::3]))\n    m = sorted(key=lambda a: (a[2], a[0], a[1]))\n\n    ch_ = 0\n    t_ = 0\n    for s, t, ch in m:\n        if ch != ch_:\n            ch_ = ch\n            t_ = 0\n        if t_ == s:\n            table[t_ + 1] += 1\n        else:\n            table[s] += 1\n\n        table[t + 1] -= 1\n        t_ = t\n\n    *x, = accumulate(table)\n    ans = max(x)\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"TypeError: sorted expected 1 argument, got 0"
  },
  "s375747553":{
    "code_string":"import sys\nimport numpy as np\nreadline=sys.stdin.readline\nread=sys.stdin.read\n\nn,c=map(int,readline().split())\nm=2*10**5\nstc=[list(map(int,l.split())) for l in read().splitlines()]\ncht=np.array([])\nfor e in stc:\n  w=e[1]-e[0]\n  cht.vstack((cht,np.pad(np.ones(2*(e[1]-e[0])+1),(2*e[0]-1,m-2*e[1]),\\\n                mode='constant',constant_values=(1,1))))\nmnr=0\nfor i in range(1,m+1):\n  mnr=max(mnr,sum(cht[ch][i] for ch in range(c)))\nprint(mnr)\n",
    "error_obj":"AttributeError: 'numpy.ndarray' object has no attribute 'vstack'"
  },
  "s125619188":{
    "code_string":"# N\u5206\u6728\u306b\u304a\u3051\u308bx\u306e\u89aa\u306f\u30010-indexed\u306e\u3068\u304d\u306b\u3001(x - 1) \/\/ N\n# \u4e00\u5ea60-indexed\u306b\u623b\u3059\u305f\u3081\u3001\u6700\u521d\u306b-1\u3057\u305f\u3046\u3048\u3067\u3001(x - 1) \/\/ N\u3092\u7e70\u308a\u8fd4\u3059\n# \u521d\u3081\u3066\u4e00\u81f4\u3057\u305f\u70b9\u304c(0-indexed\u306b\u304a\u3051\u308b)\u7b54\u3048\u306a\u306e\u3067\u3001+1\u3057\u3066\u7b54\u3048\n\nimport sys\nreadline = sys.stdin.readline\n\nimport numpy as np\nfrom numba import jit\n\nN,Q = map(int,readline().split())\nP = [tuple(map(int,readline().split())) for i in range(Q)]\nP = np.array(P,dtype = int)\n\n@jit('i8(i8,i8[:])')\ndef solve(N,P):\n  ans = np.zeros(len(P), dtype = int)\n  for i in range(len(P)):\n    v = P[i][0] - 1\n    w = P[i][1] - 1\n    while v != w:\n      if v > w:\n        v = (v - 1) \/\/ N\n      else:\n        w = (w - 1) \/\/ N\n    ans[i] = v + 1\n  return ans\n\nans = solve(N,P)\nfor a in ans:\n  print(a)\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s018476786":{
    "code_string":"#!\/usr\/bin\/env python\nimport re\n\ns = input()\nSTR = 'AKIHABARA'\nif len(s) > len(STR):\n    print('NO')\n    exit()\n\nregex = re.compile('A?KIHA?BA?RA?')\nmo = regex.search(s)\nif mo == None:\n    print('NO')\nelse:\n    print('YES')\n~                 ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s704356255":{
    "code_string":"s = input()\n# AKIHABARA\nif (s == \"AKIHABARA\") or (s == \"AKIHABAR\") or (s == \"AKIHABRA\") or (s == \"AKIHABR\") or (s == \"AKIHBARA\") or (s == \"AKIHBAR\") or (s == \"AKIHBRA\") or (s == \"AKIHBR\")\nor (s == \"KIHABARA\") or (s == \"KIHABAR\") or (s == \"KIHABRA\") or (s == \"KIHABR\") or (s == \"KIHBARA\") or (s == \"KIHBAR\") or (s == \"KIHBRA\") or (s == \"KIHBR\"):\n     print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s435006276":{
    "code_string":"s=input()\nAKB={\"AKIHABARA\",\"KIHABARA\",\"AKIHBARA\",\"KIHBARA\",\"AKIHABRA\",\"KIHABRA\",\"AKIHBRA\",\"KIHBRA\",\"AKIHABAR\",\"KIHABAR\",\"AKIHBAR\",\"KIHBAR\",\"AKIHABR\",\"KIHABR\",\"AKIHBR\",\"KIHBR\"}\n\nprint(\"YES\" if s in pos else \"NO\")\n",
    "error_obj":"NameError: name 'pos' is not defined"
  },
  "s103939945":{
    "code_string":"S = input()\nif len(S) >= 10:\n  print(\"NO\")\nelse:\n  if S == \"AKIHABARA\":\n    print(\"YES\")\n  elif S == \"KIHABARA\":\n    print(\"YES\")\n  elif S == \"AKIHBARA\":\n    print(\"YES\")\n  elif S == \"AKIHABRA\":\n    print(\"YES\")\n  elif S == \"AKIHABR\":\n    print(\"YES\")\n  elif S == \"KIHBARA\":\n    print(\"YES\")\n  elif S == \"KIHABRA\":\n    print(\"YES\")\n  elif S == \"KIHABAR\":\n    print(\"YES\")\n  elif S == \"AKIHBRA\":\n    print(\"YES\")\n  elif S == \"AKIHABR\":\n    print(\"YES\")\n  elif S == \"KIHBRA\":\n    print(\"YES\")\n  elif S == \"KIHBAR\":\n    print(\"YES\")\n  elif S == \"AKIHBR\":\n    print(\"YES\")\n  elif S == \"KIHBR\":\n    print(\"YES\")\n  else:\n  print(\"NO\")\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s796271950":{
    "code_string":"import sys\nS = list(input())\n\nL = list(\"KIHBR\")\nfor l in L:\n    if not l in \"\".join(S):\n        print(\"NO\")\n        sys.exit(0)\n\n        N = []\nfor i in range(len(S)-1):\n    if S[i] == \"H\" or S[i] == \"B\" or S[i] == \"R\":\n        if S[i+1] != \"A\":\n            N.append(i+1)\n\ni = 0\nfor n in N:\n    S.insert(n+i, \"A\")\n    i += 1\n    \nif \"\".join(S) in \"AKIHABARA\":\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s198624494":{
    "code_string":"from itertools import product\n\n\ncandidates = []\nnon_as = [\"KIH\", \"B\", \"R\", \"\"]\nfor seps in product([\"A\", \"\"], repeat=4):\n    candidates.add(\"\".append(sep + non_a for sep, non_a in zip(seps, non_as)))\n\nprint(\"YES\") if input() in candidates else print(\"NO\")\n",
    "error_obj":"AttributeError: 'list' object has no attribute 'add'"
  },
  "s703551763":{
    "code_string":"s = [c for c in \"AKIHABARA\"]\nL = []\nfor i in range(0, 2):\n    for j in range(0, 2):\n        for k in range(0, 2):\n            for l in range(0, 2):\n                if i == 0:\n                    s[0] = \"X\"\n                if j == 0:\n                    s[4] = \"X\"\n                if k == 0:\n                    s[6] = \"X\"\n                if l == 0:\n                    s[8] = \"X\"\n                while \"X\" in s:\n                    s.remove(\"X\")\n                L.append(s)\n                s = [c for c in \"AKIHABARA\"] #bit\u3067\u66f8\u304d\u305f\u304b\u3063\u305f\u30fb\u30fb\u30fb\u3002\nS = [c for c in input()]\nfor el in L:\n    if S == el:\n        print(\"YES\")\n        sys.exit(0)\nprint(\"NO\")",
    "error_obj":"NameError: name 'sys' is not defined"
  },
  "s422206582":{
    "code_string":"S = input()\nif len(S) >= 10:\n  print(\"NO\")\nelse:\n  if S == \"AKIHABARA\":\n    print(\"YES\")\n  elif S == \"KIHABARA\":\n    print(\"YES\")\n  elif S == \"AKIHBARA\":\n    print(\"YES\")\n  elif S == \"AKIHABRA\":\n    print(\"YES\")\n  elif S == \"AKIHABR\":\n    print(\"YES\")\n  elif S == \"KIHBARA\":\n    print(\"YES\")\n  elif S == \"KIHABRA\":\n    print(\"YES\")\n  elif S == \"KIHABAR\":\n    print(\"YES\")\n  elif S == \"AKIHBRA\":\n    print(\"YES\")\n  elif S == \"AKIHABR\":\n    print(\"YES\")\n  elif S == \"KIHBRA\":\n    print(\"YES\")\n  elif S == \"KIHBAR\":\n    print(\"YES\")\n  elif S == \"AKIHBR\":\n    print(\"YES\")\n  elif S == \"KIHBR\":\n    print(\"YES\")\n  else;\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s669749833":{
    "code_string":"s=list(input())\na=s.count(\"a\")\nb=s.count(\"b\")\nc=s.count(\"c\")\nif min(a,b,c)!=0 and max(a,b,c)-min(a,b,c)<=1:\n    print(\"YES\")\nelif a+b+c=max(a,b,c) and max(a,b,c)==1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s600775754":{
    "code_string":"n=len(s)\nset=set(s)\nm=len(set)\na=s.count('a')\nb=s.count('b')\nc=s.count('c')\nif m==1:\n  if n==1:\n    print('YES')\n  else:\n    print('NO')\nelif m==2:\n  if c==0:\n    if a==b:\n      print('YES')\n    else:\n      print('NO')\n  elif b==0:\n    if a==c:\n      print('YES')\n    else:\n      print('NO')\n  else:\n    if b==c:\n      print('YES')\n    else:\n      print('NO')\nelse:\n  d=n\/\/m\n  res=0\n  if a<=d:\n    res+=1\n  if b<=d:\n    res+=1\n  if c<=d:\n    res+=1\n  if res<=1:\n    print('YES')\n  else:\n    print('NO')",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s565448549":{
    "code_string":"s = input()\n\ndic = {}\nfor i in range(len(s)):\n  if s[i] in dic:\n    dic[s[i]] += 1\n  else:\n    dic[s[i]] = 1\n\nif len(dic) == 1:\n  if len(s) == 1:\n    print('YES')\n  else:\n    print('No')\n\nelif len(dic) == 2:\n  print('NO')\n\nelse:\n  first = 'a'\n  second = 'b'\n  for k, v in dic.items():\n    if  v > dic[first]:\n      second = first\n      first = k\n\n    elif v > dic[second]:\n      second = k\n\n  tmp = first + second\n  dic[first] -= 1\n  dic[second] -= 1\n  ans = 'YES'\n  for i in range(1, len(s) - 1):\n    if tmp[i-1] == 'a':\n      if tmp[i] == 'b':\n        if dic['c'] == 0:\n          ans = 'NO'\n          break\n        else:\n          dic['c'] -= 1\n          tmp += 'c'\n\n      if tmp[i] == 'c':\n        if dic['b'] == 0:\n          ans = 'NO'\n          break\n        else:\n          dic['b'] -= 1\n          tmp += 'b'\n\n    elif tmp[i-1] == 'b':\n      if tmp[i] == 'a':\n        if dic['c'] == 0:\n          ans = 'NO'\n          break\n        else:\n          dic['c'] -= 1\n          tmp += 'c'\n\n      if tmp[i] == 'c':\n        if dic['a'] == 0:\n          ans = 'NO'\n          break\n        else:\n          dic['a'] -= 1\n          tmp += 'a'\n\n    elif tmp[i-1] == 'c':\n      if tmp[i] == 'a':\n        if dic['b'] == 0:\n          ans = 'NO'\n          break\n        else:\n          dic['b'] -= 1\n          tmp += 'b'\n\n      if tmp[i] == 'b':\n        if dic['a'] == 0:\n          ans = 'NO'\n          break\n        else:\n          dic['a'] -= 1\n          tmp += 'a'\n\n  print(ans)\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s965848270":{
    "code_string":"import numpy as np\nfrom numba import njit\n\n\n@njit(\"i1(i1,i1[:])\", cache=True)\ndef solve(N, D):\n    ans = 0\n    for i in range(1 << N):\n        clocks = np.zeros((N + 2), dtype=np.int8)\n        clocks[-1] = 24\n        for j in range(N):\n            if i >> j & 1:\n                clocks[j + 1] = D[j]\n            else:\n                clocks[j + 1] = 24 - D[j]\n        clocks.sort()\n        ans = max(ans, np.min(np.diff(clocks)))\n    return ans\n\n\nN = int(input())\nD = np.array(input().split(), dtype=np.int8)\nif N >= 24:\n    print(0)\nelse:\n    print(solve(N, D))\n",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s905181924":{
    "code_string":"s = input()\nc = Counter(s)\nv = list(c.values())\nif max(v) - min(v) > 1: \n  print(\"NO\")\nelse:\n  print(\"YES\")",
    "error_obj":"NameError: name 'Counter' is not defined"
  },
  "s794610939":{
    "code_string":"from collections import Counter\nn = list(input())\nc = Counter(n)\nif max(list(c.values))>=3:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s598850548":{
    "code_string":"N = str(input())\na, b, c, d = N[0], N[1], N[2], N[3]\n\nans = \"No\"\nif a == b and b =A= c:\n  ans = \"Yes\"\nelif b == c and c == d:\n  ans =\"Yes\"\n    \n    \nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s333555359":{
    "code_string":"a = int (inout ())\nif a[0]==a[1]==a[2] or a[1]==a[2]==a[3]:\n  print ('Yes')\nelse:\n  print ('No')",
    "error_obj":"NameError: name 'inout' is not defined"
  },
  "s065082798":{
    "code_string":"a = int(input())\nprint(\"Yes\" if a[1]==a[2]==a[0] or a[1]==a[2]==a[3], else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s244480655":{
    "code_string":"\nN = int(input())\n\nif N[0] == N[1] and N[1] == N[2] :\n    print('Yes')\n\nelif N[1] == N[2] and N[2] == N[3]:\n    print('Yes')\n\nelse:\n    print('No')",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s022209254":{
    "code_string":"N = list(int(input()))\na = set(N)\na = list(a)\nif len(a) <= 2:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s597926226":{
    "code_string":"import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef I():\n    # 1 line 1 int\n    return int(sys.stdin.readline().rstrip())\ndef LI():\n    # 1 line n ints\n    return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S():\n    # 1 line 1 string\n    return sys.stdin.readline().rstrip()\ndef LS():\n    # 1 line n strings\n    return list(sys.stdin.readline().rstrip().split())\n\nA = S()\n\nif A[0] == A[1] == A[2] or A[1] == A[2] == A[3]:\n   print(\"Yes\")\nelse\n   print(\"No\")\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s636728492":{
    "code_string":"N = input()\ns1 = N[1:len(N)]\ns2 = N[0:len(N) - 1]\nisOk = True\nfor i in range(1, len(N-1)):\n    if s1[i] != s1[i - 1]:\n        break\n        isOk = False\n    else:\n        continue\n\nif isOk:\n    print('Yes')\n\nisOk = True\nfor i in range(1, len(N-1)):\n    if s2[i] != s2[i - 1]:\n        break\n    else:\n        continue\n\nif isOk:\n    print('Yes')\nelse:\n    print('No')\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s126982550":{
    "code_string":"n = input()\nprint(\"Yes\" if [\"111\", \"222\", \"333\", \"444\", \"555\", \"666\", \"777\", \"888\", \"999\", \"000\"] in n else \"No\") ",
    "error_obj":"TypeError: 'in <string>' requires string as left operand, not list"
  },
  "s327674386":{
    "code_string":"N = list(input())\nprint('Yes' if N[1] == N[2] and (N[0] == N[1] or N[2] == N[3]) else 'No')a",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s546893136":{
    "code_string":"n = int(input())\nfor i in range(2):\n    if n[i] == n[i+1] and n[i+1] == n[i+2]:\n        print(\"Yes\")\n        exit()\nprint(\"No\")",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s709289866":{
    "code_string":"N = int(input())\ndp = [[]for i in range(87)] \ndp[0] = 2\ndp[1] = 1\n\nfor i in range(2,87):\n    dp[i] = dp[i-1]+dp[i-2]\n    if i == N:\n        print(dp[i])\n        break\nelse:\n    print(dp[N])",
    "error_obj":"IndexError: list index out of range"
  },
  "s226190022":{
    "code_string":"S = input()\nif S[0] == S[1] and S[1] == S[2]:\n  print(\"Yes\")\nelif S[1] == S[2] and S[2] == S[3]:\n  print(\"Yes)\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s332195396":{
    "code_string":"#79\nn=list(input())\nif (n[0]n[1]n[2] or n[0]n[2]n[3] or n[0]n[1]n[3] or n[1]n[2]n[3]):\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s961581013":{
    "code_string":"N=input()\nj_count=0\nfor i in range(0,3):\n    if N[i]==N[i+1]:\n        j_count+=1\n\nif j_count>=2\u3000and N[1]==N[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s643409930":{
    "code_string":"n = int(input())\nif n[1] == n[2]:\n    if n[0] == n[1] or n[2] == n[3]:\n        print(\"Yes\")\n        exit()\nprint(\"No\")",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s935880981":{
    "code_string":"s = input()\nif((t[0:1] == t[1:2] == t[2:3]) or (t[1:2] == t[2:3] == t[3:4])):\n   print(\"Yes\")\nelse:\n   print(\"No\")\n",
    "error_obj":"NameError: name 't' is not defined"
  },
  "s706546429":{
    "code_string":"# # Make IO faster\n# import sys\n# input = sys.stdin.readline\n\n# # get single (or) multiple str\n# X = input()\n\n# # get single int\n# N = int(input())\n# # get multiple int (e.g., 2)\n# X, Y = map(int, input().split())\n# # get multiple int (e.g., 2) for N lines\n# XY = [list(map(int, input().split())) for _ in range(N)]\n\n# from IPython import embed; embed(); exit();\n\n# \u5168\u90e8\u5165\u308a\nimport sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nimport numpy as np\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nS = input()\nif S[0] == S[1] == s[2] or S[1] == S[2] == s[3]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s248230938":{
    "code_string":"N=int(input())\nL=[2,1]\n\nfor i in range(2,N):\n  L.append(L[i-1]+L[i-2])\nprint(L[N+1])\n  ",
    "error_obj":"IndexError: list index out of range"
  },
  "s093457630":{
    "code_string":"N = int(input())\nL = [] * (N+1)\nL[0] = 2\nL[1] = 1\nfor i in range(2,N+1):\n    L[i] = L[i-1] + L[i-2]\nprint(L[N])\n",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s399565312":{
    "code_string":"import functools\n@fuctools.lru_cache(maxsize=None)\n\ndef luca(n):\n    if n==0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return luca(n-1)+luca(n-2)\n\nN = int(input())\n\nprint(luca(N))\n",
    "error_obj":"NameError: name 'fuctools' is not defined"
  },
  "s274376156":{
    "code_string":"n=int(input())\nL=[]\nL.append(2)\nL.append(1)\nfor i in range(3,n+1):\n  x=L[i-1]+L[i-2]\n  L.append(x)\n\nprint(L[n])",
    "error_obj":"IndexError: list index out of range"
  },
  "s800635491":{
    "code_string":"N = input()\n\nL = [2, 1]\n\nif N == 1:\n  print(1)\nelse:\n  i = 1\n  while i < N:\n    L.append(L[i] + L[i-1])\n    i += 1\n  print(L[-1])",
    "error_obj":"TypeError: '<' not supported between instances of 'int' and 'str'"
  },
  "s968242072":{
    "code_string":"#79B\nN=int(input())\nimport ita\ndata=ita.array.make1d(N+1)\ndata[0]=2\ndata[1]=1\nfor i in range(2,N+1):\n    data[i]=data[i-1]+data[i-2]\nprint(data[N])  ",
    "error_obj":"ModuleNotFoundError: No module named 'ita'"
  },
  "s511029116":{
    "code_string":"n=int(input())\ns=[]\ns.append(2)\ns.append(1)\nif n==0:\n    print('2')\n    exit()\nelif n==1:\n    print('1')\n    exit()\nelse:\n    for i in range(2,86):\n        k = s[i-2]+s[i-1]\n        s.apend(k)\n        if i==n-1:\n            print(s[i])\n            exit()\n",
    "error_obj":"AttributeError: 'list' object has no attribute 'apend'"
  },
  "s363884820":{
    "code_string":"N = int(input())\nL = [0] * 87\nL[0] = 2\nL[1] = 1\n\nfor i in range(2,88):\n  L[i] = L[i-1] + L[i-2]\n\nprint(L[N])",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s438117846":{
    "code_string":"n = int(input())\nl = [2, 1]\ni = 0\nwhile i < n:\n  l.append(l[-1] + l[-2])\nprint(l[n-2])",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s792841156":{
    "code_string":"from itertools import product\n\ns=input()\n\nfor op in product([\"+\",\"-\"],repeat=len(s)-1):\n  formula =\"\"\n  for i in range(len(s-1)):\n    formula+=s[i]+op[i]\n  formula+=s[1]\n  if eval(formula)==7:\n    print(formula+\"=7\")\n    exit()",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s519752248":{
    "code_string":"def make7(i, f, sum):\n    if i == 3:\n        if sum == 7:\n            print(f + \"=7\")\n            exit()\n    else:\n        make7(i+1, f+\"+\"+S[i+1], sum+S[i+1])\n        make7(i+1, f+\"-\"+S[i+1], sum-S[i+1])\n\n\nS = input()\nn = len(S)\n\nmake7(0, S[0], S[0])\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s961198333":{
    "code_string":"n = input()\nl = len(n)\n\nfor i in range(2**l):\n    op=[\"-\"]*l\n    for j in range(l):\n        if (i>>j)&1:\n            op[l - j - 1] = \"+\" #\u306a\u305c i - j - 1 \u3067\u306f\u306a\u304f\u3001l - j - 1\u306a\u306e\u304b\u3001\u6c7a\u307e\u3063\u3066\u3044\u308b\u6570\u304b\u3089\u5f15\u3044\u305f\u3082\u306e\u304c\u77e5\u308a\u305f\u3044\n    formula = \"\"\n    for op1,op2 in zip(n,op+[\"\"]): #\u5f0f\u306e\u6587\u5b57\u5217\u3092\u4f5c\u308b\u30eb\u30fc\u30d7\n        formula += op1 + op2\n    if eval(formula)==7:\n        print(formula + \"=7\")\n        break",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s974667318":{
    "code_string":"import itertools\nx=list(input())\n\nfor lst in itertools.product(['+','-'],repeat=3)\n  sum=int(x[0])\n  for i in range(3):\n    if lst[i]=='+':\n      sum+=int(x[i+1])\n    else:\n      sum-=int(x[i+1])\n  if sum==7:\n    print(x[0]+lst[0]+x[1]+lst[1]+x[2]+lst[2]+x[3]+'=7')\n    break",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s654760612":{
    "code_string":"def dfs(i, f, sum):\n    if i == 3 and sum == 7:\n        print(f+\"=7\")\n        exit()\n    else :\n        dfs(i+1, f + '-' + s[i+1], sum - int(s[i+1]))\n        dfs(i+1, f + '+' + s[i+1], sum + int(s[i+1]))\n        \ns = input()\ndfs(0, s[0], int(s[0]))\n\n\n\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s738398813":{
    "code_string":"A,B,C,D=input()\nfor i in range(2**3):\n\top = [\"+\",\"+\",\"+\"]\n    for j in range(len(op)):\n      if (i>>j) & 1:\n        op[j]=\"-\"\n        \n\n\n\n\ndef main():\n    A, B, C, D = input()\n    for i in range(2**3):\n        op = ['+', '+', '+']\n        for j in range(len(op)):\n            if (i >> j) & 1:\n                op[j] = '-'\n        if eval(A + op[0] + B + op[1] + C + op[2] + D) == 7:\n            print(A + op[0] + B + op[1] + C + op[2] + D + '=7')\n            break\n\n    main()\n  ",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s369122922":{
    "code_string":"A,B,C,D =input().split()\n\nfor i in range(2**3):\n    op = ['-']*3\n    for j in range(3):\n        if (i >> j) &1:\n            op[3 - 1 - j] ='+'\n    if eval(A +op[0] +B+ op[1]+C +op[2] +D) ==7:\n        print(A +op[0] +B+ op[1]+C +op[2] +D+'=7')\n        break",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s434991656":{
    "code_string":"L=input()\na=int(L[0])\nb=int(L[1])\nc=int(L[2])\nd=int(L[3])\n\nimport itertools\n\nA=(1,-1)\n\ndef c(x):\n\tif x==1:\n\t\treturn '+'\n\telse:\n\t\treturn '-'\n\nfor v in itertools.product(A,repeat=3):\n\ts=a+b*v[0]+c*v[1]+d*v[2]\n\tif s==7:\n\t\tprint(L[0]+c(v[0])+L[1]+c(v[1])+L[2]+c(v[2])+L[3]+'=7')\n\t\texit()",
    "error_obj":"TypeError: unsupported operand type(s) for *: 'function' and 'int'"
  },
  "s924212626":{
    "code_string":"n = input()\nop_cnt = len(n) - 1  # \u3059\u304d\u9593\u306e\u500b\u6570\nfor i in range(2**op_cnt):\n  op = ['-'] * op_cnt\n  for j in range(op_cnt):\n    if (i >> j) & 1:\n      op[op_cnt-1-j] = '+'\n      formula = ''\n      for p_n, p_o in zip(n, op + ['']):\n        formula += (p_n + p_o)\n        if eval(formula) == 7:\n          print(formula + '=7')\n          break",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s813978238":{
    "code_string":"n = input()\n\nfor i in range(2**3):\n    ss =\"\"\n    for j in range(3):\n        ss +=n[j]\n        if((i >> j )&1==True):\n            ss += \"+\"\n        else:\n            ss += \"-\"\n    ans = eval(ss)\n    if (ans == 7):\n        ss += \"=7\"\n        print(ss)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s765535243":{
    "code_string":"a,b,c,d = map(lambda x: int(x), list(input()))\n\ncnt = 0\ndef get_str(a):\n    if a >= 0:\n        s = \"+{}\".format(a)\n    else:\n        s = \"{}\".format(a)\n    return s\n\nfor i in range(1 << 4 - 1):\n    if (i >> 3) % 2 == 0:\n        a = -a\n    if (i >> 2) % 2 == 0:\n        b = -b\n    if (i >> 1) % 2 == 0:\n        c = -c\n    if (i >> 0) % 2 == 0:\n        d = -d\n\n    if a + b + c + d  == 7:\n        s = \"\"\n        s += get_str(a)\n        s += get_str(b)\n        s += get_str(c)\n        s += get_str(d)\n        s += \"=7\"\n        if a >= 0:\n            print(s[1::])\n        else:\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s857168575":{
    "code_string":"a,b,c,d = input().split()\npm = '+-'\nfor i in pm:\n  for j in pm:\n    for k in pm:\n      total = a+i+b+j+c+k+d\n      if eval(total) == 7:\n        print(total+'=7')\n        exit()",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s727481476":{
    "code_string":"\ndef a(s,i):\n    if i = l-1:\n        if eval(s)==7:\n            print(s+\"=7\")\n            exit()\n        return\n    a(s+\"+\"+N[i+1],i+1)\n    a(s+\"-\"+N[i+1],i+1)\n\nN = input()\nl = len(N)\n\na(N[0],0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s953692538":{
    "code_string":"#\u5909\u6570: S, num, formula\n    \nS = input()\nnum = len(S) - 1\n\nfor i in range(2**num):\n    op=[\"-\"]*num\n    for j in range(num):\n        if (i>>j)&1:\n            op[num-j-1]=\"+\"\n            \n    formula=\"\"\n    for op_S,op_num in zip(S,num+[\"\"]):\n        formula += op_S + op_num\n\n    if eval(formula)==7:\n        print(formula+\"=7\")\n        break",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'list'"
  },
  "s842769140":{
    "code_string":"import sys\n\ninput = sys.stdin.readline\n\ndef main():\n    ans = \"\"\n    nums = list(map(int, list(input())))\n    for i in range(8):\n        ts = sum(nums)\n        ops = ['+']*3\n        for j in range(3):\n            if i>>j&1:\n                ts -= nums[j+1]*2\n                ops[j]='-'\n        if ts == 7:\n            for i in range(3):\n                ans += str(nums[i])+ops[i]\n            ans += str(nums[3])+\"=7\"\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"ValueError: invalid literal for int() with base 10: '\\n'"
  },
  "s157016842":{
    "code_string":"    lst = [int(a) for a in input()]\n    for bit in range(1 << len(lst)):\n        sum = 0\n        op_lst = []\n        for i in range(len(lst)):\n            if bit & (1 << i):\n                sum += lst[i]\n                op_lst.append('+')\n            else:\n                sum -= lst[i]\n                op_lst.append('-')\n        if sum == 7:\n            print(lst[0], op_lst[1], lst[1], op_lst[2], lst[2], op_lst[3], lst[3], '=7', sep='')\n            break",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s142616067":{
    "code_string":"n = input()\nl = len(n)-1\n\nfor i in range(2**l):\n    op = [\"-\"]*l\n    for j in range(l):\n        if (i>>j) &1:\n            op[i-j-1]=\"+\"\n\n    formula = \"\"\n    for op_num,op_l in zip(n,op+[\"\"]):\n        formula += op_num + op_l\n    if eval(formula)==7:\n        print(formula+\"=7\")\n        break",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s317652595":{
    "code_string":"n = input()\nop_cnt = len(n) - 1\nfor i in range(2 ** op_cnt):\n  op = ['-'] * op_cnt#['-', '-', '-']\n  for j in range(op_cnt):\n    if ((i >> j) & 1):\n      op[-1-j] = '+'\n      formula = ''\n  for p_n, p_o in zip(n, op + ['']):#(1,+),(2,+),(3,+),(4,'')\n    formula += (p_n + p_o)\n  if eval(formula) == 7:#'1+2+3+4'\n    print(formula + '=7')\n    break",
    "error_obj":"NameError: name 'formula' is not defined"
  },
  "s663039376":{
    "code_string":"from itertools import product\n\ns=input()\n\nfor op in product([\"+\",\"-\"],repeat=len(s)-1):\n  formula =\"\"\n  for i in range(len(s-1)):\n    formula+=s[i]+op[i]\n  formula+=s[-1]\n  if eval(formula)==7:\n    print(formula+\"=7\")\n    exit()",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s901632904":{
    "code_string":"def a(t,i):\n    if i = l - 1:\n        if eval(t)==7:\n            print(t+\"=7\")\n            exit()\n        return\n    a(t+\"+\"+N[i+1],i+1)\n    a(t+\"-\"+N[i+1],i+1)\n\nN = input()\nl = len(N)\na(N[0],0)\n\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s994058707":{
    "code_string":"\nABCD = str(input())\nA = ABCD[0]\nB = ABCD[1]\nC = ABCD[2]\nD = ABCD[3]\n\nif int(A) + int(B) + int(C) + int(D) == 7:\n    print(A + \"+\" + B + \"+\" + C + \"+\" + D +\"=7\")\n    break\nif int(A) - int(B) + int(C) + int(D) == 7:\n    print(A + \"-\" + B + \"+\" + C + \"+\" + D +\"=7\")\n    break\nif int(A) + int(B) - int(C) + int(D) == 7:\n    print(A + \"+\" + B + \"-\" + C + \"+\" + D +\"=7\")\n    break\nif int(A) - int(B) - int(C) + int(D) == 7:\n    print(A + \"-\" + B + \"-\" + C + \"+\" + D +\"=7\")\n    break\nif int(A) + int(B) + int(C) - int(D) == 7:\n    print(A + \"+\" + B + \"+\" + C + \"-\" + D +\"=7\")\n    break\nif int(A) - int(B) + int(C) - int(D) == 7:\n    print(A + \"-\" + B + \"+\" + C + \"-\" + D +\"=7\")\n    break\nif int(A) + int(B) - int(C) - int(D) == 7:\n    print(A + \"+\" + B + \"-\" + C + \"-\" + D +\"=7\")\n    break\nif int(A) - int(B) - int(C) - int(D) == 7:\n    print(A + \"-\" + B + \"-\" + C + \"-\" + D +\"=7\")\n    break\n",
    "error_obj":"SyntaxError: 'break' outside loop"
  },
  "s453462717":{
    "code_string":"nums = input() \nN = 3\nfor i in range(2**N):\n    equation = ''\n    for j in range(N+1):\n        equation += nums[j]\n        if ((i >> j) & 1):\n            equation += '+'\n        else:\n            equation += '-'\n    if eval(equation) == 7:\n        print(equation + '=7')\n        exit()",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s559936326":{
    "code_string":"def dump(a,b,c):\n    if a == operator.add:\n        a = '+'\n    else:\n        a = '-'\n    if b == operator.add:\n        b = '+'\n    else:\n        b = '-'\n    if c == operator.add:\n        c = '+'\n    else:\n        c = '-'\n    print(vals[0] + a + vals[1] + b + vals[2] + c + vals[3] + '=7')\n\nfor a in (operator.add, operator.sub):\n    for b in (operator.add, operator.sub):\n        for c in (operator.add, operator.sub):\n            if c(b(a(nums[0], nums[1]), nums[2]), nums[3]) == 7:\n                dump(a, b, c)\n                exit(0)",
    "error_obj":"NameError: name 'operator' is not defined"
  },
  "s759264935":{
    "code_string":"ABCD = input()\nA = int(ABCD[0])\nB = int(ABCD[1])\nC = int(ABCD[2])\nD = int(ABCD[3])\nfor i in 1:\n    \n    if A + B + C + D == 7:\n        print(str(A) + \"+\" + str(B) + \"+\" + str(C) + \"+\" + str(D) + \"=7\")\n        exit()\n    if A - B + C + D == 7:\n        print(str(A) + \"-\" + str(B) + \"+\" + str(C) + \"+\" + str(D) + \"=7\")\n        exit()\n    if A + B - C + D == 7:\n        print(str(A) + \"+\" + str(B) + \"-\" + str(C) + \"+\" + str(D) + \"=7\")\n        exit()\n    if A + B + C - D == 7:\n        print(str(A) + \"+\" + str(B) + \"+\" + str(C) + \"-\" + str(D) + \"=7\")\n        exit()\n    if A - B - C + D == 7:\n        print(str(A) + \"-\" + str(B) + \"-\" + str(C) + \"+\" + str(D) + \"=7\")\n        exit()\n    if A - B + C - D == 7:\n        print(str(A) + \"-\" + str(B) + \"+\" + str(C) + \"-\" + str(D) + \"=7\")\n        exit()\n    if A + B - C - D == 7:\n        print(str(A) + \"+\" + str(B) + \"-\" + str(C) + \"-\" + str(D) + \"=7\")\n        exit()\n    if A - B - C - D == 7:\n        print(str(A) + \"-\" + str(B) + \"-\" + str(C) + \"-\" + str(D) + \"=7\")\n        exit()",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s840600049":{
    "code_string":"import sys\na,b,c,d= input()\nfor i in range(2**(len(op)-1)):\n    op = [\"+\"]*3\n    for j in range(len(op)-1):\n        if (i >> j) & 1 == 1:\n            op[j] = \"-\"\n    if eval(a+op[0]+b+op[1]+c+op[2]+d) == 7:\n        print(a+op[0]+b+op[1]+c+op[2]+d+'=7')\n        sys.exit()",
    "error_obj":"NameError: name 'op' is not defined"
  },
  "s139403668":{
    "code_string":"from networkx import *\nh,w=map(int,input().split());r=range(10);G=DiGraph();G.add_nodes_from(r);C=[[*map(int,input().split())]for _ in \"_\"*10];G.add_weighted_edges_from([(i,j,C[i][j])for i in r for j in r]);S=[single_source_dijkstra_path_length(G,i)[1]for i in r];A=[[*map(int,input().split())]for _ in r];print(sum(S[abs(x)] for a in A for x in a))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s077788160":{
    "code_string":"a,b=map(int,input().split())\nif a>b:\n  print('>')\nelif a==b:\n  print('=')\nelse:\n  print('<')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s317161566":{
    "code_string":"a, b input().split()\nif a==b:\n  print(\"=\")\nelse:\n  print(\"<\" if a < b else \">\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s513985337":{
    "code_string":"x, y=map(int, input().split())\nalp='ABCDEF'\nif x==y:\n  print('=')\nelif alp.index(x)<alp.index(y):\n  print('<')\nelse:\n  print('>')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s826985236":{
    "code_string":"print(['<','=','>'][min(2,max(0,1+int('0x'+input())-int('0x'+input())))a,b=input().split()\nprint(['<','=','>'][min(2,max(0,1+int(a,16)-int(b,16)))])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s888991007":{
    "code_string":"a,b=map(str,input().split())\nList = [\"A\",\"B\",\"C\",\"D\",\"F\"]\nif a == b:\n  print(\"=\")\nc = 0\nd = 0\nfor i in range(6):\n  if a == List[i]:\n    c = i\n  if b == List[i]:\n    d = i\nif c < d:\n  print(\"<\")\nelif d < c:\n  print(\">\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s033989418":{
    "code_string":"#78 C - HSI\nN,M = map(int,input().split())\n# \u5168\u3066 AC \u3068\u306a\u308b\u78ba\u7387\np = (1\/2)**M\n\n# E = 1\/p \u306b\u306a\u308b\nE = 1\/p\nans = (1900*M + 100*(N-M))*E\nans = round(ans)\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s766018581":{
    "code_string":"a, b = input()\nif a == b:\n  print('=')\nelif a > b:\n  print('>')\nelse:\n  print('<')",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s335564796":{
    "code_string":"l = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nx, y = map(int, input().split())\nif l.index(x) > l.index(y):\n  print(\">\")\nelif l.index(x) < l.index(y):\n  print(\"<\")\nelse:\n  print(\"=\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s231872885":{
    "code_string":"A,B,C,D,E,F = 10,11,12,13,14,15\nx,y = map(int,input().split())\nif x < y:\n  print(\"<\")\nelif x > y:\n  print(\">\")\nelse:\n  print(\"=\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s199858539":{
    "code_string":"a,b = input().split()\nif a>b:\n  print('>')\nelse if a<b:\n  print('<')\nelse if a==b:\n  print('=')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s211457377":{
    "code_string":"X,Y=map(int,input().split())\nif X<Y:\n  print('<')\nelif X>Y:\n  print('>')\nelse:\n  print('=')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s429229042":{
    "code_string":"x,y=map(int,input().split())\nif x<y:\n    print(\"<\")\nelif x>y:\n    print(\">\")\nelse:\n    print(\"=\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s954554744":{
    "code_string":"x,y=map(int,input().split())\nif ord(x)<ord(y):print('<')\nelif ord(x)>ord(y):print('>')\nelse:print('=')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'A'"
  },
  "s003057527":{
    "code_string":"lst=['A','B','C','D','E','F']\na=input()\nif lst.index(a[0])>lst.index(a[1]):\n    print('>')\nelif lst.index(a[0])==lst.index(a[1]):\n    print('=')\nelse:\n    print('<')",
    "error_obj":"ValueError: ' ' is not in list"
  },
  "s604456245":{
    "code_string":"A=1\nB=2\nC=3\nD=4\nE=5\nF=6\nX,Y=input().split()\nif X<Y:\n  pritn(\"<\")\nelif X>Y:\n  print(\">\")\nelif X==Y:\n  print(\"=\")\n  ",
    "error_obj":"NameError: name 'pritn' is not defined"
  },
  "s429915873":{
    "code_string":"a, b = input().split()\nif a < b:\n    print('<')\nelsif a > b:\n \tprint('>')\nelse:\n  \tprint('=')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s365061428":{
    "code_string":"A,B=input().split()\n\nmydict = {\"A\":11, \"B\":12, \"C\":14, \"D\":13, \"E\":14, \"F\":15}\n\nprint('>') if mydict(A) > mydict(B) else print('<') if mydict(A) < mydict(B) else print('=')\n",
    "error_obj":"TypeError: 'dict' object is not callable"
  },
  "s845265333":{
    "code_string":"a,b =input().split()\nif a.isalpha() > b.isalpha():\n  print(\">\")\nelif a.isalpha() < b.isalpha():\n  print(\"<\")\n  else:\n  print(\"=\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s521604534":{
    "code_string":"a,b =map(input())\nif a == b:\n  print(\"=\")\nelif a < b:\n  print(\"<\")\nelse:\n  print(\">\")",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s556542914":{
    "code_string":"x,y,z=map(int(input().split()))\nans=1\nx-=(y+2*z)\nprint(ans+x\/\/(y+z))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s295379247":{
    "code_string":"a,b,c=map(int, input().split())\nprint((a-b-2*c)\/\/(b+C)+1)",
    "error_obj":"NameError: name 'C' is not defined"
  },
  "s347626096":{
    "code_string":"\na,b,c = map(int,input().split())\n#lis = list(map(int,input().split()))\nprint((a-c)\/\/(b+z))\n",
    "error_obj":"NameError: name 'z' is not defined"
  },
  "s555146434":{
    "code_string":"x,y,z=map(int,input().split())\nwhile True:\n  n=0\n  if n*y+(n+1)*z>x:\n    print(n-1)\n    exit()\n  n+=1",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s656096114":{
    "code_string":"64145 123 456",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s166525596":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nn, m = ri()\nprint((m*1900 + (n-m)*100) * 2**m)\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 1\\n'"
  },
  "s683612697":{
    "code_string":"import sys\nimport math\nimport heapq\nmod=10**9+7\ninf=float(\"inf\")\nfrom math import sqrt\nfrom collections import deque\nfrom collections import Counter\nfrom collections import defaultdict\n#\u3059\u3079\u3066\u306ekey\u304c\u7528\u610f\u3055\u308c\u3066\u308b defaultdict(int)\u3067\u521d\u671f\u5316\nfrom collections import OrderedDict\n#\u9806\u5e8f\u3092\u4fdd\u3063\u305fdict\nfrom math import ceil\ninput=lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(11451419)\nfrom decimal import Decimal #float\u306e\u9ad8\u7cbe\u5ea6ver, \u6e21\u3059\u306e\u306fstr\u578b\u3067\nfrom functools import lru_cache\n#\u30e1\u30e2\u5316\u518d\u5e30def\u306e\u5192\u982d\u306b\u6bce\u56de @lru_cache(maxsize=10**10)\n#\u5f15\u6570\u306blist\u306f\u3060\u3081\n#######\u3053\u3053\u307e\u3067\u30c6\u30f3\u30d7\u30ec#######\n#\u30bd\u30fc\u30c8\u3001\"a\"+\"b\"\u3001\u518d\u5e30\u306a\u3089Python3\u306e\u65b9\u304c\u3044\u3044\n#######\u3053\u3053\u304b\u3089\u5929\u3077\u3089########\nn,m=map(int,input().split())\nA=100*(n-m)+1900*m\np=pow(2,m)\n\n@lru_cache(maxsize=10**10)\ndef per(n):\n    if n==1:\n        return 1\/p\n    return (1-sum([per(i) for i in range(1,n)]))*(1\/p)\n\nans=0\nfor i in range(1,10000):\n    ans+= i*A*per(i)\nprint(round(ans))\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s294675023":{
    "code_string":"n, m = map(int, input().split())\ns100 = 100*(n - m) * 2**m\ns1900 = m * 1900 * 2**m\nprint(s100 + s1900)\n\\",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s971034640":{
    "code_string":"N,M = map(int,input().split())\nprint(1900*M + 100*(N-M))*2**M",
    "error_obj":"TypeError: unsupported operand type(s) for *: 'NoneType' and 'int'"
  },
  "s900614688":{
    "code_string":"N,M = map(int.input().split())\nans = (1900*M + 100*(N-M))*(2**M)\nprint(ans)",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s746639089":{
    "code_string":"N,Z,W=map(int,input().split())\na=list(map(int,input().split()))\nprint(abs(W-a[0])if n==1 else max(abs(W-a[-1]),abs(a[-1]-a[-2])))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s332409715":{
    "code_string":"from collections import deque\nclass Dinic:\n    def __init__(self, N):\n        elf.N = N\n        self.G = [[] for i in range(N)]\n\n    def add_edge(self, fr, to, cap):\n        forward = [to, cap, None]\n        forward[2] = backward = [fr, 0, forward]\n        self.G[fr].append(forward)\n        self.G[to].append(backward)\n\n    def add_multi_edge(self, v1, v2, cap1, cap2):\n        edge1 = [v2, cap1, None]\n        edge1[2] = edge2 = [v1, cap2, edge1]\n        self.G[v1].append(edge1)\n        self.G[v2].append(edge2)\n\n    def bfs(self, s, t):\n        self.level = level = [None]*self.N\n        deq = deque([s])\n        level[s] = 0\n        G = self.G\n        while deq:\n            v = deq.popleft()\n            lv = level[v] + 1\n            for w, cap, _ in G[v]:\n                if cap and level[w] is None:\n                    level[w] = lv\n                    deq.append(w)\n        return level[t] is not None\n\n    def dfs(self, v, t, f):\n        if v == t:\n            return f\n        level = self.level\n        for e in self.it[v]:\n            w, cap, rev = e\n            if cap and level[v] < level[w]:\n                d = self.dfs(w, t, min(f, cap))\n                if d:\n                    e[1] -= d\n                    rev[1] += d\n                    return d\n        return 0\n\n    def flow(self, s, t):\n        flow = 0\n        INF = 10**9 + 7\n        G = self.G\n        while self.bfs(s, t):\n            *self.it, = map(iter, self.G)\n            f = INF\n            while f:\n                f = self.dfs(s, t, INF)\n                flow += f\n        return flow\n\n\n\nimport sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\nn = int(input())\na = list( map(int, input().split()))\n\nscore = 0\nINF = float('inf')\ngraph = Dinic(n+2)\n\nfor i in range(n):\n    if a[i]>0:\n        graph.add_edge(i+1,n+1,a[i])\n        score += a[i]\n    elif a[i]<0:\n        graph.add_edge(0,i+1,-a[i])\n\nfor i in range(1,n\/\/2+1):\n    for j in range(2*i,n+1,i):\n        graph.add_edge(i,j,INF)\n\nprint(score-graph.flow(0,n+1))\n\n",
    "error_obj":"NameError: name 'elf' is not defined"
  },
  "s091185555":{
    "code_string":"A = input().split()\nB = input().split()\nif A[0] == B[2] and A[1] == B[1] and A[2] == B[0]:\n    print('YES')\nelse:\n    print('NO')",
    "error_obj":"IndexError: list index out of range"
  },
  "s263460820":{
    "code_string":"s = input()\nt = input()\ns.reverse()\n\nif s==t :\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'reverse'"
  },
  "s396474338":{
    "code_string":"x = str(input())\ny = str(input())\nz = x.reversed()\nw = y.reversed()\nif x==w and y==z:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'reversed'"
  },
  "s194550854":{
    "code_string":"L=list(map(int,input().split()))\nR=list(map(int,input().split()))\nif L[0]==R[2] and L[1]==R[1] and L[2]==R[0]:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'pot'"
  },
  "s837911331":{
    "code_string":"for x,y in zip(input(),reversed(input)):\n  if x!=y:\n    print('NO')\n    break\nelse:\n  print('YES')\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not reversible"
  },
  "s045473275":{
    "code_string":"n ,s = map(str,input().split())\nif n[0]== s[2]and n[1]==s[1] and n[2]== s[0]:\n    print('Yes')\nelse:\n    print('No')\n\n    ",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s956474324":{
    "code_string":"# 077a\n\ndef atc_077a(input_value: str) -> str:\n    C1 = input_value[0]\n    C2 = input_value[1]\n\n    if C1[0] == C2[2] and C1[1] == C2[1] and C1[2] == C2[0]\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nC1 = input()\nC2 = input()\nprint(atc_077a([C1, C2]))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s111652607":{
    "code_string":"c=input()\nd=input()\nif c[0]==d[3] and c[1]==d[1] and c[2]==d[0]:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"IndexError: string index out of range"
  },
  "s158410534":{
    "code_string":"a,b=input()\nif a[0]==b[2] and a[1]==b[1] and a[2]==b[0]:print('YES')\nelse:print('NO')",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s125866027":{
    "code_string":"c11,c12,c13=map(int,input().split())\nc21,c22,c23=map(int,input().split())\nif c11==c23:\n    print('YES')\nelif c12==c22:\n    print('YES')\nelif c13==c31:\n    print('YES')\nelse:\n    print('NO')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'pot'"
  },
  "s874901534":{
    "code_string":"x = [list(map(str, input().split())) for i in range(2)]\nif x[0][0] == x[1][2] and x[0][1] == x[1][1] and x[1][0] == x[0][2]:\n  print('YES')\nelse:\n  print('NO')",
    "error_obj":"IndexError: list index out of range"
  },
  "s852436579":{
    "code_string":"S1 = input()\nS2 = input()\nif S1.reverse == S2:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"AttributeError: 'str' object has no attribute 'reverse'"
  },
  "s482109922":{
    "code_string":"a, b = input().split()\nif a[0] == b[2] and a[1] == b[1] and a[2] == b[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s365395603":{
    "code_string":"x = input()\ny = input()\nif x[::-1] = y:\n\tprint('YES')\nelse:\n\tprint('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s447648379":{
    "code_string":"c1 = input()\nc2 = input()\nprint(\"YES\" if c1=c2[-1::-1] else \"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s788649357":{
    "code_string":"\nC =str(input())\n\n\nif C[0] == C[5] and C[1] == C[4] and C[2] == C[3]:\n    print('Yes')\n\nelse:\n    print('No')\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s446117012":{
    "code_string":"n=int(input())\n\nx=0\nwhile 1:\n  if x**2>n:\n    print((x-1)**2)\n  x+=1",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s752781686":{
    "code_string":"import math\nprint(math.floor(math.sqrt(int(input())))\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s096415024":{
    "code_string":"N=int(input())\nC=0\nfor i in range(1,N):\n  if i**2<N:\n    C=i**2\n  elif i**2=N:\n    C=i**2\n    break\n  elif i**2>N:\n    break\nprint(C)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s841438951":{
    "code_string":"n = int(input())\n\na = 1\n\nwhile a <= n:\n  b = a\n  a **= 2\n  \nprint(b)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s120588175":{
    "code_string":"N = int(input())\n\n\nwhile N > i**2:\n    i += 1\n\nprint((i-1)**2)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s640314361":{
    "code_string":"for x in range(int(input())):\n  if x**2>n:\n    print(x-1)\n    break",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s636684028":{
    "code_string":"import sys\nN=int(input())\nif N=1:\n    print(\"1\")\nelif N=2:\n    print(\"2\")\nelse:\n    for i in range(N):\n        if i**2>N:\n            print((i-1)**2)\n            sys.exit()\n        else:\n            pass\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s104044293":{
    "code_string":"x = int(input())\na = [0]\nfor i in range(10**5):\n  if i**2<x:\n    a.add(i**2)\n  else:\n    break\nprint(max(a))",
    "error_obj":"AttributeError: 'list' object has no attribute 'add'"
  },
  "s088503421":{
    "code_string":"n = int(input())\nx = int(sqrt(n))\nprint(x**2)",
    "error_obj":"NameError: name 'sqrt' is not defined"
  },
  "s845749400":{
    "code_string":"n = int(input())\nk = int(input())\nref = 1\n\nfor i in range(n):\n  if ref * 2 < ref + k:\n    ref *= 2\n  else:\n    ref += k\n\nprint(ref)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s691220654":{
    "code_string":"a=int(input())\nwhile i**2<=a:\n  i=i+1\nprint(i**2)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s134944154":{
    "code_string":"import math\nN = int(input())\nans = 1\nfor i in range(10**5):\n    if i**2 =< N:\n        ans = i**2\n    if i**2 > N:\n        break\n\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s960136522":{
    "code_string":"import math\nx=int(input())\ny= math.sqrt(x)\nz= y\/\/1\nprint(int(z)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s320221160":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nA.sort()\nB.sort()\nC.sort()\nans = 0\nfor b in B:\n    a = bisect_left(A, b)\n    c = bisect_right(C, b)\n    ans += a*(N-c)\nprint(ans)",
    "error_obj":"NameError: name 'bisect_left' is not defined"
  },
  "s641321987":{
    "code_string":"import bisect\nN = int(input())\ntop = list(map(int,input().split()))\nmiddle = list(map(int,input().split()))\t\nbottom = list(map(int,input().split()))\t\n\ntop.sort()\nmiddle.sort()\nbottom.sort()\n\nans = 0\nfor i in middle:\n  can_put_upstair = bisect.bisect_left(top,i)\n  can_put_donwstair = N - bisect.bisect_right(bottom,i)\n  ans += can_put_upstair*can_put_downstair\n\nprint(ans)\n  ",
    "error_obj":"NameError: name 'can_put_downstair' is not defined"
  },
  "s432464033":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,input().split()))\n\n#\u30ea\u30b9\u30c8\u3092\u30bd\u30fc\u30c8\na=sorted(a)\nb=sorted(b)\nc=sorted(c)\n\n#\u4e8c\u5206\u63a2\u7d22(x\u4ee5\u4e0a\u306e\u6700\u5c0f\u5024index) !\u540c\u3058\u5024\u306e\u6642\u306findex+1\u3092\u3059\u308b\ndef lower_bound(arr,x):\n    l=0\n    r=len(arr)-1#\u6570\u5217arr\u306e\u6700\u5f8c\u5c3e\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n    while l<=r:\n        mid=(l+r)\/\/2#\u4e2d\u592e\u5024\u691c\u7d22\n        if x==arr[mid]:#\u3061\u3087\u3046\u3069\u4e2d\u592e\u5024\u306b\u5b58\u5728\u3057\u305f\u3068\u304d\n            return mid+1\n        elif x<arr[mid]:#x\u304c\u5de6\u5074\u306e\u914d\u5217\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\n            r=mid-1\n        else:#x\u304c\u53f3\u5074\u306e\u914d\u5217\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\n            l=mid+1\n        #print(mid,r,l)\n    if x>arr[-1]:\n        return -1\n    else:\n        return r+1\n\n#\u4e8c\u5206\u63a2\u7d22(x\u4ee5\u4e0b\u306e\u6700\u5927\u5024) !\u540c\u3058\u5024\u306e\u6642\u306findex-1\u3092\u3059\u308b\ndef upper_bound(arr,x):\n    l=0\n    r=len(arr)-1#\u6570\u5217arr\u306e\u6700\u5f8c\u5c3e\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n    while l<=r:\n        mid=(l+r)\/\/2#\u4e2d\u592e\u5024\u691c\u7d22\n        if x==arr[mid]:#\u3061\u3087\u3046\u3069\u4e2d\u592e\u5024\u306b\u5b58\u5728\u3057\u305f\u3068\u304d\n            return mid-1\n        elif x<arr[mid]:#x\u304c\u5de6\u5074\u306e\u914d\u5217\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\n            r=mid-1\n        else:#x\u304c\u53f3\u5074\u306e\u914d\u5217\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\n            l=mid+1\n        #print(mid,r,l)\n    if x<arr[0]:\n        return -1\n    else:\n        return r\n\n#\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8\ncount=0\nfor i in range(n):\n    a_count=upper_bound(a,b[i])+1#b\u8981\u7d20\u56fa\u5b9a\u3067\u306ea\u8981\u7d20\u306e\u500b\u6570\n    c_count=lower_bound(c,b[i])+1#b\u8981\u7d20\u56fa\u5b9a\u3067\u306ec\u8981\u7d20\u306e\u500b\u6570\n    if a_count=-1 or c_count=-1:\n        count=0\n    else:\n        count+=a_count*(len(c)-c_count+1)\n        #print(upper_bound(a,b[i]),lower_bound(c,b[i]))\n        #print(a_count,len(c),c_count,len(c)-c_count+1)\n        #print(count)\n\nprint(count)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s365011370":{
    "code_string":"import bisect\nn = int(input())\nx = sorted(list(map(int,input().split())), reverse=True)\ny = sorted(list(map(int,input().split())), reverse=True)\nz = sorted(list(map(int,input().split())), reverse=True)\ncount = 0\nX =[]\nfor b in range(n):\n  k = bisect.bisect_right(x,y[b])\n  X[b] =(n-k)\nfor a in range(n):\n  j = bisect.bisect_right(y,z[a])\n  count+=sum(X[j:])\nprint(count)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s675694046":{
    "code_string":"import sys\nimport bisect\n\ndef main():\n    input = sys.stdin.buffer.readline\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    B = list(map(int, input().split()))\n    B.sort()\n    C = list(map(int, input().split()))\n    ans = 0\n    for i in B:\n        a = bisect.bisect_left(A, b)\n        c = bisect.bisect_right(C, b)\n        ans += a*(N-c)\n    print(sum(A_count))\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s702656787":{
    "code_string":"from bisect import bisect_left, bisect_right\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nan.sort()\nbn.sort()\ncn.sort()\n\ncnt = 0\n\nfor b in bn:\n    a = bisect_left(an,b)\n    c = bisect_right(cn,b)\n    cnt += a * (n-c)\nprint(cnt)",
    "error_obj":"NameError: name 'an' is not defined"
  },
  "s221444966":{
    "code_string":"import sys\n\n\ndef main():\n        n = sys.stdin.readline()\n\n        astr = sys.stdin.readline()\n        bstr = sys.stdin.readline()\n        cstr = sys.stdin.readline()\n\n        a = list(map(int, astr.strip().split(' ')))\n        b = list(map(int, bstr.strip().split(' ')))\n        c = list(map(int, cstr.strip().split(' ')))\n\n        a.sort()\n        b.sort()\n        c.sort()\n\n        cnt = 0\n\n        bc = []\n        sum = 0\n        for bi in reversed(b):\n                ct = c[binary(bi, c):]\n                sum += len(ct)\n                bc.append(sum)\n        bc.reverse()\n\n        cnt = 0\n        for ai in a:\n                bi = binary(ai, b)\n                cnt += bc[bi]\n\n        print(cnt)\n\n\ndef binary(x, li):\n    upper = len(li)\n    lower = -1\n    index = int((upper + lower) \/ 2)\n\n\n    while upper - lower > 1:\n        if (x < li[index]):\n            upper = index\n        else:\n            lower = index\n        index = int((upper + lower)\/2)\n    \n    return upper\n\n\nmain()",
    "error_obj":"IndexError: list index out of range"
  },
  "s081167476":{
    "code_string":"import sys\nfrom bisect import bisect\nfrom itertools import accumulate\n\n\ndef main():\n    input = sys.stdin.buffer.readline\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    b = sorted(map(int, input().split()))\n    c = sorted(map(int, input().split()))\n    # \u5404\u4e2d\u90e8\u30d1\u30fc\u30c4\u3092\u4e57\u305b\u3089\u308c\u308b\u4e0b\u90e8\u30d1\u30fc\u30c4\u306e\u500b\u6570\n    b_c_cnt = [len(c[bisect(c, b[i]) :]) for i in range(n)]\n    # b_c_cnt\u306b\u5f8c\u308d\u304b\u3089\u7d2f\u7a4d\u548c\u3092\u3068\u308b\n    acc = list(accumulate(b_c_cnt[::-1]))[::-1]\n    ans = 0\n    for i in range(n):\n        ans += acc[bisect(b, a[i])]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s858741460":{
    "code_string":"n=int(input())\nabc=[list(map(int,input().split())) for i in range(3)]\nsum=0\nfor _ in range(n):\n  abc[1].append(abc[0][i])\n  abc[1].sort()\n  abc[2].sort()\n  p=abc[1].index(abc[0][i])\n  for k in range(p+1,n):\n    abc[2].append(a[1][k])\n    q=abc[2].index(abc[1][k])\n    sum+=n-q-1\n    abc[1].remove(abc[0][i])\n    abc[2].remove(a[1][k])\nprint(sum)\n    \n    \n    ",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s572143856":{
    "code_string":"import sys\nfrom bisect import bisect_right\nread=sys.stdin.read\nreadline=sys.stdin.readline\n\ndef main():\n    n=int(readline())\n    a,b,c=(list(map(int,lst.split())) for lst in read().splitlines())\n    a.sort()\n    b.sort()\n    c=[-x for x in c]\n    c.sort()\n    print(sum(bisect_right(x,a)*bisect_right(-x,c) for x in b))\n\nif __name__=='__main__':\n    main()\n      \n      \n",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s784395989":{
    "code_string":"def bs_left(lists, item):\n    low, high = 0, len(lists)\n    \n    while (high >low ) :\n        mid = (low + high)\/\/2\n        if lists[mid]  < item:\n            low = mid +1\n            \n        else:\n            high = mid\n            \n    return low\n\ndef bs_right(lists, item):\n    low, high = 0, len(lists)\n    \n    while (high >low ):\n        mid = (low + high)\/\/2\n        if lists[mid] > item:\n            high = mid \n            \n        else:\n            low = mid+1\n            \n    return len(lists) - low\n  \n\nCode\nn = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nC = [int(x) for x in input().split()]\n\u200b\ncount = 0\nA.sort(), B.sort(), C.sort()\nfor b in B:\n    count += (bs_left(A, b) * bs_right(C, b))\n    \nprint(count)\n",
    "error_obj":"SyntaxError: invalid non-printable character U+200B"
  },
  "s495072111":{
    "code_string":"from heapq import heappush, heappop\n\n\ndef dijkstra(graph: list, n: int, v_s: int, INF: int = float('inf')) -> list:\n    # graph[v_from] = [(cost, v_to), ...]\n    dist = [INF] * n\n\n    dist[v_s] = 0\n    heap = [(0, v_s)]  # heap = [(dist[v], v), ...]\n    while heap:\n        dist2v, v_from = heappop(heap)\n        if dist[v_from] < dist2v:\n            continue\n        for cost, v_to in graph[v_from]:\n            dist_cand = dist2v + cost\n            if dist_cand < dist[v_to]:\n                dist[v_to] = dist_cand\n                heappush(heap, (dist[v_to], v_to))\n    return dist\n\n\nk = int(input())\n\ngraph = [[] for _ in range(k)]\nfor i in range(1, k):\n    graph[i].append((1, i + 1))\n    graph[i].append((0, 10 * i % k))\n\ndist = dijkstra(graph, k, 1)\nans = dist[0] + 1\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s110393502":{
    "code_string":"import bisect\nfrom collections import deque\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nA.sort()\nB.sort()\nC.sort()\n\nd = deque([])\nfor i in range(N):\n  n = bisect.bisect_right(C, B[N-1-i])\n  if len(d) == 0:\n    d.appendleft(N-n)\n  else:\n    d.appendleft(N-n+d[0])\n  \nans = 0\nfor i in range(N):\n  n = bisect.bisect_right(B, A[i])\n  ans += d[n]\nprint(ans)",
    "error_obj":"IndexError: deque index out of range"
  },
  "s900745536":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA = sorted(A)\nB = sorted(B)\nC = sorted(C)\n\n# for this we will use binary search.\nimport bisect as bis\n\nfor i in range (0, N):\n\tBSC[i] = N-bis.bisect_right(C, B[i])",
    "error_obj":"NameError: name 'BSC' is not defined"
  },
  "s656499099":{
    "code_string":"a = int(input())\nb = int(input())\nres = 2 * b -A\nprint(res)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s843687658":{
    "code_string":"r=int(input())\ng=int(input())\nprint(2g-r)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s412168943":{
    "code_string":"a, b = map(int, input().split())\nprint(b*2-a)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s984987625":{
    "code_string":"r = int(input())\ng = int(input())\nprint(g*2-a)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s846758282":{
    "code_string":"r,g=map(int,input().split())\nprint(2*g-r)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s381191544":{
    "code_string":"a = int(input())\nb = int(input())\nprint(2b - a)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s351630784":{
    "code_string":"R,G=map(int,input().split())\nprint(G*2-R)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s914321364":{
    "code_string":"print(-input() + input() * 2)",
    "error_obj":"TypeError: bad operand type for unary -: 'str'"
  },
  "s237857722":{
    "code_string":"R = int(input())\nG = int(input())\n\nsa = G-B\nprint(G+sa)\n",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s802641812":{
    "code_string":"R, G = map(int, input().split())\n\nprint(2 * G - R)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s994172131":{
    "code_string":"R,G = map (int, input(). split())\nprint (2*G-R)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s128549871":{
    "code_string":"R, G = (int(x) for x in input().split())\nans = 2*G - R\nprint(ans)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s874962789":{
    "code_string":"print(chr(ord(input())+1))",
    "error_obj":"TypeError: ord() expected a character, but string of length 4 found"
  },
  "s259543019":{
    "code_string":"N = int(input())\nK = int(input())\na = 1\nfor _ in range(N):\n    a = min(a*2, a+k)\nprint(a)",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s548424692":{
    "code_string":"\nn,k=map(int,input().split())\ndis = 1\nfor i in range(n):\n    if dis*2 <= dis+k:\n        dis *= 2\n    else:\n        dis += k\nprint(dis)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s956034132":{
    "code_string":"\ndef main():\n        \n    S_part = list(input())\n    T_hint = list(input())\n \n    N = len(S_part)\n    ans = []\n \n    for i in range(N):\n        index_init = i\n            \n        if (index_init + len(T_hint) <= N):\n            s = S_part[index_init:index_init + len(T_hint)]\n            module = ''.join(S_part[index_init + len(T_hint)])\n            \n \n            if ('?' in s):\n                FLAG = True\n                \n                for j in range(len(s)):\n                    if (T_hint[j] != s[j] and s[j] == '?'):\n                        s[j] = T_hint[j]\n                    \n                    elif (T_hint[j] != s[j] and s[j] != '?'):\n                        FLAG = False\n                        break\n                \n                \n                if (FLAG):\n                    ans_left = ''.join(S_part[:index_init])\n                    ans_right = ''.join(s)\n                                        \n                    # tmp_ans = ans_left + ans_right\n                    tmp_ans = ans_left + ans_right + module\n\n\n                    tmp_ans = tmp_ans.replace('?', 'a')\n                    \n                    ans.append(tmp_ans)\n \n    ans.sort()\n\n    if (S_part.count('?') == 0):\n        print(S_part)\n    elif (len(ans) > 0):\n        print(ans[0])\n \n    else:\n        print('UNRESTORABLE')\n \n \n \nif __name__ == '__main__':\n    main()\n ",
    "error_obj":"IndexError: list index out of range"
  },
  "s963732613":{
    "code_string":"from copy import deepcopy\nS = list(input())\nT = list(input())\ns_num = len(S)\nt_num = len(T)\nS_copy = deepcopy(S)\nif s < t:\n  print('UNRESTORABLE')\nelse:\n  for i in range(s_num-t_num, -1, -1):\n    s_key = S[i:i+t_num]\n    judge = 0\n    for s, t in zip(s_key, T):\n      if s=='?':\n        judge += 1\n      elif s == t:\n        judge += 1\n    if judge == t_num:\n      S_copy[i:i+t_num] = T\n  if S == S_copy:\n    print('UNRESTORABLE')\n  else:\n    for i in S_copy:\n      if i == '?':\n        print('a', end='')\n      else:\n        print(i, end='')",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s575768244":{
    "code_string":"s,t=input(),input();l,m=len(s),len(t)\nfor i in range(l-m+1):\n if all(c in\"?\"+d for c,d in zip(S[-i-m:],t)):s=s.replace(*\"?a\");exit(print(s[:-i-m]+t+s[l-i:]))\nprint(\"UNRESTORABLE\")",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s853898291":{
    "code_string":"S=input()\nT=input()\nn=len(S)\nm=len(T)\n\nfor i in range(n-m+1,-1,-1) :\n    x=S[i:i+m]\n    for j in range(m+1):\n        if j==m :\n            print((S[:i]+T+S[i+m:]).replace(\"?\",\"a\"))\n            exit()\n        if x[j]==\"?\" :\n            continue\n        elif x[j]!=T[j] :\n            break\n \nprint(\"UNRESTORABLE\")",
    "error_obj":"IndexError: string index out of range"
  },
  "s979143142":{
    "code_string":"s = input()\nt = input()\nw = []\nfor i in range(len(s) - len(t) + 1):\n    f = True\n    sx = s[i:i + len(t)]\n    for si, ti in zip(sx, t):\n        if si != ti and si != \"?\":\n            f = False\n        else:\n            pass\n    if f:\n        w.append((s[:i] + t).replace(\"?\", \"a\"))\nif w == []:\n    print(\"UNRESTORABLE\")\nelse\nw.sort()\nprint(w[0])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s367645894":{
    "code_string":"print(\"YES\" if \"AC\" in input() else \"NO)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s959637025":{
    "code_string":"print(\"Yes\" if any([input()[i:i + 2] == \"AC\" for i in range(len(input()) - 1)]) else \"No\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s288419913":{
    "code_string":"s = input()\nif s in \"AC\":\n  print(\"Yes\")\n else:\n  print(\"No\")",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s818144693":{
    "code_string":"S = input()\nif \"AC\" in S:\n\tprint('Yes')\nelse\n\tprint('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s222253131":{
    "code_string":"import sys\n\ninput = sys.stdin.readline\n\ndef main():\n    ans = 0\n    n = int(input())\n    A = list(map(int, input().split()))\n    allB = exc = 1\n    for i in n:\n        allB *= 3\n        if i%2 == 0:\n            exc *= 2\n    ans = allB - exc\n    print(ans)\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s015416213":{
    "code_string":"a,b,c=map(int,input().split())\nif a==b:\n  print(c)\nelif b==c:\n  print(a):\nelse:\n  print(b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s790366691":{
    "code_string":"h,w = map(int,input().split())\nls = []\nside = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]\nfor i in range(h):\n  ls.append(list(input()))\nfor i in range(h):\n  ans2 = \"\"\n  for j in range(w):\n    ans = 0\n    if ls[i][j] == \"#\":\n      ans2 += \"#\"\n    else:\n      for k in range(8):\n        if i+side[k][0] < 0 or j+side[k][1] < 0 or h <=i+side[k][0] or w <= j+side[k][1]:\n          continue\n        else:\n          ans += (1 if ls[i+side[k][0]][j+side[k][1]] == \"#\" else 0)\n      ans2 += str(ans)\n  print(ans2)\n",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s672073638":{
    "code_string":"if a==b: print(c)\nelif a==c: print(b)\nelse: print(a)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s196882515":{
    "code_string":"A,B,C = map(int,input().slpit())\n \nif A==B:\n  print(C)\nelif B==C:\n  print(A)\nelse:\n  print(B)",
    "error_obj":"AttributeError: 'str' object has no attribute 'slpit'"
  },
  "s528745442":{
    "code_string":"a,b,c = map(int,input.split())\n\nif a == b:\n    print(c)\nelif a == c:\n    print(b) \nelse:\n    print(a)\n           ",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s630118171":{
    "code_string":"a,b,c=map(int,input().split())\nprint(a if b=c else b if a=c else c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s771075444":{
    "code_string":"a = map(int,input().split())\n\nfor i in a:\n  if a.count(i) > 1:\n    print(i)\n    break",
    "error_obj":"AttributeError: 'map' object has no attribute 'count'"
  },
  "s928794151":{
    "code_string":"l = liet(map(int, input().split()))\nfor ll in l:\n    if l.count(ll)==1:\n        print(ll)\n        break",
    "error_obj":"NameError: name 'liet' is not defined"
  },
  "s248825494":{
    "code_string":"a, b = map(int, input().split())\n\nprint(a ^ b ^ c)\n",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s130332181":{
    "code_string":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.buffer.readline\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    A, B, C == map(int, readline().split())\n    if A == B:\n        print(C)\n    elif B == C:\n        print(A)\n    else:\n        print(B)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s856713508":{
    "code_string":"a, b, c = map(int, input().split())\nprint(a if b == c else b if a == c else c if a == b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s301434436":{
    "code_string":"List = list(map(int, input().split()))\nres = 0\nfor i in range(3):\n  for j in range(i,3):\n    if List[i] == List[j]:\n      res = 6 - i+1 -j+1\nprint(List[res])",
    "error_obj":"IndexError: list index out of range"
  },
  "s507828362":{
    "code_string":"a,b,c=map(int,input().split())\n\nif a==b:\n    ans=c\nelif b==c:\n    ans=a:\nelse:\n    ans=b\nprint(a+b+c-ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s484645730":{
    "code_string":"A, B, C = map(int, input().slpit())\n \nif A==B:\n  print(C)\nelif B==C:\n  print(A)\nelse:\n  print(B)",
    "error_obj":"AttributeError: 'str' object has no attribute 'slpit'"
  },
  "s312833380":{
    "code_string":"h,w=map(int,input().split())\n\nl=[list(input()) for i in range(h)]\nans=[[0]*w for i in range(h)]\n\nfor i in range(h):\n  for j in range(w):\n    if l[i][j]==\"#\":\n      ans[i][j]==\"#\"\n    else:\n      for a in range(-1,2):\n        for b in range(-1,2):\n          if i+a<h and j+b<w ansl[i+a][j+b]==\"#\":\n            ans[i][j]+=1\n            \nfor i in range(h):\n  print(*ans[i])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s610643492":{
    "code_string":"import copy\nH,W=map(int,input().split())\nList = []\nfor i in range (H):\n  List.append(input())\nresList = copy.deepcopy(List)\n\ndef bombCheck(x,y,ListX):  \n  a = 0\n  b = 0\n  res = 0\n  if ListX[x][y] == \"#\":\n    return \"#\"\n  for i in range(-1,2,1):\n    a = x+i\n    if a<0 or a >= W:\n      pass\n    else:\n      for j in range(-1,2,1):\n        b = y+j\n        if b<0 or b >= H:\n          pass\n        else:\n          if i == 0 and j ==0:\n            pass\n          else:\n            if List[a][b] == \"#\":\n              res +=1\n            else:\n              pass\n  return str(res)\n\nfor i in range(H):\n  resList[i] =\"\"\n  for j in range(W):\n    resList[i] += bombCheck(i,j,List)\nfor i in resList:\n  print(i)",
    "error_obj":"IndexError: list index out of range"
  },
  "s238343584":{
    "code_string":"h,w = map(int,input().split())\nl = [[\".\"]*(w+2)]\nfor i in range(h):\n    l.append([\".\"] + [i for i in input()] + [\".\"])\nl.append([\".\"]*(w+2))\n \ndef count(i,j):\n    if l[i][j] == \"#\":\n        return \"#\"\n    c = 0\n    for n in range(i-1,i+2):\n        for m in range(j-1,j+2):\n            if l[n][m] == \"#\":\n                c += 1\n    return str(c)\n \nans = [\"\".join([count(i,j) for j in range(1,1+w)]) for i in range(1,1+h)]\n \nprint(\"\\n\".join(ans))\nh,w = map(int,input().split())\nl = [[\".\"]*(w+2)]\nfor i in range(h):\n    l.append([\".\"] + [i for i in input()] + [\".\"])\nl.append([\".\"]*(w+2))\n\ndef count(i,j):\n    if l[i][j] == \"#\":\n        return \"#\"\n    c = 0\n    for n in range(i-1,i+2):\n        for m in range(j-1,j+2):\n            if l[n][m] == \"#\":\n                c += 1\n    return str(c)\n\nans = [\"\".join([count(i,j) for j in range(1,1+w)]) for i in range(1,1+h)]\n\nprint(\"\\n\".join(ans))\n\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s386386991":{
    "code_string":"h,w = map(int, input().split())\ns = [list(input()) for _ in range(h)]\n\nans = [[0]*w for _ in range(h)]\nfor i in range(h):\n  for j in range(w):\n    if s[i][j] == \"#\": ans[i][j] = \"#\"\n      for i2 in range(i-1, i+2):\n        if i2 < 0 or h-1 < i2: continue\n        for j2 in range(j-1, j+2):\n          if (j2 < 0 or w-1 < j2): continue\n          elif ans[i2][j2] == \"#\": continue\n          ans[i2][j2] += 1\nfor i in ans:\n  print(\"\".join(map(str,i)))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s044841616":{
    "code_string":"H, W = map(int,input().split(' '))\nS = []\nfor i in range(H):\n  S[i] = input()\nfor j in range(H):\n  cnt = 0\n  for k in range(W):\n    if S[j][k] == '.'\n      if S[j-1][k-1] == '#':\n        cnt += 1\n      if S[j-1][k] == '#':\n        cnt += 1\n      if S[j-1][k+1] == '#':\n        cnt += 1\n      if S[j][k-1] == '#':\n        cnt += 1\n      if S[j][k+1] == '#':\n        cnt += 1\n      if S[j+1][k-1] == '#':\n        cnt += 1\n      if S[j+1][k] == '#':\n        cnt += 1\n      if S[j][k+1] == '#':\n        cnt += 1\n      S[j][k].replace(cnt)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s215031436":{
    "code_string":"h, w = map(int, input().split())\nfield = [list(input().split()) for _ in range(h)]\ndx = [1, 0, -1, 0, 1, -1, -1, 1]\ndy = [0, 1, 0, -1, 1, 1, -1, -1]\nfor i in range(h):\n    for j in range(w):\n        if field[i][j] != \"#\":\n            num = 0\n            for k in range(8):\n                ni = i + dy[k]\n                nj = j + dx[k]\n                if nj < 0 or h <= nj:\n                    continue\n                if ni < 0 or w <= ni:\n                    continue\n                if field[ni][nj] == \"#\":\n                    num += 1\n            field[i][j] = num\nfor out in field:\n    print(\"\".join(out))\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s199190162":{
    "code_string":"H,W = map(int,input().split())\nS = [list(input()) for i in range(H)]\n\nRmin = 0\nRmax = 0\nCmin = 0\nCmax = 0\n\n#\u884c\u65b9\u5411\u3078\u306e\u63a2\u7d22\nfor r in range(H):\n    #\u5217\u65b9\u5411\u3078\u306e\u691c\u7d22\n    for c in range(W):\n        #\u7206\u5f3e\u306e\u5834\u5408\u3001\u5468\u308a\u3092\u52a0\u7b97\n        if S[r][c] == \".\":\n            S[r][c] = 0\n        elif S[r][c] == \"#\":\n            if r == 0 :\n                Rmin = r\n                Rmax = r+2\n            elif r == H-1:\n                Rmin = r-1\n                Rmax = r+1\n            else:\n                Rmin = r-1\n                Rmax = r+2\n\n            if c == 0:\n                Cmin = c\n                Cmax = c+2\n            elif c == W-1:\n                Cmin = c-1\n                Cmax = c+1\n            else:\n                Cmin = c-1\n                Cmax = c+2\n            for i in range(Rmin,Rmax):\n                for t in range(Cmin,Cmax):\n                    if S[i][t] == \".\" or S[i][t] == 0:\n                        S[i][t] = 1\n                    elif not S[i][t] == \"#\":\n                        S[i][t] += 1\n\nfor i in range(H):\n    print(\"\".join(S[i]))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s059787465":{
    "code_string":"Y_DIR[-1,0,1]\nX_DIR[-1,0,1]\ndef count_bomb(y,x):\n  cnt=0\n  for yd in Y_DIR:\n    yy=y+yd\n    if not (0<=yy<h):\n      continue\n    for xd in X_DIR:\n      xx=x+xd\n      if not (0<=xx<w):\n        continue\n      if s[yy][xx]==\"#\":\n        cnt+=1\n  return cnt\n\nh,w=map(int,input().split())\ns=[]\nfor i in range(h):\n  s.append(input())\nfor y in range(h):\n  for x in range(w)\n    if s[y][x] == \".\":\n      s[y][x]=str(count_bomb(y,x))\n\nprint(\"\\n\".join(s)) \n      \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s472090588":{
    "code_string":"\nH, W = map(int, input().split())\nM = []\nfor h in range(H):\n    col = []\n    s = input()\n    for w in range(W):\n        if s[w] == '.':\n            col.append(0)\n        else:\n            col.append(np.inf)\n    M.append(col)\n\n\n\nfor h in range(H):\n    for w in range(W):\n        flag_h0= True\n        flag_hM = True\n        flag_w0 = True\n        flag_wM = True\n        if M[h][w] == np.inf:\n            \n            if h==0:\n                flag_h0= False\n            if h == H - 1:\n                flag_hM = False\n            if w== 0:\n                flag_w0 = False\n            if w== W-1:\n                flag_wM = False\n            \n            if flag_h0:\n                M[h-1][w] += 1\n                if  flag_w0:\n                    M[h-1][w-1] += 1\n                if flag_wM:\n                    M[h-1][w+1] += 1\n            \n            if flag_w0:\n                M[h][w-1] += 1\n            if flag_wM:\n                M[h][w+1] += 1\n            \n            if flag_hM:\n                M[h+1][w] += 1\n\n                if flag_w0:\n                    M[h+1][w-1] += 1\n                if flag_wM:\n                    M[h+1][w+1] += 1\n\n                    \nfor h in range(H):\n    tmp_ = ''\n    for w in range(W):\n        if M[h][w] < np.inf:\n            tmp_ += str(M[h][w])\n        else:\n            tmp_  += '#'\n    print(tmp_)\n                ",
    "error_obj":"NameError: name 'np' is not defined"
  },
  "s772279123":{
    "code_string":"H, W = map(int, input().split())\n\nS = [list(input()) for _ in range(H)]\ndydx = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n\ndef check(h, w):\n  count = 0\n  for dy, dx in dydx:\n    if 0 <= h + dy < H and 0 <= w + dx < W and S[h+dy][w+dx] == '#':\n      count += 1\n  return count\n      \n  \n\nfor h in range(H):\n  for w in range(W):\n    if S[h][w] == '.':\n      S[h][w] = check(h, w)\n  print(\"\".join(S[h])\n      \n      ",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s098619821":{
    "code_string":"class UnionFind:\n    def __init__(self, n):\n        self.nodes=n\n        self.parents = [i for i in range(n)]\n        self.sizes = [1] * n\n        self.rank = [0] * n\n\n    def find(self, i):\n        if self.parents[i] == i:\n            return i\n        else:\n            self.parents[i] = self.find(self.parents[i]) # \u7d4c\u8def\u5727\u7e2e\n            return self.parents[i]\n\n    def unite(self, i, j):\n        pi = self.find(i)\n        pj = self.find(j)\n        if pi != pj:\n            if self.rank[pi] < self.rank[pj]:\n                self.sizes[pj] += self.sizes[pi]\n                self.parents[pi] = pj\n            else:\n                self.sizes[pi] += self.sizes[pj]\n                self.parents[pj] = pi\n                if self.rank[pi] == self.rank[pj]:\n                    self.rank[pi] += 1\n    def same(self, i, j):\n        return self.find(i)==self.find(j)\n    def get_parents(self):\n        for n in range(self.nodes):\n            selff.find(n)\n        return self.parents\n\nadj=[]\nn, m = map(int,input().split())\nfor i in range(m):\n    uf = UnionFind(n)\n    for j in range(m):\n        if i==j:\n            continue\n        uf.unite(adj[j])\n    if len(set(uf.get_parents()))!=1:\n        ans+=1\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s931753548":{
    "code_string":"from typing import List, Tuple\n\n\ndef main():\n    n, m = map(int, input().split())\n    g = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        g.append((a, b))\n    print(b(n, m, g))\n\n\ndef b(n: int, m: int, g: List[Tuple[int, int]]):\n    ret = 0\n    for i in range(m):\n        v = set()\n        w = [1]\n        while w:\n            now = w.pop()\n            v.add(now)\n            for j, node in enumerate(g):\n                if j == i:\n                    continue\n                if node[0] == now and node[1] not in v:\n                    w.append(node[1])\n                elif node[1] == now and node[0] not in v:\n                    w.append(node[0])\n        if len(v) != n:\n            ret += 1\n    return ret\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s303836598":{
    "code_string":"s=input()\n\nprint(s[::(s.len()-8)])",
    "error_obj":"AttributeError: 'str' object has no attribute 'len'"
  },
  "s628599684":{
    "code_string":"s = input()\nprint(s-\"FESTIVAL\")",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s018604496":{
    "code_string":"\"\"\"\n\u5947\u6570\u672c\u306e\u8fba\u3067\u6210\u308a\u7acb\u3064\u9589\u8def\u304c\u3042\u308c\u3070\u3001\u5168\u3066\u306e\u9802\u70b9\u540c\u58eb\u30921\u672c\u306e\u8fba\u3067\u7d50\u3076\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u5947\u6570\u672c\u306e\u8fba\u3092\u305f\u3069\u3063\u3066\u305f\u3069\u308a\u7740\u3051\u308b\u9802\u70b9\u540c\u58eb\u306f\u5168\u30661\u672c\u306e\u8fba\u3067\u7d50\u3076\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u5947\u6570\u672c\u306e\u9589\u8def\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u3001\u3069\u3046\u3084\u3063\u3066\u5224\u5b9a\u3059\u308b\u304b\uff1f\n\u4e8c\u90e8\u30b0\u30e9\u30d5\u5224\u5b9a\u3092\u884c\u3046\u3002\n\u4e8c\u90e8\u30b0\u30e9\u30d5\u5224\u5b9a\u3063\u3066\u3069\u3046\u3084\u308b\u3093\u3060\u3063\u3051\uff1f\u2192\u3068\u306a\u308a\u306e\u30ce\u30fc\u30c9\u306b\u9055\u3046\u8272\u3092\u3064\u3051\u3066\u3044\u3063\u3066\u3001\u77db\u76fe\u304c\u306a\u3051\u308c\u3070\u4e8c\u90e8\u30b0\u30e9\u30d5\u3002\u77db\u76fe\u304c\u3042\u308c\u3070\u4e8c\u90e8\u30b0\u30e9\u30d5\u3058\u3083\u306a\u3044\u3002\n\"\"\"\nimport sys\nsys.setrecursionlimit(200000)\nn = len(edges)\ncolors = [-1]*(n+1)\ndef judgeBiGragh(edges):\n    def paint(v,c):\n        if colors[v] == -1:\n            colors[v] = c\n            nxC = (c+1)%2\n            for nxV in edges[v]:\n                result = paint(nxV,nxC)\n                if result == False:\n                    return result\n        else:\n            if colors[v] != c:\n                return False\n        return True\n    return paint(1,0)\n\nN,M = map(int,input().split())\nedges = [[] for _ in range(N+1)]\nfor _ in range(M):\n    a,b = map(int,input().split())\n    edges[a].append(b)\n    edges[b].append(a)\ndef choose(n,k):\n    import math\n    return math.factorial(n)\/\/(math.factorial(n-k)*math.factorial(k))\nif judgeBiGragh(edges):\n    cnt0 = colors.count(0)\n    cnt1 = colors.count(1)\n    ans = cnt0*cnt1 - M\nelse:\n    ans = choose(N,2)-M\n\nprint(ans)",
    "error_obj":"NameError: name 'edges' is not defined"
  },
  "s787154628":{
    "code_string":"n=int(input())\nfor i in range(1,3501):\n    for j in range(1,3501):\n        t1=n*i*j\n        t2=4*i*j-n*j-n*i\n        if t1%t2==0 and 1<=t1\/\/t2<3500:\n            print(i,j,t1\/\/t2)\n            exit()",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s090879179":{
    "code_string":"n = int(input())\n\nfor h in range(3501):\n    for w in range(3501):\n        bns = n * h * w\n        bnb = 4 * h * w - n * (h + w)\n        if bns % bnb == 0:\n            print(h, w, bns \/\/ bnb)\n            break\n",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s834491135":{
    "code_string":"import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N = I()\n\n    ans = (0, 0, 0)\n    for h in range(1, 3501):\n        for n in range(1, 3501):\n            # \u5f0f\u3092w\u306b\u3064\u3044\u3066\u89e3\u3044\u305f\n            num = N * n * h\n            denom = 4 * h * n - N * (h + n)\n            if denom > 0 and num % denom == 0:\n                w = num \/\/ denom\n                ans = (h, n, w)\n                break\n\n    print(*ans)\n\nif __name__ == '__main__':\n    resolve()\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s110478380":{
    "code_string":"import os\nimport sys\nimport numpy as np\n\n# >>> binary indexed tree >>>\n# \u5fc5\u8981\u306a\u8981\u7d20\u6570+1 \u306e\u9577\u3055\u306e ndarray \u306e 1 \u8981\u7d20\u76ee\u4ee5\u964d\u3092\u4f7f\u3046\n\ndef bit_sum(bit, i):  # [\"bit_sum\", \"i8(i8[:],i8)\"],\n    # (0, i]\n    res = 0\n    while i:\n        res += bit[i]\n        i -= i & -i\n    return res\n\ndef bit_add(bit, i, val):  # [\"bit_add\", \"void(i8[:],i8,i8)\"],\n    n = len(bit)\n    while i < n:\n        bit[i] += val\n        i += i & -i\n\n# <<< binary indexed tree <<<\n\n\ndef inversion_number(arr):  # [\"inversion_number\", \"i8(f8[:])\"],\n    # \u8ee2\u5012\u6570\n    n = len(arr)\n    arr = np.argsort(arr) + 1\n    bit = np.zeros(n+1, dtype=np.int64)\n    res = n * (n-1) >> 1\n    for val in arr:\n        res -= bit_sum(bit, val)\n        bit_add(bit, val, 1)\n    return res\n\n\n# >>> numba compile >>\n\nnumba_config = [\n    [\"bit_sum\", \"i8(i8[:],i8)\"],\n    [\"bit_add\", \"void(i8[:],i8,i8)\"],\n    [\"inversion_number\", \"i8(f8[:])\"],\n]\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    from numba.pycc import CC\n    cc = CC(\"my_module\")\n    for func_name, types in numba_config:\n        cc.export(func_name, types)(vars()[func_name])\n        cc.compile()\n    exit()\nelif os.name == \"posix\":\n    exec(f\"from my_module import {','.join(func_name for func_name, _ in numba_config)}\")\nelse:\n    from numba import njit\n    for func_name, types in numba_config:\n        vars()[func_name] = njit(types, cache=True)(vars()[func_name])\n    print(\"compiled\", file=sys.stderr)\n\n# <<< numba compile <<<\n\n\nN = int(input())\nABC = [list(map(int, input().split())) for _ in range(N)]\nA, B, C = zip(*ABC)\nth = N*(N-1)\/\/2 \/\/ 2 + 1\ndef solve(A, B, C):\n    # y = (-Ax+C) \/ B\n    if N < 100:\n        ok = -1e10\n        ng = 1e10\n        n_iteration = 70\n    else:\n        ok = -1e4\n        ng = 1e4\n        n_iteration = 46\n    A, B, C = zip(*sorted(zip(A, B, C), key=lambda x: -x[0]\/x[1]))\n    A = np.array(A)\n    B = np.array(B)\n    C = np.array(C)\n    for _ in range(n_iteration):\n        x = (ok+ng) * 0.5\n        Y = (-A*x+C) \/ B\n        inv_num = inversion_number(Y)\n        if inv_num >= th:\n            ok = x\n        else:\n            ng = x\n    return ok\n\nprint(solve(A, B, C), solve(B, A, C))\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s201929959":{
    "code_string":"import os\nimport sys\n\nimport numpy as np\n\n\ndef solve(inp):\n    def bit_add(arr, n, i, x):\n        while i <= n:\n            arr[i] += x\n            i += i & -i\n\n    def bit_sum(arr, i):\n        result = 0\n        while i > 0:\n            result += arr[i]\n            i ^= i & -i\n        return result\n\n    n = int(inp[0])\n    lim = (n * (n - 1) \/\/ 2 + 1) \/\/ 2\n    aaa = inp[1::3]\n    bbb = inp[2::3]\n    ccc = inp[3::3]\n\n    inclines_x = []\n    inclines_y = []\n    for i in range(n):\n        inclines_x.append((aaa[i] \/ bbb[i], i))\n        inclines_y.append((bbb[i] \/ aaa[i], i))\n    inclines_x.sort()\n    inclines_y.sort()\n    incline_rank_x = np.zeros(n, dtype=np.int64)\n    incline_rank_y = np.zeros(n, dtype=np.int64)\n    for k in range(n):\n        incline_rank_x[inclines_x[k][1]] = n - k\n        incline_rank_y[inclines_y[k][1]] = n - k\n\n    def check_x(m):\n        yyy = []\n        for i in range(n):\n            yyy.append(((ccc[i] - aaa[i] * m) \/ bbb[i], i))\n        yyy.sort()\n\n        bit = np.zeros(n + 1, dtype=np.int64)\n        intersection_left = 0\n        for j in range(n):\n            i = yyy[j][1]\n            k = incline_rank_x[i]\n            intersection_left += bit_sum(bit, k)\n            bit_add(bit, n + 1, k, 1)\n\n        return intersection_left >= lim\n\n    def check_y(m):\n        xxx = []\n        for i in range(n):\n            xxx.append(((ccc[i] - bbb[i] * m) \/ aaa[i], i))\n        xxx.sort()\n\n        bit = np.zeros(n + 1, dtype=np.int64)\n        intersection_left = 0\n        for j in range(n):\n            i = xxx[j][1]\n            k = incline_rank_y[i]\n            intersection_left += bit_sum(bit, k)\n            bit_add(bit, n + 1, k, 1)\n\n        return intersection_left >= lim\n\n    l = -2.0 * 10 ** 8\n    r = 2.0 * 10 ** 8\n    while l + 1e-9 < r:\n        m = (l + r) \/ 2\n        if check_x(m):\n            r = m\n        else:\n            l = m\n    x = l\n\n    l = -2.0 * 10 ** 8\n    r = 2.0 * 10 ** 8\n    while l + 1e-9 < r:\n        m = (l + r) \/ 2\n        if check_y(m):\n            r = m\n        else:\n            l = m\n    y = l\n\n    return x, y\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    from numba.pycc import CC\n\n    cc = CC('my_module')\n    cc.export('solve', '(f8[:],)')(solve)\n    cc.compile()\n    exit()\n\nif os.name == 'posix':\n    # noinspection PyUnresolvedReferences\n    from my_module import solve\nelse:\n    from numba import njit\n\n    solve = njit('(f8[:],)', cache=True)(solve)\n\ninp = np.fromstring(sys.stdin.buffer.read(), dtype=np.float64, sep=' ')\ntry:\n    x, y = solve(inp)\n    print(x, y)\nexcept ZeroDivisionError:\n    print('WA')\n    exit()\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s365794278":{
    "code_string":"s=input()\nans = 0\nfor c in s:\n  if c==\"1\"\n    ans+=1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s287154642":{
    "code_string":"a,s,d,f,g,h= map(int, input().split())\n\nprint(a+s+d+f+g+h)",
    "error_obj":"ValueError: not enough values to unpack (expected 6, got 1)"
  },
  "s996543772":{
    "code_string":"print(list(input()).count('1'))\t]\n",
    "error_obj":"SyntaxError: unmatched ']'"
  },
  "s018896396":{
    "code_string":"n=int(input())\nans=10**100\nfor i in range(n)\n  t=sum(list(map(int,input().split())))\n  ans=min(ans,t)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s388455974":{
    "code_string":"#!\/usr\/bin\/env python3\nfrom collections import deque, Counter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_right\n\ndef main():\n    N = int(input())\n    A = [None] * N\n    B = [None] * N\n    for i in range(N):\n        A[i], B[i] = map(int, input().split())\n    print(max(A[i])+B.index(max(A[i])))\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s709705448":{
    "code_string":"N = int(input())\nA = [int(input()) for i in range(N)]\n\nA.sort()\nleft = A[0]\nright = A[N - 1]\nans = right - left\nfor i in range((N - 2) \/\/ 2):\n    if i % 2 == 0:\n        ans += right - A[1 + i]\n        ans += A[N - 2 - i] - left\n        right = A[1 + i]\n        left = A[N - 2 - i]\n    else:\n        ans += left - A[1 + i]\n        ans += A[N - 2 - i] - right\n        left = A[1 + i]\n        right = A[N - 2 - i]\n\nif N % 2 == 1:\n    ans += max(abs(right - A[N \/\/ 2]), abs(left - A[N \/\/ 2]))\n\nprint(ans)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s787333686":{
    "code_string":"import sys\nreadline=sys.stdin.readline\nread=sys.stdin.read\n\ndef main():\n    n,k=map(int,readline().split())\n    ab=[list(map(int,l.split())) for l in read().splitlines()]\n    \n    ek=0\n    while k>>ek:\n        ek+=1\n    ans=0\n    for i in range(ek):\n        if k>>i&1:\n            m=(k>>(i+1))<<(i+1)|((1<<i)-1)\n            ans=max(ans,sum([e[1] for e in ab if e[0]|m==m]))\n    ans=max(ans,sum([e[1] for e in ab if e[0]|k==k]))\n    print(max(cand))\n\nif __name__=='__main__':\n    main()\n",
    "error_obj":"NameError: name 'cand' is not defined"
  },
  "s419776531":{
    "code_string":"s = input()\nif len(s)>=4 and s[:4] = \"YAKI\":\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s855748396":{
    "code_string":"s = input()\nif len(s) >= 4 && s[:4] == \"YAKI\":\n    print(\"Yes\")\nelse:\n    print(\"No\");\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s069876295":{
    "code_string":"from collections import Counter\nh,w=map(int,input().split())\ns=\"\"\nfor i in range(h):\n  s+=input()\nsc=Counter(s)\nd=[0,0,0]\nfor v in sc.values():\n    d[0]+=(v\/\/4)*4\n    d[1]+=2 if v%4>=2 else 0\n    d[2]+=v%2\n\nif w%2==0 and h%2==0:\n  print(\"Yes\" if d[0]==h*w else \"No\")\nelif (w%2)*(h%2)==1:\n  print(\"Yes\" if d[1]<=(w-1)+(h-1) and d[2]==1 else \"No\")\nelif w%2==0:\n  print(\"Yes\" if d[1]<=w and d[2]==0 else \"No\")\nelif h%2==0:\n  print(\"Yes\" if d[1]<=h and d[2]==0 else \"No\")\n\nfrom collections import Counter\nh,w=map(int,input().split())\ns=\"\"\nfor i in range(h):\n  s+=input()\nsc=Counter(s)\nd=[0,0,0]\nfor v in sc.values():\n    d[0]+=(v\/\/4)*4\n    d[1]+=2 if v%4>=2 else 0\n    d[2]+=v%2\n\nif w%2==0 and h%2==0:\n  print(\"Yes\" if d[0]==h*w else \"No\")\nelif (w%2)*(h%2)==1:\n  print(\"Yes\" if d[1]<=(w-1)+(h-1) and d[2]==1 else \"No\")\nelif w%2==0:\n  print(\"Yes\" if d[1]<=w and d[2]==0 else \"No\")\nelif h%2==0:\n  print(\"Yes\" if d[1]<=h and d[2]==0 else \"No\")\n\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s265913603":{
    "code_string":"h,w=map(int,input().split())\na,l=[list(input())for i in range(h)],[0]*26\nfor i in a:\n for j in i:l[ord(j)-97]+=1\no,t,f=(h\/\/2)*(w\/\/2),(h\/\/2)*(w%2)+(w\/\/2)*(h%2),(h%2)*(w%2)\nfor i in l:\n while o and i>3:o-=1;i-=4\n while t and i>1:t-=1i-=2\n f-=i\nprint(\"Yes\"if o==t==f==0else\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s421802599":{
    "code_string":"from collections import Counter\nh,w=map(int,input().split())\n#a=[list(input()) for i in range(w)]\na=[]\nflag=True\nfor i in range(h):\n  a+=list(input())\nca=Counter(a)\nif h%2==0 and w%2==0:\n  for i in ca:\n    if ca[i]%4!=0:\n      flag=False\n      print('No')\n      break\n  if flag:\n    print('Yes')\n\nelif h%2!=0 and w%2!=0:\n  yon=(h-1)*(w-1)\n  ni=h*w-yon-1\n  iti=1\n  for i in ca:\n    while ca[i]>0\n      if ca[i]%4==0 and yon>0:\n        ca[i]-=4\n        yon-=4\n      elif ca[i]%2==0 and ni>0:\n        ni-=2\n        ca[i]-=2\n      elif iti>0:\n        iti-=1\n        ca[i]-=1\n      else:\n        break\n  if yon==0 and ni==0 and iti==0:\n    print('Yes')\n  else:\n    print('No')\nelse:\n  if h%2==0:\n    yon=(h)*(w-1)\n  else:\n    yon=(h-1)*(w)\n  ni=h*w-yon\n  for i in ca:\n    while ca[i]>0:\n      if ca[i]%4==0 and yon>0:\n        ca[i]-=4\n        yon-=4\n      elif ca[i]%2==0 and ni>0:\n        ni-=2\n        ca[i]-=2\n      else:\n        break\n  if yon==0 and ni==0:\n    print('Yes')\n  else:\n    print('No')\n  \n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s944129281":{
    "code_string":"from collections import defaultdict\nH,W = map(int,input().split())\nd = defaultdict(int)\nfor _ in range(H):\n    for c in list(input()):\n        d[c] += 1\nfor i in range((H-1)\/\/2+1):\n    for j in range((W-1)\/\/2+1):\n        s = set([(x,y) for x,y in [(i,j),(i,W-1-j),(H-1-i,j),(H-1-i,W-1-j)] if 0<=x<H and 0<=y<W])\n        f = True\n        for k,_ in sorted(d.items(),key=lambda x:x[1]):\n            if d[k] >= len(s):\n                d[k] -= len(s)\n                f = False\n                for x,y in s:\n                    test[x][y] = k\n                break\n        if f:\n            print(\"No\")\n            exit(0)\nprint(\"Yes\")",
    "error_obj":"NameError: name 'test' is not defined"
  },
  "s590030446":{
    "code_string":"from collections import Counter\nh, w = map(int, input().split())\nA = []\nfor i in range(h):\n    A.extend(list(input()))\ncA = Counter(A)\n\nl1 = h*w%2\nl2 = (h\/\/2)*(w%2) + (w\/\/2)*(h%2)\nl3 = (h\/\/2)*(w\/\/2)\nif l1:\n    for key, val in cA.items():\n        if val%2==1:\n            cA[key] -= 1\n            break\nfor _ in range(l2):\n    for key, val in cA.items():\n        if val%4=-2:\n            cA[key] -= 2\n            break\nprint('Yes' if sum(val%4 for val in cA.values()) == 0 else 'No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s051075050":{
    "code_string":"x, y = int(input())\nprint((x*x)-y)\n",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s555738973":{
    "code_string":"int a,b\na=input()\nb=input()\nprint(a**2-b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s980124077":{
    "code_string":"# N*N\u306e\u307e\u3059\u3081\u3068\u767d\u306b\u5857\u3063\u305f\u30de\u30b9\u76eeA\u3092\u6574\u6570\u3067\u5165\u529b\nN,A = map(int,input().split())\n# N*N\u30de\u30b9\u304b\u3089A\u30de\u30b9\u5857\u3063\u305f\u3092\u4f59\u308a\u3092\u51fa\u529b\nprint(N**2 - A)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s834584651":{
    "code_string":"def get_colored_cells():\n    N = input()\n    A = input()\n    return N ** 2 - A\n\nget_colored_cells()",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s225625690":{
    "code_string":"# \u5165\u529b\nn, a = map(int, input().split())\n\n# \u51e6\u7406\nanswer = n * n - a\n\n# \u51fa\u529b\nprint(answer)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s641933088":{
    "code_string":"#74\nN=input()\nA=input()\nprint(N**2-A)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s809854109":{
    "code_string":"n,a = map(int,input().split())\nprint(n*n-a)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s081088483":{
    "code_string":"n = int(input())\na - int(input())\nprint(n**2-a)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s228962170":{
    "code_string":"N = input()\nA = input()\nprint(N**2-A)",
    "error_obj":"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
  },
  "s417829801":{
    "code_string":"a, b = map(int, input().split())\nprint(a * a - b)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s731273778":{
    "code_string":"N, A = (int(x) for x in input().split())\nans = N**2 - A\nprint(ans)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s481525496":{
    "code_string":"N, A = map(int,input().split())\n\nprint(N**2 - A)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s371585637":{
    "code_string":"a,b = [int(input().split()) for i in range(2)]\nc = ( a * a )\nprint( c - a )",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s146942999":{
    "code_string":"N,A = int(input()) for i in range(2)\nprint(N*N-A)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s892408151":{
    "code_string":"# coding: utf-8\n\nN=input()\n\nprint(int((N*N))-int(input()))",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s797503479":{
    "code_string":"a,n = input().split()\na = int(a)\nn = int(n)\nprint (n * n - a)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s377649014":{
    "code_string":"x=int(input())\ny=int(input())\nPrint(x*x-y)",
    "error_obj":"NameError: name 'Print' is not defined"
  },
  "s759127464":{
    "code_string":"N = int(input(N))\nA = int(input(A))\nprint(N * N - A)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s986225254":{
    "code_string":"import sys\nread=sys.stdin.read\n\nn,a=map(int,read().spliitlines())\n\nprint(n**2-a)",
    "error_obj":"AttributeError: 'str' object has no attribute 'spliitlines'"
  },
  "s650735052":{
    "code_string":"n,a=map(int,input().split())\nprint(n*n-a)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s613083705":{
    "code_string":"n,a = map(int,input().split())\nprint(n**n-a)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s660014709":{
    "code_string":"a=int(input())\nb=int(input())\nc=list(map(int,input().split()))\ntotal=0\nfor i in range(2):\n    d=2*c[i]\n    e=2*abs(9-c[i])\n    total+=min(d,e)\nprint(total)",
    "error_obj":"IndexError: list index out of range"
  },
  "s289085529":{
    "code_string":"n=int(input())\nk=int(input())\nx=list(map(int,input().split())\nans=0\nfor i in range (n):\n\tif abs(x[i])>abs(x[i]-k):\n\t\tans+=abs(x[i]-k)*2\n    else:\n       ans+=x[i]*2\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s318251149":{
    "code_string":"n = int(input())\nk = int(input())\nnums = list(map(int, input().split()))\na = []\nfor i in n:\n  a.append(2 * min(k-nums[i], nums[i]))\nprint(min(a))\n  \n\n  ",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s677905066":{
    "code_string":"N = input()\nK = input()\nl = list(map(int(input().split()))\n\nprint(N,K,l)\n         \nfor i in l:\n     ans = 0    \n\t ans += min(i,K-i)\n    \nprint(ans*2)\n         ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s471481323":{
    "code_string":"n=int(input())\nk=int(input())\nxs=map(int,input().split(' '))\n#A (0,i)\n#B (K,i)\nsum=0\nfor i in range(n):\n  deltak=abs(xs[i]-k)\n  if xs[i]<deltak:\n    sum+=2*xs[i]\n  else:\n    sum+=deltak*2\nprint(sum)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s323602713":{
    "code_string":"n = int(input())\nk = int(input())\nsumm = 0\nfor _ in range(n):\n  x = int(input())\n  summ += min(2*x, 2*(k-x))\n print(summ)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s311686755":{
    "code_string":"n = int(input())\nk = int(input())\nx = list(map(int,input().split()))\nans = 0\n\nfor i in x:\n  ans += min(abs(x-k),x)\n  \nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'int'"
  },
  "s868497695":{
    "code_string":"A, B, C, D, E, F = map(int, input().split())\ndens = 0\nans_water = 0\nans_sugar = 0\nfor i in range(31):\n    for j in range(31):\n        for k in range(101):\n            for l in range(101):\n                water = 100*A*i+100*B*j\n                sugar = C*k+D*l\n                if i==j==0:\n                    break\n                if water+sugar <= F and sugar <= E*(A*i+B*j):\n                    if dens<sugar\/(sugar+water):\n                        dens = sugar\/(sugar+water)\n                        ans_water = water\n                        ans_sugar = sugar\nprint(ans_water+ans_sugar, ans_sugar)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s339082969":{
    "code_string":"import numpy as np\n\n\ndef solve(stdin):\n    A, B, C, D, E, F = stdin\n    if A == 1:\n        raise\n    conc = -1\n    ans = (1, 2)\n    for na in range(F \/\/ (100 * A) + 1):\n        for nb in range(F \/\/ (100 * B) + 1):\n            if na == nb == 0:\n                continue\n            G = F - na * 100 * A - nb * 100 * B\n            for nc in range(G \/\/ C + 1):\n                for nd in range(G \/\/ D + 1):\n                    W = na * 100 * A + nb * 100 * B + nc * C + nd * D\n                    if 0 < W <= F and nc * C + nd * D <= E * (na * A + nb * B):\n                        conc2 = 100 * (nc * C + nd * D) \/ W\n                        if conc < conc2 <= 100 * E \/ (100 + E):\n                            ans = (W, nc * C + nd * D)\n                            conc = conc2\n    return ans\n\n\ndef main():\n    stdin = np.fromstring(open(0).read(), dtype=np.int64, sep=' ')\n    print(*solve(stdin))\n\n\ndef cc_export():\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('solve', '(i8[:],)')(solve)\n    cc.compile()\n\n\nif __name__ == '__main__':\n    import sys\n    if sys.argv[-1] == 'ONLINE_JUDGE':\n        cc_export()\n        exit(0)\n    from my_module import solve\n    main()\n",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s229776619":{
    "code_string":"A, B, C, D, E, F = map(int, input().split())\n\n#memo\nlist = [0, 0]\n\n#\u64cd\u4f5c1-4\nope1 = 100 * A\nope2 = 100 * B\nope3 = C\nope4 = D\n#\u5165\u308c\u305f\u6c34\u3001\u7802\u7cd6\u306e\u7dcf\u91cf\nw_sum = 0\ns_sum = 0\n#\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\np = 0\n#\u30c8\u30fc\u30bf\u30eb\ntotal = w_sum + s_sum\n#\u7802\u7cd6\u306e\u8868\u793a\u7528\u306e\u5909\u6570\ns = 0\n\nfor i in range(101):\n    for j in range(101):\n        for k in range(31):\n            for l in range(31):\n                w_sum = l * ope1 + k * ope2\n                s_sum = j * ope3 + i * ope4\n                if w_sum != 0 and w_sum + s_sum <= F and s_sum <= E * (l + k) :\n                    p_tmp = (s_sum \/ (w_sum + s_sum)) * 100\n                    if p_tmp >= p:\n                        p = p_tmp\n                        list[0] = w_sum + s_sum\n                        list[1] = s_sum\n                        if s_sum == E * (l + k):\n                            break\n\nprint(list[0], list[1])                        \n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s653067670":{
    "code_string":"import sys\nsys.setrecursionlimit(10**6)\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nfrom math import ceil\ndef main():\n    a, b, c, d, e, f = map(int, input().split())\n    a *= 100\n    b *= 100\n\n    # \u6fc3\u5ea60%\u306e\u30b1\u30fc\u30b9\n    if e == 0 or min(a, b) == f:\n        print(a, 0)\n        sys.exit()\n    water = [0] * 6001\n    water[0] = True\n    for i1 in range(3001):\n        if water[i1]:\n            water[i1 + a] = True\n            water[i1 + b] = True\n    sugar = [0] * 6001\n    sugar[0] = True\n    for i1 in range(3001):\n        if sugar[i1]:\n            sugar[i1 + c] = True\n            sugar[i1 + d] = True\n\n    noudo = 0\n    r1 = 0\n    r2 = 0\n    for i1 in range(1, f + 1):\n        if water[i1]:\n            for i2 in range(f + 1):\n                if i1 + i2 > f:\n                    break\n                if sugar[i2]:\n                    if i1 * e >= i2 * 100:\n                   ",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s197669025":{
    "code_string":"a,b,c,d,e,f = map(int, input().split())\ncon = list()\ns = list()\nfor x in range(31):\n    for y in range(31):\n        for v in range(1501):\n            if x == y == 0:\n                continue\n            else:\n                w1 = (f-(100*a*x + 100*b*y + c*v))\/\/d\n                w2 = (100*a*x + 100*b*y -c*v)\/\/d\n                w3 = ((100*a*x + 100*b*y)*e -c*v*100)\/\/(100*d)\n                w = min(w1,w2,w3)\n                con1 = 100*(c*v + d*w)\/(100*a*x + 100*b*y +c*v +d*w)\n                con.append(con1)\n                s.append([x,y,v,w])\nconm = max(con)\nconin =con.index(conm)\nt = s[conin]\n# print(t)\nans1 = 100*a*t[0] + 100*b*t[1] + c*t[2] + d*t[3]\nans2 = c*t[2] + d*t[3]\nprint(ans1,ans2)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s589606257":{
    "code_string":"import numpy as np\nN = int(input())\nA = np.array([input().split() for _ in range(N)], dtype=np.int64)\n\nfill_diagonal(A, 10**9)\n\nans = 0\nfor i in range(N):\n  for j in range(i+1,N):\n    d = np.min(A[i]+A[j])\n    if A[i][j] < d:\n      ans += A[i][j]\n    elif d < A[i][j]:\n      print(-1)\n      exit()\n\nprint(ans)\n",
    "error_obj":"NameError: name 'fill_diagonal' is not defined"
  },
  "s080954227":{
    "code_string":"from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\nimport numpy as np\nN = int(input())\nA = np.loadtxt(open(0), dtype=np.int)\nD = csgraph_from_dense(A)\nD = floyd_warshall(D, directed=False)\n\n\nif (A == D).all():\n    ans = 0\n    D += np.identity(N, int) * (1 << 60)\n    for i in range(N):\n        for j in range(i+1, N):\n            a = np.min(D[i]+D[j])\n            if a > D[i, j]:\n                ans += D[i, j]\n    print(int(ans))\nelse:\n    print(-1)\n",
    "error_obj":"DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information."
  },
  "s621580310":{
    "code_string":"N=[for x in input()]\nif '9' in N:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s251696468":{
    "code_string":"N = input()\nif N in \"9\":\n  print(\"Yes\")\nelse print(\"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s479917227":{
    "code_string":"s = input()\nif s in '9':\n  print('Yes')\n else:\n  print('No')",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s527057210":{
    "code_string":"a = input()\nif 9 in a:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: 'in <string>' requires string as left operand, not int"
  },
  "s447771966":{
    "code_string":"n=input()\nif n.count(9)>=1:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: must be str, not int"
  },
  "s459421293":{
    "code_string":"if \"9\" == N[0] or \"9\" == N[1]:\n        print( \"YES\" )\nelse:\n    print( \"NO\" )",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s653231187":{
    "code_string":"n = int(input())\n\nif n[0] != 9 and n[1] != 9:\n    print('No')\nelse:\n    print('Yes')",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s084176809":{
    "code_string":"s=input()\nif \"9\" in s:\n    print(\"Yes\")\nelse:\n    print(\"No\"",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s988197622":{
    "code_string":"N=int(input())\nprint(['No','Yes'][9 in [N%10, (N-N%10)\/\/10]]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s473576941":{
    "code_string":"a=int(input())\nb=a%10\nif int(a\/10)==9:\n  print(\"Yes\")\nelse:\n  if b==9:\n    print(\"Yes\")\n    else:\n      print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s230145428":{
    "code_string":"n = input()\nif 9 in n:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: 'in <string>' requires string as left operand, not int"
  },
  "s518801121":{
    "code_string":"n=int(input())\nkei=0\nfor i in range(n):\n    l,r=map(int,input().split())\nkei += sum(r)-sum(l)\nkei += n\nprint(kei)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s028558284":{
    "code_string":"a=int(input())\nb=[]\nfor _ in range(a):\n  b.append(list(map(int,input().split())))\nans=0\nfor i in range(a):\n  ans+=n[i][1]-n[i][0]+1\nprint(ans)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s408933128":{
    "code_string":"a=int(input())\nb=[int(input()) for i range(a)]\nc=0\nfor i range(a):\n  c=c+(b[i][1]-b[i][2])\nprint(c+a)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s814629622":{
    "code_string":"2\n6 8\n3 3",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s431811756":{
    "code_string":"n=int(input())\nout=0\nfor i in range(n):\n  a,m=map(int,input().split())\n  out+=m-a+1\nprint(out)\nn=int(input())\nout=0\nfor i in (n):\n  a,m=map(int,input().split())\n  out+=m-a+1\nprint(out)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s506376657":{
    "code_string":"N=int(input())\nlr=[list(map(int,input())) for _ in range(N)]\nprint(sum([e[1]-e[0]+1 for e in lr]))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s236373864":{
    "code_string":"l = [0] * n\nr = [0] * n\nfor i in range(n):\n    l[i],r[i] = map(int, input().split())\nres = 0\n\nfor i in range(n):\n  res += r[i]-l[i]+1\n\nprint(res)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s604310226":{
    "code_string":"n = int(input())\np = 0\nfor in in range(n):\n  l, r = map(int, input().split())\n  p += r-l+1\n \nprint(n)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s762470246":{
    "code_string":"n = int(input())\nlr = [map(int,input().split()) for l in range(n)]\nans = 0\nfor i in lr:\n  ans += lr[i][1] - lr[i][0]+1\nprint(ans)",
    "error_obj":"TypeError: list indices must be integers or slices, not map"
  },
  "s490209275":{
    "code_string":"#-*-coding:utf-8-*-\n\ndef main():\n    n = int(input())\n    numbers=[]\n    answers=[]\n    number=0\n    numbers=[int(input()) for _ in range(n)]\n\n    for number in numbers:\n        if len(answers)==0:\n            answers.append(number)\n        else:\n            if number in answers:\n                answers.pop(number)\n            else:\n                answers.append(number)\n    print(len(answers))\n\nif __name__==\"__main__\":\n    main()",
    "error_obj":"IndexError: pop index out of range"
  },
  "s047819093":{
    "code_string":"n = int(input())\na = set(int(input()) for i in range(n))\nkami = []\na.sort()\nfor i in range(n) :\n    if i in kami :\n        kami.remove(i)\n    else :\n        kami.add(i)\n\nprint(len(kami))\n",
    "error_obj":"AttributeError: 'set' object has no attribute 'sort'"
  },
  "s283183413":{
    "code_string":"a.sort()\ncount = 0\ntemp = a[0]\ntempcount = 1\nfor i in range(1,n):\n    if a[i]==temp:\n        tempcount += 1\n    else:\n        if not tempcount%2 == 0:\n            count += 1\n        tempcount = 1\n    temp = a[i]\n    #print(i,tempcount)\nif tempcount%2 == 1:\n    count += 1\nprint(count)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s002103024":{
    "code_string":"from collections import Counter\nn = int(input())\nl = []\nfor i in range(n):\n   l.append(int(input()))\nlcnt = Counter(l)\nl_value = list(lcnt.values())\nfor i in range(len(l_value)):\n   if  l_value[i]%2 == 0:\n       l_value[i] = 0\n  else:\n       l_value[i] = 1    \nprint(sum(l_value))\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s417780219":{
    "code_string":"n = int(input())\na = [False] * int(1e9)\n\ncnt = 0\nfor i in range(n):\n    ai = int(input()) - 1\n    a[ai] = not a[ai]\n\n    if a[ai]:\n        cnt += 1\n    else:\n        cnt -= 1\n\nprint(cnt)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s994551183":{
    "code_string":"n = int(input())\nA = [0]*(10**9+5)\nfor i in range(n):\n    a = int(input())\n    A[a-1]+=1\n    A[a-1]%=2\nprint(sum(A))\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s569412619":{
    "code_string":"N = int(input())\nans = [0]*(10**9)\n\nfor _ in range(N):\n    a = int(input())\n    if ans[a-1] == 0:\n        ans[a-1] += 1\n    else:\n        ans[a-1] = 0\n\nprint(sum(ans))\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s312733675":{
    "code_string":"n = int(input())\na = [int(input()) for _ in range(n)]\n\na = sorted(a):\ntmp = 0\nans = 0\nfor i in a:\n    if i == tmp:\n        ans -= 1\n        tmp = 0\n    else:\n        ans += 1\n        tmp = i\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s596993544":{
    "code_string":"import collections\nn = int(input())\nalist = [int(input()) for i in range(n)]\ncole = collections.Counters(alist)\ncount = 0\nfor i in cole.values():\n  if i%2==1:\n    count+=1\nprint(count)",
    "error_obj":"AttributeError: module 'collections' has no attribute 'Counters'"
  },
  "s474165994":{
    "code_string":"x,t = map(int,input())\n\nprint(x-t) if x > t else print('0')\n",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s677403388":{
    "code_string":"x,t = map(int, input().split())\nprint(max(x-t,0)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s512987294":{
    "code_string":"x,t=map(int,input().split())\nprint(x-t if x-t>=0,0 else)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s973412496":{
    "code_string":"# \u5404\u79d2\u6570\u3092\u53d6\u5f97\nX,t = map(int,input().split())\n \n#\u6b8b\u308a\u306e\u7802\u3092\u8a08\u7b97\u3057\u51fa\u529b\nRemain = X - t\nif remain > 0:\n    print(Remain)\nelse:\n    print(\"0\")",
    "error_obj":"NameError: name 'remain' is not defined"
  },
  "s329521842":{
    "code_string":"x, t = map(int, input().split())\nif x-t >= 0:\n  print(x-t)\n else:\n  print(0)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s627247678":{
    "code_string":"print(int(input())-int(input()))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '100 17'"
  },
  "s763587235":{
    "code_string":"a,b = ((x) for x in input().split())\nint(c) = int(a) - int(b)\nif c > '0':\n    print ( c )\nelse:\n    print('0')",
    "error_obj":"SyntaxError: cannot assign to function call"
  },
  "s539759899":{
    "code_string":"X=int(input())\nt=int(input())\nprint(X-t if X>=t else 0)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '100 17'"
  },
  "s342001251":{
    "code_string":"a,b=map(int,input().split())\nif a <= b:\n  print(0)\nelse:\n  print(a-b):",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s349065214":{
    "code_string":"x, t = list(map(int, input().split()))\nprint(max([0, x - t])",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s324137509":{
    "code_string":"print(max(0,int(input())-int(input())))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '100 17'"
  },
  "s775458129":{
    "code_string":"# \u5165\u529b\nx = int(input())\nt = int(input())\n\n# \u51e6\u7406\nanswer = x-t\n\n# \u51fa\u529b\nprint(answer)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '100 17'"
  },
  "s627849429":{
    "code_string":"tmp = input().split(\" \")\n\nprint(max([tmp[0] - tmp[1], 0]))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s020482132":{
    "code_string":"s=list(input())\ns1=[]\nfor i in s:\n  if (s.index(i)+1)%2!=0:\n    s1.append(i)\nprint(i for i in s1,end=\"\")\n",
    "error_obj":"SyntaxError: Generator expression must be parenthesized"
  },
  "s710957407":{
    "code_string":"a=input()\nn=[]\nfor i in range(len(a)):\n  if i%2==1:\n    n.append(i)\nans=''\nfor i in n:\n  ans+=i\nprint(ans)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s324500979":{
    "code_string":"s=list(input())\n\nfor i in range(len(s)):\n  if i%2==1:\n    s.pop(i)\n  \nss=''.join(map(str,s))\n\nprint(ss)",
    "error_obj":"IndexError: pop index out of range"
  },
  "s421227047":{
    "code_string":"s = input()\nx = ''\nfor i in range(1, len(s) + 1):\n    if i % 2 != 0:\n        x = x + s[i]\nprint(x)",
    "error_obj":"IndexError: string index out of range"
  },
  "s634068126":{
    "code_string":"\nclass Atc_072b:\n    def __init__(self, s: str) -> str:\n        self.s = s\n\n    def odd(self):\n        s_odd = \"\"\n        for i in range(0, len(self.s)):\n            if i % 2 == 0:\n                s_odd += self.s[i]\n        return s_odd\n\n\ns_input = input()\nprint(Atc_072b(s_input).odd())\n\u00a9 2020 GitHub, Inc.",
    "error_obj":"SyntaxError: invalid character '\u00a9' (U+00A9)"
  },
  "s986572268":{
    "code_string":"s = input()\nans = \"\"\nfor i in range(1:: 2):\n    ans += s[i]\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s783727102":{
    "code_string":"a=input()\nb=\"\"\nfor i in range(a):\n  b=b+a[2*i]\nprint(b)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s265999912":{
    "code_string":"S = input()\nres = \"\"\nfor i in range(0,N,2):\n  res += S[i]\nprint(res)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s029978000":{
    "code_string":"s = input()\nfor i in range(0, len(s), 2):\n  print(s[i], end = '')\ns = input()\nfor i in range(0, len(s), 2):\n  print(s[i], end = '')\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s018745501":{
    "code_string":"s = list(input())\nans = []\nfor i in range(0,len(s)\/2,2):\n  ans.append(s[i])\nprint(\"\"\u30fbjoin(ans))\n  \n  \n",
    "error_obj":"SyntaxError: invalid character '\u30fb' (U+30FB)"
  },
  "s592699051":{
    "code_string":"s = input()\nodd_num = list()\n\nfor i in range(len(s)):\n\n    if i % 2 == 0:\n        odd_num.append(s[i])\n\nanswer = ''.join(odd_num)\nprint(answer)\n\n\n\ns = input()\nprint(s[::2])\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s202620076":{
    "code_string":"N = int(input())\na = list(map(int, input().split()))\nl = [0]*10**5+2\n\nfor i in a:\n    l[i] +=1\n    l[i+1] +=1\n    l[i+2] +=1\n\nprint(max(l))",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s559611447":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\n\ncnt = [0]*10**5+5\nfor i in a:\n    cnt[i] += 1\n\nans = 0\nfor i in range(1, 10**5+3):\n    ans = max(ans, sum(cnt[i-1:i+2]))\nprint(ans)",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s618801681":{
    "code_string":"!\/usr\/bin\/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 1:\n    print(1)\n    exit(0)\nif n == 2:\n    if abs(a[0]-a[1]) <= 2:\n        print(2)\n    else:\n        print(1)\n    exit(0)\n\nif n >= 3:\n    d = [0 for _ in range(100001)]\n    for i in range(n):\n        d[a[i]] += 1\n    ans = 0 \n    for i in range(n-2):\n        tmp = d[i] + d[i+1] + d[i+2]\n        if ans <= tmp:\n            ans = tmp \n\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s009150920":{
    "code_string":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#\n# FileName: \tC\n# CreatedDate:  2020-06-26 15:12:37 +0900\n# LastModified: 2020-06-26 15:31:15 +0900\n#\n\n\nimport os\nimport sys\nfrom collections import Counter\n# import numpy as np\n# import pandas as pd\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt_list = Counter(a)\n\n    a_max = a[-1]\n    a_min = a[0]\n    cnt_max = 0\n    for center in range(a_min-1, a_max+2):\n        if center in cnt_list.keys():\n            cnt = cnt_list[center]\n        if center-1 in cnt_list.keys():\n            cnt += cnt_list[center-1]\n        if center+1 in cnt_list.keys():\n            cnt += cnt_list[center+1]\n        if cnt > cnt_max:\n            cnt_max = cnt\n    print(cnt_max)\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"UnboundLocalError: local variable 'cnt' referenced before assignment"
  },
  "s904303599":{
    "code_string":"n = int(input())\na = list(map(int,input(),split()))\ns = [0]*max(a)+2\nfor i in a:\n    i += 1\n    s[i-1] += 1\n    s[i] += 1\n    s[i+1] += 1",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s191970203":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\n\ndef func(a):\n  count = [0] * (max(a)+1)\n\n  for i in a:\n      count[i] += 1\n\n  max_n = 0\n  for j in range(1, len(count)-1):\n      max_n = max(max_n, count[j] + count[j-1] + count[j+1])\n  max_n = max(max_n, count[-1] + count[-2])\n  \n  return max_n\n\nptint(n if len(set(a)) == 1 else func(a))",
    "error_obj":"NameError: name 'ptint' is not defined"
  },
  "s958589019":{
    "code_string":"def solve():\n    \n    N = int(input())\n    a  = list(map(int, input().split()))\n\n    lists = [0] * ((10**5)+2)\n\n    for i in range(a):\n        lists[v] += 1\n        lists[v+1] += 1\n        lists[v-1] += 1\n\n    print(max(lists))    \n\nif __name__ == \"__main__\":\n    solve()\n",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s739336036":{
    "code_string":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn = I()\nA = readInts()\nmaxA = max(A)\nminA = min(A)\nans = -1\nfor i in range(minA,maxA+1):\n    ans = max(ans, A.count(i-1) + A.count(i) + A.count(i+1))\nprint(ans)\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s391834777":{
    "code_string":"N=int(input())\na=list(map(int,input().strip().split()))\n\ndp=[0 for n in range(max(a)+1)]\nfor n in range(N):\n    dp[a[n]]+=1\n\nans=0\nfor n in range(len(dp)):\n    if n==0:\n        ans=max(ans,a[0]+a[1])\n    elif n==N-1:\n        ans=max(ans,a[N-2]+a[N-1])\n    else:\n        ans=max(ans,dp[n-1]+dp[n]+dp[n+1])\n\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s311879154":{
    "code_string":"N=int(input())\na=list(map(int,input().split()))\n\nl=[0]*10**5+2\n\nfor v in a:\n    l[v]+=1\n    l[v+1]+=1\n    l[v+2]+=1\n\nprint(max(l))",
    "error_obj":"TypeError: can only concatenate list (not \"int\") to list"
  },
  "s404596466":{
    "code_string":"IN = iter(Input.split('\\n')).__next__\ndef input():\n    return IN()\n\nN = int(input())\nl = list(map(int, input().split()))\n\nresult_list = []\nfor a in l:\n    result_list.extend([a-1,a,a+1])\n    \nresult_list\n\nimport collections\n\ncount = collections.Counter(result_list) # dictionary \u3068\u3057\u3066Counter({5: 1, 1: 3, 3: 2, 2: 2, 4: 2})\nhindo_jun = count.most_common() \n\nprint(hindo_jun[0][1])",
    "error_obj":"NameError: name 'Input' is not defined"
  },
  "s310758336":{
    "code_string":"def main():\n    N = int(input())\n    P = map(int, input().split())\n    cnt = 0\n    for i in range(N):\n        if P[i] == i + 1:\n            cnt += 1\n        ans = (cnt + 1) \/\/ 2\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s365930203":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\nres = 0\nfor i in range(2,n:\n    if a[i-1] == i:\n        res += 1\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s661006090":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n - 1):\n    if a[i] == i + 1:\n        a[i], a[i + 1] = a[i + 1], a[i]\n        ans += 1\n    if a[n] == n + 1:\n        ans += 1\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s872971438":{
    "code_string":"N=int(input())\n*P,=map(int,input().split())\n\ni=c=0\nwhile i<L:\n  if P[i]==i+1:\n    c+=1\n    i+=1\n  i+=1\nprint(c)",
    "error_obj":"NameError: name 'L' is not defined"
  },
  "s741958328":{
    "code_string":"N = int(input())\nP = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    if i == N-1:\n        if P[i] == i+1:\n            ans +=1\n    a, b = P[i], P[i + 1]\n    if a == i + 1:\n        ans += 1\n        P[i] = b\n        P[i + 1] = a\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s693372945":{
    "code_string":"n = int(input())\nP = list(map(int, input().split()))\n\nans = 0\nCnt = []\nfor idx, p in enumerate(P, 1):\n    if idx == p:\n        Cnt.append(idx)\n#print(Cnt)\nif len(Cnt) == 0:\n    ans = 0\n\nelif len(Cnt) == 2:\n    ans += Cnt[1] - Cnt[0]\n\nelif len(Cnt) %2:\n    for i in range(1, len(Cnt), 2):\n        if i == 0:\n            ans += Cnt[i+1] - Cnt[i]\n        elif i == len(Cnt)-1:\n            ans += Cnt[i] - Cnt[i-1]\n        else:\n            ans += min(Cnt[i] - Cnt[i-1], Cnt[i+1] - Cnt[i])\nelse:\n    for i in range(0, len(Cnt), 2):\n        if i == 0:\n            ans += Cnt[i+1] - Cnt[i]\n        elif i == len(Cnt)-1:\n            ans += Cnt[i] - Cnt[i-1]\n        else:\n            ans += min(Cnt[i] - Cnt[i-1], Cnt[i+1] - Cnt[i])\n\nprint(ans)\n\n########################\n\nn = int(input())\nP = list(map(int, input().split()))\n\nCnt = []\ncnt = 0\nans = 0\nfor idx, p in enumerate(P, 1):\n    if idx == p:\n        Cnt.append(idx)\n        cnt += 1\n    else:\n        cnt = 0\n    if cnt == 2:\n        ans -= 1\n        cnt = 0\n\nans += len(Cnt)\nprint(ans)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s242171494":{
    "code_string":"a, b, c, d = map(int, input().split())\nn = int(input())\n \nb = min(a + a, b)\nc = min(b + b, c)\nd = min(c + c, d)\n \nq, r = divmod(N, 2)\nx = q * d + r * c\nprint(x)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s854780827":{
    "code_string":"q, h, s, d = map(int, input().split())\nn = int(input())\n\nans = n\/\/2*min(8*q, 4*h, 2*s, d) + min(4*q, 2*h, s)*(n%2!==0)\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s518634985":{
    "code_string":"q, h, s, d = map(int, input().split())\nn = int(input())\nans = 0\nq_per = q \/ 0.25\nh_per = h \/ 0.5\ns_per = s\nd_per = d \/ 2\nlist = [q_per,h_per,s_per,d_per]\nelif min(list) == d_per :\n    if n%2 == 0:\n        ans += d * (n \/\/2)\n    else :\n        ans += n\/\/2 * d\n        n -= n\/\/2\n        list.remove(d_per)\n        if min(list) == s_per :\n            ans += s_per\n        elif min(list) == h_per :\n            ans += h * 2\n        else :\n            ans += q * 4\nelif min(list) == s_per :\n    ans += n * s\nelif min(list) == h_per :\n    ans += n * 2 * h\nelse :\n    ans += n * 4 * q\n\nprint(int(ans))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s639590178":{
    "code_string":"price = [int(x) for x in input().split()];\nN = int(input());\nprice_d = price[3];\nprice_s = 2*price[2];\nprice_h = 4*price[1];\nprice_q = 8*price[0];\np = min([price_q,price_h,price_s]);\nif price_d < p :\n    if N%2 == 1 :\n        ans = (N-1)\/\/2*price_d + p\/\/2;\n    else :\n        ans = N\/\/2*price_d;\nelse :\n    ans = N*p\/\/2;\n\nprint(ans));\n\n",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s797639223":{
    "code_string":"#A - Ice Tea Store\nQ,H,S,D = map(int,input().split())\nN = int(input())\n\nQ1,H1 = 4*Q,2*H\nS = min(Q1,H1,S)\n\nif 2*S>D:\n    cnt_2 = N\/\/2\n    cnt_1 = N%2\n    pay = a*cnt_2 + S*cnt_1\nelse:\n    pay = N * S\nprint(pay)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s220609009":{
    "code_string":"q,h,re,d = map(int,input().split())\nn = int(input())\nre = min(q*4, h*2,result)\nprint(min(result*n, n\/\/2*d + (n%2)*re))",
    "error_obj":"NameError: name 'result' is not defined"
  },
  "s520998752":{
    "code_string":"Q, H, S, D = map(int, input().split())\nN = int(input())\narr = [4*Q*N, 2*H*N, S*N]\nif N % 2 == 0:\n  arr.append(int(0.5*D*N))\nelif:\n  if N >= 3:\n    arr.append(int(0.5*D*(N-1)+ min(S, 2*H, 4*Q)))\n    \nprint(min(arr))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s345238597":{
    "code_string":"a=list(input())\n\nunko=[0]*(ord(\"z\")+1-ord(\"a\"))\n\nfor aa in a:\n    unko[ord(aa)-ord(\"a\")]+=1\ntmp=0\nfor u in unko:\n    tmp+=(u*(u-1))\/\/2\n\nprint((n*(n-1))\/\/2-tmp)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s924345547":{
    "code_string":"def getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\ndef rand_ints_nodup(ran1, ran2, rantime):\n  ns = []\n  while len(ns) < rantime:\n    n = random.randint(ran1, ran2)\n    if not n in ns:\n      ns.append(n)\n  return sorted(ns)\n\ndef rand_query(ran1, ran2, rantime):\n  r_query = []\n  while len(r_query) < rantime:\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n    if not n_q in r_query:\n      r_query.append(n_q)\n  return sorted(r_query)\n\nfrom collections import defaultdict, deque, Counter\nfrom sys import exit\nfrom decimal import *\nimport heapq\nfrom math import sqrt\nfrom fractions import gcd\nimport random\nimport string\nimport copy\nfrom itertools import combinations, permutations, product\nfrom operator import mul, itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\nsys.setrecursionlimit(1000000000)\nmod = 10 ** 9 + 7\n\n#############\n# Main Code #\n#############\n\nA = input()\nAc = collections.Counter(A)\ncnt = 0\nfor val in Ac.values():\n    cnt += val * (val - 1) \/\/ 2\nprint(len(A) * (len(A)-1) \/\/ 2 - cnt + 1)",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s955761820":{
    "code_string":"M=8**7\nm,f,g,i=M*476+1,[j:=1],[k:=1]*M,0\nwhile i<M:i+=1;f+=f[-1]*i%m,\ng+=pow(f[-1],m-2,m),\nwhile i:g[i-1]=g[i]*i%m;i-=1\nA,B=map(int,input().split())\nif A<B:A,B=B,A\nwhile j<=B:i+=k*f[A+B-j]*g[B-j];k=k*2%m;j+=1\nprint((i*f[B]*g[A+B]+A)%m))",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s315979367":{
    "code_string":"x,a,b=map(int,input().split())\nif abs(a-x)>abs(b-x):\n  print(B)\nelse:\n  print(A)",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s730769097":{
    "code_string":"x,a,b=map(int,input().split())\nif abs(a-x)>abc(b-x):\n  print('A')\nelse:\n  print('B')",
    "error_obj":"NameError: name 'abc' is not defined"
  },
  "s137468807":{
    "code_string":"x,a,b=map(int,input().split())\ny=abs(x-a)\nz=abs(b-x)\n    if y<z:\n        print('A')\n    else:\n        print('B')\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s269742733":{
    "code_string":"x,a,b=map(int,input().split())\nprint(min(abs(x-a),abs(x-b))\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s582986548":{
    "code_string":"x,a,c=map(int,input().split())\nif abs(x-a)<=abs(x-b):\n    print('A')\nelse:\n    print('B')",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s192489599":{
    "code_string":"x,a,b=map(int,input().split())\nprint(min(abs(x-a),abs(x-b))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s329727559":{
    "code_string":"x, a, b = map(int, input.split())\nprint(\"A\" if max(x, a) - min(x, a) < max(x, b) - min(x, b) else \"B\")",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s856775093":{
    "code_string":"a,b,c=(int(x) for x in input().split())\nif a < b < c:\n    print( 'A' )\nelif a < c < b:\n    print( 'A' )\nelif b < a < c:\n    print( 'B' )\nelif b < c < a:\n    print( 'B' )\nelif c < a < b:\n    print( 'C' )\nelif c < b < a",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s667755645":{
    "code_string":"import sys\ninput = sys.stdin.readline\n\nint(input())\nlist(map(int,input().split()))\ninput().rstrip()",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 2 7\\n'"
  },
  "s839189587":{
    "code_string":"x, a, b = map(int,input().split())\nprint('A') if abs(x-a) < abs(s-b) else print('B')",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s520962794":{
    "code_string":"X, A, B = map(int, input().split())\n\nprint(min(abs(X-A), abs(B-X))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s933575518":{
    "code_string":"x, a, b = map(int, input().split())\nprint((abs(x-a) > abs(x-b)) ? \"A\" : \"B\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s724164758":{
    "code_string":"s=input()\nalh=\"abcdefghijklmnopqrstuvwxyz\"\nexist=False\nans=\"None\"\nfor i in alf:\n  if i in s:\n    exist=True\n  if not exist:\n    ans=i\n    break\nprint(ans)",
    "error_obj":"NameError: name 'alf' is not defined"
  },
  "s313718109":{
    "code_string":"s = input()\n\nimport string\na = list(string.ascii_lowercase)\n\nfor item in a:\n    if item not in s:\n        print(a[i])\n        break\nelse:\n    print('None')",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s718478939":{
    "code_string":"S=input()\nx=\"None\"\nnum=[False for i in range(26)]\nfor i in range(len(S)):\n    num[ord(S[i])-ord(\"a\")]=True\n\nfor j in range(26):\n    if !num[j]:\n        x=chr(j+ord(\"a\"))\n        break\n\nprint(x)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s514777596":{
    "code_string":"s = input()\nfor i in range(97, 113+1):\n    if s.find(chr(i)) == -1:\n        print(c)\n        exit()\n    \nprint('None')",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s621127740":{
    "code_string":"def i():\n\treturn int(input())\ndef i2():\n\treturn map(int,input().split())\ndef s():\n\treturn str(input())\ndef l():\n\treturn list(input())\ndef intl():\n\treturn list(int(k) for k in input().split())\n\ns = l()\nalf = \"abcdefghijklmnopqrstuvwxyz\"\nfor i in range(len(s)):\n\talf = alf.trplace(s[i],\"\")\nprint(alf)\nif alf == \"\":\n\tprint(\"None\")\nelse:\n\tprint(alf[0])\n",
    "error_obj":"AttributeError: 'str' object has no attribute 'trplace'"
  },
  "s282451984":{
    "code_string":"S = input()\nList = list(S)\ns_l = set(List)\nn = 10\nres= \"\"\nfor i in range(97,113):\n  n = s_l.count(chr(i))\n  if n == 0:\n    res = chr(i)\n    break\nprint(res)",
    "error_obj":"AttributeError: 'set' object has no attribute 'count'"
  },
  "s922750109":{
    "code_string":"S = list(input())\nlst = [chr(i) for i in range(97, 97+26)]\nres = sorted(list(set(lst) - set(S)))\n\nif res = []:\n    print(\"None\")\nelse:\n    print(res[0])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s766117578":{
    "code_string":"s = sorted(input())\nfor i in range(len(s)-1):\n  if ord(s[i+1])-ord(s[i])>=2:\n    print(chr(ord(s[i]+1)))\n    break\n",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s029288813":{
    "code_string":"import sys\ns = list(input())\nfor i in range(0,26):\n  if not chr(97+i) in s:\n    print(chr+i)\n    sys.exit()\nprint(\"None\")",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'builtin_function_or_method' and 'int'"
  },
  "s941426684":{
    "code_string":"s_list = list(input())\n \nresult = None\n \nfor s_uni in range(ord('a'), ord('z') + 1):\n    if not chr(s_uni) in s_list:\n        result = chr(s_uni)\n        break\n \nif result:\n  print(result)\nelse\n  print('None')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s420618903":{
    "code_string":"s = list(input())\nt = [chr(i) for i in range(ord(\"a\"), ord(\"z\") + 1)]\nfor i in s:\n  t.remove(i)\nif t:\n  print(t[0])\nelse:\n  print(\"None\")\n",
    "error_obj":"ValueError: list.remove(x): x not in list"
  },
  "s904736919":{
    "code_string":"import sys\nfrom string import ascii_lowercase as aplhabets\nfrom collections import defaultdict\n\nreadline=sys.stdin.readline\n\ns=readline().split()\nd=defautdict(int)\nfor x in s:\n  d[x]=1\nfor a in alphabets:\n  if d[a]==0:\n    print(a)\n    sys.exit()\nprint('None')\n",
    "error_obj":"NameError: name 'defautdict' is not defined"
  },
  "s464156332":{
    "code_string":"s=input()\nprint(chr(i)) for i in range(ord(\"a\"),ord(\"z\")+1) if chr(i) not in s",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s266183218":{
    "code_string":"import sys\nfrom collections import Counter\nn = int(input())\na = list(map(int,input().split()))\nbox,box2 = [],[]\nacnt = dict(Counter(a))\nacnt = sorted(acnt.items(), key=lambda x:x[0],reverse=True)\na_val = [acnt[x][1] for x in range(len(acnt))]\na_key = [acnt[y][0] for y in range(len(acnt))]\nfor i in range(len(a_val)):\n\tif a_val[i] >= 4:\n\t\tbox2.append(a_key[i]**2)\n\tif 2 <= a_val[i]:\n\t\tbox.append(a_key[i])\nbox.sort(reverse=True)\nif len(box2) >= 2:\t\n\tans = max(box2)\nif len(box) >= 2:\n    print(max(ans,(box[0]*box[1])))\n    sys.exit()\nprint(0)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s742168100":{
    "code_string":"from collections import defaultdict\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nc=[]\nd=defaultdict(int)\nfor i in range(n):\n    d[a[i]]+=1\n\nfor i,j in d.items():\n    if j>=2:\n        b.append(i)\n    if j>=4:\n        c.append(i)\n\nif len(b)<2 and len(c)<1:\n    print(0)\nelif len(c)==1 and len(b)<2:\n    print(c[0]**2)\nelse:\n    b.sort(reverse=True)\n    rec=b[0]*b[1]\n    if len(c)>=1:\n        c.sort(reverse=True)\n        cube=c[0]**2\n    print(max(rec,cube))",
    "error_obj":"NameError: name 'cube' is not defined"
  },
  "s932025640":{
    "code_string":"Flag = False\nLS = 0\nSS = 0\nfor T in range(0,len(A)):\n    if LS==0 and A[T][1]>=4:\n        Sq = A[T][0]**2\n        Flag = True\n        break\n    if A[T][1]>=2:\n        if LS==0:\n            LS = A[T][0]\n        else:\n            SS = A[T][0]\n            Sq = LS*SS\n            Flag = True\n            break\nif Flag:\n    print(Sq)\nelse:\n    print(0)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s233142746":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\n\nA = A.sort()\nb = set(A)\nb = list(b)\na = [i for i in b if A.count(i) >= 2]\n\nif len(a) <= 1:\n    print(0)\nelse:\n    a = set(a)\n    a = list(a)\n    a.reverse()\n    print(a[0]*a[1])\n",
    "error_obj":"TypeError: 'NoneType' object is not iterable"
  },
  "s284760000":{
    "code_string":"#\n# abc071 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"6\n3 1 2 4 2 1\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\n1 2 3 4\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"10\n3 3 3 3 4 4 4 5 5 5\"\"\"\n        output = \"\"\"20\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    Num = [0] * 10**9\n    for a in A:\n        Num[a-1] += 1\n\n    l1 = l2 = 0\n    for i in range(N-1, -1, -1):\n        if l1 == 0:\n            if Num[i] >= 2:\n                l1 = i+1\n                if Num[i] >= 4:\n                    l2 = i+1\n                    break\n        else:\n            if Num[i] >= 2:\n                l2 = i+1\n                break\n\n    print(l1*l2)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s261375739":{
    "code_string":"n=int(input()) a=list(map(int,input().split(' '))) x=0 y=0 a.sort() a.reverse() for i in range(len(a)-1): if a[i]==a[i+1]: x=a[i] p=i+1 break if x!=0: for i in range((p+1),len(a)-1): if a[i]==a[i+1]: y=a[i] break print(x*y)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s508460435":{
    "code_string":"import sys\n\nn,*a=map(int,sys.stdin.read())\n\na.sort(reverse=True)\nc=0\nf=0\nans=[]\nfor i in range(n-1):\n  if a[i]==a[i+1]:\n    c+=1\n    f+=1\n    ans.append(a[i])\n  else:\n    f=0\n  if (c==2 and f==1) or (c==3 and f==2):\n    print(ans[0]*ans[1])\n    sys.exit()\nprint(0)\n  \n  ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '\\n'"
  },
  "s154341325":{
    "code_string":"from collections import Counter\nn = int(input())\na = Counter(list(map(int, input().split())))\na = [list(x) for x in a.items() if x[1]>=2]\na.sort(reverse=True, key=lambda x: (x[0], x[1]))\ncount = 0\nbase = 4\nfor i in len(a):\n    if count == 1:\n        print(l*a[i][0])\n        exit()\n    else:\n        l = a[0]\n        count += 1\n\n    if a[1]>=4:\n        print(a[i][0]*a[i][0])\n        exit()\n\nprint(0)\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s232040292":{
    "code_string":"from collections import defaultdict\nfrom collections import deque\nimport itertools\nimport math\n\ndef readInt():\n\treturn int(input())\ndef readInts():\n\treturn list(map(int, input().split()))\ndef readChar():\n\treturn input()\ndef readChars():\n\treturn input().split()\n\nd = defaultdict(int)\nn = readInt()\nfor i in readChars():\n\td[i]+=1\n\nd = [i for i in sorted(d.items(), reverse=True) if i[1]>=2]\n\nif len(d)==0:\n\tprint(0)\n\texit()\nelif len(d)==1:\n\tif d[0][1]>=4:\n\t\tpass\n\telse:\n\t\tprint(0)\n\t\texit()\nif d[0][1]>=4:\n\tprint(int(d[0][0])**2)\nelse:\n\tprint(int(d[0][0])*int(d[1][0]))\n\traise Exception\n",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p03627\/Python\/s232040292.py\", line 35, in <module>\n    raise Exception\nException\n"
  },
  "s029323765":{
    "code_string":"import collections\nn = int(input())\na = list(map(int,input().split()))\nc = sorted(collections.Counter(a).items(),reverse = True)\n\nnum2=[]\nnum4=[]\n\nfor k in c:\n  if k[1]>=4:\n    num4.append(k[0])\n  if k[1]>=2:\n    num2.append(k[0])\n\nif len(num2)>=2 or len(num4)>=1:\n  print(max(num2[0]*num2[1],num4[0]**2))\nelse:\n  print(0) ",
    "error_obj":"IndexError: list index out of range"
  },
  "s535415390":{
    "code_string":"import collections\nn = int(input())\nalist = list(map(int,input().split()))\nadic = collections.Counter(alist)\nA = [0,0]\nfor i in adic:\n  if adic[i] > 1:\n    A.append(i)\n  if adic[i] > 3:\n    A.append(i)\nsortedA = sorted(A)\nprint(sorted[-1]*sorted[-2])",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s902815314":{
    "code_string":"A,B,C=map(int,input().split())\nif A == C:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s360747790":{
    "code_string":"x = int(input())\nif x[0]==x[2]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s502995286":{
    "code_string":"print(\"YNeos\"[s:=input()==s[::-1]]::2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s208156662":{
    "code_string":"s - input()\nif s[0] == s[-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s594793903":{
    "code_string":"print(\"Yes\" if input() == reversed((input()) else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s209047201":{
    "code_string":"s=rr()\nprint('YNeos'[s[0]!=s[2]::2])",
    "error_obj":"NameError: name 'rr' is not defined"
  },
  "s829774115":{
    "code_string":"#ABC070A\nn = input().split()\nprint(\"Yes\" if (a[-1] == a[0]) else \"No\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s615811632":{
    "code_string":"tmp = input().split(\" \")\nprint(\"Yes\") if tmp[0] == tmp[2] else print(\"No\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s011250403":{
    "code_string":"N=list(int(input()))\nif N[0]==N[2]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s341590459":{
    "code_string":"array = list(map(str, input().split()))\nif array[0] == array[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"IndexError: list index out of range"
  },
  "s462570826":{
    "code_string":"a=input()\nb=\"\"\nfor i in range(len(a),0,-1):\n  b+=a[i]\nif a==b:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"IndexError: string index out of range"
  },
  "s671504274":{
    "code_string":"n = input()\nif n%100 == n\/100:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s772743090":{
    "code_string":"n = int(input())\nif n[0] == n[2]:\n\tprint('Yes')\nelse:\n\tprint('No')",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s563971879":{
    "code_string":"a = int(input())\nif a == a[::-1]:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s439897051":{
    "code_string":"n = list(int,input())\nm = n.sort(reverse=True)\nif n == m:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s352924218":{
    "code_string":"a,b,c,d=map(int,input().split())\n\nif b<=c or d<=a:\n  print(0)\nelse:\n  print(min(d,b)-max(a-c))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s132632651":{
    "code_string":"A, B, C, D=map(int, input().split())\nX=set([for i in range(A, B+1)])\nprint(sum([1 for i in range(C, D+1) if i in X]))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s837846913":{
    "code_string":"l = list(map(int,input().split()))\n\nif l[1] < l[2]:\n    print(0)\nelif l[0] > l[4]:\n    print(0)\nelse:\n    l.sort()\n    print(l[2]-l[1])",
    "error_obj":"IndexError: list index out of range"
  },
  "s873573398":{
    "code_string":"a,b,c,d = map(int(input().split()))\n\nif b > c:\n    print(b - c)\nelse:\n    print(0)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s017410815":{
    "code_string":" a, b, c, d = map(int, input().split())\nprint(max(min(b, d) - max(a, c), 0))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s191637099":{
    "code_string":"a,b,c,d=map(int,input().split())\nif b>c:\n    print(b-c-a)\nelif:\n    print(0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s710124909":{
    "code_string":"a, b, c, d = map(int, input().split())\n\nprint(max(min(b, d) - max(a, c), 0)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s184965161":{
    "code_string":"import math\nfrom functools import reduce\nn = int(input())\nlis = []\nfor i in range(n):\n    lis.append(int(input()))\ndef lcm_base(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\nprint(lcm(lis))\n",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s476359798":{
    "code_string":"import math\n\nn = int(input())\na = []  \n  for i in range(n):\n    a.append(int(input()))\nif n == 1:\n  print(a[0])\nelse:\n  lcm = (a[0] * a[1]) \/\/ math.gcd(a[0], a[1])\n  for i in range(2, n):\n    lcm = (lcm * a[i]) \/\/ math.gcd(lcm, a[i])\n  print(lcm)\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s214632844":{
    "code_string":"import math\nN = int(input())\nT = []\n\ndef lcm(x, y):\n    gc = math.gcd(x, y)\n    ans = (x * y)\/\/gc\n    return ans\n\nfor i in range(N):\n    T.append(int(input()))\n\n    \n\nif len(T) > 2:\n    g = lcm(T[0],T[1])\n    for i in range(3,N-1):\n        g = lcm(g,T[i+1])\n    print(g)\nelif len(T) == 2:\n    print(g)\nelse:\n    print(T[0])",
    "error_obj":"NameError: name 'g' is not defined"
  },
  "s920581700":{
    "code_string":"from heapq import heappush, heappop\nfrom collections import defaultdict\n\nn = int(input())\ngraph = defaultdict(list)\n\n# \u30b0\u30e9\u30d5\u306b\u30b3\u30b9\u30c8\u3092\u683c\u7d0d\nfor _ in range(n - 1):\n    a, b, c = map(int, input().split())\n    graph[a].append((b, c))\n    graph[b].append((a, c))\n\nq, k = map(int, input().split())\n\n\n# \u30b3\u30b9\u30c8\u306e\u521d\u671f\u5316\nINF = 1 << 60\ndist = [INF] * (n + 1)\ndist[k] = 0\n\n#\u3000\u30b9\u30bf\u30fc\u30c8\u5730\u70b9\nq = [(0, k)]\n\n# \uff13\u304b\u3089\u306e\u8ddd\u96e2\nwhile q:\n    cost, curr = heappop(q)\n    if cost > dist[curr]:\n        continue\n    for after, nc in graph[curr]:\n        if cost + nc < dist[after]:\n            dist[after] = cost + nc\n            heappush(q, (cost + nc, after))\n\nprint(\"\\n\".join(map(str, (dist[x] + dist[y]\n                          for x, y in (map(int, input().split()) for _ in range(q))))))",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s695283420":{
    "code_string":"n=int(input())\nm=int(input())\nprint((n-1) * (m-1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s640851513":{
    "code_string":"n, n = map(int, input().split())\n\nprint((n - 1) * (m - 1))",
    "error_obj":"NameError: name 'm' is not defined"
  },
  "s732391010":{
    "code_string":"aaa",
    "error_obj":"NameError: name 'aaa' is not defined"
  },
  "s248763656":{
    "code_string":"##\nN = int(input())\nN_List = list(map(int,input().split()))\nFour_List = [i for i in N_List if i % 4 == 0]\nTwo_List = [i for i in N_List if i % 2 == 0]\nif len(Two_List)-len(Four_List) > 0:\n    N = N - (len(Two_List) - len(Four_List)) + 1\n\nif N \/\/ 2 <= len(Four_List):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s333507777":{
    "code_string":"n, m = [map(int, input().split()) for i in range(2)]\nprint((n-1)*(m-1))\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s149552631":{
    "code_string":"n,m=map(intput().split())\nprint((n-1)*(m-1))",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s390628417":{
    "code_string":"print((int(input())-1)*(int(input())-1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s521808195":{
    "code_string":"a, b = map(int, input().split(\" ''))\nprint((a-1) * (b-1))\n",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s235798642":{
    "code_string":"n,m = int(input().split())\nk = (n-1)*(m-1)\nprint(k)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s851034887":{
    "code_string":"n,m=map(int,input.split())\nprint((n-1)*(m-1))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s152291111":{
    "code_string":"n, m = map(int, input())\nans = (n-1)*(m-1)\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s277029503":{
    "code_string":"n = int(input())\nprint(2 * n,end = \"\\n\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s495918294":{
    "code_string":"x,y = int(input().split())\nprint((x-1)*(y-1))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s144310730":{
    "code_string":"n, m = map(int, input.split())\nprint((n - 1) * (m - 1))",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s190375165":{
    "code_string":"from sys import stdin, stdout\ndef main():\n    line = stdin.readLine()\n    parts = line.split()\n    a = int(parts[1])\n    b = int(parts[2])\n    stdout.write((a-1)*(b-1))\nmain()",
    "error_obj":"AttributeError: '_io.TextIOWrapper' object has no attribute 'readLine'"
  },
  "s051719201":{
    "code_string":"x,y = input().split()\na = x-1\nb = y-1\nprint(a*b)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s167141458":{
    "code_string":"n = int(input())\nm = int(input())\nprint((n - 1) * (m - 1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s573567476":{
    "code_string":"n,m =map(int,imput().split())\nprint((n-1)*(m-1))",
    "error_obj":"NameError: name 'imput' is not defined"
  },
  "s850608189":{
    "code_string":"a, b = list(map(int, input()))\n\nprint((a - 1) * (b - 1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s406080151":{
    "code_string":"n,m = map(int,input().split())\nprint(n*m-2(n+m)+4)",
    "error_obj":"SyntaxWarning: 'int' object is not callable; perhaps you missed a comma?"
  },
  "s950662549":{
    "code_string":"print((int(input())-1)*(int(input())-1))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 4'"
  },
  "s035507838":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\nfrom functools import reduce\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\ns = rr()\nprint(s[0] + str(len(s-2)) + s[-1])\n\n\n\n\n\n\n\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s764498288":{
    "code_string":"a = input()\nprint(s[0] + str(len(s) - 2) + s[-1])",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s227432505":{
    "code_string":"s=input()\nprint(s[0]+int(len(s)-2)+s[-1])",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s777198605":{
    "code_string":"a=input()\nprint(a[0]+str(len(a-2))+a[-1])",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s892222113":{
    "code_string":" s = input()\nprint(\"{}{}{}\".format(s[0],len(s)-2,s[-1]))",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s263259260":{
    "code_string":"s = input()\nprint(s[0]+str(len(s-2))+s[-1])",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s593553313":{
    "code_string":"s=input()\nprint(s[0]+(len(s)-2)+s[-1])",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s036702735":{
    "code_string":"s = input()\nN = len(s)\nprint(s[0] + len(N - 2) + s[N - 1])",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s851293339":{
    "code_string":"s = input()\nprint(s[0]+(len(s)-1)+s[-1])",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s896802334":{
    "code_string":"s = input()\nprint(s[:1]+str(len(s-2))+s[-1:])",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s440490814":{
    "code_string":"a = list(input())\nn = len(a)-2\nprint(a[0],n,a[-1],sep=(\"\")\n      ",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s921295755":{
    "code_string":"import sys \n\nline = sys.stdin\nline = line.strip()\nstart = line[0]\nend = line[-1]\nprint('%s%d%s'%(start, len(line) - 2, end))\n  ",
    "error_obj":"AttributeError: '_io.TextIOWrapper' object has no attribute 'strip'"
  },
  "s115800716":{
    "code_string":"s=input()\nprint(s[0] + int(len(s)-2) + s[-1])",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s764705965":{
    "code_string":"s = input()\nt = len(s)\nprint(s[0] + t + s[- 1])",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s100209386":{
    "code_string":"s = intput()\n\nprint(s[0] + str((len(s)-2)) + s[-1])\n",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s479309229":{
    "code_string":"s=input()\nprint(s[0]+(len(s)-2)+s[len(s)-1])\n",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s418545690":{
    "code_string":"S=input()\nprint(S[0]+len(S[1:-1])+S[-1])",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s653641900":{
    "code_string":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn = I()\nA = readInts()\nfour = 0\ntwo = 0\nfor i in range(n):\n    if A[i]%4 == 0:\n        four += 1\n    elif A[i]%2 == 0:\n        two += 1\nprint('Yes' if a + b\/\/2 >= n\/\/2 else 'No')\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s571950555":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\na,b,c=0,0,0\nans='No'\nfor i in a:\n  if a%4==0:\n    a+=1\n  elif a%2==0:\n    b+=1\n  else:\n    c+=1\nif n%2==1:\n  if c-a==1:\n    if b==0:\n      ans='Yes'\n  elif a>=c:\n    ans='Yes'\nelse:\n  if a>=c:\n    ans='Yes'\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s026541340":{
    "code_string":"n = int(input())\nli = list(map(int,input().split()))\nlis = []\nx = 0\ny = 0\nz = 0\nfor i in range(n):\n    if li[i] % 4 == 0:\n        x += 1\n    elif li[i] % 2 == 0:\n        y = 1\n    else:\n        z += 1\nif y = 0:\n    if x >= y + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    if x >= y:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s760134083":{
    "code_string":"N = int(input())\na = list(map(int, input().split()))\n\neven4, even, odd = 0, 0, 0\nfor i in a:\n    if i % 4 == 0:\n        even4 += 1\n    elif i % 2 == 0:\n        even += 1\n    else:\n        odd += 1\n\nif n % 2 == 0:\n    if even4 >= odd:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    if even4 >= odd + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s017223142":{
    "code_string":"N = int(input())\na = [int(i) for i input().split()]\n\nki = 0\ngu_2 = 0\ngu_4 = 0\n\nfor i in a:\n    if i % 4 == 0:\n        gu_4 += 1\n    elif i % 2 == 0:\n        gu_2 += 1\n    else:\n        ki += 1\n\nif ki <= gu_4:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s783144384":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\na=0\nb=0\nfor num in A:\n    if num%2==1:\n        a+=1\n    elif num%4==0:\n        b+=1\n\nif N==3:\n    if a==3 or (a>=1 and b==0):\n        print('No')\n    else:\n        print('Yes')\nelse:\n    if a=<b:\n        print('Yes')\n    else:\n        print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s472530824":{
    "code_string":"import math\n\nn=int(input())\nl=list(map(int,input().split()))\n\nc_4=0\nc_2=0\n\nfor i in l:\n  if i%4==0:\n    c_4+=1\n  elif i%2==0:\n    c_2+=1\n\n\nif c_2==1:\n  num=n\nelse:\n  num=n-c_2  \n  \nif matj.ceil(num\/2) <= c_4:\n  ans=\"Yes\"\nelif c_2==n:\n  ans=\"Yes\"\nelse:\n  ans=\"No\"\n  \nprint(ans)",
    "error_obj":"NameError: name 'matj' is not defined"
  },
  "s805044134":{
    "code_string":"N = int(input())\na = list(map(int,input().split()))\nzero,one,two = 0,0,0\nfor i in a:\n    if i%4 == 0:\n        two += 1\n    elif i%2 == 0:\n        one += 1\n    else:\n        zero += 1\nif one = N:\n    print(\"Yes\")\n    exit()\nprint(\"Yes\" if two+int(two>0) >= zero+int(one>0) else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s846436619":{
    "code_string":"# AtCoder Regular Contest 080\n# C - 4-adjacent\n\nN=int(input())\nalist=list(map(int,input().split()))\n\noddcount=0\nmod40=0\nother=0\n\nfor a in alist:\n    if a%2==1:\n        oddcount+=1\n    elif a%4==0:\n        mod40+=1\n    else:\n        other+=1\n\nif N==1:\n    if mod40==N:\n        print(\"Yes\")\n        exit()\n    else:\n        print(\"No\")\n        exit()\nif N==2 or N==3:\n    if mod40>0 or other==N:\n        print(\"Yes\")\n        exit()\n    else:\n        print(\"No\")\n        exit()\n# \u2191\u3053\u3053\u307e\u3067\u306f\u3042\u3063\u3066\u305d\u3046\u3002\n\nif (N-((other\/\/2)*2))\/\/2 <= mod40:\n            print(\"Yes\")\n            exit()\n        else:\n            print(\"No\")\n            exit()",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s107897938":{
    "code_string":"h,w,n,*A=map(int,open(x:=0).read().split());c=[]\nfor i in range(n):c+=[i+1]*A[i]\nfor i in range(h):print(*(c[i*w:-~i*w])[::x]);x^=1",
    "error_obj":"ValueError: slice step cannot be zero"
  },
  "s596716506":{
    "code_string":"n = input().split()\nprint(\"ABC\" + n)",
    "error_obj":"TypeError: can only concatenate str (not \"list\") to str"
  },
  "s581497349":{
    "code_string":"print(ABC+input())",
    "error_obj":"NameError: name 'ABC' is not defined"
  },
  "s283421929":{
    "code_string":"n=int(input())\nprint(\"ABC\"+int(n))",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s534334122":{
    "code_string":"    if 2**i <=n:\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s812737588":{
    "code_string":"n=int(input())\nfor i in range(8):\n  if 2**i > n:\n    print(2**(i-1))\n    return",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s729585139":{
    "code_string":"n = int(input())\nfor i in range(n):\n  if i = 2**a and 2**a < n and n < 2**(a+1):\n    print(i)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s520919121":{
    "code_string":"n = int(input())\n\nans = []\nfor i in range(1, n + 1):\n    x = i\n    for j in range(100):\n        if x % 2 == 0:\n            x = int(x \/\/ 2)\n            #ans.append(j)\n        else:\n            #ans.append(j)\n            break\n    #ans.append(j)\n\n#print(ans)\nprint(ans.index(max(ans)) + 1)\n",
    "error_obj":"ValueError: max() arg is an empty sequence"
  },
  "s790553910":{
    "code_string":"N = int(input())\nprint(max(i if 2 ** i <= N else 0 for i in range(10))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s549347894":{
    "code_string":"def resolve(N):\n    '''\n    code here\n    '''\n    N = int(input())\n    res = 0\n\n    def div2(num):\n        if num == 1:\n            return 0\n        else:\n            cnt = 0\n            while True:\n                if num % 2 == 0:\n                    num \/\/= 2\n                    cnt += 1\n                else:\n                    return cnt\n\n\n    res_max_cnt = 0\n    res = 1\n    for i in range(N):\n        tepm_cnt = div2(i+1)\n        if res_max_cnt < tepm_cnt:\n            res_max_cnt = tepm_cnt\n            res = i+1\n    print(res)\n\nif __name__ == \"__main__\":\n    resolve()\n",
    "error_obj":"TypeError: resolve() missing 1 required positional argument: 'N'"
  },
  "s575392243":{
    "code_string":"n = int(input())\nb = m.bit_length() - 1\nans = int('0b1'+'0'*m, 2)\nprint(ans)",
    "error_obj":"NameError: name 'm' is not defined"
  },
  "s523987812":{
    "code_string":"n = int(input())\na = []\nfor i in range(1, n+1):\n  while True:\n    if i % 2 != 0:\n      break\n    i = i \/\/ 2\n    c += 1\n  a.append(c)\nprint(a.index(max(a)) + 1)",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s130060824":{
    "code_string":"n = int(intput())\nres = []\nfor i in range (1,n + 1):\n    cnt = 0\n    while i % 2 == 0:\n        i \/= 2\n        cnt += 1\n    res.append(cnt)\nprint(res.index(max(res))+1)",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s955002336":{
    "code_string":"N = int(input())\n\nwhile a*2 <= N:\n    a = a*2\n\nprint(a)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s044715795":{
    "code_string":"for i in range(7):\n    if 2**i> n:\n        break\n\nprint(2**(i-1))  ",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s094564675":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True: \n    odd_flag = False\n    for i in range(N):\n        if A[i] % 2 == 1:\n            odd_flag = True\n    if odd_flag:\n        break\n    for i in range(N):\n        A[i] = A[i] \/\/ 2\n    cnt += 1\n\nprint(cnt)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s870627957":{
    "code_string":"import typing\nfrom typing import Deque, Set, Dict\n\nclass Island:\n    def __init__(self, id: int) -> None:\n        self.id: int = id\n        self.connection: List['Island'] = []\n        self.rank: int = 0\n    \n    def addConnection(self, other: 'Island') -> None:\n        self.connection.append(other)\n        other.connection.append(self)\n\n    def setParent(self, other: 'Island') -> None:\n        self.rank = other.rank +1\n\nclass Islands(Dict[int, Island]):\n    def __init__(self, num: int):\n        for id in range(1, num+1):\n            self[id] = Island(id)\n\ndef bfs(root: Island, max_depth: int) -> None:\n    root.setAsRoot()\n    reserved: Deque[Island] = Deque([root])\n    seen: Set[int] = {root.id}\n    while len(reserved) != 0:\n        current: Island = reserved.popleft()\n        if current.rank > max_depth:\n            break\n        for connected in current.connection:\n            if connected.id in seen:\n                continue\n            connected.setParent(current)\n            seen.add(connected.id)\n            reserved.append(connected)\n\ndef main() -> None:\n    with open(0) as f:\n        N, M = map(int, f.readline().split())\n        ab = [map(int, line.split()) for line in f.readlines()]\n    #\u8af8\u5cf6\u751f\u6210\n    islands: Islands = Islands(N)\n    #\u8af8\u5cf6\u9593\u5b9a\u671f\u4fbf\u751f\u6210\n    for a, b in ab:\n        islands[a].addConnection(islands[b])\n    #bfs\n    bfs(islands[1], 2)\n    #\u51fa\u529b\n    print('POSSIBLE' if islands[N].rank in (1, 2) else 'IMPOSSIBLE')\n\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"AttributeError: 'Island' object has no attribute 'setAsRoot'"
  },
  "s089373917":{
    "code_string":"N, M = map(int, input())\nFrom = set()\nTo = set()\nfor _ in range(M):\n  a, b = map(int, input())\n  if a == 1:\n    From.add(b)\n  if b == N:\n    To.add(a)\nif From.isdisjoint(To):\n  print(\"INPOSSIBLE\")\nelse:\n  print(\"POOSIBLE\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s705732189":{
    "code_string":"def main():\n  N, M = map(int,input().split())\n  fromOne = set()\n  toM = set()\n  for i in range(N):\n    a, b = map(int,input().split())\n    if a == 1:\n      fromOne.add(b)\n    elif b == M:\n      toM.add(a)\n  return 'POSSIBLE' if fromOne & toM else 'IMPOSSIBLE'\nprint(main())",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s869297282":{
    "code_string":"a_list = []\nb_list = []\nfor i in range(m):\n  if X[i][0] == 1:\n    a_list.append(X[i][1])\n  elif X[i][1] == 1:\n    a_list.append(X[i][0])\n  elif X[i][0] == n:\n    b_list.append(X[i][1])\n  elif X[i][1] == n:\n    b_list.append(X[i][0])\nc_set = set(a_list) & set(b_list)\nif len(c_set) ==0:\n  print(\"IMPOSSIBLE\")\nelse:\n  print(\"POSSIBLE\")",
    "error_obj":"NameError: name 'm' is not defined"
  },
  "s125048569":{
    "code_string":"n, m = map(int, input().split())\nc = [[] for _ in range(m+1)]\nfor i in range(m):\n  a, b = map(int, input().split())\n  c[a].append(b)\n  c[b].append(a)\n\nfor i in c[1]:\n  if n in c[i]:\n    print('POSSIBLE')\n    exit()\n\nprint('IMPOSSIBLE')",
    "error_obj":"IndexError: list index out of range"
  },
  "s304339144":{
    "code_string":"N, *A = [int(_) for _ in open(0).read().split()]\nsumB = max(0, sum(A) - N * (N - 1))\nwhile True:\n    B = [0 - (-(a + x + 1 - N)) \/\/ (N + 1) for a in A]\n    if sumB == sum(B):\n        break\n    sumB += 1\nprint(sumB)\n",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s836208974":{
    "code_string":"def main():\n    import sys\n\n    def input(): return sys.stdin.readline().rstrip()\n\n    def gcd(x,y):\n    r = x%y\n    if r==0:\n        return y\n    return gcd(y, r)\n\n    n, k =map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    c = a[0]\n    for i in range(n):\n        c = gcd(a[i], c)\n    if k%c == 0:\n        print('POSSIBLE')\n    else:\n        print('IMPOSSIBLE')\n    \n\n    \nif __name__ == '__main__':\n    main()",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s920990644":{
    "code_string":"n, k = map(int, input().split())\na = list(map(int, input().split())) \na.sort()\na.reverse() \nx = a[0]   \nfor i in range (1, N):\n  while a[i] != 0:\n    x , a[i] = a[i] , x % a[i]\nif K > a[0]:\n  print('IMPOSSIBLE')\nelse:\n  print('POSSIBLE' if K%x == 0 else 'IMPOSSIBLE')",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s574115545":{
    "code_string":"n, m = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\nfor i in range(n):\n    a[i].reverse()\n\nans = n\nused = set()\nfor i in range(m):\n    count = [0]*(m+1)\n    for j in range(n):\n        count[a[j][-1]] += 1\n\n    ans = min(max(count), ans)\n    num = count.index(max(count))\n    used.add(num)\n    for j in range(n):\n        while True:\n            if a[j][-1] in used:\n                a[j].pop()\n            else:\n                break\n\nprint(ans)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s807457128":{
    "code_string":"a, b = int(input().split())\n\nif (a + b) % 3 == 0:\n  print(Possible)\nelse:\n  print(Impossible)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s141496980":{
    "code_string":"a,b=map(int,input().split())\nif (a%3==0) || (b%3==0) || ((a+b)%3==0):\n  print(\"Possible\")\nelse:\n  print(\"Impossible\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s637901519":{
    "code_string":"a, b = map(int, input().split())\nprint(\"Possible\" if a % 3 == 0 or b % 3 == 0 or (a + b) % == 0 else \"Impossible\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s073147987":{
    "code_string":"a=list(map(int,input().split()))\nb=sum(a)\n\nif (b%3 or a[0]%3 or a[1]) !=0 :\n  print('Impossible')\nelif :\n  print('Possible')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s227846968":{
    "code_string":"a,b=map(int,input().split())\nif a%3==0 or b%3==0: or (a+b)%3==0:\n    print ('Possible')\nelse:\n    print('Impossible')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s221476754":{
    "code_string":"a,b,c=map(int,input().split())\nif A%3 == 0:\n  print(\"Possible\")\nelif B%3 == 0:\n  print(\"Possible\")\nelif (A+B)%3 == 0:\n  print(\"Possible\")\nelse:\n  print(\"Impossible\")",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s779155301":{
    "code_string":"print(\"YNeos\"[notA%3==0orB%3==0or(A+B)%3==0::2])",
    "error_obj":"SyntaxError: invalid octal literal"
  },
  "s729874050":{
    "code_string":"a,b=map(int,input().split())\nfor i in (a,b,a+b):\n  i%3==0:\n    print(\"Possible\")\n    exit()\n    \nprint(\"Impossible\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s038963044":{
    "code_string":"\n# \u51fa\u529b\n# a, b = map(int, input().split())\na = int(input())\nb = int(input())\n\n# \u51e6\u7406&\u51fa\u529b\nif a \/ 3 >= 1 :\n    print('Possible')\nelif b \/ 3 >= 1:\n    print('Possible')\nelif (a + b) \/3 >= 1:\n    print('Possible')\nelse:\n    print('Impossible')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 5'"
  },
  "s104448048":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nans=10**100\nx=sum(a)\nb=0\nfor i in a[:-1]:\n   b+=i\n   x-=i\n   ans=min(ans,abs(x-b))\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 5'"
  },
  "s165151502":{
    "code_string":"li = list(map(int,input().split()))\nli.append(a+b)\nfor i in range(3):\n    if li[i] % 3 == 0:\n        print(\"Possible\")\n        exit()\nprint(\"Impossible\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s738528207":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\na, b, c = rm()\nif a%3 == 0 or b%3 == 0 or (a+b)%3 == 0:\n  print('Possible')\nelse:\n  print('Impossible')\n\n\n\n\n\n\n\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s978500900":{
    "code_string":"A,B=map(int.input().split())\nif A%3==0 or B%3==0 or (A+B)%3==0:\n  print(\"Possible\")\nelse:\n  print(\"Impossible\")",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s744208472":{
    "code_string":"a, b = map(int, input().split())\nx = a + b\nif x % 3 == 0:\n  print('Possible')\nelse('Impossidle')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s352553747":{
    "code_string":"a,b = map(int,input().split())\nif a%3==0 \\or b%==0 \\or (a+b)%3==0:\n  print(\"Possible\")\nelse:\n  print(\"Impossible\")",
    "error_obj":"SyntaxError: unexpected character after line continuation character"
  },
  "s233736803":{
    "code_string":"a,b=(int(x) for x in input().split())\nc = ( a + b ) % 3\nif (str(a) % '3' == '0' or str(b) % '3' == '0' or (c) == '0'):\n    print ( 'Possible' )\nelse:\n    print ( 'Impossible' )",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s326517581":{
    "code_string":"a,b=map(int(input()).split())\nprint([\"Possible\",\"Impossible\"][a%3==b%3 and (a%3==1 or a%3==2)]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s832979167":{
    "code_string":"A,B=int(input())\nif A%3*B%3*(A+B)%3==0:print('Possible')\nelse:print('Impossible')",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 5'"
  },
  "s422996522":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nif ((a+b)%3)==0:\n  print(\"Possible\")\nelse:\n  if (a%3)==0:\n    print(\"Possible\")\n  else:\n    if (b%3)==0:\n      print(\"Possible\")\n      else:\n        print(\"Impossible\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s220077231":{
    "code_string":"N,K=map(int,input())\nL=list(map(int,input().split()))\nL.sort(reverse=True)\nprint(sum(L[:K]))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s200715772":{
    "code_string":"n,k=int(input())\nl=list(map(int, input().split()))\nl.sort(reverse=True)\nlength=0\nfor i in range(k):\n  length+=l[i]\nprint(length)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 3'"
  },
  "s479920290":{
    "code_string":"N = int(input())\nK = int(input())\nls = sorted([int(i) for i in input().split(' ')], reverse=True)\n\nl_sum = 0\nfor k in range(K):\n    l = ls[k]\n    l_sum += l\n\nprint(l_sum)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 3'"
  },
  "s337356356":{
    "code_string":"int main() {\n  int N;\n  int K;\n  int a[55];\n  cin >> N >> K;\n  \n  for(int i=0; i<N; ++i) {\n    cin >> a[i];\n  }\n  sort(a,a+N,greater<int>());\n  int ans=0;\n  for(int i=0; i<=K; ++i) {\n    ans += a[i];\n  }\n  cout << ans << endl;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s570424132":{
    "code_string":"n, k = map(int, input().split())\ns = list(map(int, input().split()))\ns.sort()\nprint(sum(s[len(n) - k:]))",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s336814982":{
    "code_string":"15 14\n50 26 27 21 41 7 42 35 7 5 5 36 39 1 45",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s597565255":{
    "code_string":"def solve():\n    N, K = map(int, input().split())\n    L = [int(i) for i in input().split()]\n    L.sort(reversed = True)\n    print(sum(L[:K]))\n\n\nif __name__ == \"__main__\":\n    solve()",
    "error_obj":"TypeError: 'reversed' is an invalid keyword argument for sort()"
  },
  "s158214604":{
    "code_string":"N,K=map(int,input().split())\nl=list(map(int,input().split()))\nl.sort(reverse=True)\nprint(sum[:K])",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s093586051":{
    "code_string":"N, K = map(int, input().split())\nl = list(map(int, input().split()))\nx = ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s286167842":{
    "code_string":"l,k = map(int,input().split())\nprint(sum(sorted(map(int,input().split())[:k]))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s412034695":{
    "code_string":"n, k = map(int, input().split())\nl = list(map(int, input().split()))\n\nl.sort(reversed=True)\nprint(sum(l[:k]))",
    "error_obj":"TypeError: 'reversed' is an invalid keyword argument for sort()"
  },
  "s180312847":{
    "code_string":"N = int(input())\nA = [0]+list(map(int,input().split()))\nfor i in range(1,N+1):\n  A[i] = A[i]+A[i-1]\nans = float('inf')\nfor i in range(1,N):\n  ans = min(ans, ans(A[N]-2*A[i]))\nprint(ans)",
    "error_obj":"TypeError: 'float' object is not callable"
  },
  "s921727214":{
    "code_string":"N = int(input())\na = [int(i) for i in input().split()]\nsum_a = sum(a)\nb = []\nc = 0\nfor i in range(N-1):\n    c += a[i]\n    b.append(abs(2*b-sum_a))\nprint(min(b))\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'int'"
  },
  "s934726452":{
    "code_string":"N = int(input())\na = list(map(int, input().split())) \n\nb = list(accumulate(a))\nma = b[-1]\nmi = 10**10\nfor sunuke in b:\n    arai = ma - sunuke\n    if abs(sunuke - arai) < mi:\n        mi = abs(sunuke - arai)\nprint(mi)",
    "error_obj":"NameError: name 'accumulate' is not defined"
  },
  "s828970868":{
    "code_string":"import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nN = INT()\nA = LIST()\n\nans = INF\nfor i in range(N-1):\n    x = sum(A[:i+1])\n    y = sum(A[i+1:])\n\n    tmp = abs(x - y)\n    if tmp < ans:\n        ans = tmp\nprint(ans)\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s385004709":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\n\ntotal = sum(a)\ns = 0\ni = 0\nans = total + 1\nwhile True:\n    s += a[i]\n    total -= a[i]\n    ans = min(ans, abs(s - total))\n    i += 1\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s230171744":{
    "code_string":"from collections import deque, defaultdict\n\ndef main():\n  n=int(input())\n  edges=[tuple(map(int,input().split())) for _ in range(n-1)]\n  d=defaultdict(list)\n  for e in edges:\n    d[e[0]].append(e[1])\n    d[e[1]].append(e[0])\n  def dist(m):\n    dl=[-1]*(n+1)\n    cv=deque([m])\n    nv=deque([1])\n    while nv:\n      c+=1\n      cv.extend(nv)\n      nv.clear()\n      for e in cv:\n        dl[e]=c\n        for x in d[e]:\n          if dl[x]<0:\n            nv.append(x)\n      cv.clear()\n    return dl[1:]\n  fnc=dist(1)\n  snk=dist(n)\n  j=sum([(fnc[i]<=snk[i])-(fnc[i]>snk[i]) for i in range(n)])\n  if j>0:\n    print('Fennec')\n  else:\n    print('Snuke')\n\nif __name__=='__main__':\n    main()\n",
    "error_obj":"UnboundLocalError: local variable 'c' referenced before assignment"
  },
  "s946037716":{
    "code_string":"import collections\n\nN = int(input())\ntree = [[] for _ in range(N)] #i\u884c\u76ee\u306b\u306f\u3001i\u756a\u76ee\u306e\u30de\u30b9\u3068\u96a3\u308a\u5408\u3063\u3066\u3044\u308b\u30de\u30b9\u306e\u756a\u53f7\u304c\u52a0\u3048\u3089\u308c\u308b\nfor _ in range(N-1):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\n\ncolor = [0] * N #\u8272\u304c\u5857\u3089\u308c\u3066\u3044\u306a\u3051\u308c\u30700\u3001\u9ed2\u306f1\u3001\u767d\u306f-1\ncolor[0] = 1\ncolor[N-1] = -1\nque = collections.depue() #\u8272\u304c\u5857\u3089\u308c\u305f\u30de\u30b9\u306e\u756a\u53f7\u3092\u3001\u96a3\u308a\u5408\u3046\u30de\u30b9\u304c\u5168\u3066\u5857\u3089\u308c\u308b\u307e\u3067\u3053\u3053\u306b\u5165\u308c\u308b\nque.append(0)\nque.append(N-1)\nwhile que: #\u5857\u308b\u3079\u304d\u30de\u30b9\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n    i = que.popleft() #\u300c\u5de6\u304b\u3089\u300d\u304c\u91cd\u8981 #n\u56de\u3067\u305f\u3069\u308a\u7740\u3051\u308b\u30de\u30b9\u306fn\u56de\u76ee\u306b\u5168\u3066\u5857\u3063\u3066\u826f\u3044\n    for x in tree[i]:\n        if color[x] == 0:\n            color[x] = color[i]\n            que.append(x) #\u5857\u3063\u305f\u30de\u30b9\u306f\u8abf\u3079\u308b\u30ea\u30b9\u30c8\u306b\u5165\u308c\u308b\n\nif sum(color) > 0: #\u5408\u8a08\u304c\u6b63\u3001\u3064\u307e\u308a\u9ed2\u304c\u591a\u3044\u5834\u5408\u306f\u5148\u624b\u306e\u52dd\u3061\n    print(\"Fennec\")\nelse: #\u5408\u8a08\u304c0\u3067\u3082\u5148\u624b\u306e\u5857\u308b\u30de\u30b9\u304c\u306a\u3044\u305f\u3081\u5f8c\u624b\u306e\u52dd\u3061\n    print(\"Snuke\")\n",
    "error_obj":"AttributeError: module 'collections' has no attribute 'depue'"
  },
  "s486535169":{
    "code_string":"from collections import deque\ndef f(x,q):\n    for i in route[x]:\n        if not visit[i]:\n            visit[i] = True\n            f(i,q+[i])\n            visit[i] = False\n            if i == n-1:\n                p = q + [i-1]\n                flag = True\n                return p\nn = int(input())\nroute = [[] for i in range(n)]\nfor i in range(n-1):\n    a , b = map(lambda x:int(x)-1,input().split())\n    route[a].append(b)\n    route[b].append(a)\nvisit = [False for i in range(n)]\np = f(0,[0])\nt = p[-(-len(p)\/\/2)-1]\n\nd = deque()\nd.append(n-1)\nvisit = [False for i in range(n)]\nsiro = 1\nwhile d:\n    now = d.popleft()\n    for i in route[now]:\n        if not visit[i] and i != t:\n            visit[i] = True\n            d.append(i)\n            siro += 1\nkuro = n - siro\nif kuro <= siro:\n    print(\"Snuke\")\nelif kuro > siro:\n    print(\"Fennec\")",
    "error_obj":"TypeError: object of type 'NoneType' has no len()"
  },
  "s417418135":{
    "code_string":"from networkx import*\nN,*t=map(str.split,open(0))\ns=shortest_path_length\nx=s(G:=Graph(t),'1')\ny=s(G,N)\nprint('FSennunkeec'[sum(x[k]>y[k]for k in x)*2>=int(*N)::2])",
    "error_obj":"Traceback (most recent call last):\n  File \"\/home\/alex\/Documents\/research\/bug-detection\/..\/input\/Project_CodeNet\/data\/p03662\/Python\/s417418135.py\", line 5, in <module>\n    y=s(G,N)\n  File \"\/home\/alex\/.local\/lib\/python3.9\/site-packages\/networkx\/algorithms\/shortest_paths\/generic.py\", line 287, in shortest_path_length\n    paths = nx.single_source_shortest_path_length(G, source)\n  File \"\/home\/alex\/.local\/lib\/python3.9\/site-packages\/networkx\/algorithms\/shortest_paths\/unweighted.py\", line 55, in single_source_shortest_path_length\n    raise nx.NodeNotFound(f\"Source {source} is not in G\")\nnetworkx.exception.NodeNotFound: Source ['7'] is not in G\n"
  },
  "s056974639":{
    "code_string":"import sys\nn=int(input())\nsys.setrecursionlimit(n)\nT=[[]for _ in\"_\"*(n+1)]\nfor _ in range(n-1):a,b=map(int,input().split());T[a]+=b,;T[b]+=a,\ndef d(v,p):\n r=0\n for s in T[v]:\n  if s!=p:r^=d(s,v)+1\n return r\nprint(\"ABloibc e\"[d(1,1)<1::2])",
    "error_obj":"RecursionError: maximum recursion depth exceeded in comparison"
  },
  "s489455633":{
    "code_string":"a=list(map(int,input().split()))\na.sort()\nprint(a[0]+[1])",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'list'"
  },
  "s661942966":{
    "code_string":"a,b,c = sroted(map(int,input().split()))\nprint(a + b)",
    "error_obj":"NameError: name 'sroted' is not defined"
  },
  "s274254201":{
    "code_string":"p = sorted([map(int, input().split())])\nprint(p[0] + p[1])\n\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s816023622":{
    "code_string":"lst = input().split()\n\nfor i in range(3):\n   lst[i] = int(lst[i])\n   lst.sort()\n\nprint(lst[0] + lst[1])",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s554223025":{
    "code_string":"a, b, c=map(int, input().split())\nprint(total(a,b,c)-max(a, b, c))",
    "error_obj":"NameError: name 'total' is not defined"
  },
  "s727427496":{
    "code_string":"a, b, c = map(int, input().split())\n\ndef answer(a: int, b: int, c: int) -> int:\n    return min(a + b, a + c, b + c)\n\nprint(answer(a, b, c)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s415697830":{
    "code_string":"a,b,c=map(int,input().split())\nprint(sum([a,b,c]-max(a,b,c)))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'int'"
  },
  "s331808768":{
    "code_string":"ary = list(map(lambda n: int(n), input().split(\" \"))).sort()\nprint(ary[0] + ary[1])",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s952519775":{
    "code_string":"a, b, c, d = map(int, input().split())\nprint(max(a * b, a * c, c * b))",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 3)"
  },
  "s063334265":{
    "code_string":"a,b,c=map(int,input().pslit(' '))\nprint(a+b+c-max(a,max(b,c)))",
    "error_obj":"AttributeError: 'str' object has no attribute 'pslit'"
  },
  "s916919844":{
    "code_string":"a, b, c = sorted(map(int, input().split()))\nprint(a+b0",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s992002933":{
    "code_string":"a, b, c = map(int, input().split())\nmin = min{a + b, b + c, c + a}\nprint(min)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s323212143":{
    "code_string":"print(sum(sorted(list(map(int, intput().split())))[0:2]))",
    "error_obj":"NameError: name 'intput' is not defined"
  },
  "s868167795":{
    "code_string":"s = input()\nfor i in range(1,len(s)\/\/2):\n  if s[:(n-2*i)\/\/2] == s[(n-2*i)\/\/2:n-2*i]:\n    print(n-2*i)\n    exit()",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s058739623":{
    "code_string":"n = input()\nnum = len(n)-2\nfor i in range(num,0,-2):\n  f = int(i\/2)\n  if s[:f]==s[f:i]:\n    print(i)\n    break",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s392588524":{
    "code_string":"s = str(input())\nsl = list(s)\nans = 0\ndel s[-1]\nfor i in range(1,len(s)):\n  if(len(s)%2==0):\n    if(s[:len(s2\/\/2)]==s[len(s)\/\/2:]):\n      ans = len(s)\n      break\nprint(ans)\n  ",
    "error_obj":"TypeError: 'str' object doesn't support item deletion"
  },
  "s830582102":{
    "code_string":"n = input()[:-1]\nwhile n[:len(n)\/\/2] != [len(n)\/\/2:]:\n  n = n[:-1]\nprint(len(n))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s547886975":{
    "code_string":"s=str(input())\nflag=0\nfor i in range(len(s)):\n  s=s[:len(s)-2*i]\n  for j in range(len(s)\/\/2):\n    if s[j]!=s[len(s)-j]:\n      flag=1\n      break\n  if flag==0:\n    print(len(s))\n    exit()\n  else:\n    flag=0\n    continue",
    "error_obj":"IndexError: string index out of range"
  },
  "s199461342":{
    "code_string":"S = input()[:-2]\nwhile len(S) >= 0:\n    if S[:len(S) \/\/ 2] == S[len(S) \/\/ 2:]:\n        print(len(S))\n    S = S[:-2]\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s112629549":{
    "code_string":"s=input()\nn=len(s)\/\/2\n\nfor x in range(1,n):\n  if s[:n-i]==s[n-i:2*n-2*i]:\n    print(2*n-2*i)\n    break",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s425135887":{
    "code_string":"s = input()\nfor i in range(int(len(s) + 1) \/ 2):\n  if s[i] != s[int(len(s) + 1) \/ 2]:\n    del[len(s) - 1]\nprint(len(s) + 1)",
    "error_obj":"SyntaxError: cannot delete operator"
  },
  "s431333695":{
    "code_string":"s=list(input())\nfrom copy import copy\nt=s.copy()\n\nfor i in range(len(t)):\n  if len(s)%2==0 and s[:len(s)\/2]==s[len(s)\/2:]:\n    print(len(s))\n    exit()\n  else:\n    s.pop(-1)\n    ",
    "error_obj":"TypeError: slice indices must be integers or None or have an __index__ method"
  },
  "s196987157":{
    "code_string":"from collections import deque\nfrom typing import List\n\n\ndef main():\n    n = int(input())\n    v = input().split(\"\")\n    print(pp(n, v))\n\n\ndef pp(n: int, v: List[str]) -> List[str]:\n    x = []\n    y = deque([])\n\n    if n % 2 == 0:\n        for i in range(n):\n            if i % 2 == 0:\n                y.append(v[i])\n            else:\n                x.append(v[i])\n    else:\n        for i in range(n):\n            if i % 2 == 0:\n                x.append(v[i])\n            else:\n                y.append(v[i])\n\n    ret = []\n    for i in range(len(x)):\n        ret.append(x.pop())\n\n    for i in range(len(y)):\n        ret.append(y.popleft())\n\n    return ret\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: empty separator"
  },
  "s878317355":{
    "code_string":"n = int(input())\na = list(map(int,input().split()))\nb = []\nfor i in range(n):\n  b.append(0)\nk = 0\nif(n%2==1):\n  k = (n-1)\/\/2\nelse:\n  k = n\/\/2\nfor i in range(n):\n  if(i%2==0):\n    print(a[i])\n    print(k+i\/\/2)\n    b[k+i\/\/2]=a[i]\n  else:\n     print(a[i])\n    b[k-(i+1)\/\/2]=a[i]\nprint(b)\n  \n  \n \n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s520946097":{
    "code_string":"n = int(input())\nl = list(map(int,input().split()))\na = [l[0]]\nif n % 2 ==1:\n  for i in range(1,n):\n    if i % 2 == 1:\n      a.insert(0,l[i])\n    else:\n      a.append(l[i])\nelse:\n  for i in range(1,n):\n    if i % 2 == 1:\n      a.appen(l[i])\n    else:\n      a.insert(0,l[i])\nprint(a)\n  ",
    "error_obj":"AttributeError: 'list' object has no attribute 'appen'"
  },
  "s613646824":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in a:\n  b.append(i)\n  b.reverse()\nprint(' '.join(b))",
    "error_obj":"TypeError: sequence item 0: expected str instance, int found"
  },
  "s701009510":{
    "code_string":"4 3 6",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s609853690":{
    "code_string":"x,a,b = map(int, input().split())\nif b-a < 1:\n    print(\"delicious\")\nelif b-a = 1:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s780833159":{
    "code_string":"x,a,b = map(str,input().split())\nif a>b:\n    print('delicious')\nelif x>=b-a:\n    print('safe')\nelse:\n    print('dangerous')\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s805491867":{
    "code_string":"x,a,b = (int(x) for x in input().split())\nif a < b:\n  if b-a > c:\n    print ('dengerous')\n  else:\n    print ('safe')\nelse:\n  print ('delicious')\n",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s709185635":{
    "code_string":"x,a,b=map(int,input())\nn=a-b\nif n >= 0:\n  print(\"delicious\")\nelif x+n >=0:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s022416923":{
    "code_string":"if b - a <= 0:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s367858013":{
    "code_string":"import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 6)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\na,b,c =I()\nans = min(a+b,b+c)\nprint(min(ans,a+c))\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s744697103":{
    "code_string":"n=int(input())\na=[]\nt=[]\nt.append(1)\nfor i in range(n):\n  a.append(input())\n\nx=a[0]\nwhile True:\n  if x==2:\n    print(len(t))\n    break\n  elif x in t:\n    print(-1)\n    break\n  else:\n    t.append(x)\n    y=x\n    x=a[y-1]\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s200190772":{
    "code_string":"# ABC065_B\nN = int(input())\nA = [int(input()) for _ in range(N)]\nnext = A[0]\nans = -1\ncnt = 0\nfor i in range(N):\n    next = A[next]\n    cnt += 1\n    if next == 2:\n        ans = cnt\n        break\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s691459335":{
    "code_string":"N = int(input())\nl = [int(input()) for i in range(N)]\nindex = 0\ncount = 0\nfor j in range(N):\n    index = l[index]\n    count += 1\n    if index == 2:\n        print(count)\n        exit()\nprint(-1)",
    "error_obj":"IndexError: list index out of range"
  },
  "s521941607":{
    "code_string":"n=int(input())\na=[input() for i in range(n)]\nbu=0\nend=-1\nfor i in range(n):\n   if bu==1:\n    end=i-1\n    break\n  bu=a[bu]-1\nprint(end)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s535094407":{
    "code_string":"N = int(input())\na = [int(input()) for i in range(n)]\n\n#\u6700\u521d\u306f\u30dc\u30bf\u30f3\uff11\u304c\u5149\u3063\u3066\u3044\u308b\nindex = 1\n#\u62bc\u3057\u305f\u56de\u65700\u304b\u3089\u30b9\u30bf\u30fc\u30c8\ncount = 0\n\nwhile count < N:\n  \n  if a[index-1]==2:\n    count += 1\n    print(count)\n    exit()\n    \n  else:\n    count += 1\n    #\u6b21\u306b\u5149\u308b\u30dc\u30bf\u30f3\n    index=a[index-1]\n\nprint(-1)\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s555809989":{
    "code_string":"cnt = 1\nl = a[0]\nfor _ in range(N):\n    if l in a:\n        l = a[l-1]\n        cnt += 1\n        if l == 2:\n            print(cnt)\n            break\nelse:\n    print(-1)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s546927638":{
    "code_string":"N = int(input())\nA = [0 * N]\nfor i in range(N):\n    A[i] = int(input()) - 1 # \u914d\u5217\u306b\u5bfe\u5fdc\nindex = 0\ntrials = -1\nfor i in range(N):\n    index = A[index]\n    if index == 1:\n        trials = i + 1\n        break\nprint(trials)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s624263966":{
    "code_string":"n = int(input())\na = [0,int(input()) for i in range(n)]\ncnt = 1\nnext_a = a[1]\nwhile cnt <= 10**5:\n    next_a = a[next_a]\n    cnt += 1\n    if next_a == 2:\n        break\n\nif cnt < 10**5:\n    print(cnt)\nelse:\n    print(-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s145020076":{
    "code_string":"n = int(input())\na = []\ns = [1]\nt = 1\nans = 0\nfor i in range(n):\n  a.append(int(input())\nwhile t != 2:\n  t = a[t-1]\n  s.append(t)\n  if s.count(t) == 2:\n    ans = -1\n    break\n  ans += 1\nprint(ans)\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s432622355":{
    "code_string":"n = int(input())\nal = [int(input()) for _ in range(n)]\n\npos = 0\nfor i in range(N):\n    pos = A[pos] - 1\n    if (pos == 1):\n        print(i+1)\n        exit()\nprint(-1)\n",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s349774298":{
    "code_string":"from math import factorial as f\n\nn, m = map(int(), input().split())\n\nif n == m:\n    print((f(n) ** 2 * 2) % (10 ** 9 + 7))\nelif abs(n - m) == 1:\n    print((f(n) * f(m)) % (10 ** 9 + 7)) \nelse:\n    print(0)",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s202489364":{
    "code_string":"ans = 1\nif abs(N-M) >= 2:\n  print(0)\nelif abs(N-M) == 1:\n  for i in range(1,min(N,M)+1):\n    ans *= i\n    ans = ans % (10**9 + 7)\n  ans = ans**2 * max(N,M)\n  ans = ans % (10**9 + 7)\n  print(ans)\nelif abs(N-M) == 0:\n  for i in range(1,N+1):\n    ans *= i\n    ans = ans % (10**9 + 7)\n  ans = ans**2\n  ans *= 2\n  ans = ans % (10**9 + 7)\n  print(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s645316177":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\nfrom functools import reduce\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nn, m = rm()\nif n == m:\n    print((math.factorial(n) * math.factorial(m) * 2) % mod)\nelif abs(n-m) == 1:\n    print((math.factorial(n) * math.factorial(m) % mod)\nelse:\n    print(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s363757497":{
    "code_string":"\ndef main():\n  p=10**9+7\n  def modpfac(n):\n    ret=1\n    for i in range(1,n+1):\n      ret*=i % p\n    return ret\n  n,m=map(int,input().split())\n  if abs(m-n)>1:\n    return print(0)\n  elif abs(m-n)=1:\n    return print(modpfac(n)*modpfac(m)%p)\n  else:\n    return print(2*modpfac(n)*modpfac(m)%p)\n\nmain()\n  \n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s395003242":{
    "code_string":"n, m = map(int, input().split())\n\nimport math\nif n == m:\n    dog = math.factorial(n)\n    mon = math.factorial(m)\n    ans = dog * mon * 2\nelif n == m + 1 or n == m - 1:\n    dog = math.factorial(n)\n    mon = math.factorial(m)\n    ans = dog * mon\nelse:\n    ans = 0\n\nprint(ans\u3000\/\/ (10 ** 9 + 7))",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s523863292":{
    "code_string":"from copy import deepcopy as copy\nfrom operator import itemgetter\n\nclass UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.par = [-1]*(n+1)#\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u304c\u3069\u306e\u8981\u7d20\u306e\u5b50\u3067\u3042\u308b\u304b\n\n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]#\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306e\u6839\u3092\u518d\u5e30\u7684\u306b\u6c42\u3081\u308b\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.par[x] > self.par[y]:\n            x, y = y, x\n        \n        self.par[x] += self.par[y]\n        self.par[y] = x\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)#x,y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u3069\u3046\u304b\n    \n    def size(self, x):\n        return -self.par[self.find(x)]\n    \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if root == self.find(i)]        \n\ndef main():\n    n = int(input())\n    bridge = [None]*n\n    for i in range(n):\n        bridge[i] = [int(x) for x in input().split()]+[i]\n\n    judge = []\n\n    bridge.sort()\n    heapq.heapify(judge)\n    for i in range(n-1):\n        judge.append((bridge[i+1][0]-bridge[i][0], bridge[i][2], bridge[i+1][2]))\n\n    bridge.sort(key=itemgetter(1))\n    for i in range(n-1):\n        judge.append((bridge[i+1][1]-bridge[i][1], bridge[i][2], bridge[i+1][2]))\n    \n    judge.sort()\n    union = UnionFind(n)\n    count = 0\n    cost = 0\n    while True:\n        c, i, j = heapq.heappop(judge)\n        if union.same(i, j):\n            continue\n        union.union(i, j)\n        cost += c\n        count += 1\n        if count == n-1:\n            break\n    \n    print(cost)\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"NameError: name 'heapq' is not defined"
  },
  "s116798485":{
    "code_string":"n,m=map(int,input().split())\ndef C(n, r ,mod=10**9+7):\n    if n-r<r: r=n-r\n    if r == 0: return 1\n    if r == 1: return n\n\n    numerator = [n - r + k + 1 for k in range(r)]\n    denominator = [k + 1 for k in range(r)]\n\n    for p in range(2,r+1):\n        pivot = denominator[p - 1]\n        if pivot > 1:\n            offset = (n - r) % p\n            for k in range(p-1,r,p):\n                numerator[k - offset] \/= pivot\n                denominator[k] \/= pivot\n\n    result = 1\n    for k in range(r):\n        if numerator[k] > 1:\n            result *= int(numerator[k]) %mod\n\n    return result % mod\nprint(C(a+1,b))",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s397289295":{
    "code_string":"a, b, c = map(input().split())\nint(x) = a + b + c\nif x % 4 == 0:\n  print('YES')\nelse:\n  print('NO')",
    "error_obj":"SyntaxError: cannot assign to function call"
  },
  "s762181227":{
    "code_string":"r g b = map(int, input().split())\nx = r*100+g*10+b\nif x%4==0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s220472198":{
    "code_string":"# 100\u306e\u4f4dr,10\u306e\u4f4dg,1\u306e\u4f4d\uff42\u306b\u6574\u6570\u3092\u5165\u529b\nr,g,b = map(int,input().split())\n# 100r+10g+b\u304c4\u306e\u500d\u6570\u306a\u3089YES\u3001\u9055\u3046\u306a\u3089NO\nif (100r + 10g +b) \/\/ 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s531033410":{
    "code_string":"r,g,b=input().split()\nif int(t+g+b)%4==0:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n  ",
    "error_obj":"NameError: name 't' is not defined"
  },
  "s322937244":{
    "code_string":"S_list = list(map(int,input().split()))\n \nr, g, b = S_list\nif (\uff52 \uff0b g + b) % 4 == 0 :\n    result = \"YES\"\nelse:\n    result = \"NO\"\nprint(result)",
    "error_obj":"SyntaxError: invalid character '\uff0b' (U+FF0B)"
  },
  "s072399945":{
    "code_string":"r,g,b = map(int,input()).split()\n\na = r * 100 + g * 10 + b\nif a % 4 == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n",
    "error_obj":"AttributeError: 'map' object has no attribute 'split'"
  },
  "s205306203":{
    "code_string":"r = int(input())\ng = int(input())\nb = int(input())\n\n\ns = 100*r+10*b+g\n\nif s%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 3 2'"
  },
  "s517162080":{
    "code_string":"rgb = int(''.join(input()))\nif rgb % 4 == 0:\n    print('Yes')\nelse:\n    print('No')\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '4 3 2'"
  },
  "s146150700":{
    "code_string":"# \u5165\u529b\n# r, g, b = map(str, input().split())\nr = input()\ng = input()\nb = input()\n\n\n# \u51e6\u7406&\u51fa\u529b\nnumber = int(r + g + b)\nif number % 4 == 0:\n    print('Yes')\nelse:\n    print('No')\n\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s140262537":{
    "code_string":"r,g,b = map(str,input().split())\nlist_C = [r,g,b]\nnum = int(''.join(list_c))\nif num%4 == 0:\n  print('YES')\nelse:\n  print('NO')",
    "error_obj":"NameError: name 'list_c' is not defined"
  },
  "s081159992":{
    "code_string":"r,g,b=map(int,input().split())\nprint('YES' if (10*g+b)%4==0 else 'NO'\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s535951642":{
    "code_string":"a,b,c=input().split()\na=int(a)\nb=int(b)\nc=int(c)\nif ((100*a+10*b+c)%4)=0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s040108436":{
    "code_string":"a = int(input().replace(' ', ''))\nif a % 4 == 0: print('YES') else: print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s300001481":{
    "code_string":"r,g,b=input().split()\nn=int(\"r+g+b\")\nif n%4==0:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'r+g+b'"
  },
  "s470199838":{
    "code_string":"r, g, b = map(int, input().split())\nnum = 10*y + z\nif num % 4 == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n",
    "error_obj":"NameError: name 'y' is not defined"
  },
  "s670796296":{
    "code_string":"# ABC064_B\nN = int(input())\nA = [list(map(int,input().split()))]\nprint(max(A)-min(A))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'list'"
  },
  "s547902435":{
    "code_string":"N = int(input())\nA = sorted(map(int, input().split()))\nA[0] = 0\nd = 0\nfor i in range(1, N+1):\n    d += A[i] - A[i-1]\nprint(d)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s316052664":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\nfrom functools import reduce\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nn = ri()\nli = rl()\nprint(max(li) - min(li)\n\n\n\n\n\n\n\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s093711709":{
    "code_string":"n = int(input())\nA = list(input().split())\nprint(max(A)-min(A))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s563899424":{
    "code_string":"n=int(input())\na=[int(input()) for _ in range(n)]\nprint(max(a)-min(a))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 3 7 9'"
  },
  "s001344748":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nprint(max(a)-min(b))",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s143292003":{
    "code_string":"a=input()\na=int(a)\nb=list(map(int,input().split()))\nb.sort()\nprint(b[a]-b[0])",
    "error_obj":"IndexError: list index out of range"
  },
  "s109816075":{
    "code_string":"N = int(input())\na = map(int, input().split())\n\nprint(max(a) - min(a))",
    "error_obj":"ValueError: min() arg is an empty sequence"
  },
  "s448229233":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\na.sort()\nprint(a[n-1]a[0])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s214581940":{
    "code_string":"def actual(N, A):\n    return max(A) - min(A)\n\nN = int(input())\nA = map(int, input().split())\n\nprint(actual(N, A))",
    "error_obj":"ValueError: min() arg is an empty sequence"
  },
  "s397793235":{
    "code_string":"n=int(input())\nfor i in range(n):\n    a=list(map(int,input().split()))\na.sort()\nprint(a[n-1]-a[0])",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s295781640":{
    "code_string":"_,*aa = map(int, open(1).read().split())\n\nprint(max(aa) - min(aa))",
    "error_obj":"OSError: [Errno 9] Bad file descriptor"
  },
  "s665607956":{
    "code_string":"n = int(input())\na = [int(input()) for i in range(n)]\nprint(max(a)-min(a))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 3 7 9'"
  },
  "s014580968":{
    "code_string":"\nn=int(input())\na=list(map(int,input().split()))\n\ncolor=[]\nfree=0\ncount=0\nfor i in a:\n    if i\/\/400<8 and i\/\/400 not in color:\n        color.append(i\/\/400)\n        Sans+=1\n    elif i>=3200:\n        free+=1\n        \nMans=Sans\nif free+count>8:\n    Mans=8\nelse:\n    Mans=count+free\n    \nprint(Sans,Mans)\n",
    "error_obj":"NameError: name 'Sans' is not defined"
  },
  "s532777539":{
    "code_string":"n = int(input())\n\na = list(map(int, input().split()))\n\nc = [0]*9\nfor i in a:\n  t = i \/\/ 400\n  if t < 8:\n    c[t] = 1\n  else:\n    c[8] += 1\ncmin = max(sum(c[:-1]), min(c[8], 1))\ncmax = min(sum(c))\nprint(cmin, cmax)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s334073818":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\n\nhai = 0\ntya = 0\nmizu = 0\nao = 0\nki = 0\ndai = 0\naka = 0\nmu = 0\n\nfor a in A:\n  if a <= 399:\n    hai = 1\n  elif a <= 799:\n    tya = 1\n  elif a <= 1199:\n    mizu = 1\n  elif a <= 1599:\n    ao = 1\n  elif a <= 1999:\n    ki = 1\n  elif a <= 2399:\n    dai = 1\n  elif a <= 3199:\n    aka = 1\n  else:\n    mu += 1\n    \nmax_num = min(8, hai + tya + mizu + ao + ki + dai + aka + mu)\nmin_num = max(hai + tya + mizu + ao + ki + dai + aka)\n\nprint(min_num, max_num)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s140545865":{
    "code_string":"n = int(input())\na = [int(i) for i in input().split()]\ncolor = [0] * 8\nany = 0\nfor i in a:\n    if 1 <= i <= 399:\n        color[0] = 1\n    elif 400 <= i <= 799:\n        color[1] = 1\n    elif 800 <= i <= 1199:\n        color[2] = 1\n    elif 1200 <= i <= 1599:\n        color[3] = 1\n    elif 1600 <= i <= 1999:\n        color[4] = 1\n    elif 2000 <= i <= 2399:\n        color[5] = 1\n    elif 2400 <= i <= 2799:\n        color[6] = 1\n    elif 2800 <= i <= 3199:\n        color[7] = 1\n    else:\n        any += 1\nm = max(sum(color), 1)\nM = min(sum(color) + any)\nprint(m, M)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s904706053":{
    "code_string":"n = int(input())\nA = list(map(int, input().split()))\n\nColors = []\nHigh_scorer = []\nfor a in A:\n    if a < 400:\n        Colors.append(\"Gray\")\n    if 400 <= a and a < 800:\n        Colors.append(\"Brown\")\n    if 800 <= a and a < 1200:\n        Colors.append(\"Green\")\n    if 1200 <= a and a < 1600:\n        Colors.append(\"Light_blue\")\n    if 1600 <= a and a < 2000:\n        Colors.append(\"Blue\")\n    if 2000 <= a and a < 2400:\n        Colors.append(\"Yellow\")\n    if 2400 <= a and a < 2800:\n        Colors.append(\"Orange\")\n    if 2800 <= a and a < 3200:\n        Colors.append(\"Red\")\n    if 3200 <= a:\n        High_scorer.append(a)\n\nMIN = len(set(Colors))\nH = len(High_scorer)\n\nMIN >= 1:\n    print(MIN, (MIN+H))\nMIN = 0:\n    print(1, H)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s534959099":{
    "code_string":"N = int(input())\na = list(map(int, input().split()))\ncolor = set()\nrainbow = 0\n\nfor n in range(N):\n  if 1 <= a[n] < 400:\n    color.add(\"gray\")\n  elif 400 <= a[n] < 800:\n    color.add(\"brown\")\n  elif 800 <= a[n] < 1200:\n    color.add(\"green\")\n  elif 1200<= a[n] < 1600:\n    color.add(\"water\")\n  elif 1600 <= a[n] < 2000:\n    color.add(\"blue\")\n  elif 2000 <= a[n] < 2400:\n    color.add('yellow')\n  elif 2400 <= a[n] < 2800:\n    color.add('orange')\n  elif 2800 <= a[n] < 3200:\n    color.add('red')\n  else:\n    rainbow += 1\n\nif color_min > rainbow:\n  color_min = len(color)\nelse:\n  color_min = rainbow\n  \ncolor_max = color_min + rainbow\n\n    \nprint(f'{color_min} {color_max}')\n",
    "error_obj":"NameError: name 'color_min' is not defined"
  },
  "s065056106":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\n\nrate=[0]*9\nover=0\n\nfor i in a:\n  for j in range(1,9):\n    if 400*(j-1) <= i < 400*j:\n      rate[j]=1\n      break\n    elif i >= 3200:\n      over+=1\n      break\n\nansmin = rate.counta(1)\nansmax = rate.count(1)\nif ansmin == 0:\n  ansmin=1\n\nif over > 0:\n  ansmax = ansmax + over\n    \n#print(rate,over)\nprint(ansmin, ansmax)",
    "error_obj":"AttributeError: 'list' object has no attribute 'counta'"
  },
  "s788873763":{
    "code_string":"N = int(input())\na = [int(i) for i in input().split()]\nlist = {}\n\n\nfor i in a:\n    if 1 <= i <= 399:\n        list[0] = 1\n    elif 400 <= i <= 799:\n        list[1] = 1\n    elif 800 <= i <= 1199:\n        list[2] = 1\n    elif 1200 <= i <= 1599:\n        list[3] = 1\n    elif 1600 <= i <= 1999:\n        list[4] = 1\n    elif 2000 <= i <= 2399:\n        list[5] = 1\n    elif 2400 <= i <= 2799:\n        list[6] = 1\n    elif 2800 <= i <= 3199:\n        list[7] = 1\n    else:\n        list[8] += 1\n\nmin = len(list)\n\n\nif list[8] > 0:\n    max = len(list) + chin\nelse:\n    max = len(list)\n\nprint(min,max)\n",
    "error_obj":"KeyError: 8"
  },
  "s181840449":{
    "code_string":"n = int(input())\nrate = list(map(int,input().split()))\nratecolor = 0\nfree = 0\nratecolor = 0\ncolor = [0]*9\nfor i in range(n):\n        if(rate[i] >= 3200):\n            free += 1\n            break\n    for j in range(9):\n        if(rate[i] < j*400 + 400):\n            if(color[j] == 0):\n                color[j] += 1\n                ratecolor += 1\n                break\n\nprint(ratecolor if ratecolor != 0 else 1,ratecolor+free)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s952085414":{
    "code_string":"#\n# abc064 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"4\n2100 2500 2700 2700\"\"\"\n        output = \"\"\"2 2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5\n1100 1900 2800 3200 3200\"\"\"\n        output = \"\"\"3 5\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"20\n800 810 820 830 840 850 860 870 880 890 900 910 920 930 940 950 960 970 980 990\"\"\"\n        output = \"\"\"1 1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    C = [0] * 9\n    for a in A:\n        for i in range(8):\n            if 400*i <= a <= 400*i+399:\n                C[i] = 1\n                break\n        else:\n            C[8] += 1\n\n    print(f\"{max(1, C[:8].count(1))} {C[:8].count(1)+C[8])}\")\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n",
    "error_obj":"SyntaxError: f-string: unmatched ')'"
  },
  "s610890343":{
    "code_string":"n=int(input())\nr=list(map(int,input().split()))\nrlist=[]\ndef color(n):\n    if n<400:\n        return 1\n    elif n<800:\n        return 2\n    elif n<1200:\n        return 3\n    elif n<1600:\n        return 4\n    elif n<2000:\n        return 5 \n    elif n<2400:\n        return 6 \n    elif n<2800:\n        return 7 \n    elif n<3200:\n        return 8 \n    else:\n        return 9\n\nfor _ in range(n):\n    co=color(r[_])\n    rlist.append(co)\n\nans1=len(set(rlist))\nif rlist.count(9)==0:\n    print(ans1,ans1,sep=\" \")\n\nelif ans1==1:\n    print(1,min(8,rlist.count(9),sep=\" \")\n\nelse:\n    print(min(8,ans1-1),min(8,ans1-1+rlist.count(9)),sep=\" \")\n         ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s719689821":{
    "code_string":"from collections import defaultdict\nN = int(input())\nal = list(map(int,input().split()))\ncnt = 0\ndic = defaultdict(int)\nfor i in al:\n    if 1<= i <= 399:\n        dic['gray'] += 1\n    elif 400 <= i <= 799:\n        dic['brown'] += 1\n    elif 800 <= i <= 1199:\n        dic['green'] += 1\n    elif 1200 <= i <= 1599:\n        dic['cyan'] += 1\n    elif 1600 <= i <= 1999:\n        dic['blue'] += 1\n    elif 2000 <= i <= 2399:\n        dic['yellow'] += 1\n    elif 2400 <= i <= 2799:\n        dic['orange'] += 1\n    elif 2800 <= i <= 3199:\n        dic['red'] += 1\n    else:\n        cnt += 1\n\n\nansmax = len(dic.keys()) + cnt\nif ansmax > n:\n    ansmax = n\n\n\nansmin = len(dic.keys())\nif ansmin == 0 and cnt >= 1:\n    ansmin = 1\n\nprint(ansmin,ansmax)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s522115372":{
    "code_string":"n = int(input())\nnums = list(map(int, input().split()))\n\nnum_free = 0\nnum_color = [False] * 8\nfor rate in nums:\n    if rate < 3200:\n        num_color(rate \/\/ 400) = True\n    else:\n        num_free += 1\n\nans = sum(num_color)\nprint('{} {}'.format(ans, ans + num_free))\n",
    "error_obj":"SyntaxError: cannot assign to function call"
  },
  "s650215137":{
    "code_string":"N = int(input())\nN_List = list(map(int,input().split()))\nNR_List = [i \/\/ 400 for i in N_List]\nNumber_NRD = len(set([i for i in NR_List if i < 8]))\nNumber_NRU = len([i for i in NR_List if i >= 8])\nmax_p= (Number_NRD + Number_NRU,8)[Number_NRD +Number_NRU>=8]\nmin_P= (Number_NRD,1)[Number_NRD == 0]\nprint(str(min_p) + \" \" + str(max_p))",
    "error_obj":"NameError: name 'min_p' is not defined"
  },
  "s213295157":{
    "code_string":"N = int(input())\na = list(map(int,input().split()))\ncolor = [False]*8\nover_human = 0\nfor i in a:\n    if(i<=399):\n        color[0]=True\n    elif(i<=799):\n        color[1]=True\n    elif(i<=1199):\n        color[2]=True\n    elif(i<=1599):\n        color[3]=True\n    elif(i<=1999):\n        color[4]=True\n    elif(i<=2399):\n        color[5]=True\n    elif(i<=2799):\n        color[6]=True\n    elif(i<=3199):\n        color[7]=True\n    elif(i>=3200):\n        over_human += 1\nif(color.count(True)==0):\n    print(1,color.count(True)+over_human))\nelse:\n    print(color.count(True),color.count(True)+over_human))\n",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s444583807":{
    "code_string":"N = int(input())\nR = list(map(int, input().split()))\nX = [0]*8\np = 0\nfor r in R:\n  if r >= 3200:\n    p += 1\n  else:\n    X[r\/\/400] = 1\n\ns = sum(X)\nif s == 0:\n  print(str(1) + \" \" + str(cnt))\nelse:\n  print(str(s) + \" \" + str(s + cnt))",
    "error_obj":"NameError: name 'cnt' is not defined"
  },
  "s673205472":{
    "code_string":"w = []\nnum = 0\nfor i in a:\n    if 1 <= i <= 399:\n        if 1 not in w:\n            w.append(1)\n    elif 400 <= i <= 799:\n        if 400 not in w:\n            w.append(400)\n    elif 800 <= i <= 1199:\n        if 800 not in w:\n            w.append(800)\n    elif 1200 <= i <= 1599:\n        if 1200 not in w:\n            w.append(1200)\n    elif 1600 <= i <= 1999:\n        if 1600 not in w:\n            w.append(1600)\n    elif 2000 <= i <= 2399:\n        if 2000 not in w:\n            w.append(2000)\n    elif 2400 <= i <= 2799:\n        if 2400 not in w:\n            w.append(2400)\n    elif 2800 <= i <= 3199:\n        if 2800 not in w:\n            w.append(2800)\n    else:\n        num += 1\nif 0 < len(w):\n    print(len(w), len(w)+num)\nelse:\n    print(1, len(w)+num)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s417003111":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\na1=0\nb=0\nc=0\nd=0\ne=0\nf=0\ng=0\nh=0\nans=0\nfor i in range(n):\n  if 1<=a[i]<=399:\n    a1=1\n  elif 400<=a[i]<=799:\n    b=1\n  elif 800<=a[i]<=1199:\n    c=1\n  elif 1200<=a[i]<=1599:\n    d=1\n  elif 1600<=a[i]<=1999:\n    e=1\n  elif 2000<=a[i]<=2399:\n    f=1\n  elif 2400<=a[i]<=2799:\n    g=1\n  elif 2800<=a[i]<=3199:\n    h=1\n  else:\n    ans+=1\n\nx=a1+b+c+d+e+f+g+h\nif a1=b=c=d=e=f=g=h=0:\n  print(1,ans)\nelse:\n  print(x,x+ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s531049110":{
    "code_string":"def main():\n    n = int(input())\n    As = list(map(int, input().split()))\n    nums = []\n    rainbow = 0\n    for A in As:\n        num = A \/\/ 400\n        if num < 8:\n            if num not in nums:\n                nums.append(num)\n        else:\n            rainbow += 1\n    ans_max = len(nums)+rainbow\n    ans_min = max(len(1, nums))\n    print(ans_min, ans_max)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: len() takes exactly one argument (2 given)"
  },
  "s897993770":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nb=[0]*9\nfor i in range(n):\n  if a[i]<400:\n    b[0]+=1\n  elif a[i]<800:\n    b[1]+=1\n  elif a[i]<1200:\n    b[2]+=1\n  elif a[i]<1600:\n    b[3]+=1\n  elif a[i]<2000:\n    b[4]+=1\n  elif a[i]<2400:\n    b[5]+=1\n  elif a[i]<2800:\n    b[6]+=1\n  elif a[i]<3200:\n    b[7]+=1\n  else:\n    b[8]+=1\n    \nmin=8-b[:8].count(0)\nmax=min+b[8]\n\nif min=0:\n  min=1\nprint(min,max)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s480293487":{
    "code_string":"n = input()\na = [int(x) for x in input().split() if x < 3200]\nc = len(set([x \/\/ 400 for x in a]))\nprint(max(c, 1), c + n - len(a))",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s686277871":{
    "code_string":"#C - Colorful Leaderboard \n\nN = int(input())\nA = list(map(int, input().split()))\n\nn = 399\na, b, c, d, e, f, g, h, z = 0,0,0,0,0,0,0,0,0\n\nfor i in A:\n    if i >= 1 and i <= n:\n        a = 1\n    elif i >= 400 and i <= n + 400:\n        b = 1\n    elif i >= 2*400 and i <= 2*400 + n:\n        c = 1\n    elif i >= 3*400 and i <= 3*400 + n:\n        d = 1\n    elif i >= 4*400 and i <= 4*400 + n:\n        e = 1\n    elif i >= 5*400 and i <= 5*400 + n:\n        f = 1\n    elif i >= 6*400 and i <= 6*400 + n:\n        g = 1\n    elif i >= 7*400 and i <= 7*400 + n:\n        h = 1\n    else:\n        z += 1\n\nmin_num, max_num = 0, 0\n        \nmin_num = a+b+c+d+e+f+g+h\n\nmax_num = min(min_num + z)\nmin_num = max(1, min_num)\n\nprint(min_num,max_num)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s560289023":{
    "code_string":"n = int(input())\ns = input()\nwhile True:\n  c = 0\n  for i in range(len(s)):\n    if s[i] == \"(\":\n      c += 1\n    else:\n      c -= 1\n    if c < 0:\n      s = \"(\" + s\n      break\n  if c > 0:\n    s = s + \")\"\n  if c == 0:\n    print(s)\n  \n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s812616834":{
    "code_string":"_ = input()\nS = input()\n\nneeds_right = 0, needs_left = 0\nfor c in S:\n    if c == '(':\n        needs_right += 1\n    else:\n        if needs_right == 0:\n            needs_left += 1\n        else:\n            needs_right -= 1\n\nprint('(' * needs_left + S + ')' * needs_right)\n\n",
    "error_obj":"SyntaxError: cannot assign to literal"
  },
  "s133131772":{
    "code_string":"# coding = SJIS\n\na, b = map(int, input())\n\nif a + b >= 10:\n    print(\"error\")\nelse:\n    print(a + b)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s083714532":{
    "code_string":"A, B = map(int, input().split())\n \nif A + B < 10: print(str(C))\nelse: print('error')",
    "error_obj":"NameError: name 'C' is not defined"
  },
  "s194244792":{
    "code_string":"A, B = map(int,input(),split())\nif A+B >= 10:\n  print('error')\nelse:\n  print(A+B)",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s672144551":{
    "code_string":"n=int(input())\na = [int(input()) for _ in range(n)]\na.sort()\nfor i in range(n):\n    if sum(a)%10 == 0:\n        if a[i]%10 == 0:\n            continue\n        else:\n            a[i]=0\n    else:\n        print(sum(a))\n        exit(0)\nprint(0)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '6 3'"
  },
  "s989470150":{
    "code_string":"a = int(input())\nb = int(input())\n\ns = 'error'\n\nif a+ b < 10:\n        s = a+b\n\nprint(s)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '6 3'"
  },
  "s949838826":{
    "code_string":"A, B = map(int, input().split())\nif A + b >= 10:\n    print(\"error\")\nelse:\n    print(A+B)",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s617914362":{
    "code_string":"A = map(int, input().split())\ntotal = A[0] + A[1]\nif total >= 10:\n\tprint('error')\nelse:\n\tprint(total)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s246550121":{
    "code_string":"a,b = map(int,input())\nprint(a+b if a+b < 10 else \"error\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s488842102":{
    "code_string":"a,b = int(input().split())\n\nsum = a+b\nif(sum>=10):\n  print(\"error\")\nelse:\n  print(sum)\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s404362751":{
    "code_string":"A,B=map(in,input().split());print(A+B if A+B<10 else \"error\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s718600921":{
    "code_string":"A,B=map(int,input())\nif A+B>=10:\n  print('error')\nelse:\n  print(A+B)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s290662698":{
    "code_string":"A, B = int(input().split())\nif A+B < 10:\n    print(A+B)\nelse:\n    print('error')",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s626470103":{
    "code_string":"A, B = list(map(str,input().split()))\n\nif (A+B)<10:\n    print(A+B)\nelse:\n    print(\"error\")",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s966895688":{
    "code_string":"a,b = map(str, input().split())\nprint(a+b) if a+b <= 10 else print(\"error\")",
    "error_obj":"TypeError: '<=' not supported between instances of 'str' and 'int'"
  },
  "s598607963":{
    "code_string":"s = input()\ns = sort.s\n\nfor i in range(1,len(s)):\n    if s[i] == s[i-1]:\n        print('no')\n        exit()\nprint('yes')",
    "error_obj":"NameError: name 'sort' is not defined"
  },
  "s765653173":{
    "code_string":"s=input()\nw=set()\nfor i in (len(s)):\n    w.add(s[i])\nif len(s)==len(w):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s596199176":{
    "code_string":"N = input()\ndic = defaultdict(int)\n\nfor s in N:\n  dic[s] += 1\n  \n  if dic[s] > 1:\n    print('no')\n    exit()\n\nprint('yes')",
    "error_obj":"NameError: name 'defaultdict' is not defined"
  },
  "s154084852":{
    "code_string":"a=input()\nb=[]\nc=0\nfor i in range(len(a)):\n  b.append(a[i])\nb.sort()\nfor i in range(len(a-1)):\n  if b[i]==b[i+1]:\n    c=c+1\nif c==0:\n  print(\"yes\")\nelse:\n  print(\"no\")",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s534788105":{
    "code_string":"def check(s):\n  for i in range(1, len(s)):\n    if i - 1 in s[i:]:\n      return \"no\"\n  return \"yes\"\n\ns = input()\nprint(check(s))",
    "error_obj":"TypeError: 'in <string>' requires string as left operand, not int"
  },
  "s191638062":{
    "code_string":"S=input\nprint(\"yes\" if len(S)==len(set(S)) else \"no\")",
    "error_obj":"TypeError: object of type 'builtin_function_or_method' has no len()"
  },
  "s484928009":{
    "code_string":"s=input()\nprint(\"yes\" if len(s)==len(set(s) else \"no\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s856034228":{
    "code_string":"s = list(innput())\n\nif len(s) == len(set(s)):\n    print('yes')\nelse:\n    print('no')\n",
    "error_obj":"NameError: name 'innput' is not defined"
  },
  "s284084095":{
    "code_string":"# coding = SJIS\n\na, b = map(int, input().split())\n\nif a + b >= 10:\n    print(\"error\")\nelse:\n    print(a + b)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'uncopyrightable'"
  },
  "s035487084":{
    "code_string":"s = input()\n\nn = []*26\n\nfor e in s:\n  n[e-'a']+=1\n  \nfor i in n:\n  if i>1:\n    print(\"no\")\n    return\nprint(\"yes)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s624985660":{
    "code_string":"import sys\nN = int(input())\nS = [int(input()) for _ in range(N)]\nS.sort()\nt = sum(S)\nif t % 10 != 0:\n    print(t)\n    sys.exit()\n\nfor s in range(S):\n    if (t - s) % 10 != 0:\n        print(t - s)\n        sys.exit()\nprint(0)\n",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s672183089":{
    "code_string":"n = int(input())\nx = 0\nmn = 101\nfor i in range(n):\n  s = int(input())\n  x += s\n  if x % 10 != 0\n    if s < mn:\n      mn = s\nif x % 10 != 0:\n  print(x)\nelse:\n  x -= mn\n  if x % 10 == 0:\n    print(0)\n  else:\n    if x < 0:\n      print(0)\n      exit()\n    print(x)\n        ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s500421144":{
    "code_string":"n = int(input())\ns = list(int(input()) for i in range(n))\n\nans = sum(S)\nsort_S = sorted(S)\n\nif ans % 10 != 0:\n    print(ans)\n    exit()\nelse:\n    for s in sort_S:\n        if s % 10 != 0:\n            ans -= s\n            print(ans)\n            exit()\nprint(0)",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s686475206":{
    "code_string":"a=int(input())\nb=[int(input()) for i in range(a)]\nb.sort()\nc=sum(b)\nd=0\nif c%10!=0:\n  print(c)\nelse:\n  for i in range(a):\n    if b[i]%!=0:\n      d=c-b[i]\n      print(d)\n      break\n  if d==c:\n    print(0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s391034467":{
    "code_string":"N = int(input())\nS = []\n\nfor i in range(N):\n  S.append(int(input()))\n  \nS.sort()\nans = sum(S)\n\nif ans % 10 != 0:\n  print(ans)\n  \nfor i in range(N):\n  if A[i] % 10 != 0:\n    ans -= a[i]\n    print(ans)\n    exit()\n\nprint(0)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s343579472":{
    "code_string":"N = int(input())\nmaxs = 0    \ns = []\nfor i in range(N):\n    cin = int(input())\n    s.append(cin)\n    maxs = max(maxs, cin)\nM = maxs * N + 1\n\ndp = [False * M]\ndp[0] = True\n\nfor x in s:\n    for i in range(M):\n        if i < x: continue\n        if dp[i-x]: dp[i] = True\n\nfor i in range(M):\n    if (M-i)%10 != 0 and dp[M-i]:\n        print(M-i)\nelse:\n    print(0) ",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s959030865":{
    "code_string":"n = int(input())\ns = [int(input()) for _ in range(n)]\n\nsumNum = sum(s)\nif sumNum % 10 != 0:\n  print(sumNum)\n  exit()\n\nt = 0\nfor i in s:\n  if (sumNum - i)%10 != 0:\n    t = max(t, sum-i)\nprint(t)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'builtin_function_or_method' and 'int'"
  },
  "s596035915":{
    "code_string":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, log\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nfrom decimal import Decimal\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10**9 + 7\nfrom decimal import *\n\nN, A, B = MAP()\nh = [INT() for _ in range(N)]\nh.sort(reverse = True)\n\ndef is_ok(x):\n    h_copy = h[:]\n    for i in range(N):\n        h_copy[i] -= B*x\n    cnt = 0\n    for i in range(N):\n        cnt += max(0, ceil(h_copy[i]\/(A-B)))\n    return cnt <= x\n\nwhile l+1 != r:\n\tp = -(-l-r)\/\/2\n\tif is_OK(p):\n\t\tr = p\n\telif is_OK(p)==0:\n\t\tl = p\n\n\nif is_OK(p):\n\tprint(p)\nelse:\n\tprint(p+1)\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s476698787":{
    "code_string":"#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n    long N, A, B;\n    cin >> N >> A >> B;\n    vector<long> h;\n    for (int i=0; i<N; i++){\n        long input;\n        cin >> input;\n        h.push_back(input);\n    }\n\n    \n    long ans = 0;\n    vector<long> temp;\n    while (h.size() != 0){\n        bool first = true;\n        make_heap(h.begin(),h.end());\n        for (auto x : h){\n            if (first) {x -= A; first = false;}\n            else{ x -= B;}\n            if (x > 0) temp.push_back(x);\n        }\n        h.clear();\n        for (auto x : temp) h.push_back(x);\n        temp.clear();\n        ans++;\n    }\n    cout << ans << endl;\n    return 0;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s775857138":{
    "code_string":"N, A, B = map(int, input().split())\nif A > B:\n  print(0)\nelif A == B:\n  print(1)\nelif B-A >=N:\n  print(0)\nelse: \n  print((B-A)*X+1)",
    "error_obj":"NameError: name 'X' is not defined"
  },
  "s366910264":{
    "code_string":"n,a,b = map(int,input().split())\nif(a>b):\n  print(0)\nelse:\n  if(n = 1):\n    if(a!=b):\n      print(0)\n    else:\n      print(1)\n  else:\n    print(b*(n-1)+a-(a*(n-1)+b)+1)\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s063802482":{
    "code_string":"n, a, b = map(int, input().split())\nif (n == 1 and a == b):\n  ans = 1\nelif (n == 1):\n  ans = 0\nelif A > B:\n  ans = 0\nelse:\n  ans = (b - a) * (n - 2) + 1\nprint(ans)",
    "error_obj":"NameError: name 'A' is not defined"
  },
  "s701169803":{
    "code_string":"x,y=map(int,input().split())\nif x>y:\n  x,y=y,x\n\nA=[1,3,5,,7,8,10,12]\nB=[4,6,9,11]\n\nif x==2 or y==2:\n  print('No')\nelif (x in A and y in B):\n  print('No')\nelse:\n  print('Yes')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s158364144":{
    "code_string":"x,y=map(int,input().split())\nif x in gp1 and y in gp1:\n    print('Yes')\nelif x in gp2 and y in gp2 :\n    print('Yes')\nelif x==y==2:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"NameError: name 'gp1' is not defined"
  },
  "s392348180":{
    "code_string":"x,y=map(int,input().split())\na=[1,3,5,7,8,10,12]\nb=[4,6,9,11]\nc=[2]\nif (x in a and y in a):\n    ptint(\"yes\")\nelif   (x in b and y in b):\n    print(\"Yes\")\nelif   (x in c and y in c):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"NameError: name 'ptint' is not defined"
  },
  "s028204179":{
    "code_string":"l1 = [1,3,5,7,8,10,12]\nl2 = [4,6,9,11]\nl3 = [2]\nn = 0\nif x in l1:\n  if y in l1:\n    print ('Yes')\n    n = 1\nelif x in l2:\n  if y in l2:\n    print ('Yes')\n    n = 1\nelse:\n  if y in l3:\n    print ('Yes')\n    n = 1\nif n == 0:\n  print ('No')",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s149903502":{
    "code_string":"a = [1,3,5,7,8,10,12]\nb = [4,6,9,11]\nc = [2]\nx,y=input().split()\nif x,y is in a or x,y is in b:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s496491065":{
    "code_string":"x,y=map(int,input().split())\ngroup_A=[1,3,5,7,8,10,12]\ngroup_B=[4,6,9,11]\nif x in group_A = True and y in group_A =True:\n  print(\"Yes\")\nelif x in group_B = True and y in group_B =True:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s424777412":{
    "code_string":"G = [set([1,3,5,7,8,10,12]), set([4,6,9,11]), set([2])]\ndef check(x, y):\n  for g in G:\n    if x in g and y in g:\n      return True\n  return False\nprint(\"Yes\" if check(x, y) else \"No\")",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s123188549":{
    "code_string":"a=[1,3,5,7,8,10,12]\nb=[4,6,9,11]\nc=map(int,input().split(\" \"))\nprint(\"Yes\") if (c[0] in a and c[1] in a) or (c[0] in b and c[1] in b) else print(\"No\")",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s046079775":{
    "code_string":"x, y = map(int,input().split())\nS1 = [1, 3, 5, 7, 8, 10, 12]\nS2 = [4, 6, 9, 11]\nfor i in range(len(S1)):\n  for j in range(len(S1)):\n    if (S1[i] == x and s1[j] == y) or (S2[i] == x adn S2[j] == y):\n      print(\"Yes\")\n    else:\n      print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s289825348":{
    "code_string":"x , y = map(iint,input().split())\nA = [1,3,5,7,8,10,12]\nB = [4,6,9,11]\nC = [2]\nif x in A and y in A:\n  print(\"Yes\")\nelif  x in B and y in B:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 'iint' is not defined"
  },
  "s442093121":{
    "code_string":"x,y=map(int,input().split())\ns0=1<<(x-1)|1<<(y-1)\ns1=sum(list(map(lambda x:1<<(x-1),[1,3,5,7,8,10,12])))&s0\ns2=sum(list(map(lambda x:1<<(x-1),[4,6,9,11])))&s0\ns3==sum(list(map(lambda x:1<<(x-1),[2])))&s0\n\nif s1==s0 or s2==s0 or s3==s0:\n  print('Yes')\nelse:\n  print('No')\n",
    "error_obj":"NameError: name 's3' is not defined"
  },
  "s879472993":{
    "code_string":"x,y=map(int,input().split())\nG=121313113131\nprint([\"No\",\"Yes\"][G[x-1]==G[y-1]])",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s334102431":{
    "code_string":"n1 = set([1, 3, 5, 7, 8, 10, 12])\nn2 = set([4, 6, 9, 11])\nn3 = set([2])\nnums = set(map(int, input().split())\nprint(\"Yes\" if nums <= n1 or nums <= n2 or nums <= n3 else \"No\")\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s092125664":{
    "code_string":"#49\nH,W = map(int,input().split())\na = []\nfor i in range(H):\n    a.append(input())\n\n\nfor i in range(W+2):\n    print(\"#\",end = \"\")\nprint(\"\")\nfor i in a:\n    print(\"#\",l,\"#\",sep = \"\")\nfor i in range(W+2):\n    print(\"#\",end = \"\")",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s482681901":{
    "code_string":"print('#'*(w+2))\nfor i in range(h):    \n    print('#'+input()+'#')\nprint('#'*(w+2))",
    "error_obj":"NameError: name 'w' is not defined"
  },
  "s185394772":{
    "code_string":"x,y = map(int,input().split())\nfor i in range(x+1):\n    print(\"#\",end = \"\")\nprint(\"#\")\nfor i in range(y):\n    print(\"#\"+input()+\"#\")\nfor i in range(x+1):\n    print(\"#\",end = \"\")\nprint(\"#\")",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s172005457":{
    "code_string":"H,W=int(input().split())\na=[]\na.append('#'*(W+2))\nfor i in range(1,H+1):\n  a.append('#'+input()+'#')\na.append('#'*(W+2))\nfor i in range(H+2):\n  print(a[i])",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s932259050":{
    "code_string":"def answer(H,W,ans):\n    for x in range(1,W):\n        y1 = H \/\/ 2\n        Sa1 = H * x\n        Sb1 = (W - x) * y1\n        Sc1 = (W - x) * (H - y1)\n        M = max(Sa1,Sb1,Sc1)\n        m = min(Sa1,Sb1,Sc1)\n\n        y2 = (W - x) \/\/ 2\n        Sa2 = H * x\n        Sb2 = H * y2\n        Sc2 = H * (W - x - y2)\n        M2 = max(Sa2,Sb2,Sc2)\n        m2 = min(Sa2,Sb2,Sc2)\n\n        if ans > min(M-m,M2-m2):\n            ans = min(M-m,M2-m2)\n\n        return ans\n\nif __name__ == '__main__':\n    H,W = [int(i) for i in input().split()]\n    ans = H * W\n    ans = answer(H,W)\n    \n    H,W = W,H\n\n    if answer(H,W) < ans:\n        ans = answer(H,W)\n\n    print(ans)\n",
    "error_obj":"TypeError: answer() missing 1 required positional argument: 'ans'"
  },
  "s493511561":{
    "code_string":"H,W = [int(i) for i in input().split()]\nans = 0\n\nfor x in range(1,W):\n    y = H \/\/ 2\n    Sa1 = H * x\n    Sb1 = (W - x) * y\n    Sc1 = (W - x) * (H - y)\n    M = max(Sa1,Sb1,Sc1)\n    m = min(Sa1,Sb1,Sc1)\n\n    Sa2 = H * x\n    Sb2 = H * y\n    Sb2 = H * (W - x - y)\n    M2 = max(Sa2,Sb2,Sc2)\n    m2 = min(Sa2,Sb2,Sc2)\n\n    if ans > min(M-m,M2-m2):\n        ans = min(M-m,M2-m2)\n\nprint(ans)\n",
    "error_obj":"NameError: name 'Sc2' is not defined"
  },
  "s749643599":{
    "code_string":"a,b,c = map(int,input().split())\nprint(\"Yes\" if c>=a and c<=B else \"No\")",
    "error_obj":"NameError: name 'B' is not defined"
  },
  "s610674130":{
    "code_string":"a,b,c = map(int,input().split())\nprint(\"Yes\",if a<=c<=b else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s462765926":{
    "code_string":"A, B, C = main(int, input().split())\n \nif (C >= A and C <= B):\n  print(\"Yes\")\n  \nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 'main' is not defined"
  },
  "s228096817":{
    "code_string":"a,b=map(int,input().split())\nif a + b >= 10:\n    print(\"error\")\nelse:\n    print(a + b)",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s292793673":{
    "code_string":"if C >= A:\n    if C <= B:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')",
    "error_obj":"NameError: name 'C' is not defined"
  },
  "s576664071":{
    "code_string":"a,b,c = map(int(input().split()))\n#lis = list(map(int,input().split()))\nprint(\"YES\" if a <= c <= b else \"NO\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s960666405":{
    "code_string":"A, B, C = map(int, input().split())\nprint('YES' if a <= c <= b else 'NO')",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s709392099":{
    "code_string":"\tN,M = list(map(int,input().split()))\nlis = []\nfor i in range(N):\n    lis.append([i+1])\nfor i in range(M):\n    a,b = list(map(int,input().split()))\n    lis[a-1].append(b)\n    lis[b-1].append(a)\nfor i in range(N):\n    print(len(lis[i])-1)\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s097884920":{
    "code_string":"from collections import defaultdict\n\nn,m=map(int,input().split())\nr=[list(map(int,input().split())) for _ in range(n)]\nd=defaultdict(int)\nfor x in r:\n  d[x[0]]+=1\n  d[x[1]]+=1\n\nfor i in range(1,n+1):\n  print(d[i])",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s088833136":{
    "code_string":"N, M = list(map(int, input().split())\nA = [0 for _ in range(N)]\nfor i in range(M):\n  a, b = list(map(int, input().split())\n  A[a-1] += 1\n  A[b-1] += 1\n\nfor i range(N):\n  print(str(A[i]))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s879814832":{
    "code_string":"M,N = map(int,input().split())\nans = [0 for _ in range(N)]\nfor _ in range(M):\n  a,b = map(int,input().split())\n  ans[a-1] += 1\n  ans[b-1] += 1\nfor i in range(N):\n  print(ans[i])",
    "error_obj":"IndexError: list index out of range"
  },
  "s555961071":{
    "code_string":"n, m = map(int, input().split())\n\na = []\n\nfor i in m:\n  a1, a2 = map(int, input().split())\n  a.append(a1)\n  a.append(a2)\n\nfor s in n:\n  print(a.count(s))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s763689048":{
    "code_string":"n,m = map(int, input().split())\ng = [[] for _ in range(n)]\n\nfor i in range(m):\n  a,b = map(int, input().split())\n  g[a-1] = b-1\n  g[b-1] = a-1\n  \nfor nd in g:\n  print(len(nd))",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s323069443":{
    "code_string":"n,m=map(int, input().split())\nroad_num=[0]*n\nfor i in range(m):\n  a,b=map(int, input().split())\n  road_num[a]+=1\n  road_num[b]+=1\nfor i in range(n):\n  print(road_num[i])",
    "error_obj":"IndexError: list index out of range"
  },
  "s266611882":{
    "code_string":"n,m = map(int,input().split())\nx =[0]*n\nfor i in range(m):\n    a,b = map(int,input().split())\n    x[a-1]+=1\n    x[b-1]+=1\nfor i in range(n):\n    print(x[i]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s336248844":{
    "code_string":"n,m = map(int, input().split()) \nAB = [[] for _ in range(n)]\nfor i in range(m):\n    a, b = map(int,input().split())\n    a -= 1\n    b -= 1 \n    AB[a].append(b)\n    AB[b].append(a)\n\nfor i in range(n)\n    print(len(AB[i]))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s525645165":{
    "code_string":"n,m=map(int,input().split())\na=[]\nb=[]\nfor i in range(m):\n    a.append(input())\n    b.append(input())\nfor j in range(n):\n    print(a.count(j+1)+b.count(j+1))\n    ",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s847198330":{
    "code_string":"n,m=map(int,input().split())\nans=[0 for _ in range(n)]\nfor i in range(m):\n  a,b=map(int,input().split())\n  ans[a-1]+=1\n  ans[b-1]+=1\nfor i in range(n):\n  print(a[i])",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s671863717":{
    "code_string":"N, M = map(int, input().split())\nR = [list(map(int, input().split())) for _ in range(N)]\n\nfor i in range(1,N+1):\n    print(R.count(i))\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s412490849":{
    "code_string":"n,m=map(int,input().split())\na_s=[]\nb_s=[]\nfor i in range(m):\n  a,b=map(int,input().split())\n  a_s.append(a)\n  b_s.append(b)\n\nfor i in range(1,N+1):\n  print(a_s.count(i)+b_s.count(i))",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s498952406":{
    "code_string":"mycode = '''\n# distutils: language=c++\n# cython: language_level=3, boundscheck=False, wraparound=False\n# cython: cdivision=True\n# False:Cython \u306fC\u306e\u578b\u306b\u5bfe\u3059\u308b\u9664\u7b97\u30fb\u5270\u4f59\u6f14\u7b97\u5b50\u306b\u95a2\u3059\u308b\u4ed5\u69d8\u3092\u3001(\u88ab\u6f14\u7b97\u5b50\u9593\u306e\u7b26\u53f7\u304c\u7570\u306a\u308b\u5834\u5408\u306e\u632f\u308b\u821e\u3044\u304c\u7570\u306a\u308b)Python\u306eint\u306e\u4ed5\u69d8\u306b\u5408\u308f\u305b\u3001\u9664\u7b97\u3059\u308b\u6570\u304c0\u306e\u5834\u5408\u306bZeroDivisionError\u3092\u9001\u51fa\u3057\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u3092\u884c\u308f\u305b\u308b\u3068\u3001\u901f\u5ea6\u306b 35% \u3050\u3089\u3044\u306e\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u751f\u3058\u307e\u3059\u3002 True:\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u305b\u3093\u3002\n\nctypedef long long LL\n\ncdef extern int __builtin_popcount(unsigned int) nogil\n\nimport numpy as np\n\nimport sys\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline #\u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\n\ncdef ints(): return np.fromstring(readline(), sep=' ', dtype=np.int64)\n\n\ncdef read_matrix(LL H,LL W):\n    #return np.ndarray shape=(H,W) matrix\n    lines=[]\n    cdef LL _\n    for _ in range(H): \n        lines.append(read())\n    lines=' '.join(lines) #byte\u540c\u58eb\u306e\u7d50\u5408\u304c\u3067\u304d\u306a\u3044\u306e\u3067readline\u3067\u306a\u304fread\u3067\n    return np.fromstring(lines, sep=' ',dtype=np.int64).reshape(H,W)\n\n# \u3053\u306e\u554f\u984c\u3092\u3042\u3048\u3066\u30b0\u30e9\u30d5\u306e\u69cb\u9020\u3092\u6301\u3064\u3053\u3068\u3067\u89e3\u304f\nfrom libcpp.vector cimport vector as vec\n\ncdef LL N,M\nN,M=ints()\nAB=read_matrix(M,2)-1\ncdef LL a,b\n\nctypedef vec[vec[LL]] Graph\ncdef Graph graph=Graph(N)\n\nfor a,b in AB:\n    graph[a].push_back(b)\n    graph[b].push_back(a)\n\ncdef vec[int] ans\nfor i in range(N):\n    ans.push_back(graph[i].size())\nprint(*ans, sep='\\n')\n'''\n\nimport sys\nimport os\nif sys.argv[-1] == 'ONLINE_JUDGE':  # \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\n    with open('mycode.pyx', 'w') as f:\n        f.write(mycode)\n    os.system('cythonize -i -3 -b mycode.pyx')\n\nimport mycode\n",
    "error_obj":"ModuleNotFoundError: No module named 'mycode'"
  },
  "s643004210":{
    "code_string":"N, M = open(0).readline().split()\nfrom collections import Counter\ncnt = Counter(open(0).read().split())\nfor i in range(1,int(N)+1):\n    print(cnt[str(i)])",
    "error_obj":"OSError: [Errno 9] Bad file descriptor"
  },
  "s194211653":{
    "code_string":"4 3\n1 2\n2 3\n1 4\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s922610539":{
    "code_string":"N,M=map(int,input().split())\nA=[0]*(N*1)\n \nfor _ in range(M):\n  a,b=map(int,input().split())\n  A[a]+=1\n  A[b]+=1\n \nfor i in range(1,N+1):\n  print(A[i])",
    "error_obj":"IndexError: list index out of range"
  },
  "s320235147":{
    "code_string":"N,K=map(int,input().split())\ncnt=0\nP=[]\nfor i in range(N):\n    a,b=map(int,input().split())\n    P.append((a,b))\n\nP=sorted(P)\nfor i in range(N):\n    cnt+=P[1]\n    if cnt>=K:\n        print(P[0])",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'tuple'"
  },
  "s387764489":{
    "code_string":"N, K = [int(x) for x in input().split(\" \")]\n \nplaced = 0\nelm = []\nfor i in range(N):\n  a, b = input().split(\" \")\n  elm.append({\n    \"order\": i + 1,\n    \"element\": int(a),\n    \"count\": int(b)\n  })\n\nelm.sort(key=lambda e: (e[\"element\"], e[\"order\"]))\nfor i in range(len(elm)):\n  placed = e[\"count\"]\n  if placed >= K:\n    print(e[\"element\"])\n    break\n",
    "error_obj":"NameError: name 'e' is not defined"
  },
  "s842512991":{
    "code_string":"n,k=map(int,input().split())\nl = []\nfor i in range(n):\n  a,b=map(int,input().split())\n  l.append((a,b))\nl = sorted(l)\nc = 0\ni = 0\nwhile c < k:\n  c += l[i][1]\n  i += 1\n\nprint(l[i][1])",
    "error_obj":"IndexError: list index out of range"
  },
  "s809654166":{
    "code_string":"from sys\nrl=sys.stdin.readline\n\ndef main():\n    n,k=map(int,rl.strip().split())\n    ints=[list(map(int,rl.strip().split())) for _ in range(n)]\n    ints.sort(key=lambda e:e[0])\n    s=0\n    for e in ints:\n        s+=e[1]\n        if s<=k:\n            print(e[0])\n            break\n\nif __name__=='__main__':\n    main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s546994260":{
    "code_string":"N, K = map(int, input().split())\n\nab = [[0, 0]] * N\nfor i in range(N):\n    _a, _b = map(int, input().split())\n    ab[i] = [_a, _b]\nab.sort(key=lambda x:x[0])\n\nj = 0\nindex = 0\nwhile j < K:\n    j += ab[index][1]\n    if j < K:\n        index += 1\n\nprint ab[index][0]\n",
    "error_obj":"SyntaxError: Missing parentheses in call to 'print'. Did you mean print(ab[index][0])?"
  },
  "s554822077":{
    "code_string":"n,k=map(int,input().split())\ns[0]*10**5\nfor i in range(n):\n  a,b=map(int,input().split())\n  s[a-1]+=b\ni=0\nwhile k>0:\n  k-=s[i]\n  i+=1\nprint(i)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s499951062":{
    "code_string":"n,k=map(int,input().split())\nans=[0]*(10**5+1)\nfor i in range(n):\n    a,b=map(int,input().split())\n    ans[a]+=b\n    \nfor i in range(len(ba)):\n    k-=ans[i]\n    if k<=0:\n        print(i)\n        break",
    "error_obj":"NameError: name 'ba' is not defined"
  },
  "s550672770":{
    "code_string":"a,b,c = map(int,input().split())\ncnt = 0\n\nif a == b and a== c and a%2 == 0:\n    print(-1)\n    exit()\n\nwhile acnt%2 == 0 and bcnt%2 == 0 and ccnt%2 == 0:\n    cnt+=1\n    i=a\n    j=b\n    a=(b+c)\/\/2\n    b=(i+c)\/\/2\n    c=(i+j)\/\/2\n\nprint(cnt)",
    "error_obj":"NameError: name 'acnt' is not defined"
  },
  "s256916739":{
    "code_string":"if a%2==1 or b%2==1 or c%2==1:\n    print(f)\nelif a==b and b==c:\n    f=-1\n    print(f)\nelse:\n    while a%2==0 and b%2==0 and c%2==0:\n        A=a\n        B=b\n        C=c\n        a=B\/\/2+C\/\/2\n        b=A\/\/2+C\/\/2\n        c=A\/\/2+B\/\/2\n        f=f+1\n    else:\n        print(f)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s863481315":{
    "code_string":"a,b,c=map(int,input().split())\nif a==b==c and a%2==0:\n    print(-1)\nd=0\nelse:\n    while a%2==0 and b%2==0 and c%2==0:\n        a,b,c=(b+c),(a+c),(a+b)\n        d+=1\nprint(d)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s683639686":{
    "code_string":"import sys\nimport numpy as np\nimport numba\nfrom numba import jit\n \nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n@jit\ndef main(p):\n  count = 0\n  if np.any(p%2==1):\n    return 0\n  if np.unique(p).size == 1:\n    return -1\n  while True:\n    if np.any(p%2 == 1):\n      return count\n    p[0], p[1], p[2] = p[1]\/2 + p[2]\/2, p[0]\/2 + p[2]\/2, p[0]\/2 + p[1]\/2\n    count += 1\n\n\np = np.array(readline().split(), np.int64)\n\nprint(main(p))",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s468472502":{
    "code_string":"a,b,c=map(int,input().split())\nif a==b==c:\n    if a%2===b%2==c%2==0:\n        print(-1)\n    else:\n        print(0)\n    exit()\ncnt=0\nwhile a%2==b%2==c%2:\n    A=a\/\/2\n    B=b\/\/2\n    C=c\/\/2\n    a,b,c=B+C,A+C,A+B\n    cnt+=1\nprint(cnt)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s231652511":{
    "code_string":"A,B,C =map(int,input().split())\ncon = 0\nif A % 2 == 1 or B % 2 == 1 or C % 1 == 1:\n  print(0)\n  exit()\nif A == B and B == C:\n  print(-1)\n  exit()\nwhile A % 2 == 0 and B % 2 == 0 and C % 2 == 0:\n  con += 1\n  D = A \/ 2\n  E = B \/ 2\n  F = C \/ 2\n  A = E + F\n  B = D + F\n  C = D + E\n  \nprint(con)\nA,B,C =map(int,input().split())\ncon = 0\nif A % 2 == 1 or B % 2 == 1 or C % 1 == 0:\n  print(0)\n  exit()\nif A == B and B == C:\n  print(-1)\n  exit()\nwhile A % 2 == 0 and B % 2 == 0 and C % 2 == 0:\n  con += 1\n  D = A \/ 2\n  E = B \/ 2\n  F = C \/ 2\n  A = E + F\n  B = D + F\n  C = D + E\n  \nprint(con)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s670972191":{
    "code_string":"a, b, c = map(int, input().split())\na_tmp = a ; b_tmp = b ; c_tmp = c\ncount = 0\nwhile True :\n    count += 1\n    a = b_tmp\/2 + c_tmp\/2\n    b = a_tmp\/2 + c_tmp\/2\n    c = a_tmp\/2 + b_tmp\/2\n    if a == a_tmp and b == b_tmp and c = c_tmp :\n        print(\"-1\")\n        break\n    a_tmp = a ; b_tmp = b ; c_tmp = c\n    if a%2 == 1 or b%2 == 1 or c%2 == 1 :\n        print(count)\n        break\n    else :\n        continue\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s022098372":{
    "code_string":"def(a,b,c):\n  if a%2+b%2+c%2>0:\n    return 0\n  if a==b==c:\n    return -1\n  return f((b+c)\/\/2,(c+a)\/\/2,(a+b)\/\/2)+1\n\na,b,c=map(int,input().split())\nprint(f(a,b,c))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s245609826":{
    "code_string":"a, b, c = map(int, input().split())\n\nif a == b == c:\n    print(-1)\n    exit()\n\nif a%2!=0 or b%2!=0 or c%2!=0:\n  \tprint(0)\n    exit()\n\nN = (a+b+c)\/\/3\ncnt = 1\nwhile N:\n    if N%2 != 0: break\n    N \/\/= 2\n    cnt += 1\n    \nprint(cnt)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s792630338":{
    "code_string":"a,b,c=map(int,input().split())\nif a==b==c:\n    print(-1)\ntotal=0\nelse:\n    while True:\n        x=a\/2\n        y=b\/2\n        z=c\/2\n        a=y+z\n        b=x+z\n        c=x+y\n        total+=1\n        if a%2!=0 or b%2!=0 or c%2!=0:\n            print(total)\n            break",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s554773680":{
    "code_string":"a,b,c=map(int,open(0).read().split())\n\nif a==b==c and a%2==0:\n    print(-1)\nelse:\n    num=0\n    while true:\n        if a%2==1 or b%2==1 or c%2==1:\n            break\n        else:\n            l=[(b+c)\/2,(c+a)\/2,(a+b)\/2]\n            num+=1\n            l=[(l[1]+l[2])\/2, (l[2]+l[0])\/2, (l[0]+l[2])\/2]\n            a=l[0]\n            b=l[1]\n            c=l[2]\n    else:\n        print(num)",
    "error_obj":"NameError: name 'true' is not defined"
  },
  "s808449531":{
    "code_string":"a,b,c = map(string,input().split())\nif a[-1] == b[0] and b[-1] == c[0]:\n  print('YES')\nelse :\n  print('NO')",
    "error_obj":"NameError: name 'string' is not defined"
  },
  "s376270635":{
    "code_string":"a,b,c=map(int,input().split())\nif a[-1] == b[0] and b[-1] == c[0]:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'rng'"
  },
  "s565542914":{
    "code_string":"A,B,C = input().split()\nif A[-1] == B[0] and B[-1] == C[0]:\n    print('YES'):\nelse:\n    print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s687047263":{
    "code_string":"a, b, c = list(map(int, input().split()))\nif a[-1] == b[0] and b[-1] == c[0]:\n    print('YES')\nelse:\n    print('NO')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'rng'"
  },
  "s299265030":{
    "code_string":"a,b,c=map(int,input().split())\nif a[-1]==b[0] and b[-1]==c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'rng'"
  },
  "s709716538":{
    "code_string":"A = input()\nB = input()\nC = input()\nif A[-1] == B[0] and B[-1] == C[0]:\n    print('Yes')\nelse:\n    print('No')\n\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s761064094":{
    "code_string":"# 060_a\nA, B, C = input().split()\n\nif (1<=len(A) and len(A)<=10 and A.islower()) and (1<=len(B) and len(B)<=10 and B.islower())\\\n        and (1<=len(C) and len(C)<=10 and C.islower()):\n    if (A[len(A) - 1] == B[0]) and (B[0] == C[len(B) - 1]):\n        print('YES')\n    else:\n        print('NO')\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s526008062":{
    "code_string":"A,B,C=map(int,input().split())\nif A[-1]==B[0] and B[-1]==C[0]:\n  print('YES')\nelse:\n  print('NO')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'rng'"
  },
  "s921913108":{
    "code_string":"a,b,c=map(int,input().split())\nA=a[len(a)-1]\nB=b[0]\nB1=b[len(b)-1]\nC=c[0]\n\nIf A==B and B1==C:\n    print(\u201cYES\u201d)\nelse:\n    print(\u201cNO\u201d)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s322607652":{
    "code_string":"a,b,c=map(str,input().split())\nFlag = 1\nif a[len(a)-1]!=b[0]:\n  Flag =0\nif b[len(b)-1]!=c[0]:\n  Flag =0\nif Flag = 0:\n  print(\"NO\")\nelse:\n  print(\"YES\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s954448351":{
    "code_string":"a,b,c=input().split()\nif a[-1]==b[0] and b[-1]==c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\"",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s131405684":{
    "code_string":"a, b, c = input().split()\n\nif a[len(a)-1] == b[0] and b[(b)-1] == c[0]:\n    print('YES')\nelse:\n    print('NO')",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s380846706":{
    "code_string":"A,B,C = [int(i) for i in input().split()]\nFlag = False\n\nfor i in range(1,B+1):\n    D = i*A % B\n    if D = C:\n        Flag = True\n        break\n\nif Flag == True:\n    print('YES')\nelse:\n    print('NO')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s842205419":{
    "code_string":"a,b,c=map(int,input().split())\nfor i in range(1, b+1):\n  a%b * i % b == c:\n    print(\"YES\")\n    break\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s560143812":{
    "code_string":",b,c=map(int,input().split())\ns={}\nwhile True:\n  if a%b==c:\n    print(\"YES\")\n    break\n  elif (a%b) in s:\n    print(\"NO\")\n    break\n  else:\n    s.add((a%b))\n    a+=a",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s333836712":{
    "code_string":"# -*- coding: utf-8 -*-\n\nA, B, C = map(int, input().split())\n\nfor i in range(1, B + 1)\n    if (A * i) % B == C:\n        print('YES')\n        exit()\n        \nprint('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s706155785":{
    "code_string":"a,b,c=map(int,input().split())\nfor i in range(1,b+1):\n  if (i*a)%b==c:\n    print('YES')\n  break\nprint('NO')\na,b,c=map(int,input().split())\nfor i in range(b):\n  if (i*a)%b==c:\n    print('YES')\n    break\nprint('NO')",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s820793956":{
    "code_string":"A,B,C = map(int,input().split())\n\nprint('YES' if C % gcd(A,B) == 0 else 'NO')",
    "error_obj":"NameError: name 'gcd' is not defined"
  },
  "s352529598":{
    "code_string":"# -*- coding: utf-8 -*-\n\nA,B,C = map(int, input().split())\n\nans = \"NO\"\nfor i in range(B+1)):\n    res = A * i % B\n    if res == C:\n        ans = \"YES\"\n        break\n\nprint(ans)",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s311885294":{
    "code_string":"a,b,c=map(int,input().split())\nnum = a\nif (a % 2 == 1 and c % 2 == 0) or (a % 2 == 0 and c % 2 == 1):\n  print('NO')\nelse:\n  pritn('YES')",
    "error_obj":"NameError: name 'pritn' is not defined"
  },
  "s642251604":{
    "code_string":"a,b,c=map(int,input().split())\n\nans=\"No\"\nfor i in range(1,b+1):\n  for j in range(1,a+1):\n    if a*i=b*j+c:\n      ans=\"Yes\"\n      break\n      \nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s341960729":{
    "code_string":" N,T = map(int,input().split())\nt = list(map(int,input().split()))\nans = T\nfor i in range(N-1):\n    now = t[i+1]-t[i]\n    ans += min(now,T)\n\n\nprint(ans)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s713833650":{
    "code_string":"n, t = map(int, input().split())\narr = list(map(int, input().split()))\nsumm = t\nfor i in range(n-1):\n  summ += min(t, arr[i+1] - arr[i])\nreturn summ",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s780102796":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nc=list(map(int,input().split()))\nm=a*b\nfor i in range(a):\n  if c[i+1]-c[i]<b:\n    m=m-(b-(c[i+1]-c[i]))\nprint(m)",
    "error_obj":"IndexError: list index out of range"
  },
  "s740533755":{
    "code_string":"from sys import stdin\nfrom itertools import accumulate\nreadline = stdin.readline\n\nN, W = map(int, input().split())\nvs = [[] for _ in range(4)]\nw, v = map(int, input().split())\nw1 = w\nvs[0].append(v)\nfor _ in range(N - 1):\n    w, v = map(int, input().split())\n    vs[w - w1].append(v)\n\nfor i in range(4):\n    vs[i].sort(reverse=True)\n    vs[i] = [0] + list(accumulate(vs[i]))\n\nresult = 0\nfor i in range(len(vs[0]) + 1):\n    a = W - w1 * i\n    if a < 0:\n        break\n    for j in range(len(vs[1]) + 1):\n        b = a - (w1 + 1) * j\n        if b < 0:\n            break\n        for k in range(len(vs[2]) + 1):\n            c = b - (w1 + 2) * k\n            if c < 0:\n                break\n            t = vs[0][i] + vs[1][j] + vs[2][k]\n            for l in range(len(vs[3]) + 1):\n                d = c - (w1 + 3) * l\n                if d < 0:\n                    break\n                result = max(result, t + vs[3][l])\nprint(result)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s235826919":{
    "code_string":"N,T = map(int,input().split())\nA = list(map(int,input().split()))\nLST = []\n\nfor a in A:\n  LST.append((a,1))\n  LST.append((a+T,-1))\n  \nLST.sort()\n\nprev = -1\ns = 0\nans = 0\nfor x,y in A:\n  if y == 1:\n    if s == 0:\n      prev = x\n    else:\n      s += 1\n  elif y == -1:\n    s -= 1\n    if s == 0:\n      ans += (x - prev)\n  \nprint(ans)\n\n",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s272269616":{
    "code_string":"N,T = map(int,input().split());\nt = [int(x) for x in input().split()];\n\nend = 0;\nans = 0;\nfor i in range(N) :\n    if end > t[i] :\n        ans += t[i] + T - end;\n        else :\n        ans += T;\n    end += t[i] + T;\n    #print(ans,end);\n\nprint(ans); ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s170648974":{
    "code_string":"a,b,c = map(int,input().split())\nacnt = 0\nbcnt = 0\nccnt = 0\ncnt = 0\nif a == b and a== c and a%2 == 0:\n    print(-1)\n    exit()\nwhile a%2 == 0 and b%2 == 0 and c%2 == 0:\n    cnt += 1\n    acnt = (b+c)\/\/2\n    bcnt = (a+c)\/\/2\n    ccnt = (a+b)\/\/2\n    a = acnt\n    b = bcnt \n    c = ccnt\nprint(cnt)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'atcoder'"
  },
  "s518803935":{
    "code_string":"print([*zip(*input().split())][0].upper())",
    "error_obj":"AttributeError: 'tuple' object has no attribute 'upper'"
  },
  "s413270006":{
    "code_string":"a, b, c = map(int, input().split())\nprint(upper(a[0] + b[0] + c[0]))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'atcoder'"
  },
  "s250303518":{
    "code_string":"s1, s2, s3 = map(input().split())\n\ns1 = s1[0].str.upper()\ns2 = s2[0].str.upper()\ns3 = s3[0].str.upper()\n\nprint(s1, s2, s3)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s398526792":{
    "code_string":"a, b, c = input().split()\nprint((s1[0] + s2[0] + s3[0]).upper())",
    "error_obj":"NameError: name 's1' is not defined"
  },
  "s121396745":{
    "code_string":"a,b,c = map(int,input().split())\nans = a[0] + b[0] + c[0]\nprint(ans.upper())",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'atcoder'"
  },
  "s269847113":{
    "code_string":"a,b,c =map(input().split())\nprint(a[0].isupper(),b[0].isupper(),c[0].isupper(),sep=\"\")",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s391875979":{
    "code_string":"# # Make IO faster\n# import sys\n# input = sys.stdin.readline\n\n# # get single (or) multiple str\n# X = input()\n\n# # get single int\n# N = int(input())\n# # get multiple int (e.g., 2)\n# X, Y = map(int, input().split())\n# # get multiple int (e.g., 2) for N lines\n# XY = [list(map(int, input().split())) for _ in range(N)]\n\n# from IPython import embed; embed(); exit();\n\n# \u5168\u90e8\u5165\u308a\nimport sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nimport numpy as np\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\ns1, s2, s3 = input().split()\nprint(upper(s1[0]) + upper(s2[0]) + upper(s3[0]))\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s991533891":{
    "code_string":"a=int(input())\nb=int(input())\nprint(\"GREATER\" if a>b else \"LESS\" if a<b else \"EQUAL\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'atcoder beginner contest'"
  },
  "s694807438":{
    "code_string":"a, b, c = map(str,input().split())\nprint(upper(a[0] + b[0] + c[0]))",
    "error_obj":"NameError: name 'upper' is not defined"
  },
  "s518919398":{
    "code_string":"a,b = map(int, input().split())\nif a>b: print('GREATER')\nelif a<b: print('LESS')\nelse: print('EQUAL')",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s701995794":{
    "code_string":"A,B = map(int, input().split())\nif A > B:\n  print('GREATER')\nif A < B:\n  print('LESS')\nif A == B:\n  print('EQUAL')",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s280493466":{
    "code_string":"a = int(input())\nb = int(input())\n\nif a < b:\n  print('LESS'):\nelif a > b:\n  print('GREATER')\nelse:\n  print('EQUAL')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s877183249":{
    "code_string":"a=int(input())\nb=int(input())\nimport math\nif math.sqrt(a)==math.sqrt(b):\n  print(\"EQUAL\")\nelif math.sqrt(a)>math.sqrt(b):\n  print(\"GREATER\")\n  math.sqrt(a)<math.sqrt(b):\n  print(\"LESS\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s801575283":{
    "code_string":"A = int(input())\nB = int(input())\nprint(\"GREATER\" if A>B else \"EQOUL\" if A=B else \"LESS\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s573422372":{
    "code_string":"a=input()\nb=input()\nif len(a)==len(b):\n  if a==b:\n    print(\"EQUAL\")\n  elif a<b:\n    print(\"LESS\")\n  else a>b:\n    print(\"GREATER\")\nelif len(a)<len(b):\n  print(\"LESS\")\nelse:\n  print(\"GREATER\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s948998796":{
    "code_string":"a, b = map(int, input().split())\n\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s027440453":{
    "code_string":"a,b = map(int,input().split())\nif a > b:\n  print(\"GREATER\")\nelif a == b:\n  print(\"EQUAL\")\nelse:\n  print(\"LESS\")\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s595685621":{
    "code_string":"a, b = ri(), ri()\nif a == b:\n  print('EQUAL')\nelif a > b:\n  print('GREATER')\nelse:\n  print('LESS')",
    "error_obj":"NameError: name 'ri' is not defined"
  },
  "s740910362":{
    "code_string":"a,b = map(int,input().split())\nif a > b :\n  print('GREATER')\nelif a < b :\n  print('LESS')\nelse :\n  print('EQUAL')",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s980370348":{
    "code_string":"a=int(input())\nb=int(input())\nif a>b:\n  print('GREATER')\nelif a=b:\n  print('EQUAL')\nelse:\n  print('LESS')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s281586253":{
    "code_string":"A,B=map(int,input().split())\nif A>B :\n  print(\"GREATER\")\nelif A==B :\n  print(\"EQUAL\")\nelse :\n  print(\"LESS\")",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s019825319":{
    "code_string":"a,b=map(int,input().split())\nprint(\"GREATER\" if a>b else \"LESS\" if a<b else \"EQUAL\")",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s310246821":{
    "code_string":"a=int(input().split())\nb=int(input().split())\n\nif a>b:\n  print('GREATER')\nelif a==b:\n  print('EQUAL')\nelse:\n  print('LESS')",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s842453268":{
    "code_string":"A, B = input().split()\nN = max(len(A), len(B))\nA, B = A.zfill(N), B.zfill(N)\nif A == B:\n  print(\"EQUAL\")\nif A > B:\n  print(\"GREATER\")\nif A < B:\n  print(\"LESS\")\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s585771553":{
    "code_string":"def i():\n\treturn int(input())\ndef i2():\n\treturn map(int,input().split())\ndef s():\n\treturn str(input())\ndef l():\n\treturn list(input())\ndef intl():\n\treturn list(int(k) for k in input().split())\n\na = i()\nb = i()\n\nif len(a) > len(b):\n\tprint(\"GREATER\")\nelif a == b:\n\tprint(\"EQUAL\")\nelse:\n\tprint(\"LESS\")",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s773842597":{
    "code_string":"def chk(a,t):     # t=True(\u5947\u6570\u9805\u304c\u6b63), t=False(\u5076\u6570\u9805\u304c\u6b63) \n    cnt=0   # \u64cd\u4f5c\u56de\u6570\n    x=0     # \u5841\u7a4d\u548c        \n    for i in a:\n        x+=i      \n        if t==True and x<=0:       # \u6b63\u9805\u4e88\u5b9a\u306a\u306e\u306b\u7d2f\u7a4d\u304c\u8ca0\u304b0\n            cnt+=1-x                              \n            x=x+(1-x)               # \u4eca\u56de\u306ecnt\u3067\u7b26\u53f7\u5909\u66f4\n        elif t==False and x>=0:   # \u8ca0\u9805\u4e88\u5b9a\u306a\u306e\u306b\u7d2f\u7a4d\u304c\u6b63\u304b0\n            cnt+=1+x              \n            x=x-(1+x)              # \u4eca\u56de\u306ecnt\u3067\u7b26\u53f7\u5909\u63db\n        t = not t                  # \u6b21\u306e\u9805\u306f\u7b26\u53f7\u304c\u9006\n    return cnt\nprint(min(chk(a,True),chk(a,False)))",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s363427483":{
    "code_string":"n = int(input())\na = [int(x) for x in input().split()]\n\ndef odd_positive(List, n):\n    sum_a = 0\n    cost = 0\n    for a in List:\n        nextsum = sum_a + a\n        if i & 1 and nextsum <= 0:\n            cost = - nextsum + 1\n            sum_a = 1\n        elif (not i & 1) and nextsum >= 0:\n            cost = nextsum + 1\n            sum_a = -1\n    return cost\n\n\ndef odd_negative(List, n):\n    sum_a = 0\n    cost = 0\n    for a in List:\n        nextsum = sum_a + a\n        if i & 1 and nextsum >= 0:\n            cost = nextsum + 1\n            sum_a = -1\n        elif (not i & 1) and nextsum <= 0:\n            cost = - nextsum + 1\n            sum_a = 1\n    return cost\n    \nans = min(odd_positive(a,n), odd_negative(a,n)) \nprint(ans)\n",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s831378099":{
    "code_string":"n,m = map(int(input().split()))\nif abs(n-m) < 2:\n  print('Brown')\nelse:\n  print('Alice')",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s025791247":{
    "code_string":"x, y =  = map(int,input().split())\nif abs(x-y) < 1:\n    print('Brown')\nelse:\n    print('Alice')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s228631361":{
    "code_string":"n=int(input())\nl=list(map(int,input().split()))\n\nif n=<2:\n  print(1)\n  exit()\n  \ncnt=0\n\nif l[0]>l[1]:\n  ans=\"low\"\nelif l[0]<l[1]:\n  ans=\"high\"\nelse:\n  ans=\"even\"\n  \nfor i in range(2,n):\n  if l[i-1]>l[i] and (ans==\"low\" or ans==\"even\"):\n    ans=\"low\"\n  elif l[i-1]<l[i] and (ans==\"high\" or ans==\"even\"):\n    ans=\"high\"\n  elif l[i-1]==l[i]:\n    continue\n  else:\n    cnt+=1\n    ans=\"even\"\n    \nprint(cnt+1)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s633106503":{
    "code_string":"def solve(): \n\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    i = 0\n    result = 0\n\n    while i < N:\n        while i+1 < n and A[i] == A[i+1]:\n            i += 1\n        if i+1 < N and A[i] < A[i+1]:\n            while i+1 < n and A[i] <= A[i+1]:\n                i += 1\n        elif i+1 < N and A[i] > A[i+1]:\n            while i+1 < n and A[i] >= A[i+1]:\n                i += 1\n        \n        result += 1\n        i += 1\n\n    print(result)    \n\nif __name__ == \"__main__\":\n    solve()\n",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s516847398":{
    "code_string":"def main():\n    # N = int(input())\n    # A = [int(a) for a in input().split()]\n\n    f = open(\"subtask_1_02.txt\", \"r\")\n    N = int(f.readline())\n    A = [int(a) for a in f.readline().split()]\n\n    idx = 0\n    ans = 0\n    for i in range(len(A)):\n        if idx + 1 > len(A) - 1 :\n            break\n\n        m = \"\"\n        if A[idx] < A[idx + 1]:\n            m = \"+\"\n        elif A[idx] > A[idx + 1]:\n            m = \"-\"\n        else:\n            find = False\n            for j in range(idx, len(A)-1):\n                if A[j] < A[j + 1]:\n                    m = \"+\"\n                    find = True\n                    idx = j\n                    break\n                elif A[j] > A[j + 1]:\n                    m = \"-\"\n                    find = True\n                    idx = j\n                    break\n            if find == False:\n                print(ans + 1)\n                exit()\n\n        for j in range(idx, len(A) - 1):\n            if m == \"+\":\n                if A[j] <= A[j + 1]:\n                    idx = j + 1\n                else:\n                    idx = j + 1\n                    ans += 1\n                    break\n            elif m == \"-\":\n                if A[j] >= A[j + 1]:\n                    idx = j + 1\n                else:\n                    idx = j + 1\n                    ans += 1\n                    break\n\n    print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"FileNotFoundError: [Errno 2] No such file or directory: 'subtask_1_02.txt'"
  },
  "s269304935":{
    "code_string":"p = -1\nxp = -1\nans = 0\ninput()\nfor i in range(input().split(\" \")):\n  i = int(i)\n  if i == p: continue\n  if p != -1:\n    x = p < i\n    if xp != -1\n      ans += x != xp\n    xp = x\n  p = i",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s659619115":{
    "code_string":"n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 10**9\nfor i in range(1, 2**n, 2):\n    if not i & 1 or k != sum([i >> j & 1 for j in range(n)]):\n        continue\n    pre = a[0]\n    cost = 0\n    for j in range(1, n):\n        if i >> j & 1:\n            tmp = max(pre - a[j] + 1, 0)\n            pre = a[j] + tmp\n            cost += tmp\n    ans = min(ans, cost)\nprint(ans+'\\n')\n",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s520224261":{
    "code_string":"n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nans = float('inf')\nfor bit in range(1<<(n-1)):\n  cand = [0]*(n-1)\n  for i in range(n-1):\n    if bit & 1<<i: cand[i] = 1\n  if cand.count(1) != k-1: continue\n  cost = 0\n  mx = a[0]\n  for i in range(1, n):\n    if cand[i-1]:\n      if a[i] <= mx:\n        cost += mx-a[i]+1\n        mx += 1\n    mx = max(mx, a[j])\n  ans = min(ans, cost)\nprint(ans)",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s806635946":{
    "code_string":"a, b, c = map(int, input()split())\nif b - a == c - b:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s597045691":{
    "code_string":"n=int(input())\nd=[dict() for _ in range(n)]\nfor i in range(n):\n    for c in input():\n        if c not in d[i]:\n            d[i][c]=1\n        else:\n            d[i][c]+=1\nans=\"\"\nfor i in range(26):\n    mini=10**18\n    for j in range(n):\n        if chr(97+i) not in d[j]:\n            mini=0\n        else:\n            mini=min(mini,d[j][chr(97+i)])\n    ans+=mini*chr(97+i)\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 4 6'"
  },
  "s159144222":{
    "code_string":"a = list(map(int, input().split()))\nprint(\"YES\" if b - a == c - b else \"NO\")",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s097213047":{
    "code_string":"a=list(map(int,input().split()))\n\nif a[0]+a[2]=2*a[1]:\n  print('YES')\n\nelse:\n  print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s567020473":{
    "code_string":"a,b,c=map(int,input().split(\" \"))\nprint(\"YES\") if b-a==c-b else print(\"NO)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s848797160":{
    "code_string":"a, b = input().split()\nprint('H' if (a == 'H') ^ (b == 'D') else 'D')",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s011269864":{
    "code_string":"a,b,c=map(int,input().split());print(['NO','YES'][b-a==c-b])A",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s957815249":{
    "code_string":"a,b,c = map(int,input().split())\nif b - a = c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s454791792":{
    "code_string":"a,b,c=map(int,input().split())\nif a-b = b-c:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s075716596":{
    "code_string":"a, b, c =  = map(int,input().split())\nprint('YES') if a == b == c else print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s682555770":{
    "code_string":"#58\na,b,c=map(int,input().split())\nif b-a=c-b:\n    print('YES')\nelse:\n    print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s996982119":{
    "code_string":"a,b,c=int(input().split())\nif (b-a)==(c-b):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s768271212":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\n\nba = b - a\ncb = c - b\n\nif ba == cb:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 4 6'"
  },
  "s899741616":{
    "code_string":"#!\/usr\/bin\/env python3\n\ndef main():\n    a = input()\n    b = input() + [\"\"]\n    for i in range(len(a)):\n        print(a[i], end=\"\")\n        print(b[i], end=\"\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: can only concatenate str (not \"list\") to str"
  },
  "s542903231":{
    "code_string":"from collections import deque\n\nO=input()\nE=input()\n\no=deque(O)\ne=deque(E)\n\ns=''\nWhile True:\n  if not e a and not o:\n    break\n  elif o:\n    s+=o.pop()\n  elif e:\n    s+=e.pop()\n    \n  \nprint(s)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s617877232":{
    "code_string":"atcoderbeginnercontest\natcoderregularcontest",
    "error_obj":"NameError: name 'atcoderbeginnercontest' is not defined"
  },
  "s412623464":{
    "code_string":"o = input()\ne = input()\n\nn = len(e)\nans = ''\nfor i in range(n):\n\tans += o[i]\n  \tans += e[i]\n    \nif len(o)%2==1:\n\tans += o[-1]\n    \nprint(ans)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s710015028":{
    "code_string":"a=input()\nb=input()\nc=len(a)\nd=len(b)\nx=\"\"\nif c<=d:\n  for i in range(c):\n    x=x+c[i]\n    x=x+d[i]\n  print(x)\nif c>d:\n  for i in range(d):\n    x=x+c[i]\n    x=x+d[i]\n  x=x+c[len(a)-1]\n  print(x)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s290599196":{
    "code_string":"from itertools import zip_longest\n\no=input()\ne=input()\n\nprint(''.join([x+y for x,y in zip_longetst(o,e,fillvalue='')]))\n",
    "error_obj":"NameError: name 'zip_longetst' is not defined"
  },
  "s475106175":{
    "code_string":"O=input()\nE=inpu()\nans=\"\"\nfor i in range(len(E)):\n  ans+=O[i]\n  ans+=E[i]\n\nif len(O)!=len(E):\n  ans+=O[-1]\nprint(ans)",
    "error_obj":"NameError: name 'inpu' is not defined"
  },
  "s078758991":{
    "code_string":"o = input()\ne = input()\nn = []\ne.append(' ')\nfor i in range(o):\n  n.append(o[i])\n  n.append(e[i])\nprint(''.join(n).strip())",
    "error_obj":"AttributeError: 'str' object has no attribute 'append'"
  },
  "s725306033":{
    "code_string":"# coding: utf-8\n\nodd = raw_input()\neven = raw_input()\n\nres = \"\"\nfor (o, e) in zip(odd, even):\n    res = res + o + e\n\nprint res if len(odd) - len(even) == 0 else res + odd[-1]\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s101601407":{
    "code_string":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\nfrom functools import reduce\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\no = rr()\ne = rr()\ns = ''\nfor a, b in itertools.zip_longest(o, e, fillvalu=''):\n  s += a + b\nprint(s)\n\n\n\n\n\n\n",
    "error_obj":"TypeError: zip_longest() got an unexpected keyword argument"
  },
  "s789704244":{
    "code_string":"o = str(input())\ns = str(input())\nn = \"\"\n\nif not len(o) == len(s):\n\tfor i in range(min(len(o),len(s))):\n\t\tn += o[i]\n\t\tn += s[i]\n\n\tif len(o) > len(s):\n\t\tn += o[len(o)-1]\n\n\tif len(s) > len(o):\n\t\tn += s[len(s)-1]\n\nelse:\n\tfor i in rage(len(o)):\n\t\tn += o[i]\n\t\tn += s[i]\n\t\t\nprint(n)\n",
    "error_obj":"NameError: name 'rage' is not defined"
  },
  "s541420427":{
    "code_string":"#58B\nA=input()\nB=input()\nimport ita\npasw=ita.array.make1d(len(A)+len(B)+1)\nfor i in range(0,len(A)):\n    pasw[2*i]=A[i]\nfor j in range(0,len(B)):\n    pasw[2*j+1]=B[j]\nprint(pasw)\n    \n\n",
    "error_obj":"ModuleNotFoundError: No module named 'ita'"
  },
  "s327175885":{
    "code_string":"a = list(input())\nb = list(input())\nfor x,y zip(a,b):\n  print(x+y, end = \"\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s673024142":{
    "code_string":"#!\/usr\/bin\/env python3\n\n# from numba import njit\nfrom collections import Counter\n# input = stdin.readline\n\n# @njit\ndef solve(n,a):\n  alphabetLst = {}\n  for i in range(n):\n... (17 lines) ...\n\n\ndef main():\n  N = int(input())\n  a = [input() for _ in range(N)]\n  print(solve(N,a))\n  return\n\nif __name__ == '__main__':\n  main()",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s967884484":{
    "code_string":"n=int(input())\nd = {}\nfor i in range(26):\n  d[chr(ord(\"a\")+i)]=10**9\nfor i in range(n):\n  s=input()\n  for j in range(26):\n    d[chr(ord(\"a\")+i)]=min(d[chr(ord(\"a\")+i)], s.count(chr(ord(\"a\")+i)))\n\nans = \"\"\nfor e in d.items():\n  ans+=e[0]*e[1]\nprint(ans)\n  \n  ",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s939412780":{
    "code_string":"n, m = map(int, input().split())\nx = [x for x in map(int, input().split())]\ny = [y for y in map(int, input().split())]\nsum_x = 0\nsum_y = 0\nans = 0\nfor i in range(n):\n    sum_x += (2*i - n + 1) * x[i+1] \nfor j in range(m):\n    sum_y += (2*j - m + 1) * y[j+1]\nans = sum_x * sum_y\nprint(ans%1000000007)",
    "error_obj":"IndexError: list index out of range"
  },
  "s858341822":{
    "code_string":"N, M = map(int, input().split())\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\n\nxs = 0\nfor i in range(N):\n    xs += i  * X[i]\n    xs -= (N - i - 1) * X[i]\n    xs %= MOD\nys = 0\nfor i in range(M):\n    ys += i  * Y[i]\n    ys -= (M - i - 1) * Y[i]\n    ys %= MOD\nprint(xs * ys % MOD)\n",
    "error_obj":"NameError: name 'MOD' is not defined"
  },
  "s122631413":{
    "code_string":"def main():\n    N, K = map(int, input().split())\n    h = []\n    for _ in range(N):\n        h.append(int(input()))\n    h.sort()\n    ans = pow(10, 10)\n    for k in range(N-K+1):\n        ans = min(ans, abs(h[k]-h[K-1+k]))\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s001477222":{
    "code_string":"#\n# agc012 a\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2\n5 2 8 5 1 5\"\"\"\n        output = \"\"\"10\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\"\"\"\n        output = \"\"\"10000000000\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(N\/3):\n        a.pop()\n        a.pop(0)\n        ans += a.pop()\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n    # resolve()\n",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s384268022":{
    "code_string":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\ndef graph_input(N, M):\n    G = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        a, b = map(int, readline().split())\n        G[a].append(b)\n        G[b].append(a)\n    ind = np.cumsum(list(map(len, G)))\n    G = np.concatenate(G).astype(np.int32)\n    return G, ind\n\ndef main(N, G, ind, V, D, C):\n    # \u5f37\u3055 n \u3067\u5857\u3063\u305f\u6642\u523b\n    dp = np.full((N + 1, 11), -1, np.int32)\n    for t in range(len(V)):\n        v, d = V[t], D[t]\n        dp[v, d] = t\n    for n in range(10, 0, -1):\n        for v in range(1, N + 1):\n            dp[v, n - 1] = max(dp[v, n - 1], dp[v, n])\n            for i in range(ind[v - 1], ind[v]):\n                w = G[i]\n                dp[w, n - 1] = max(dp[w, n - 1], dp[v, n])\n    dp = dp[:, 0]\n    for v in range(1, N + 1):\n        t = dp[v]\n        c = C[t] if t != -1 else 0\n        print(c)\n\nsignature = '(i8,i4[:],i4[:],i4[:],i4[:],i4[:])'\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('main', signature)(main)\n    cc.compile()\n\nfrom my_module import main\n\nN, M = map(int, readline().split())\nG, ind = graph_input(N, M)\nQ = int(readline())\nnums = np.array(read().split(), np.int32)\nV = nums[::3]\nD = nums[1::3]\nC = nums[2::3]\n\nmain(N, G, ind, V, D, C)",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s858452975":{
    "code_string":"a,b=map(int,input())\n\nprint((a+b)%24)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s209740199":{
    "code_string":"A,B=map(int,iput().split())\n \nif A+B>=24:\n  print(A+B-24)\nelse:\n  print(A+B)",
    "error_obj":"NameError: name 'iput' is not defined"
  },
  "s610040219":{
    "code_string":"import bisect\n\nN=int(input())\nA = sorted(list(map(int,input().split())))\nB = sorted(list(map(int,input().split())))\nC = sorted(list(map(int,input().split())))\n\ncount=0\nfor i in range(N):\n    a_cand = bisect.bisect_right(A,B[i]-1)\n    c_cand = N-bisect.bisect_right(C,B[i])\n    count += a_cand*c_cand\nprint(count)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '9 12'"
  },
  "s281667392":{
    "code_string":"a,b=map(int,input().split())\nprint(max(a+b,a+b-24)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s457471392":{
    "code_string":"a,b=int(input().split())\nprint((a+b)%24)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s216200858":{
    "code_string":"A, B = map(int, input())\nprint((A+B) % 24)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s450357006":{
    "code_string":"a,b = map(int,input().split())\nprint (a+b) if a+b >= 24 print (a+b-24)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s388444540":{
    "code_string":"A, B = input(int, input().split())\n\nprint((A + B) % 24)",
    "error_obj":"TypeError: input expected at most 1 argument, got 2"
  },
  "s949125777":{
    "code_string":"x=sum(list(map(int,input.split())))\nif x>=24:\n  x-=24\nprint(x)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s379259471":{
    "code_string":"a. b = map(int, input().split())\nprint((a + b) % 24)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s806400472":{
    "code_string":"a,b = map(int,input().splilt())\nprint((a + b) % 24)",
    "error_obj":"AttributeError: 'str' object has no attribute 'splilt'"
  },
  "s754744636":{
    "code_string":"A,B = map(int,input().split())\nreturn A+B % 24",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s622866082":{
    "code_string":"a, b = map(int, input().split)\nprint((a + b) % 24)",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s449214456":{
    "code_string":"a, b, c, d = [0] * n, [0] * n, [0] * m, [0] * m\nfor i in range(n):\n    a[i], b[i] = map(int, input().split())\nfor i in range(m):\n    c[i], d[i] = map(int, input().split())\n\nfor i in range(n):\n    min_dist, min_c = abs(a[0]-c[0]) + abs(b[0]-d[0]), 0\n    for j in range(m):\n        dist = abs(a[i]-c[j]) + abs(b[i]-d[j])\n        if dist < min_dist:\n            min_dist = dist\n            min_c = j\n    print(min_c+1)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s054509239":{
    "code_string":"N, M = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(N)]\ny = [list(map(int, input().split())) for _ in range(M)]\nfor a,b in ab:\n    z = [abs(a-c) + abs(b-d) for c,d in cd]\n    print(z.index(min(z))+1)",
    "error_obj":"NameError: name 'ab' is not defined"
  },
  "s493281029":{
    "code_string":"n,m=map(int, input().split())\na_list=[]\nb_list=[]\nfor i in range(n):\n  a,b=map(int, input().split())\n  a_list.append(a)\n  b_list.append(b)\nc_list=[]\nd_list=[]\nfor i in range(m):\n  c,d=map(int, input().split())\n  c_list.append(c)\n  d_list.append(d)\nfor i in range(n):\n  min=0\n  min_number=0\n  for j in range(m):\n    d=abs(a[i]-c[j])+abs(b[i]-d[j])\n    if d<min:\n      min=d\n      min_number=j\n  print(min_number)",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s829237760":{
    "code_string":"n, m = map(int, input().split())\na = [input().split() for i in range(n)]\nc = []\nfor i in range(n):\n  for j in range(m):\n    b = input().split()\n    c.append(abs(a[i][0] - b[0]) + abs(a[i][1] - b[1]))\n  print(c.index(min(c)))\n \n    \n  ",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'str'"
  },
  "s886796195":{
    "code_string":"n,m=map(int,input().split())\n\na_lis=[list(map(int,input())) for i in range(n)]\nc_lis=[list(map(int,input())) for i in range(m)]\n\nfor i in range(n):\n  num=0\n  ans=10**10\n  for j in reversed(range(m)):\n    a=a_lis[i]\n    c=c_lis[j]\n    num=abs(a[0]-c[0])+abs(a[1]-c[1])\n    ans=min(ans,num)\n    if num==ans:\n      cnt=j+1\n  print(cnt)\n    ",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s545626085":{
    "code_string":"n, m = int(input()), 0\nfor i in range(1, n**.5 + 1):\n  if n%i == 0:\n    m = max(m, i)\nprint(len(str(n \/\/ m)))",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s311615398":{
    "code_string":"N=int(input())\nans=float('inf')\n\nfor i in range(1,N**0.5+1):\n    if N%i==0:\n        ans=min(ans,len(str(N\/\/i)))\nprint(ans)",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s290166163":{
    "code_string":"n = int(input())\nfor i in range(int(n**0.5),0,-1):\n    if n%i == 0:\n        a = max(i,n\/\/i)\n        print(int(math.log10(a))+1)\n        break",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s192765972":{
    "code_string":"n = int(input())\nans = 10\nfor i in range(1, n\/2+1):\n    if n % i == 0:\n        if len(str(max(i, n\/i))) <= ans:\n            ans = len(str(max(i, n\/i)))\nprint(ans)\n",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s932710765":{
    "code_string":"N = int(input())\nans = 100000\nfor i in range(1, 2 * 10 ** 7):\n    if N % i == 0:\n        ans = min(ans, max(len(str(i)), len(str(N \/\/ i))))\n\nprint(ans)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s349973801":{
    "code_string":"import math\n\nN = int(input())\n\ndef f(a,b):\n    if len(str(a)) < len(str(b)):\n        return len(str(b))\n    else:\n        return len(str(a))\n\nans = 100000000000\nfor i in range(1,math.sqrt(N)+1):\n    if N % i == 0:\n        ans = min(ans,f(i,N\/\/i))\nprint(ans)\n        \n        ",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s561212876":{
    "code_string":"n=int(input())\n\nfor a in range(1,n**0.5+1):\n    if n%a==0:\n        b=n\/\/a\n        sa=str(a)\n        sb=str(b)\n        if a<=b:\n             ans=len(sb)\n        else:\n            break\n\nprint(ans)",
    "error_obj":"TypeError: 'float' object cannot be interpreted as an integer"
  },
  "s376068567":{
    "code_string":"N = int(input()) \nans = 111111111110\nfor i in range(int(N**0.5+2)):\n    if N%i == 0:\n        use = N\/\/i \n        s = str(use) \n        t = str(i) \n        ans = min(ans, max(len(s), len(t))) \n\nprint(ans)",
    "error_obj":"ZeroDivisionError: integer division or modulo by zero"
  },
  "s289637047":{
    "code_string":"N, A, B = map(int, input().split())\nV = sorted([int(x) for x in input().split()],reverse=True)\nfrom statistics import mean\nfrom math import comb\nmaxmean = mean(V[:A])\nway = 1\nfor i in range(1,B+1-A):\n    v = V.pop(0)\n    if v != maxmean:\n        break\nif i > 0:\n    same = A + i\n    for j in range(A,same):\n        way += comb(same, j)\nprint(maxmean)\nprint(way)",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s870473356":{
    "code_string":"a, b = map(int, input().split())\nif a==b==\"H\" or a==b==\"D\":\n    print(\"H\")\nelse:\n    print(\"D\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'H'"
  },
  "s255980432":{
    "code_string":"a, b = input().split()\n\nif a == b:\n  print('H'):\nelse:\n  print('D')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s529912269":{
    "code_string":"a,b=input().split()\nprint(\"H\" if a=b=\"H\"or a=b=\"D\" else\"D\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s400954033":{
    "code_string":"a,b=map(int,input().split())\nif a=='H':\n  print(b)\n  exit()\nelse:\n  if b=='H':\n    print('D')\n  else:\n    print('H')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'H'"
  },
  "s742220957":{
    "code_string":"a,b =input().split()\n\nd={'H':0, 'D':1}\nprint(['H','D'][d[a]^d[b]]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s606440964":{
    "code_string":"a, b = map(str, input().split())\nif a == 'H' and b == 'H' or A == ' D' and b = = 'D':\n    print('H')\nelse:\n    print('D')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s380407087":{
    "code_string":"a,_,b=input().split()\nprint(\"DH\"[a==b])",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s820462650":{
    "code_string":"a,b=input().split()\nx= (a==\"H\")\ny=(b==\"H\")\nif x and y or not x and not y\n  print(\"H\")\nelse:\n  print(\"D\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s572135110":{
    "code_string":"a,b=map(input().split())\nif(a =='H' and b=='H') or (a =='D' and b=='D'):\n    print('H')\nelse:\n    print('D')",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s242500036":{
    "code_string":"a,b=map(int,input().split())\nif a==b:\n  print(\"H\")\nelse:\n  print(\"D\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'H'"
  },
  "s445981778":{
    "code_string":"a,b = input().split()\n\nprint(\"H\" if (a == \"H\" ^ b == \"H\") else \"D\")\n",
    "error_obj":"TypeError: unsupported operand type(s) for ^: 'str' and 'str'"
  },
  "s555859845":{
    "code_string":"# AtCoDeer\u304f\u3093\u3068TopCoDeer\u304f\u3093\u304c\u4f55\u3068\u8a00\u3063\u3066\u308b\u304b\u3092 a,b\u3067\u5165\u529b\na,b = input().split()\n# \u3082\u3057a=H\u3067b=H\u306a\u3089TopCoDeer\u304f\u3093\u306f\u6b63\u76f4\u8005\nif a = \"H\":\n    if b = \"H\":\n        print(\"H\")\n# \u3082\u3057a=D\u3067b=H\u306a\u3089TopCoDeer\u304f\u3093\u306f\u6b63\u76f4\u8005\nelif a = \"D\":\n    if b = \"D\":\n        print(\"H\")\n# \u305d\u308c\u4ee5\u5916\u306fb\u306f\u5618\u3064\u304d\nelse:\n    print(\"D\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s471438733":{
    "code_string":"a,b=input().split()\nif a == H:\n    if b == H:\n        print(\"H\")\n    else:\n        print(\"D\")\nif a == D:\n    if b == H:\n        print(\"D\")\n    else:\n        print(\"H\")",
    "error_obj":"NameError: name 'H' is not defined"
  },
  "s368616056":{
    "code_string":"# \u5165\u529b\na, b = map(int, input().split())\n\n# \u51e6\u7406&\u51fa\u529b\nif a == 'H' and b == 'H':\n    print('H')\nelif a == 'H' and b == 'D':\n    print('D')\nelif a == 'D' and b == 'H':\n    print('D')\nelif a == 'D' and b == 'D':\n    print('H')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'H'"
  },
  "s456474628":{
    "code_string":"a,b=input().split()\nif a=b:\n  print(\"H\")\nelse:\n  print(\"D\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s544689921":{
    "code_string":"a,b=(int(x) for x in input().split())\nif a=='H':\n    if b=='H':\n        print(\"H\")\n    elif b=='D':\n        print(\"D\")\nelif a=='D':\n    if b=='H':\n        print(\"D\")\n    elif b=='D':\n        print(\"H\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'H'"
  },
  "s647149181":{
    "code_string":"a, b = input().split()\n\nif a == 'H'\n  if b == 'H':\n  \tprint('H')\n  else:\n    print('D')\n\nelse:\n  if b == 'H':\n    print('D')\n  else:\n    print('H')\n ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s274736443":{
    "code_string":"a, b = map(str, input().split())\nif a = 'H':\n  print(b)\nelse:\n  if b = 'H':\n    print('D')\n  else:\n    print('H')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s168934650":{
    "code_string":"W,a,b=map(int,input().split())\nif b>a:\n  \tif b-(a+W)==0:\n  \tprint(0)\n  \texit()\n\tprint(b-(a+W))\nelse:\n  if a-(b+W)==0:\n  \tprint(0)\n  \texit()\n\tprint(a-(b+W))",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s350761141":{
    "code_string":"w, a, b = map(int, input().split())\n\nif b + w < a:\n    print(a - (b + w))\nelif a <= b + w <= a + w:\n    print(0):\nelif a <= b <= a + w:\n    print(0)\nelif a + w < b:\n    print(b- (a + w))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s996642623":{
    "code_string":"w,a,b=map(int,input().split())\nif a+w<b:\n    print(b-a-w)\nelse:\n  if a<=b+w and a+w>=b:\n    print(0)\nelse:\n    print(a-b-w)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s170539763":{
    "code_string":"W,a,b=map(int,input().split())\n\nif a+W<b:\n  print(b-(W+a)):\nelse:\n  print(0)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s553289460":{
    "code_string":"W,a,b=map(int,input())\nprint(max(max(a,b)-W-min(a,b),0))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s035864186":{
    "code_string":"W,a,b = map(int, input().split())\n\nif (a <= b <= a+W) or (a <= b+W <= a+W) or :\n    print(0)\nelse:\n    if a+W < b:\n        print(abs(b-(a+W)))\n    elif b+W < a:\n        print(abs(a-(b+W)))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s642684502":{
    "code_string":"import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nX = INT()\n\nA = []\ntmp = 0\nfor i in range(1, X):\n    tmp += i\n    A.append(tmp)\n    if tmp > X:\n        break\n\nfor i in range(1, len(A)+1):\n    tmp += i\n    if X <= A[i]:\n        print(i+1)\n        break\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s237582259":{
    "code_string":"x = int(input())\ns = 0\nj = 0\nfor i in range(1..x+1):\n  s += i\n  j += 1\n  if s >= x:\n    print(j)\n    break",
    "error_obj":"AttributeError: 'float' object has no attribute 'x'"
  },
  "s346259281":{
    "code_string":"d = int(input())\nt = 0 \nwhile True:\n  if t*(t+1)\/\/2 >=d:\n    print(t)\n    exit()",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s620190887":{
    "code_string":"import math\nn,c,k=map(int,input().split())\nt=[0]*n\ns=0\na=0\nfor i in range(n):\n\tt[i]=int(input())\n    if i>0 and a>0:\n      if t[i]-t[i-1]<=k:\n        s+=(a+n)\/\/c\n        a=(a+n)%c\n      else:\n      \ts+=math.ceil((a+n)\/c)\n        a=0\nprint(s)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s777102471":{
    "code_string":"N, C, K = map(int, input().split())\nT = list(int(input()) for i in range(N))\nT.sort()\nbus = 1\npassenger = 0\nlimit = T[0] + K\nfor i in range(N):\n    if T[i] <= limit and passenger < c:\n        passenger += 1\n    else:\n        bus += 1\n        limit = T[i]+K\n        passenger = 1\nprint(bus)",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s013495275":{
    "code_string":"import sys\nN, C, K = map(int, input().split())\nA = list(map(int, sys.stdin.readlines()))+[10**10]\nA.sort()\na, c, t = 0, 1, a[0]+k\nfor i in A[1:]:\n    if i <= t and c < C:\n        c += 1\n    else:\n        t, c = i + K, 1\n        a += 1\n \nprint(a)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s837256506":{
    "code_string":"n = int(input())\na = sorted(list(map(int, input().split())))\n \nans = -1\nfor i in range(n-1):\n    if a[i]*2 < a[i+1]:\n        ans = i\n    a[i+1] += a[i]\nprint(n-ans-1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 3 5'"
  },
  "s538070835":{
    "code_string":"test",
    "error_obj":"NameError: name 'test' is not defined"
  },
  "s967670996":{
    "code_string":"if n >= 15:\n    x = n * 800\n    y = ( n \/\/ 15 ) * 200\n    print(x - y)\nelse:\n    print(n * 800)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s243367396":{
    "code_string":"n = int,input()\nk = int(n\/15)\nx = 800*n - 200*k\nprint(x)",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'tuple' and 'int'"
  },
  "s119714546":{
    "code_string":"#include <stdio.h>\n\nint main(void) {\n  int N;\n  scanf(\"%d\", &N);\n  int x = 800 * N;\n  int y = N \/ 15 *200;\n  int ans = x - y;\n  printf(\"%d\\n\", ans);\n  return 0;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s625095501":{
    "code_string":"n=int(input())\nprint(800*n-200*(n\/\/15)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s426217533":{
    "code_string":"N = map(int, input())\nn = N \/\/ 15\nx = 800 * N\ny = 200 * n\n\nprint(x-y)",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'map' and 'int'"
  },
  "s992000794":{
    "code_string":"x = N * 800\ny = (N \/\/ 15) * 200\nprint(x - y)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s708154500":{
    "code_string":"n = int(input())\n\nmeal_price = n * 15\nmeal_discount_count = n \/\/ 15\n\nreturn meal_price - (meal_discount_count * 200)",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s797103490":{
    "code_string":"n = int(input())\n\ninput(x - 200 * (x\/\/15))",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s043890186":{
    "code_string":"# coding: utf-8\n\nn = int(N)\n\npower = 1\nfor i in range(1, n+1):\n    power *= i\n    power = power % (10**9+7)\n\nprint(power)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s081445820":{
    "code_string":"import math\nx = int(input())\na = 10*10*10*10*10*10*10*10*10+7\nprint(math.fanctional(x) % a)",
    "error_obj":"AttributeError: module 'math' has no attribute 'fanctional'"
  },
  "s190406207":{
    "code_string":"print(math.factorial(int(input())))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s225534887":{
    "code_string":"s=int(input())\nans=1\nfor i in range(1,n+1):\n  ans=ans%(10**9+7)*i\n  \n  \nprint(ans%(10**9+7))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s382355929":{
    "code_string":"mycode = '''\n# distutils: language=c++\n# cython: language_level=3, boundscheck=False, wraparound=False\n# cython: cdivision=True\n\nctypedef long long LL\nimport numpy as np\ncimport numpy as cp\ncdef LL MOD = 10**9 + 7\ncdef LL N = int(input())\ncdef LL ans = 1\n\ncdef i\nfor i in range(2, N + 1):\n    ans *= i\n    ans %= MOD\nprint(ans)\n'''\nimport sys\nif sys.argv[-1] == 'ONLINE_JUDGE':  # \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\n    with open('mycode.pyx', 'w') as f:\n        f.write(mycode)\n    import os\n    os.system('cythonize -i -3 -b mycode.pyx')\n\nimport mycode\n",
    "error_obj":"ModuleNotFoundError: No module named 'mycode'"
  },
  "s213325611":{
    "code_string":"import math\nN = int(input())\nprint(factorial.(N)%(10**9+7))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s019158929":{
    "code_string":"import math\nN=int(input())\nprint(math.factrial(N)%(10**9+7))",
    "error_obj":"AttributeError: module 'math' has no attribute 'factrial'"
  },
  "s874645968":{
    "code_string":"n = int(input())\npower = 1\nfor i in range(1,n+1):\n    power *= i\n    power = power % (10 ** 9 + 7))\n\nprint(power % (10 ** 9 + 7))",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s267514613":{
    "code_string":"print(math.factorial(int(input()))%(10**9+7))",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s394144631":{
    "code_string":"import math\nn = int(input())\nprint(math.factrial(n) % (10**9 + 7))",
    "error_obj":"AttributeError: module 'math' has no attribute 'factrial'"
  },
  "s924417473":{
    "code_string":"n, m = [int(i) for i in input().split()]\n\nif n >= 2 * m:\n    print(m \/\/ 2)\nelse:\n    print(n + (m - 2 * n) \/\/ 2)\nn, m = [int(i) for i in input().split()]\n\nif n >= 2 * m:\n    print(m \/\/ 2)\nelse:\n    print(n + (m - 2 * n) \/\/ 4)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s074147582":{
    "code_string":"import sys\nfrom collections import deque\n\ndic={'o':lambda s:1-(s[1]^s[0]), 'x':lambda s:s[1]^s[0]}\ndef mknseq(ox,ld):\n    for x in ld:\n        x.append(dic[ox]((x[-2],x[-1])))\ndef main():\n    N=int(sys.stdin.readline().strip())\n    s=list(sys.stdin.readline().strip())\n    ans=[deque([x,y]) for x in range(2) for y in range(2)]\n    for x in range(N):\n        mknseq(s[x],ans)\n    # print(ans)\n    for x in ans:\n        if x[:2]==x[-2:]:\n            return print(''.join([['W','S'][i] for i in x])[1:-1])\n    print(-1)\n\nif __name__=='__main__':\n    main()\n",
    "error_obj":"TypeError: sequence index must be integer, not 'slice'"
  },
  "s015264516":{
    "code_string":"N,M=map(int,input().split())\nn1=min(N,M\/\/2)\nprint(ans+(M-2*n1)\/\/4)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s214114142":{
    "code_string":"a=(int(input())-2)%13\nb=(int(input())-2)%13\nprint([\"Draw\",\"Bob\",\"Alice\"][((a==b)+1)*((a<b)-(b<a))])",
    "error_obj":"ValueError: invalid literal for int() with base 10: '8 6'"
  },
  "s616876883":{
    "code_string":"a, b = map(int, input())\nif a == b:\n  print('Draw')\nelif a > b and b!=1:\n  print('Alice')\nelse:\n  print('Bob')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s689673086":{
    "code_string":"Alice,Bob = map(int,input().split())\nif Alice = 1:\n    ALice = 14\nif Bob = 1:\n    Bob = 14\nif Alice>Bob:\n    print('Alice')\nelif Alice==Bob:\n    print('Draw')\nelse:\n    print('Bob')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s068498048":{
    "code_string":"a, b = map(int, input().split()\nif a == b:\n  print(\"Draw\")\nelif a == 1 or a > b >= 2:\n    print(\"Alice\")\nelif b == 1 or b > a >= 2:\n    print(\"Bob\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s925460706":{
    "code_string":"a, b = map(int, input().split())\n\nif a < b:\n  ans = 'Bob'\nelif a == b:\n  ans = 'Draw'\nelse:\n  a > b:\n    ans = 'Alice'\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s075834047":{
    "code_string":"a,b=map(int,input().split())\nif a>b:\n    print(\"Alice\")\nelif a=b:\n    print(\"Draw\")\nelse:\n    print(\"Bob\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s512657134":{
    "code_string":"lst = map(int,input().split())\n\nif lst[0] > lst[1]:\n  print('Alice')\nelif lst[0] < lst[1]:\n  print('Bob')\nelse:\n  print('Draw')\n\n",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s015120539":{
    "code_string":"\ndef main():\n    a, b = map(int, input().split())\n    if a-2 < 0:\n        a = 14\n\n    if b-2 < 0:\n        b = 14i\n\n    if a-2 > b-2:\n        print('Alice')\n    elif a-2 < b-2:\n        print('Bob')\n    else:\n        print('Draw')\n\n\nif __name__ == \"__main__\":\n    main()\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s132231925":{
    "code_string":"tmp = input().split(\" \")\na = (int(tmp[0]) - 2) % 13\nb = (int(tmp[1]) - 2) % 13\nprint(\"Alice\") if a > b else print(\"Draw\") if a = b else print(\"Bob\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s629386186":{
    "code_string":"a,b = map(int, input().split())\n\nif a>b and b!=1 or a==1:\n    print(\"Alice\")\nelif a==b:\n    print(\"Draw\")\nelse\n    print(\"Bob\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s700479306":{
    "code_string":"import sys\nA,B = map(int,input.split())\nif A < 0 or A > 13 or B < 0 or B > 13:\n    sys.exit()\n\nif A == 1 or B == 1:\n    if A == B:\n        print(\"Draw\")\n    elif A == 1:\n        print(\"Alice\")\n    elif B == 1:\n        print(\"Bob\")\n    sys.exit()\n\nif A > B:\n    print(\"Alice\")\nelif B > A:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s847704143":{
    "code_string":"a,b =map(int,input().split())\nA,B,C =\"Alice\",\"Bob\",Draw\"\nif max(a,b) ==\"13\" and min(a,b) ==\"1\":\n  print(A) if a < b else print(B)\nelse:\n  print(A) if a > b print(B) if a < b else print(C)\n  ",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s263203449":{
    "code_string":"a, b = list(map(int, input().split()))\nif a == 1:\n  a = 14\nelse:\n  break\nif b == 1:\n  b = 14\nelse:\n  break\nif a > b:\n  print('Alice')\nelif a == b:\n  print('Draw')\nelse:\n  print('Bob')\n",
    "error_obj":"SyntaxError: 'break' outside loop"
  },
  "s197767510":{
    "code_string":"import itertools\nN,M = map(int,input().split())\nL=[]\nfor i in range(M):\n    a,b=map(int,input().split())\n    L.append([a,b])\n \nnumber=[]\nfor i in range(1,N+1):\n    number.append(i)\n    \nans=0\n \nfor v in itertools.permutations(number,N):\n    a=0\n    v=list(v)\n    for j in range(N-1):\n        if ([v[j],v[j+1]] not in L ) and ([v[j+1],v[j]] not in L):\n            a=1\n    if a==0 and v[0]==1:\n        ans+=1\n \nprint(ans)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s896357754":{
    "code_string":"a, b = map(int, input().split())\nif a > b or a = 1:\n  print(\"Alice\")\nelif b > a or b = 1:\n  print(\"Bob\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s543790180":{
    "code_string":"A, B=map(int,input())\n\nfunc=lambda x:(x,x+13)[x==1]\n\nif func(A)==func(B):\n  print('Draw')\nelif func(A)<func(B):\n  print('Bob')\nelse:\n  print('Alice')",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s644361601":{
    "code_string":"a,b = = map(int,input().split())\nif a==1 and b!=1 or a>b:\n  print('Alice')\nelif b==1 and a!=1 or b>a:\n  print('Bob')\nelse:\n  print('Draw')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s643644220":{
    "code_string":"# \u5165\u529b\nA, B = map(int,input().split())\n\n# \u51e6\u7406\nif A == B:\n    print('Draw')\nelif A == 1:\n    print('Alice')\nelif B == 1:\n    print('Bob')\nelif A > B:\n    print('Alice')\nelse:",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s382751171":{
    "code_string":"a,b = map(int(input().split()))\n\na = 14 if a == 1 else a\nb = 14 if b == 1 else b\n\nif a > b:\n    print(\"Alice\")\nelif a < b:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s514861740":{
    "code_string":"N, M = map(int, input().split())\nab = [[] for _ in range(N)]\n\nfor _ in range(M):\n    a, b = map(int,input().split())\n    ab[a-1].append(b-1)\n    ab[b-1].append(a-1)\n\ncount = 0\n\ndef dfs(i, now, done):\n    global count\n    if i == N-1:\n        count += 1\n        return\n\n    for j in ab[now]:\n        if j not in done:\n            dfs(i+1, j, done + [j])\n    return\n\ndfs(0, 0, [0])\nprint(count)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s747462476":{
    "code_string":"from collections import defaultdict\nn, m = map(lambda x: int(x), input().split())\n\nlinks = defaultdict(set)\n\nfor _ in range(m):\n    a, b = map(lambda x: int(x), input().split())\n    links[a].add(b)\n    links[b].add(a)\n    \npath_counter = 0\n    \ndef path_patterns_number(current_node, remaining_nodes):#, remaining_links):\n#     print(current_node, remaining_nodes)\n    if len(remaining_nodes) == 0:\n        return 1\n    \n    patterns = 0\n    \n    for next_node in (links[current_node] & remaining_nodes):\n#         remaining_links_copy = remaining_links.copy()\n#         remaining_links_copy[current_node].remove(next_node) <=\u6d45\u3044\u30b3\u30d4\u30fc\u306a\u306e\u3067\u5143\u306e\u304b\u3089\u3082remove\u3055\u308c\u3066\u308b\n        patterns += path_patterns_number(\n            next_node,\n            remaining_nodes.copy() - {next_node}\n#             remaining_links_copy\n        )\n    \n    return patterns\n    \nprint(path_patterns_number(1, set(range(2,n+1)))#, links))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s983263602":{
    "code_string":"# -*- coding: utf-8 -*-\nimport numpy as np\n\nn,m = map(int, input().split())\ngraph = [[] for j in range(n)]\ngraph = np.array(graph)\n\nfor i in range(m):\n    a,b = map(int, input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\nused = [False]*n\nused[0] = True\n\ndef DFS(v,used):\n    if all(used):\n        return 1\n    ans = 0\n    for i in graph(v):\n        if used[i]:\n            continue\n        used[i] = True\n        ans += DFS(i,used)\n        used[i] = False\n    return ans\n  \nprint(DFS(0,used))",
    "error_obj":"AttributeError: 'numpy.ndarray' object has no attribute 'append'"
  },
  "s625726331":{
    "code_string":"N,M = map(int,input.split())\n\n\n#i\u304b\u3089\u9032\u3081\u308b\u5834\u6240\u3092\u30ea\u30b9\u30c8\u306b\u3057\u3066\u4fdd\u7ba1\nedges = {i:[] for i in range(1,N+1)}\nfor i in range(M):\n  a,b = [int(a) for a in input().split()]\n  edges[a].append(b)\n  edges[b].append(a)\n\n\n#\u6df1\u3055\u512a\u5148\u63a2\u7d22\ndef dfs(list):\n    #lst(\u901a\u904e\u70b9)\u306e\u6570\u304cN(\u9802\u70b9\u6570)\u3068\u7b49\u3057\u304f\u306a\u3063\u305f\u3089\u63a2\u7d22\u7d42\u4e86\uff08\u6210\u529f\uff09\n  if len(list) == N:\n    return 1\n  else:\n    a = list[-1]\n    #lst\u306e\u6700\u5f8c\u5c3e\uff08\u73fe\u5728\u5730\uff09\u304c\u6b21\u306b\u9032\u3081\u308b\u5834\u6240\u3092next\u3068\u3057\u3066\u30ea\u30b9\u30c8\u5316\n    #next\u306b\u4ee5\u524d\u901a\u3063\u305f\u5834\u6240\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d\n    next = [n for n in edges[a] if n not in list]\n    #\u6b21\u306b\u9032\u3081\u308b\u5834\u6240\u304c\u306a\u304f\u306a\u3063\u305f\u3089\u63a2\u7d22\u7d42\u4e86\uff08\u5931\u6557\uff09\n    if len(next) == 0:\n      return 0\n\n    total = 0\n    #\u518d\u5e30\u3067\u3055\u3089\u306b\u63a2\u7d22\n    for n in next:\n      total += dfs(list + [n])\n\n    return total\n\n\nans = dfs([1])\n\nprint(ans)\n",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s483219666":{
    "code_string":"\n#\u5165\u529b\n\nN,M = map(int,input().split())\n\ngraph = [ ]\nfor _ in range(N+1):\n    graph.append([])\n\nfor _ in range(M):\n    a,b = map(int,input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n\nvisited = []\nfor _ in range(N+1):\n    visited.append(False)\n\n\ndef dfs(dep,cur):\n    global N,visited,graph\n\n    if dep == N:\n        ans += 1\n        return 1\n\n        ans = 0\n\n    for dist in graph[cur]:\n        if visited[dist] == False:\n            visited[dist] = True\n            ans += dfs(dep + 1,dist)\n            visited[dist] = False\n    return ans\n\n visited[1] = True\n dfs(1,1)\n print(ans)\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s915390436":{
    "code_string":"import itertools\nn, m = map(int, input().split())\npath = [[False] * n for i in range(n)]\nfor i in range(m):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    path[a][b] = True\n    path[b][a] = True\nans = 0\nfor i itertools.permutations(range(n), n):\n    if i[0] == 0:\n        for j in range(n):\n            if j == n - 1:\n                ans += 1\n                break\n            if not path[i[j]][i[j+1]]:\n                break\nprint(ans)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s774541324":{
    "code_string":"import itertools\nfrom math import factorial as fa\nP = itertools.permutations(list(range(n)))\nn, m = map(int, input().split())\nG = [set() for _ in range(n)]\nfor _ in range(m):\n    a,b = map(lambda x:int(x)-1, input().split())\n    G[a].add(b)\n    G[b].add(a)\n\nans = 0\nfor _ in range(fa(n)):\n    p = next(P)\n    if p[0] != 0:\n        break\n    f = True\n    for pnw,pnx in zip(p,p[1:]):\n        if not pnx in G[pnw]:\n            f = False\n            break\n    if f:\n        ans += 1\nprint(ans)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s320464368":{
    "code_string":"import itertools as it\nn,m=map(int,input().split())\npath={[] for _ in range(m)}\nfor i in range(m): path[i]=list(map(int,input().split()))\nls=list(it.permutations(range(1,n+1)))\ncnt=0\nfor l in ls:\n    if l[0]==1: break\n    for i in range(n-1):\n        if [i,i+1] in path: cnt+=1\nprint(cnt)",
    "error_obj":"TypeError: unhashable type: 'list'"
  },
  "s845322609":{
    "code_string":"n, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(m)]\n\nc = [i for i in range(2, n + 1)]\nb = []\nfor x in itertools.permutations(c):\n  b.append([1] + list(x))\n  \ncnt = 0\nfor x in b:\n  exist = True\n  for i in range(n-1):\n    if not sorted(x[i:i+2]) in a:\n      exist = False\n      break\n  if exist:\n    cnt += 1\n\nprint(cnt)",
    "error_obj":"NameError: name 'itertools' is not defined"
  },
  "s267953821":{
    "code_string":"import itertools\nN,M=map(int,input().split())\nedges={tuplec(sorted(map(int,input().split()))) for i in range(M)}\nans=0\nfor i in itertools.permutations(range(2,N+1),N-1):\n    l=[1]+list(i)\n    ans+=sum(1 for edge in zip(l,l[1:]) if tuple(sorted(edge)) in edges)==N-1\nprint(ans)",
    "error_obj":"NameError: name 'tuplec' is not defined"
  },
  "s434121574":{
    "code_string":"from sys import setrecursionlimit\nsetrecursionlimit(10 ** 10)\nn, m = map(int, input().split())\nP = [[] for i in range(m)]   #Pass\nfor i in range(m):\n    a, b = map(int, input().split())\n    a, b = a - 1, b - 1  \n    P[a].append(b)\n    P[b].append(a)\n#print(P)\n\nc = 0   #cursol\nR = [0 for i in range(m)]  #Record\ntm = 1  #time\n\ndef all_search_dfs(c:int, tm:int, R:list):\n    if R[c] == 0:\n        R[c] = 1\n        if  tm < n:\n            return point_calculate(c, tm, R)\n        elif tm == n:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n\ndef point_calculate(c:int, tm:int, R:list):\n    #print('c = ', c)\n    p = 0\n    #print('check = ', P[c])\n    for i in range(len(P[c])):\n        R2 = R[:]\n        #print('before = ', R2)\n        tmp = all_search_dfs(P[c][i], tm + 1, R2)\n        #print('after = ', R2)\n        #print('tmp = ', tmp)\n        p += tmp\n        #print('p = ', p)\n    return p\n\nprint(all_search_dfs(c, tm, R))",
    "error_obj":"OverflowError: Python int too large to convert to C int"
  },
  "s614124162":{
    "code_string":"N,M = map(int,input(),aplit())\n\npath = [[] for i in range(N)]\n\nfor _ in range(M):\n\ta,b = map(int,input(),split())\n\tpath[a-1],append(b-1)\n    path[b-1],append(a-1)\nvis = [0 for i in range(N)]\ncnt = 0\n\ndef dfs(now,path):\n\tglobal cnt\n  \tif depth == N: cnt+=1\n\tfor new in path[now]:\n    \tif vis[new] == 0:\n\t\t\tvis[new] = 1\n        \tdfs(new,depth+1)\n          \tvis[new] = 0\n\nvis[0] = 1\ndfs(0,1)\nprint(cnt)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s287721699":{
    "code_string":"import itertools\nN,M = map(int,input().split())\nL=[]\nfor i in range(M):\n    a,b=map(int,input().split())\n    L.append([a,b])\n \nnumber=[]\nfor i in range(1,N+1):\n    number.append(i)\n    \nans=0\n \nfor v in itertools.permutations(number,N):\n    a=0\n    v=list(v)\n    for j in range(N-1):\n        if ([v[j],v[j+1]] not in L ) and ([v[j+1],v[j]] not in L):\n            a=1\n    if a==0 and v[0]==1:\n        ans+=1\n \nprint(ans)\nimport itertools\nN,M = map(int,input().split())\nL=[]\nfor i in range(M):\n    a,b=map(int,input().split())\n    L.append([a,b])\n \nnumber=[]\nfor i in range(1,N+1):\n    number.append(i)\n    \nans=0\n \nfor v in itertools.permutations(number,N):\n    a=0\n    v=list(v)\n    for j in range(N-1):\n        if ([v[j],v[j+1]] not in L ) and ([v[j+1],v[j]] not in L):\n            a=1\n    if a==0 and v[0]==1:\n        ans+=1\n \nprint(ans)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s631445449":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\na=[i if i%2==1 else None  for i in a]\nif a.count()%2==1:\n  print('NO')\nelse:\n  print('YES')",
    "error_obj":"TypeError: list.count() takes exactly one argument (0 given)"
  },
  "s610322490":{
    "code_string":"#\n# agc010 a\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1 2 3\"\"\"\n        output = \"\"\"YES\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5\n1 2 3 4 5\"\"\"\n        output = \"\"\"NO\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    e = 0\n    o = 0\n    for a in A:\n        if a % 2 == 0:\n            e += 1\n        else:\n            o += 1\n\n    if o % 2 == 0:\n        if (o \/\/ 2 + e) % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s588315936":{
    "code_string":"X= (int(x) for x in input().split())\nif X>1200:\n    print(\"ARC\")\nelse :\n    print(\"ABC\")",
    "error_obj":"TypeError: '>' not supported between instances of 'generator' and 'int'"
  },
  "s839549993":{
    "code_string":"n = int(input)\nif n<1200:\n  print(\"ABC\")\nelse:\n  print(\"ARC\")",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s389129325":{
    "code_string":"input_line = int(input())\n\nif input_line >= 1200\n\tprint(\"ARC\")\nelse\n\tprint(\"ABC\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s719587586":{
    "code_string":"x = int,input()\nif x < 1200:\n    print('ABC')\nelse:\n    print(\"ARC\")",
    "error_obj":"TypeError: '<' not supported between instances of 'tuple' and 'int'"
  },
  "s120725941":{
    "code_string":"x=int(inptu())\n\nif x<1200:\n  print('ABC')\nelse:\n  print('ARC')",
    "error_obj":"NameError: name 'inptu' is not defined"
  },
  "s271141635":{
    "code_string":"print('ABC'if x=int(input())<1200else'ARC')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s237899161":{
    "code_string":"x=input()\nif x<1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s971234758":{
    "code_string":"print(\"ABC\" if input()<1200 else \"ARC\")\n",
    "error_obj":"TypeError: '<' not supported between instances of 'str' and 'int'"
  },
  "s513013833":{
    "code_string":"rate = int(input())\nif rate < 1200:\n  print(\"ABC\")\nelse:\n  print(\"ARC)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s022738631":{
    "code_string":"s = input()\na=0\nb=0\nfor i in range(len(s)):\n  if s[i]=='A':\n    a = i\n    break\nfor i in range(len(s),-1,-1):\n  if s[i] == 'Z':\n    b = i\n    break\nprint(b-a+1)\n  ",
    "error_obj":"IndexError: string index out of range"
  },
  "s080703839":{
    "code_string":"sample = input()\nnew = []\nfor i in sample:\n  new.append(i)\nif \"A\" in new:\n  a_pos = list.index(new)\nif \"Z\" in new:\n  z_pos = list.index(new)\nif a_post < z_pos:\n  out = new[a_pos:(z_pos+1)]\n    \nnew_string = \"\"\nfor j in out:\n  new_string += j\nprint(len(new_string))\n",
    "error_obj":"TypeError: index expected at least 1 argument, got 0"
  },
  "s765903591":{
    "code_string":"s=input()\n \nds=list(s)\n \n \nc1=0\nwhile ds[c1]!='A'\n  c1+=1\n \nc2=-1\nwhile ds[c2]!='Z':\n  c2-=1\n \nprint(len(s[c1:c2]))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s485784450":{
    "code_string":"n = input()\na = n.index(\"A\")\nn = len(n) - n[::-1].index(\"Z\") - 1\nprint(len(n[a:n+1]))",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s320512392":{
    "code_string":"ZABCZ",
    "error_obj":"NameError: name 'ZABCZ' is not defined"
  },
  "s945270175":{
    "code_string":"s=input()\na_min=0\nz_max=0\nfor i in s:\n  if s[i]==\"A\":\n    a_min=i\n    break\nfor i in s:\n  if s[i]==\"Z\":\n    z_max=i\nprint(z_max-a_min+1)",
    "error_obj":"TypeError: string indices must be integers"
  },
  "s254748259":{
    "code_string":"s=input\n\na=s.find('A')\nz=s.rfind('Z')\n\nprint(z-a)\n",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'find'"
  },
  "s614953869":{
    "code_string":"#include<bits\/stdc++.h>\n\/\/ Begin Header {{{\nusing namespace std;\nusing ll = long long;\nusing P = pair<ll, ll>;\nusing Graph = vector<vector<ll>>;\n#define rep(i,n) for(ll i=0; i<n; i++)\n#define loop(i, j, n) for(ll i=j; i<n; i++)\n#define all(x) (x).begin(), (x).end()\nconstexpr int INF  = 0x3f3f3f3f;\nconst long long mod=1e9+7;\nconst long double PI = acos(-1);\n\/\/ }}} End Header\nint main() {\n\tstring s;\n\tcin >> s;\n\tint f1, f2;\n\trep(i,s.length()){\n\t\tif(s[i]=='A'){\n\t\t\tf1=i;\n\t\t\tbreak;\n\t\t}\n\t}\n\trep(i,s.length()){\n\t\tif(s[i]=='Z') f2=i;\n\t}\n\tcout << f2-f1+1 << endl;\n\treturn 0;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s125390779":{
    "code_string":"s = input()\n\nposA = 0\nposZ = 0\n\nfor i in range(len(s)):\n  if s[i] == \"A\":\n    posA = i\n    break\nfor j in range(len(s)):\n  if s[-j-1] == \"Z\":\n    posZ = N - 1 - j\n    break\n\nprint(posZ - posA + 1)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s609603869":{
    "code_string":"# 6, 5, 6, 5, ...\n\nx = int(input())\nq = x \/\/ 11\nr = x % 11\nif r == 0:\n    ans = q * 2\nelif 1 <= r <= 5:\n    ans = q * 2 + 1\nelif 6 <= ans <= 10:\n    ans = q * 2 + 2\nprint(ans)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s617151380":{
    "code_string":"x=int(input())\n \np=x\/\/11\nq=x%11\nq2=q-6\n \nif q==0\n  print(2*p)\nelif q2<0:\n  print(2*p+1)\nelse:\n  print(2*p+2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s597355221":{
    "code_string":"print((2*input()-2)\/\/11+1)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s634509525":{
    "code_string":"from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\n\n#a = Counter(A)\nl_a = len(a)\nif(l_a%2 == 0):\n     print(l_a-1)\nelse:\n    print(l_a)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s457746285":{
    "code_string":"import sys\nimport math\nN = int(input())\narray = list(map(int,input().split()))\nset_array = set(array)\n\nif not ( 3 <= N <= 10**5 and N % 2 == 1 ): sys.exit()\nif len(array) == len(list(set_array)): print(0);sys.exit()\n\nprint(len(list(set_array))) if len(list(set_array)) % 2 == 1 else print(len(list(set_array) - 1))",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'list' and 'int'"
  },
  "s629683028":{
    "code_string":"x = input()\ny = x % 11\nif y > 0:\n    cnt = 1\n    if y > 6:\n        cnt += 1\nelse:\n    cnt = 0\n    \nprint(x \/\/ 11 + cnt)\n",
    "error_obj":"TypeError: not all arguments converted during string formatting"
  },
  "s794830106":{
    "code_string":"import collections as col\n\nN = int(input())\nA = list(map(int, input().split()))\n\nm = col.Counter(A)\nans = len(m) if m%2==1 else len(m)-1\nprint(ans)\n\n",
    "error_obj":"TypeError: unsupported operand type(s) for %: 'Counter' and 'int'"
  },
  "s370591239":{
    "code_string":"import sys\nimport numpy as np\nimport numba\nfrom numba import njit, b1, i4, i8\nfrom numba.types import Omitted\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nMOD = 1_000_000_007\n\n@njit((i8, i8), cache=True)\ndef main(N, K):\n    K -= 1\n    U = 5000\n    C = np.zeros((U, U), np.int64)\n    C[0, 0] = 1\n    for n in range(1, U):\n        C[n] += C[n - 1]\n        C[n, 1:] += C[n - 1, :-1]\n        C[n] %= MOD\n\n    dp = np.zeros((N + 10, N + 10), np.int64)\n    dp[0, 0] = 1\n    for n in range(1, N + 10):\n        dp[n, n] = (dp[n - 1, n - 1] + dp[n - 1, n]) % MOD\n        for m in range(n + 1, N + 10):\n            dp[n, m] = (dp[n - 1, m] + dp[n, m - 1]) % MOD\n    for n in range(N + 9, 0, -1):\n        dp[n] -= dp[n - 1]\n        dp[n] %= MOD\n    ans = 0\n    if K == N - 1:\n        return dp[:N, N - 1].sum() % MOD\n    for r in range(N - K, N + 1):\n        x = C[r - 2, N - K - 2]\n        a = N - r\n        b = K - a\n        if b == 0:\n            x = x * (dp[:a + 1, a].sum() % MOD) % MOD\n        else:\n            x *= (dp[1:a + 2, a + 1] * C[b - 1:a + b, b - 1][::-1] %\n                  MOD).sum() % MOD\n            x %= MOD\n        ans += x\n    ans %= MOD\n    for i in range(N - K - 2):\n        ans = ans * 2 % MOD\n    return ans % MOD\n\nN, K = map(int, read().split())\nprint(main(N, K))",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s120558419":{
    "code_string":"N=int(input())\nA=[map(int,input().split()) for _ in range(N)]\n\nr=0\nfor i in range(N-1,-1,-1):\n    a,b=A[i]\n    a+=r\n    r+=-(-a\/\/b)*A[i][1]-a\nprint(r)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s523128577":{
    "code_string":"N = int(input())\nArray = []\nfor i in range(N):\n  Array.append(tuple(map(int,input().split())))\n\nres = 0\nfor i in reversed(range(N)):\n  a,b = Array[i]\n  a+=res\n  res+ = b-a%b\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s576353698":{
    "code_string":"n = int(input())\na = []\nb = []\nfor j in range(n):\n    l = list(map(int, input().split()))\n    a.append(l[0])\n    b.append(l[1])\n c = 0\nfor i in range(n-1, -1, -1):\n    if (a[i]+c) % b[i] != 0:\n        c += (b[i] - (a[i]+c) % b[i])\nprint(c)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s215889254":{
    "code_string":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nMOD = 10**9 + 7\n\ndef main(N, A, B, S):\n    if A > B:\n        A, B = B, A\n    if np.max(S[2:] - S[:-2]) < A:\n        return 0\n    INF = 1 << 62\n    S = np.append(S, INF)\n    # A \u672a\u6e80\u3067\u305f\u3069\u3063\u3066\u3001X\u304c\u3069\u3053\u307e\u3067\u7f6e\u3051\u308b\u304b\n    X = np.zeros_like(S)\n    for i in range(1, N + 1):\n        if S[i] - S[i - 1] >= A:\n            X[i] = X[i - 1]\n        else:\n            X[i] = i\n    # \u76f4\u524d\u306e Y \u3068\u3057\u3066\u3042\u308a\u3046\u308b\u6700\u3082\u53f3\n    Y = np.searchsorted(S, S - B, side='right') - 1\n    dp = np.zeros_like(S)\n    dp_cum = np.zeros_like(S)\n\n    dp[0] = 1\n    dp_cum[0] = 1\n    for n in range(1, N + 1):\n        if X[n - 1] == 0:\n            # \u521d\u51fa\u306e Y\n            dp[n] = 1\n        # \u76f4\u524d\u306e Y \u306e\u7bc4\u56f2\n        l, r = max(0, X[n - 1] - 1), min(n - 1, Y[n])\n        if l <= r:\n            dp[n] += dp_cum[r] - dp_cum[l] + dp[l]\n        dp[n] %= MOD\n        dp_cum[n] = (dp_cum[n - 1] + dp[n]) % MOD\n    return dp[-1]\n\nsignature = '(i8,i8,i8,i8[:],)'\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    from numba.pycc import CC\n    cc = CC('my_module')\n    cc.export('main', signature)(main)\n    cc.compile()\n\nfrom my_module import main\n\nN, A, B = map(int, readline().split())\nS = np.array(read().split(), np.int64)\n\nprint(main(N, A, B, S))",
    "error_obj":"ModuleNotFoundError: No module named 'my_module'"
  },
  "s835290769":{
    "code_string":"a = map(int, input().split())\n\nb = a[0]*a[1] \nc = a[2]*a[3]\nA = [b, c]\nprint(max(A))",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s084307546":{
    "code_string":"\ndef main():\n    a, b, c, d = map(int, input())\n    if a*b >= c*d:\n        print(a*b)\n    else:\n        print(c*d)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s818556829":{
    "code_string":"a,b,c,b = map(int,input().split())\nprint( max(a*b, c*d) )\n",
    "error_obj":"NameError: name 'd' is not defined"
  },
  "s613862477":{
    "code_string":"a, b, c, d = int(input().split())\nx = a * b\ny = c * d\nif x == y:\n  print(x)\nelif x > y:\n  print(x)\nelif y > x:\n  print(y)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s189711413":{
    "code_string":"a, ,b, c, d = map(int, input().split())\nprint(max(a*b, c*d))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s397929400":{
    "code_string":"# 052\n\n# 1.\u5024\u3092\u6b63\u3057\u304f\u53d6\u5f97\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\n\n# 2.\u6b63\u3057\u304f\u51e6\u7406\n\nmenseki1 = A * B\nprint(menseki1)\nmenseki2 = C * D\nprint(menseki2)\n\nif menseki1 > menseki2:\n    print(menseki1)\n\nelif menseki1 < menseki2:\n    print(menseki2)\n\nelse :\n    print(menseki1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 5 2 7'"
  },
  "s036053187":{
    "code_string":"S1 = int(input())\nS2 = int(input())\n\nif S1 > S2:\n    print(S1)\nelif S1 == S2:\n    print(S1 * S2)\nelse:\n    print(S2)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 5 2 7'"
  },
  "s239849151":{
    "code_string":"#52\nA=int(input())\nB=int(input())\nC=int(input())\nD=int(input())\nif A*B>c*D:\n    print(A*B)\nelse:\n    print(C*D)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 5 2 7'"
  },
  "s846352591":{
    "code_string":"n =int(input())\ns = input()\nx = 0\nfor i in s:\n  if i =\"I\": \n    x =max(x,x+1)\n  else:\n    x =max(x,x-1)\nprint(x)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s834857316":{
    "code_string":"N = int(input())\nS = input().split()\nx = 0\n\nfor N in S:\n  if S[N] == \"I\":\n    x += 1\n  elif S[N] == \"D\":\n    x -= 1\nprint(x)",
    "error_obj":"TypeError: list indices must be integers or slices, not str"
  },
  "s861156710":{
    "code_string":"s = input()\n\nfor c in s:\n    x += 1 if c == 'I' else -1\n    \nprint(max(x))",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s568555655":{
    "code_string":"num = int(input())\ngiven = input()\nnew = given.split()\nx = 0\nmax = 0\nfor i in range(num):\n  if new[i] == \"D\":\n    x -= 1\n  if new[i] == \"I\":\n    x += 1\n  if max < x:\n    max = x\nprint(max)\n",
    "error_obj":"IndexError: list index out of range"
  },
  "s585182769":{
    "code_string":" = int(input())\ns = input()\nx = 0\nl = [0]\nfor a in s:\n    if a == \"I\":\n        x = x + 1\n        l.append(x)\n    else:\n        x = x - 1\n        l.append(x)\n\nprint(max(l))\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s882298998":{
    "code_string":"N = int(input())\nS = input()\na = 0\nsum_a = 0\n\nfor i in range(N):\n  if S[i]==\"I\":\n    sum_a += 1 \n    a = max (a , sum_a)\n  else:\n    sum_a- = 1\nprint(a)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s941100756":{
    "code_string":"n = int(input())\ns = input()\ncount = 0\ncount_list = []\n\nfor i in range(len(s)):\n    if s[i] == \"I\":\n        count += 1\n        count_list.append(count)\n    else:\n        count -= 1\n        count_list.append(count)\n\nprint(max(count_list,0))",
    "error_obj":"TypeError: '>' not supported between instances of 'int' and 'list'"
  },
  "s048566427":{
    "code_string":"N = int(input())\nS = input()\nx = 0\nlength = len(S)\nList = [0]\nfor i in range(length):\n  if(S[i] == I):\n    x += 1\n    List.append(x)\n  else:\n    x -= 1\n    List.append(x)\nprint(max(List))",
    "error_obj":"NameError: name 'I' is not defined"
  },
  "s104464281":{
    "code_string":"import collections\nn = int(input())\n\nfor i in range(1,n+1):\n    t *= i\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n \/\/= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n \/\/= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nc = collections.Counter(prime_factorize(t))\nans = 1\nfor _, v in c.items():\n    ans *= (v + 1)\nprint(ans%(10**9+7))",
    "error_obj":"NameError: name 't' is not defined"
  },
  "s199590314":{
    "code_string":"N=int(input())\np=10**9+7\n\ndef primeryNum(n):\n    n_=int(n**0.5)\n    ary=list(range(n+1))\n    ary[1]=0 \n    for a in ary:\n        if a>n_: break\n        elif a==0: continue\n        \n        for i in range(a*2,n+1,a):\n            ary[i]=0           \n    return ary\n\nprimeryN=primeryNum(N)\ndivN=[0]*N\nfor pn in primeryN:\n    if pn==0:\n        continue\n    i=1\n    cnt=0\n    while (pn**i<N):\n        cnt+=(N\/\/pn**i)\n        i+=1\n    divN[pn]=cnt\n\nans=1\nfor d in divN:\n    if d==0:\n        continue\n    ans=(ans*(d+1))%p\nprint(ans)",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s761780633":{
    "code_string":"n=int(input())\np=[1 for i in range(10000)]\np[0]=0\np[1]=0\nfor i in range(2,n+1):\n  if p[i]==1:\n  \tfor j in range(i*i,n+1,i):\n      p[j]=0\nans=1\nfor i in range(2,n+1):\n  if p[i]:\n    c=0\n    k=i\n    while n\/\/k>0:\n      c=c+(n\/\/k)%m\n      k=k*k\n    ans=(ans*((c+1)%m))%m\nprint(ans)\n    \n    \n      \n      \n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s366582498":{
    "code_string":"MOD = 10**9+7\nmemo = [0]*10000\n\nN = int(input())\n\ndef primeLst(k):\n  acc = []\n  if k == 1:\n    return acc\n  f = 2\n  while f * f <= k:\n    if k % f == 0:\n      acc.append(f)\n      k \/\/= f\n    else:\n      f += 1\n  if k != 1:\n    acc.append(k)\n  return acc\n\nfor i in range(N):\n  l = primeLst(i+1)\n  for x in l:\n    memo[x] += 1\n\nres = 1\nfor i in range(1,N):\n  res *= memo[i+1] + 1\n  res %= MOD\n\nprint(acc)",
    "error_obj":"NameError: name 'acc' is not defined"
  },
  "s174904889":{
    "code_string":"N = int(input())\nls = [0]+[0]*N\ncouterls = collections.Counter(ls)\nfor i in range(1,N+1):\n    for j in range(2,N+1):\n        if i % j == 0:\n            while i % j == 0:\n                couterls[j] += 1\n                i = i \/\/ j\n        elif i == 1:\n            break\n        else:\n            pass\nans = 1\ncouterls.pop(0)\nfor i in couterls.values():\n    ans = (ans * (i+1) ) % (10**9+7)\nprint(ans)",
    "error_obj":"NameError: name 'collections' is not defined"
  },
  "s717316147":{
    "code_string":"N, A, B = map(int, input().split())\nX = list(map(int, input().split()))\n\nans = 0\nfor i in range(1, N):\n    d = X[i] - X[i - 1]\n    if d * A > B:\n        ans += B\n    else:\n        ans += d * A\nprint(ans",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s111309976":{
    "code_string":"l = list(map(int, input().split()))\nans = 0\nfor i in range(n-1):\n    dx = a * (l[i+1] - l[i])\n    if b < dx:\n        ans += b\n    else:\n        ans += dx\nprint(ans)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s574175484":{
    "code_string":"import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(100000)\n\n\ndef get_prime(N, prime):\n    if N < 2:\n        return {1: 1}\n\n    i = 2\n    while i * i <= N:\n        while N % i == 0:\n            if i in prime.keys():\n                prime[i] += 1\n            else:\n                prime[i] = 1\n            N = N \/\/ i\n        i += 1\n    if N != 1:\n        prime[N] = 1\n    return prime\n\n\ndef main():\n    N = int(input().strip())\n    div_table = [1] * (N + 1)\n    MOD = 10**9 + 7\n    ans = 0\n    for i in range(2, N + 1):\n        for j in range(i, N + 1, i):\n            div_table[j] += 1\n\n    prime = dict()\n    prime[1] = 1\n\n    for i in range(1, N + 1):\n        if div_table[i] == 2:\n            prime = get_prime(i, prime)\n    ans = 1\n    for k, v in prime:\n        ans *= v\n        ans %= MOD\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s991749668":{
    "code_string":"n, a, b = map(int, input().split())\nx = list(map(int, input().split()))\nans = 0\nfor i in range(1, n): ans+=min((x[i+1]-x[i])*a, b)\nprint(ans)",
    "error_obj":"IndexError: list index out of range"
  },
  "s086852997":{
    "code_string":"a",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s259852955":{
    "code_string":"print(*list[input().split(\",\")])",
    "error_obj":"TypeError: print() argument after * must be an iterable, not types.GenericAlias"
  },
  "s534759579":{
    "code_string":"#\u5165\u529b\ninput = input()\n\n#\u30ea\u30b9\u30c8\u5316\nexec('lst = [' + input + ']')\n\n#\u51fa\u529b\nprint(lst[0], lst[1], lst[2], sep=' ')",
    "error_obj":"NameError: name 'happy' is not defined"
  },
  "s805061295":{
    "code_string":"s=input()\nprint(s.replace(\",\", \" \")\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s197038162":{
    "code_string":"print(input().replace(\",\", \" \")",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s292597715":{
    "code_string":"s=input()\n\ns[5]=' '\ns[13]=' '\n\nprint(s)",
    "error_obj":"TypeError: 'str' object does not support item assignment"
  },
  "s613224696":{
    "code_string":"A, B, C = input().split()\nprint(A, B, C)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s450921071":{
    "code_string":"x, y, z = input.split(\",\")\n\nprint(x, y, z)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s843078510":{
    "code_string":"a,b,c=input(),split(\",\")\nprint(a,b,c)",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s337437136":{
    "code_string":"s=input()\nprint(s.split(,))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s854851728":{
    "code_string":"x, y, z = map(input().split(,))\nprint(x y z)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s438335742":{
    "code_string":"print(*input().sep(\",\"))",
    "error_obj":"AttributeError: 'str' object has no attribute 'sep'"
  },
  "s948151074":{
    "code_string":"x,y,z = map(int,input().split())\nprint(z,x,y)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'happy,newyear,enjoy'"
  },
  "s828237883":{
    "code_string":"pritn(input().replace(',', ' '))",
    "error_obj":"NameError: name 'pritn' is not defined"
  },
  "s267864881":{
    "code_string":"x, y, z = input().split\nprint(x, y, z)",
    "error_obj":"TypeError: cannot unpack non-iterable builtin_function_or_method object"
  },
  "s712544202":{
    "code_string":"x,y,z = int().split(',')\nprint(x,y,z)",
    "error_obj":"AttributeError: 'int' object has no attribute 'split'"
  },
  "s051421564":{
    "code_string":"s = input()\nreturn ' '.join(s.split(','))\n",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s099493705":{
    "code_string":"a, b, c = input().split(,)\nprint(a, b, c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s415695585":{
    "code_string":"import sys\n\nk,s = map(int,sys.stdin.buffer.readline().split(' '))\n\nresult = 0\n\nfor x in range(k+1):\n    for y in range(min(s-x+1,k+1)):\n        z = s-x-y\n        if z < 0: continue\n        if z<=k:\n            result+=1\n        \nprint(result)",
    "error_obj":"TypeError: a bytes-like object is required, not 'str'"
  },
  "s072989526":{
    "code_string":"K,S = map(int,input().split())\n\ncount = 0\nfor i in range(K+1):\n  for j in range(K+1):\n    if 0 <= S-(i+j) <= K\n      count += 1\nprint(count)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s813856838":{
    "code_string":"k,s=map(int,input().split())\n\nasn=o\n\nfor i in range(k+1):\n  for j in range(k+1):\n    if 0<=s-i-j<=k: ans+=1\n\nprint(ans)",
    "error_obj":"NameError: name 'o' is not defined"
  },
  "s635447101":{
    "code_string":"K, S = map(int, input().split())\ncount = 0\nfor x in range(K + 1):\n  for y in range(K + 1):\n    if S - x - y <= K:\n      conut += 1\nprint(count)",
    "error_obj":"NameError: name 'conut' is not defined"
  },
  "s047058702":{
    "code_string":"k,s=map(int,input().split())\nprint(len([z for x in range(k+1) for y in range(k+1) if 0<=s-x-y<=k]))",
    "error_obj":"NameError: name 'z' is not defined"
  },
  "s085442607":{
    "code_string":"x = y = S\/\/3 + 1\nz = S - x - y\nif z < y:\n    x = z\n    z = y\nwhile 0 <= x <= y and 0 <= y <= K and y <= z <= K:\n    while 0 <= x and z <= K:\n        if x == y == z:\n            ans += 1\n        elif x == y or y == z:\n            ans += 3\n        else:\n            ans += 6\n        x -= 1\n        z += 1\n    y += 1\n    x = y\n    z = S - x - y\n    if z < y:\n        x = z\n        z = y\nprint(ans)",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s738394748":{
    "code_string":"K, S = map(int,input()split())\n\nc = 0\nfor i in range(K+1):\n  for j in range(K+1):\n    z = S - i - j\n    if 0 <= z and z <= K:\n      c += 1\nprint(c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s438032250":{
    "code_string":"K, S = map(int, input().split())\ncount = 0\n\nfor i in range(K+1):\n    for j in range(K+1):\n        if 0<=S-i-j<=K:\n            count += 1\nprint(count",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s564014665":{
    "code_string":"K, S = [int(x) for x in input().split()]\nans = 0\nfor x in range(K+1):\n    for y in range(K+1):\n        if S-x-y =< K:\n            ans +=1\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s214892532":{
    "code_string":"s,k=map(int,input().split())\nprint(len([z for x in range(0,k+1) for y in range(0,k+1) if 0<=s-x-y<=k]))",
    "error_obj":"NameError: name 'z' is not defined"
  },
  "s335069454":{
    "code_string":"import sys\nsys.setrecursionlimit(10 ** 5)\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w') \n\n# readline =sys.stdin.readline\n\n# time - O(n2)\ndef process():\n    k,s = map(int,readline().rstrip().split())\n    cnt=0\n\n    for i in range(0,k+1):\n        for j in range(0,k+1):\n            z = s-(i+j)\n            if z>=0 and z<=k:\n                cnt+=1\n    \n    return cnt\n\n\n\n# for _ in range(int(readline().rstrip())):\nprint(process())\n",
    "error_obj":"NameError: name 'readline' is not defined"
  },
  "s608754976":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nA_test = sorted(list(set(A)))\n\nif N % 2 == 1:\n    judge = [i for i in range(0,N,2)]\n    if (A_test == judge) and (A.count(0) == 1):\n        ans = 2**(N\/\/2)\nelse:\n    judge = [i for i in range(1,N,2)]\n    if A_test == judge:\n        ans = 2**(N\/\/2)\n\nans = ans % (10**9 + 7)\nprint(ans)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '0 0 1 2'"
  },
  "s593246771":{
    "code_string":"d={0:'R', 1:'U', 2:'L', 3:'D'}\ndirc=[dx,dy,dx,dy]\n\ndef path(sign,x,y,z,w):\n  return d[sign+1]*abs(z-x) + d[sign+2]*abs(y-w)\n\ns=''\ns+='R'\ns+=path(-1, sx+1, sy, tx, ty-1)\ns+='UU'\ns+=path(1, tx,ty+1,sx-1,sy)\ns+='RU'\ns+=path(-1, sx,sy-1,tx+1,ty)\ns+='LL'\ns+=path(1, tx-1,ty,sx,sy+1)\ns+='U'\nprint(s)",
    "error_obj":"NameError: name 'dx' is not defined"
  },
  "s611468801":{
    "code_string":"sx, sy, tx, ty = map(int, input().split())\n\nans = \"\"\n\nans += \"U\" * (ty - sy) + \"R\" * (tx - sx)\nans += \"D\" * (ty - sy) + \"L\" * (tx - sx)\nans += \"L\" + \"U\" * (ty - sy + 1) + \"R\" * (tx - sx + 1) + \"D\"\nans += \"R\" + \"D\" * (ty - sy + 1) + \"L\" * (tx - sx + 1) + \"U\"\nprint(ans)sx, sy, tx, ty = map(int, input().split())\n\nans = \"\"\n\nans += \"U\" * (ty - sy) + \"R\" * (tx - sx)\nans += \"D\" * (ty - sy) + \"L\" * (tx - sx)\nans += \"L\" + \"U\" * (ty - sy + 1) + \"R\" * (tx - sx + 1) + \"D\"\nans += \"R\" + \"D\" * (ty - sy + 1) + \"L\" * (tx - sx + 1) + \"U\"\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s863134321":{
    "code_string":"n,m = map(int,input().split())\nINF = 10**18\nd = [[INF]*n for _ in range(n)]\nfor i in range(n): d[i][i] = 0\na = [0]*m\nb = [0]*m\nc = [0]*m\nfor i in range(m):\n    a,b,c = map(int,input().split())\n    a -= 1\n    b -= 1\n    a[i] = a\n    b[i] = b\n    c[i] = c\n    d[a][b] = c\n    d[b][a] = c\n\nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            d[i][j] = min(d[i][j], d[i][k]+d[k][j])\n\nans = 0\nfor i in range(m):\n    if d[a[i]][b[i]] < c[i]: ans += 1\nprint(ans)",
    "error_obj":"TypeError: 'int' object does not support item assignment"
  },
  "s977828810":{
    "code_string":"#!\/usr\/bin\/env python3\nimport sys\n\ndef solve(N: int, M: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\"):\n    import numpy as np    \n    from scipy.sparse import csr_matrix    \n    from scipy.sparse.csgraph import floyd_warshall\n    omat = csr_matrix((c, (a, b)), shape=(N+1, N+1), dtype=np.int32, directed=False)\n    smat = floyd_warshall(omat)\n    return ((omat-smat) > 0).sum() \/\/ 2\n\n\n# Generated by 1.1.7.1 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    M = int(next(tokens))  # type: int\n    a = [int()] * (M)  # type: \"List[int]\"\n    b = [int()] * (M)  # type: \"List[int]\"\n    c = [int()] * (M)  # type: \"List[int]\"\n    for i in range(M):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n    print(solve(N, M, a, b, c))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    #test()\n    main()\n",
    "error_obj":"TypeError: __init__() got an unexpected keyword argument 'directed'"
  },
  "s111324131":{
    "code_string":"x,y=map(int,input().split())\nif abs(x),abs(y)>pow(10,9):\n    exit()\ns=abs(y)-abs(x)\nbuttona=s\nbuttonb=0\nif y < 0:\n    buttonb+=1\nif x < 0:\n    buttonb+=1\nprint(buttona+buttonb)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s020522061":{
    "code_string":"# AGC008A\n\ndef func(x, y):\n    if y >= x:\n        if x >= 0:\n            return y - x\n        else:\n            if y > 0:\n                if abs(x) > abs(y):\n                    return 1 - x - y\n                else:\n                    return 1 + x + y\n            elif y <= 0:\n                return y - x\n    else:\n        if x >= 0:\n            if y < 0:\n                if abs(x) > abs(y):\n                    return 1 + x + y\n                else:\n                    return 1 - x - y\n            elif y == 0 or y == 1:\n                return x + 1\n            else:\n                if abs(x) > abs(y):\n                    return 1 + x + y\n                else:\n                    return 1 + y - x\n        else:\n            return 2 + x - y\n\nx, y = map(int, input().split())\nprint(f(x, y))\n",
    "error_obj":"NameError: name 'f' is not defined"
  },
  "s228696393":{
    "code_string":"def main2():\n    x, y = map(int, input().split())\n\n    delta = abs(abs(x) - abs(y))\n\n    c1 = delta + 0 + 0\n    c2 = delta + 0 + 1\n    c3 = delta + 1 + 0\n    c4 = delta + 1 + 1\n\n    print(min(c1, c2, c3, c4))\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"NameError: name 'main' is not defined"
  },
  "s286581943":{
    "code_string":"def main():\n    x, y = map(int, input().split())\n    print(min(max(y-x, x-y+2), abs(x+y)+1)\nif __name__ == '__main__':\n    main()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s181139044":{
    "code_string":"x,y = map(int,input().split())\nax = abs(x)\nay = abs(y)\nif ax == ay and x != y:\n    a = 1\nelif x > y and 0 < y:\n    a = ax - ay + 2\nelif x > y and y = 0:\n    a = ax - ay + 1\nelif x > y and 0 > y:\n    if ay > ax and x >= 0:\n        a = ay - ax + 1\n    elif ay > ax and x < 0:\n        a = ay - ax + 2\n    elif ax > ay:\n        a = ax - ay + 1\nelif y > x and x < 0 and ay > ax:\n    a = ay - ax + 1\nelif y > x and x < 0 and y > 0 and ax > ay:\n    a = ax - ay + 1\nelse:\n    a = y-x\nprint(a)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s531706178":{
    "code_string":"x, y = map(int, input().split())\nd = abs(abs(x) - abs(y))\nif 0 <= x < y or x < y <= 0:\n  print(d)\nelif y <= 0 <= x or x < 0 < y:\n  print(d+1)\nelse\n  print(d+2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s079709199":{
    "code_string":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n@njit('(i8,i8,i8[:])', cache=True)\ndef main(N, K, A):\n    B = np.maximum(A, 0)\n    Acum = np.zeros(len(A) + 1, np.int64)\n    Bcum = np.zeros(len(A) + 1, np.int64)\n    Acum[1:] = np.cumsum(A)\n    Bcum[1:] = np.cumsum(B)\n    ret = -(10**18)\n    for l in range(N - K + 1):\n        r = l + K\n        sum1 = Bcum[l]\n        sum2 = Bcum[-1] - Bcum[r]\n        sum3 = Acum[r] - Acum[l]\n        x = sum1 + sum2 + max(sum3, 0)\n        ret = max(ret, x)\n    return ret\n\nN, K = map(int, readline().split())\nA = np.array(read().split(), np.int64)\n\nprint(main(N, K, A))\n",
    "error_obj":"NameError: name 'njit' is not defined"
  },
  "s804837862":{
    "code_string":"N,K=map(int,input().split())\na=list(map(int,input().split()))\nans=0\ntmp=0\nfor i in range(N):\n  if i < K:\n    tmp+=a[i]\n  else:\n    if a[i]>0:\n      ans+=a[i]\nans+=max(0,tmp)\n\nans2=0\ntmp=0\nfor i in range(N-1,-1,-1):\n  if ans < N-K:\n    if a[i]>0:\n      ans2+=a[i]\n  else:\n    tmp+=a[i]\nans2+=max(0,tmp)\nprint(max(ams2,ans))",
    "error_obj":"NameError: name 'ams2' is not defined"
  },
  "s256363022":{
    "code_string":"a=input()\nif a[1]==\"+\":\n  print(int(a[0])+int(a[2]))\nelse:\n  print(int(a[0])-int(a[2]))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '+'"
  },
  "s928348434":{
    "code_string":"A,c,B=input().split()\nif c==\"+\":\n  print(int(A)+int(B)):\nelif c==\"-\":\n  print(int(A)-int(B))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s747717274":{
    "code_string":"a, o, b = input().split()\nif o = '+':\n    print(int(a) + int(b))\nelse:\n    print(int(a) - int(b))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s034941058":{
    "code_string":"a,op,b = map(str,input().split())\nif op = '+':\n    print(int(a)+int(b))\nelse:\n    print(int(a)-int(b))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s209010282":{
    "code_string":"a,op,b=input().split()\na=int(a)\nb=int(b)\nif op=\"+\":\n  print(a+b)\nif op=\"-\":\n  print(a-b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s970682220":{
    "code_string":"a,op,b=imput().split()\na=int(a)\nb=int(b)\nif op==\"+\":\n  print(a+b)\nelse:\n  print(a-b)",
    "error_obj":"NameError: name 'imput' is not defined"
  },
  "s738928642":{
    "code_string":"A, op, B = map(input().split())\nA = int(A)\nB = int(B)\n\nif op == \"+\":\n    print(A + B)\nif op == \"-\":\n    print(A - B)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s469394289":{
    "code_string":"a,op,b = map(str,input(),split())\nif op == \"+\":\n\tprint(int(a) + int(b))\nelse:\n\tprint(int(a) - int(b))\n",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s596725561":{
    "code_string":"a,b,c=map(str, input().split())\nif b==\"+\":\n  print(int(a)+int(b))\nelse:\n  print(int(a)-int(b))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '+'"
  },
  "s926539704":{
    "code_string":"a,b,c = input ().split ()\na,b = int (a,b)\nif b == '+':\n  print (a+b)\nelse:\n  print (a-b)\n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s451497478":{
    "code_string":"# \u5165\u529b\nA = int(input())\nop = input()\nB = int(input())\n\nif op == '+':\n    print(A + B)\nelif op == '-':\n    print(A - B)\n\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 + 2'"
  },
  "s358573217":{
    "code_string":"s = map(str,input().split())\nans = 0\nif s[1]=='+':\n  ans = int(s[0])+int(s[2])\nelse:\n  ans = int(s[0])-int(s[2])\nprint(ans)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s743950720":{
    "code_string":"a,op,b=input().split())\nif op==\"+\":\n    print(int(a)+int(b))\nelse:\n    print(int(a)-int(b))",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s811491184":{
    "code_string":"a,b,c=map(str,input().split())\nif b==\"+\":\n  print(int(a)+int(b))\nelse:\n  print(int(a)-int(b))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '+'"
  },
  "s738836934":{
    "code_string":"print(eval(input())",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s052925193":{
    "code_string":"# \u6570\u5024\u3068\u7b26\u53f7\u306e\u53d6\u5f97\nA,op,B = map(str,input().split())\n\n# \u8a08\u7b97\u3057\u3066\u51fa\u529b\ncalc = eval(A & op & B)\nprint(calc)",
    "error_obj":"TypeError: unsupported operand type(s) for &: 'str' and 'str'"
  },
  "s792449360":{
    "code_string":"a,b,c=map(input().split())\nif b==\"+\":\n  print(a+b)\nelse:\n  print(a-b)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s689600388":{
    "code_string":"a, op, b = map(int, input().split())\nop = str(op)\n \nif p == \"+\":\n  print(a+b)\nelse:\n  print(a-b)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '+'"
  },
  "s396347084":{
    "code_string":"a,b,c=input().split()\na=int(a)\nc=int(c)\nif b=\"+\":\n  print(a+c)\nelse:\n  print(a-c)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s857700621":{
    "code_string":"A, op, B = input().split()\nif op == '-':\n  print(int(A) - int(B))\nelse:\n  print(int(A) + (B))",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'str'"
  },
  "s096297840":{
    "code_string":"A, op, B = input().split()\nA, B = int(A), int(B)\nif op == '+'\n    print(A + B)\nelse:\n    print(A - B)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s865882344":{
    "code_string":"# \u5165\u529b\na, b = map(int, input().split())\nop = str(input())\n\n\n# \u51e6\u7406\nif op == '+':\n    answer = a + b\nelif op == '-':\n    answer = a - b\n\n# \u51fa\u529b\nprint(answer)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '+'"
  },
  "s589020391":{
    "code_string":"a, b, c = map(input().split())\na = int(a)\nc = int(c)\nif b == '+':\n  print(a + c)\nelse:\n  print(a - c)\n",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s674245404":{
    "code_string":"print(eval(input())",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s699268949":{
    "code_string":"\ndef main():\n    n = input().split()\n    if n[1] == '+':\n        print(int(n[0]) + int(n[1]))\n    else:\n        print(int(n[0]) - int(n[1]))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '+'"
  },
  "s617345541":{
    "code_string":"a,o,b = map(str,input.split())\n\nprint(int(a)int(o)int(b))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s676290835":{
    "code_string":"    a, op, b = map(str, input().split())\n    a = int(a)\n    b = int(b)\n\n    if op == \"+\":\n        result = a + b\n    else:\n        result = a - b\n\n    print(result)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s180967849":{
    "code_string":"def main(a,op,b):\n  if op=='+':\n    return int(a)+int(b)\n  elif op=='-':\n    return int(a)-int(b)\n\n  \nif __init__=='__main__':\n  a,op,b=input().split()\n  print(main(a,op,b))",
    "error_obj":"NameError: name '__init__' is not defined"
  },
  "s403229517":{
    "code_string":"a, op, b = input().split()\nif op = '+':\n\tans = int(a)+int(b)\nelse:\n\tans = int(a) - int(b)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s056899758":{
    "code_string":"N=int(input())\nT=list(map(int,input().split()))\nM=int(input())\nans=sum(T)\nfor i in range(len(M)):\n  P,X=map(int,input().split())\n  print(ans-T[P-1]+X)",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s472799156":{
    "code_string":"num_problems = int(input())\na = input()\nseconds_per = a.split()\nfor i in seconds_per:\n  total += int(i)\ndrinks = int(input())\nfor i in range(drinks):\n  b = input()\n  c = b.split()\n  question = int(c[0])\n  change = int(c[1])\n  new = total-int(seconds_per[question-1]) + change\n  print(new)\n\n\n  ",
    "error_obj":"NameError: name 'total' is not defined"
  },
  "s397393900":{
    "code_string":"n=int(input())\nt=list(map(int,input().split()))\nm=int(input())\nfor i in range(m):\n  p,x=map(int,input().split())\n  y=t[p-1]\n  t[p-1]=x:\n  print(sum(t))\n  t[p-1]=y",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s158220762":{
    "code_string":"n=int(input())\nl=list(map(int,input().split()))\nl=[0]+l\ns=sum(l)\nk=int(input())\nfor _ in range(1,n+1):\n  m,n=map(int,input().split())\n  print(s-l[m]+n)\n  \n  ",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s472399206":{
    "code_string":"n=int(input())\nl=[0]+list(map(int,input().split()))\\\nans=sum(l)\nfor i in range(int(input())):\n  a,s=map(int,input().split())\n  print(ans-l[a]+s)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s021252840":{
    "code_string":"n=int(input())\nl=list(map(int,input().split()))\nm=int(input())\n\nsum_l=sum(l)\n\nfor i in range(m):\n  p,x=map(int,input().split())\n  ams=sum_l-l[p-1]+x\n  print(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s933331805":{
    "code_string":"print(a)\nn = int(input())\nt = list(map(int,input().split()))\nm = int(input())\n\nfor i in range(m):\n    lst = list(t)\n    p,x = map(int,input().split())\n    lst[p-1] = x\n    print(sum(lst))",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s829982750":{
    "code_string":"#include <iostream>\n#include <array>\n\nusing namespace std;\n\nint main(){\n    int N, M, k, val, sum = 0, ans;\n\n    array<int, 100> p;\n    cin >> N;\n    for(int i = 0; i < N; i++){\n        cin >> p[i];\n        sum += p[i];\n    }\n\n    cin >> M;\n    for(int i = 0; i < M; i++){\n        cin >> k >> val;\n        cout << sum + val - p[k - 1] << '\\n';\n    }\n    \n}\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s311237029":{
    "code_string":"num_prob = int(input())\nprob = input()\nnew = prob.split()\nsum = 0\nnum_drinks = int(input())\nfor j in new:\n  sum += int(j)\n\nfor i in range(num_drinks):\n  line = input()\n  new_line = line.split()\n  if new_line[1] != new[new_line[0]]:\n    sum -= new[new_line[0]]\n    sum += new_line[1]\n  print(sum)\n    \n",
    "error_obj":"TypeError: list indices must be integers or slices, not str"
  },
  "s224818693":{
    "code_string":"N = int(input())\nt = list(map(int, input().split()))\nT = sum(t)\nM = int(input())\nfor _ in range(M):\n  p, x = map(int, input().split())\n  print(T+(T[p-1]-x))",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s480045017":{
    "code_string":"n=int(input())\na=[]\nfor i in range(n):\n    t=int(input())\n    a.append(t)\nm=int(input())\nfor j in range(m):\n    p,x=map(int,input().split())\n    for k in range(n):\n        if t==k+1:\n            a[k]=x\nfor j in range(m):\n    print(sum(a))\n\n    ",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 1 4'"
  },
  "s914380523":{
    "code_string":"a=int(input())\nb=list(map(int,input().split()))\nc=int(input())\nd=[int(input()) for i in range(c)]\nfor i in range(c):\n  print(sum(b)-b[d[i][0]]+d[i][1])",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 1'"
  },
  "s843991734":{
    "code_string":"import sys\nfrom collections import deque\np=10**9+7\n\ndef main(n,a):\n  h=n\/\/2\n  g=n%2\n  a.sort()\n  c=[2*(x\/\/2)+g+1 for x in range(n-g)]\n  if g==1:\n    c.insert(0,0)\n  if a!=c:\n      return 0\n  return 2**(h%(p-1))\n\nif __name__='__main__':\n  n=int(input())\n  a=list(map(int,sys.stdin.readline().strip().split()))\n  print(main(n,a))\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s008751242":{
    "code_string":"n=int(input())\n*A=sorted(map(int,input().split()))\n\na=True\nif n%2==0:\n  for i in range(1,n,2):\n    if A[i-1]!=i or A[i]!=i:\n      a=False\n      break\nelse:\n  if A[0]!=0:a=False\n  else:\n    for i in range(2,n,2):\n      if A[i-1]!=i or A[i]!=i:\n        a=False\n        break\nprint(2**(n\/\/2)%(10**9+7) if a else 0)\n",
    "error_obj":"SyntaxError: starred assignment target must be in a list or tuple"
  },
  "s168470685":{
    "code_string":"N = int(input())\nA = list(map(int,input().split()))\n    \nA=check.copy()\nA.sort()\n\ncheck=[0]*N\n\nfor idx in range(N%2,N,2):\n    check[idx]=idx+1\n    check[idx+1]=idx+1\n\nans=0\n\nif check == A:\n    if N % 2 == 0:\n        ans=(2**(N\/\/2))%(10**9+7)\n    elif N % 2 != 0:\n        ans=(2**((N-1)\/\/2))%(10**9+7)\n    \nprint(ans)",
    "error_obj":"NameError: name 'check' is not defined"
  },
  "s910577294":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nA_test = sorted(list(set(A)))\n\nif N % 2 == 1:\n    judge = [i for i in range(0,N,2)]\n    if A_test == judge:\n        ans = 2**(N\/\/2)\nelse:\n    judge = [i for i in range(1,N,2)]\n    if A_test == judge:\n        ans = 2**(N\/\/2)]\n\nans = ans % (10**9 + 7)\nprint(ans)\n",
    "error_obj":"SyntaxError: unmatched ']'"
  },
  "s561674440":{
    "code_string":"if len(a)%2==1:\n    tmp = [0]\n    for i in range((len(a)-1)\/\/2):\n        tmp.append((i+1)*2)\n        tmp.append((i+1)*2)\n    if a == tmp:\n        ans = (2**((len(a)-1)\/\/2))%(10**9+7)\n    else:\n        ans = 0\nelse:\n    tmp = []\n    for i in range(len(a)\/\/2):\n        tmp.append(2*i+1)\n        tmp.append(2*i+1)\n    if a == tmp:\n        ans = (2**(len(a)\/\/2))%(10**9+7)\n    else:\n        ans = 0\nprint(ans)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s808121150":{
    "code_string":"N = int(input())\nA = [int(x) for x in input().split()]\nfrom collections import defaultdict as dd\nDict = dd(lambda:0)\nfor a in A:\n    Dict[a] += 1\n    \nif N & 1: Dict[0] += 1\nf = (lambda:(lambda x:0 if x&1 else 2) if N&1 else (lambda x:2 if x&1 else 0))()\nPossible = {i:f(i) for i in range(N)}\nfor key,value in Dict.items:\n    if value != Possible[key]:\n        print(0)\n        exit()\nelse:\n    print(2**(N\/\/2)%1000000007)\n                \n\n",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s838486469":{
    "code_string":"import sys\n\np=10**9+7\ndthbit=lambda d,n: (n>>d)&1\n\ndef main(n):\n    dp=[[0 for _ in range(3)] for _ in range(64)]\n    dp[63][0]=1\n    for d in range(62,-1,-1):\n        b=dthbit(d,n)\n        s=dp[d+1][:]\n        dp[d][0]=dp[d+1][0]+(1^b)*dp[d+1][1] % p\n        dp[d][1]=b*dp[d+1][0]+dp[d+1][1] % p\n        dp[d][2]=(1+b)*dp[d+1][1]+3*dp[d+1][2] % p\n    return sum(dp[0][:] % p)\n\nn=int(input())\nprint(main(n))\n",
    "error_obj":"TypeError: unsupported operand type(s) for %: 'list' and 'int'"
  },
  "s732066428":{
    "code_string":"def main():\n    import sys\n\n    def input(): return sys.stdin.readline().rstrip()\n\n    n = int(input())\n    a = map(int, input().split())\n    mod = 10**9 + 7\n    a.sort()\n    check = [i+1 - (i+n)%2 for i in range(n)]\n    if a != check:\n        print(0)\n        return\n    else:\n        ans = pow(2, n\/\/2, mod)\n        print(ans)\n\n\n\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"AttributeError: 'map' object has no attribute 'sort'"
  },
  "s486296071":{
    "code_string":"a = input()\nvowel = set(\"a\",\"b\",\"c\",\"d\",\"e\")\nif a in vowel:\n  print(\"vowel\")\nelse:\n  print(\"consonant\")",
    "error_obj":"TypeError: set expected at most 1 argument, got 5"
  },
  "s355386814":{
    "code_string":"\nlst = list(map(str,input().split()))\n#print(lst)\n#print(lst[1])\nprint(lst[0][0]+lst[1][0]+lst[2][0])",
    "error_obj":"IndexError: list index out of range"
  },
  "s366421695":{
    "code_string":"s = input()\nif s == \"a\" or s == \"i\" or s == \"u\" or s == \"e\" or s == \"o\":\n    print(vowel)\nelse:\n    print(consonant)",
    "error_obj":"NameError: name 'vowel' is not defined"
  },
  "s928360820":{
    "code_string":"n = str(input())\nif n = \"a\" or \"i\" or \"u\" or \"e\" or \"o\":\n  print(\"vowe\")\nelse:\n  print(\"consonant\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s410727864":{
    "code_string":"letter = input()\nif(letter == \"a\" or letter == \"e\" or letter = \"i\" or letter == \"o\" or letter == \"u\"):\n  print(\"vowel\")\nelse:\n  print(\"consonant\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s462058267":{
    "code_string":"c = input()\nif c in ['a', 'i', 'u', 'e', 'o']:\n\tprint('vowel')\nelse\n \tprint('consonant')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s740347697":{
    "code_string":"s = input()\nl = [chr(ord(a)+i) for i in range(5)]\nprint(\"vowel\" if s in l else \"consonant\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s112139057":{
    "code_string":"A=input()\nif A=\"a\":\n  print(\"vowel\")\nif A=\"i\":\n  print(\"vowel\")\nif A=\"u\":\n  print(\"vowel\")\nif A=\"e\":\n  print(\"vowel\")\nif A=\"o\":\n  print(\"vowel\")\nelse:\n  print(\"consonant\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s771055658":{
    "code_string":"c = input()\nvowel = [a, i, u, e, o]\nprint(\"vowel\" if c in vowel else \"consonant\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s821622293":{
    "code_string":"N = int (input ())\nS = input()\nS = S.replace('a','')\nS = S.replace('i','')\nS = S.replace('u','')\nS = S.replace('e','')\nS = S.replace('o','')\nprint (N-int (len(S)))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'a'"
  },
  "s856975018":{
    "code_string":"c = int(input())\nif c == 'a' or c == 'i' or c == 'u' or c == 'e' or c == 'o': print('vowel')\nelse: print('consonant')",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'a'"
  },
  "s746908021":{
    "code_string":"c  = input()\nif c in \"aeiou\":\n  print(\"vowel\")\n else:\n  print(\"consonant\")",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s634976152":{
    "code_string":"s = input()\n\nif s == 'a' or s == 'i' or s == 'u' or s == 'e' or s == 'o':\n  ans = 'vowel'\nelse:\n  ans = 'consonant\"\n\nprint(ans)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s117105949":{
    "code_string":"x = 'aeiou'\ni = input()\nif i in x:\n  print(\"vowel\")\nelse\n  print(\"consonant\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s807529364":{
    "code_string":"if c in \"aiueo\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s636273076":{
    "code_string":"c = input()\nl = ['a'\u3001'e'\u3001'i'\u3001'o'\u3001'u']\nprint('vowwl' if c in l else 'consonant')",
    "error_obj":"SyntaxError: invalid character '\u3001' (U+3001)"
  },
  "s811404112":{
    "code_string":"text = str(input())\nif text ==  a \n    print(vowel)\nelif text ==  i\n    print(vowel)\nelif text ==  u \n    print(vowel)\nelif text ==  e :\n    print(vowel)\nelif text == o ::\n    print=(vowel)\nelse:\n    print=(consonant)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s043712736":{
    "code_string":"x = str(input())\nif x = \"a\" or x = \"i\" or x = \"u\" or x = \"e\" or x = \"o\":\n  print(\"vowel\")\nelse:\n  print(\"consonant\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s265296137":{
    "code_string":"s=input()\nprint([\"vowel\",\"consonant\"][s=\"a\" or s=\"i\" or s=\"u\" or s=\"e\" or s=\"o\"])\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s362062659":{
    "code_string":"c=input()\nx=[a,e,i,o,u]\nif x in c:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s851280803":{
    "code_string":"s = input()\n\nvowels=['a','i','u','e','o']\n\nif s[0]\\invowels:\n  print('vowel')\nelse:\n  print('consonant')",
    "error_obj":"SyntaxError: unexpected character after line continuation character"
  },
  "s528845628":{
    "code_string":"N = input()\nif N in \"aiueo\"\n\tprint(\"vowel\")\nelse\n\tprint(\"consonant\")\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s545858580":{
    "code_string":"H, W = map(int, input().split())\nC = []\nfor i in range(H):\n    C[i] = input()\nfor i in range(H):\n    print(C[i])\n    print(C[i])",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s593861140":{
    "code_string":"h,w=map(int,input().split())\nc=[list(map(int,input().split())) for _ in range(h)]\nfor i in range(h):\n  print(c[i])\n  print(c[i])",
    "error_obj":"ValueError: invalid literal for int() with base 10: '*.'"
  },
  "s512113822":{
    "code_string":"h, w = map(int, input().split())\n\nfor i in range(h):\n    print(input())\n    print(input())",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s340580578":{
    "code_string":"h,w = map(int,input().split())\nli = [input() for _ in range(h)]\n\nfor i in li:\n    print(i,i,sep=\"\\n\")***.",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s989645369":{
    "code_string":"#\n# abc049 b\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2 2\n*.\n.*\"\"\"\n        output = \"\"\"*.\n*.\n.*\n.*\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1 4\n***.\"\"\"\n        output = \"\"\"***.\n***.\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"9 20\n.....***....***.....\n....*...*..*...*....\n...*.....**.....*...\n...*.....*......*...\n....*.....*....*....\n.....**..*...**.....\n.......*..*.*.......\n........**.*........\n.........**.........\"\"\"\n        output = \"\"\".....***....***.....\n.....***....***.....\n....*...*..*...*....\n....*...*..*...*....\n...*.....**.....*...\n...*.....**.....*...\n...*.....*......*...\n...*.....*......*...\n....*.....*....*....\n....*.....*....*....\n.....**..*...**.....\n.....**..*...**.....\n.......*..*.*.......\n.......*..*.*.......\n........**.*........\n........**.*........\n.........**.........\n.........**.........\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    H, W = map(int, input().split())\n    ans = []\n    for i in range(H):\n        S = input()\n        ans.append(S)\n        ans.append(S)\n\n     for i in range(2*H):\n        print(ans[i])\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s425502436":{
    "code_string":"h,w=int(input())\nfor i in range(h):\n  s=input()\n  print(s)\n  print(s)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 2'"
  },
  "s875034866":{
    "code_string":"n,m = map(int,input().split())\nfor i in range(h):\n  q = input()\n  print(q)\n  print(q)",
    "error_obj":"NameError: name 'h' is not defined"
  },
  "s490222828":{
    "code_string":"a,b=input().split()\na=int(a)\nb=int(b)\nc=[input() for i in range(a)]\nfor i in range(a):\n  print(b[i])\n  print(b[i])",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s990654670":{
    "code_string":"\nurl = \"https:\/\/atcoder.jp\/\/contests\/abc049\/tasks\/abc049_b\"\n\ndef main():\n    h, w = list(map(int, input().split()))\n    ss = [input() for _ in range(h)]\n    for s in ss:\n        print(s)\n        print(s)\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'erasedream'"
  },
  "s364947799":{
    "code_string":"s = input()\nwhile 1:\n    if len(S) == 0:\n        print(\"YES\")\n        break\n    if s[len(s)-5:] == \"dream\":\n        s = s[:len(s)-5]\n        continue\n    elif s[len(s)-7:] == \"dreamer\":\n        s = s[:len(s)-7]\n        continue\n    elif s[len(s)-5:] == \"erase\":\n        s = s[:len(s)-5]\n        continue\n    elif s[len(s)-6:] == \"eraser\":\n        s = s[:len(s)-6]\n        continue\n    else:\n        print(\"NO\")\n        break\n    ",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s897939209":{
    "code_string":"import re\n\ns = input()\ns = re.sub(\"dreamer\",\"\",s)\ns = re.sub(\"dream\",\"\",s)\ns = re.sub(\"eraser\",\"\",s)\ns = re.sub(\"erase\",\"\",s)\n\nif int(s) == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ''"
  },
  "s809976967":{
    "code_string":"s=input()\nwhile s:\n    if s[-5:]=='erase':\n        for i in range(5):\n            s.pop()\n    elif s[-5:]=='dream':\n        for i in range(5):\n            s.pop()\n    elif s[-6:]=='eraser':\n        for i in range(6):\n            s.pop()\n    elif s[-7:]=='dreamer':\n        for i in range(7):\n            s.pop()\n    else:\n        print('NO')\nprint('YES')",
    "error_obj":"AttributeError: 'str' object has no attribute 'pop'"
  },
  "s138362307":{
    "code_string":"S = input()\nif re.match(\"^(dream|dreamer|erase|eraser)+$\", S):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"NameError: name 're' is not defined"
  },
  "s587524116":{
    "code_string":"s = input()\n\nlist = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\n\nfor i in list:\n    s = s.replace(i, \"x\")\n\ns.sort()\n\nif s[0] == s[-1] and s[-1] == \"x\":\n    print(\"YES\")\nelse:\n    print(\"NO\") ",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s328914618":{
    "code_string":"s = input()replace('dreamer', '').replace('eraser', '').replace('dream', '').replace('erase', '').\nprint('YES' if s=='' else 'NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s094666234":{
    "code_string":"S = list(input())\nN = len(S)\n\ndef f(x):\n    print(x)\n    exit()\n\nif N < 5:\n    f(\"NO\")\nelif S[0] == \"d\":\n    w = 1\nelif S[0] == \"e\":\n    w = -1\nelse:\n    f(\"NO\")\n\ni = 0\nwhile True:\n    if w > 0:\n        if S[i]+S[i+1]+S[i+2]+S[i+3]+S[i+4] == \"dream\":\n            i += 5\n            if i == N:\n                f(\"YES\")\n            elif S[i] == \"d\":\n                pass\n            elif S[i] == \"e\":\n                if i+1 <= N-1:\n                    if S[i+1] == \"r\":\n                        if i+1 == N-1:\n                            f(\"YES\")\n                        elif S[i+2] == \"a\":\n                            w *= -1\n                        elif S[i+2] == \"e\":\n                            i += 2\n                            w *= -1\n                        elif S[i+2] == \"d\":\n                            i += 2\n                        else:\n                            f(\"NO\")\n                    else:\n                        f(\"NO\")\n                else:\n                    f(\"NO\")\n            else:\n                f(\"NO\")\n        else:\n            f(\"NO\")\n    elif w < 0:\n        if S[i]+S[i+1]+S[i+2]+S[i+3]+S[i+4] == \"erase\":\n            i += 5\n            if i == N:\n            if S[i] == \"r\":\n                i += 1\n                if i == N:\n            if S[i] == \"d\":\n                w *= -1\n            elif S[i] == \"e\":\n                pass\n            else:\n                f(\"NO\")\n        else:\n            f(\"NO\")\n    if i+4 > N-1:\n        f(\"NO\")\n",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s915703560":{
    "code_string":"#include<bits\/stdc++.h>\nusing namespace std;\nusing Graph = vector<vector<int>>;\n\nlong set_index;\n\nvoid dfs(Graph graph, vector<bool>& seen, vector<int>& set, int v){\n    seen[v] = true;\n    set[v] = set_index;\n    for (auto next_v : graph[v]){\n        if (seen[next_v]) continue;\n        dfs(graph, seen, set, next_v);\n    }\n}\n\nvoid input(Graph& graph, int M){\n    int p, q;\n    for (int i=0; i<M; i++){\n        cin >> p >> q;\n        graph[p-1].push_back(q-1);\n        graph[q-1].push_back(p-1);\n    }\n}\n\nvoid connect(Graph& graph, vector<bool>& seen, vector<int>& set, int n){\n    set_index = 0;\n    for (int v=0; v<n; v++){\n        if (seen[v]) continue;\n        dfs(graph, seen, set, v);\n        set_index++;\n    }\n}\n\nint main(){\n    int N, K, L;\n    cin >> N >> K >> L;\n    Graph road, rail;\n    vector<bool> seen_road, seen_rail;\n    vector<int> set_road, set_rail;\n    road.resize(N);\n    rail.resize(N);\n    set_road.assign(N, 0);\n    set_rail.assign(N, 0);\n    input(road, K);\n    input(rail, L);\n\n    seen_road.assign(N, false);\n    connect(road, seen_road, set_road, N);\n    seen_rail.assign(N, false);\n    connect(rail, seen_rail, set_rail, N);\n   \n    map<pair<long, long>, int> ans;\n    for (int i=0; i<N; i++){\n        ans[make_pair(set_road[i],set_rail[i])]++;\n    }\n    for (int i=0; i<N; i++){\n        cout << ans[make_pair(set_road[i],set_rail[i])] << \" \";\n    }\n    return 0;\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s004993650":{
    "code_string":"N, K, L = map(int, input().split())\n#Parent List(PL)\nroad = [i for i in range(N)]\nrail = [i for i in range(N)]\n\ndef fp(x,P): #findParent\n    if x == P[x]:\n        return x\n    else:\n        P[x] = fp(P[x])\n        return P[x]\n\nfor i in range(K+L):\n    PL = (lambda x:road if x < K else rail)(i)\n    p, q = map(lambda x:int(x)-1, input().split())\n    p, q = fp(p,PL), fp(q,PL)\n    PL[p] = PL[q] = min(p, q)\n\nfrom collections import defaultdict as dd\nWconnected = dd(lambda:0)\nfor i in range(N):\n    Wconnected[fp(i,road),fp(i,rail)] += 1\nprint(*[Wconnected[fp(i,road),fp(i,rail)] for i in range(N)])",
    "error_obj":"TypeError: fp() missing 1 required positional argument: 'P'"
  },
  "s038742950":{
    "code_string":"import sys\nfrom collections import deque\nfrom collections import defaultdict\nfrom collections import Counter\n\ndef conn(n,m,e):\n    d=dict(zip(range(1,n+1),range(-1,(-1)*n-1,-1)))\n    td=defaultdict(lambda:deque([])) #td\u306f\u540c\u5024\u985e\u304c\u30ad\u30fc\u3067\u4e2d\u306e\u5143\u304c\u5024\n    c=1\n    for edge in e:\n        a=edge[0]\n        b=edge[1]\n        da=d[a] #da,db\u306fa,b\u306e\u542b\u307e\u308c\u308b\u540c\u5024\u6d41\u306e\u30e9\u30d9\u30eb\n        db=d[b]\n        if da<0 and db<0:\n            d[a]=c\n            d[b]=c\n            td[c].append(a)\n            td[c].append(b)\n            c+=1\n        elif da>0 and db<0:\n            d[b]=da\n            td[d[a]].append(b)\n        elif da<0 and db>0:\n            d[a]=db\n            td[d[b]].append(a)\n        elif da>0 and db>0 and da!=db:\n            for x in td[db]:\n                d[x]=da\n                td[da].append(x)\n\n    return list(d.values())\n\ndef components(n,k,e):\n    ed=defaultdict(lambda:deque())\n    for edge in e:\n        ed[edge[0]].append(edge[1])\n    c=0\n    s=[0]*n\n    label=[0]*n\n    for i in range(1,n+1):\n        if s[i-1]==0:\n            c+=1\n            label[c-1]=c\n            stack=deque([i])\n            while stack:\n                w=stack.pop()\n                s[w-1]=c\n                while ed[w]:\n                    wn=ed[w].pop()\n                    if s[wn-1]==0:\n                        s[wn-1]=c\n                        if ed[wn]:\n                            stack.append(w)\n                            w=wn\n                    elif s[wn-1]<c:\n                        label[s[wn-1]-1]=c\n    return [label[s[i]-1] for i in range(n)] \n           \ndef components2(n,k,e):\n    ed=defaultdict(lambda:deque())\n    for edge in e:\n        ed[edge[0]].append(edge[1])\n        ed[edge[1]].append(edge[0])\n    c=0\n    s=[0]*n\n    for i in range(1,n+1):\n        if s[i-1]==0:\n            c+=1\n            stack=deque([i])\n            while stack:\n                w=stack.pop()\n                s[w-1]=c\n                while ed[w]:\n                    wn=ed[w].pop()\n                    if s[wn-1]==0:\n                        s[wn-1]=c\n                        if ed[wn]:\n                            stack.append(w)\n                            w=wn\n    return [[s[i] for i in range(n)] \ndef main(n,k,l,e1,e2):\n    d1=components2(n,k,e1)\n    d2=components2(n,l,e2)\n    p=tuple(zip(iter(d1),iter(d2)))\n    d=Counter(p)\n    # print(d1,d2,d,p)\n    print(' '.join([str(d[x]) for x in p])) \n\nif __name__=='__main__':\n    ssr=sys.stdin.readline\n    n,k,l=map(int,ssr().strip().split())\n    e1=[]\n    e2=[]\n    for _ in range(k):\n        e1.append(tuple(map(int,ssr().strip().split())))\n    for _ in range(l):\n        e2.append(tuple(map(int,ssr().strip().split())))\n    main(n,k,l,e1,e2)\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s100833902":{
    "code_string":"sentence = input()\nnew_sent = sentence.split(\" \")\nacro = \"\"\nfor i in range(len(new_sent)):\n  for j in range(new_sent[i]):\n  \tacro += new_sent[i][0]\nprint(acro)\n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s271428895":{
    "code_string":"a,b,c=map(int,input().split())\nprint(len(set([a,b,c])))",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'AtCoder'"
  },
  "s229543603":{
    "code_string":"a, b, c = str(input().split())\nprint(a[0]+b[0]+c[0])",
    "error_obj":"ValueError: too many values to unpack (expected 3)"
  },
  "s094947237":{
    "code_string":"a,b,c=imput().split()\nprint('A'+b[0]+'C')",
    "error_obj":"NameError: name 'imput' is not defined"
  },
  "s342829062":{
    "code_string":"a,b,c = input().split()\nprint(a[0],upper(b[0]),c[0])\n",
    "error_obj":"NameError: name 'upper' is not defined"
  },
  "s974877803":{
    "code_string":"A, B, C = map(int, input().split())\nprint(\"A\"+B+\"C\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'AtCoder'"
  },
  "s563212109":{
    "code_string":"a,b,x = list(map(int,input().split()))\na1 = a\/\/x if a%x else a\/\/x-1\na2 = b\/\/x\nprint(a2-a1)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'AtCoder'"
  },
  "s745887591":{
    "code_string":"s=input()\nss=s[0]\nsss=upper(ss)\nprint(\"A\"+sss+\"C\")",
    "error_obj":"NameError: name 'upper' is not defined"
  },
  "s003133000":{
    "code_string":"string = input()\n    Capital = string[0]\n    print(\"A\" + Capital + \"C\")\n\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s240512653":{
    "code_string":"a,b,c=map(int,input().split())\nprint(a[0]+b[0]+c[0])",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'AtCoder'"
  },
  "s488581240":{
    "code_string":"a,b,c = map(input().split())\nprint(a+b[0]+c)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s558983006":{
    "code_string":"xs = inpt().split()\n\nprint(\"A\"+xs[2][0]+\"B\")",
    "error_obj":"NameError: name 'inpt' is not defined"
  },
  "s920519231":{
    "code_string":"print(\"\".join(s[0] for s in input()split()))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s937750481":{
    "code_string":"a, s, c = map(int, input().split())\nprint(a[0] + s[0] + c[0])\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'AtCoder'"
  },
  "s885538403":{
    "code_string":"arr = list(input().split())\nprint(arr[0].[0] + arr[1].[0] + arr[2].[0])",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s524594594":{
    "code_string":"l = input().replace(' ','')\nprint(l[0]+l[7]+l[-7])\n\n",
    "error_obj":"IndexError: string index out of range"
  },
  "s113151542":{
    "code_string":"import sys\ndef I_dont_know_what_to_do():\n    a = long(input())\n    b = long(input())\n    c = int(input())\n\n    if a < b:\n        n = a\n        a = b\n        b = n\n\n    s = (a - b + 2 - a % c - b % c) \/ c\n    print(s)\n\n\nI_dont_know_what_to_do()",
    "error_obj":"NameError: name 'long' is not defined"
  },
  "s085868113":{
    "code_string":"a,b,x = list(map(int,input_[0].split()))\n\nans=0\nif a!=b:\n    A=(a-1)\/\/x\n    B=b\/\/x\n\n    ans=B-A\n\nprint(ans)",
    "error_obj":"NameError: name 'input_' is not defined"
  },
  "s493770715":{
    "code_string":"a,b,x = map(int,input().split())\n\n    print((b - a) \/\/ x)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s236177182":{
    "code_string":"a,b,c = list(map(str,input().split()))\na = a\/c\nb = b\/c\nprint(b-a)",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'str' and 'str'"
  },
  "s822708116":{
    "code_string":"# coding: utf-8\n\na, b, x = map(int, input().split(\" \"))\n\nn = b - a - 1\n# coding: utf-8\n\na, b, x = map(int, input().split(\" \"))\n\nn = b - a\nif a % x == 0 or b % x == 0:\n    print(n \/\/ x + 1)\nelse:\n    print(n \/\/ x)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s565707105":{
    "code_string":"a,b=map(int, input().split())\nmax=b\/\/x\nmin=(a+x-1)\/\/x\nprint(max-min+1)",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s868111668":{
    "code_string":"# coding: utf-8\nimport sys\n#from operator import itemgetter\nsysread = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\n#from heapq import heappop, heappush\n#from collections import defaultdict\nsys.setrecursionlimit(10**7)\n#import math\n#from itertools import product, accumulate, combinations, product\n#import bisect# lower_bound etc\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n\n\ndef run():\n    a,b,x = map(int, input().split())\n    ans = 0\n    if a == 0:\n        a += 1\n        ans = 1\n    ans += b \/\/ x - (a-1) \/\/ x\n    print(ans)\n\nif __name__ == \"__main__\":",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s580853341":{
    "code_string":"import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N, x = LI()\n    a = LI()\n\n    s = [max(a[i] + a[i+1] - x, 0) for i in range(N - 1)]\n    \n    ans = sum([ss[i] for i in range(len(s)) if i % 2 == 0])\n    print(ans)\n\nif __name__ == '__main__':\n    resolve()\n",
    "error_obj":"NameError: name 'ss' is not defined"
  },
  "s896852957":{
    "code_string":"def candy():\n    n = input().split()\n    N = int(n[0])\n    x = int(n[1])\n    alist = [int(i) for i in input().split()]\n\n    s = 0\n    for i in range(0, N - 1):\n        c = alist[i] , d = alist[i + 1]\n        if int( alist[i] + alist[i + 1] ) > x:\n            if int( alist[i] ) >= x:\n                alist[i] = x\n                alist[i + 1] = 0\n            else :\n                alist[i + 1] = x - a[i] \n            s += c - alist[i] + d - alist[i + 1]\n        \/*  \n        if int(alist[i]) > x:\n            s = s + int(alist[i+1])\n            alist[i+1] = 0\n\n        if int(alist[i+1]) + int(alist[i]) > x:\n            s = s + (int(alist[i+1]) + int(alist[i]) - x)\n            alist[i+1] = x - int(alist[i])\n        *\/\n    print(s)\ncandy()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s213042398":{
    "code_string":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    a, b, x = map(int, readline().split())\n\n    if a == 0:\n        ans = b \/\/ x + 1\n    else:\n        ans = b \/\/ x - (a - 1) \/\/ x\n\n    print(ans)\n    return\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 2)"
  },
  "s580695920":{
    "code_string":"s=input()\nl=len(s)\nif s[0]==s[-1]:\n    if l%2=1:\n        print(\"First\")\n    else:\n        print(\"Second\")\nelse:\n    if l%2=0:\n        print(\"First\")\n    else:\n        print(\"Second\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s732040349":{
    "code_string":"import sys\nimport numpy as np\nimport numba\nfrom numba import njit\ni8 = numba.int64\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n@njit((i8[:], i8, i8), cache=True)\ndef test(A, keta, n):\n    # 10^keta \u306e\u4f4d\u3092 n \u306b\u3067\u304d\u308b\u304b\n    MOD = 10**(keta + 1)\n    I = [(n * 10**keta, (n + 1) * 10**keta)]  # [l, r)\n    for x in A:\n        if I[0][0] == 0:\n            return True\n        newI = I.copy()\n        x %= MOD\n        for l, r in I:\n            l, r = l + MOD - x, r + MOD - x\n            if l >= MOD:\n                l, r = l - MOD, r - MOD\n            if r <= MOD:\n                newI.append((l, r))\n            else:\n                newI.append((l, MOD))\n                newI.append((0, r - MOD))\n        I = newI\n        I.sort(key=lambda x: x[1])\n        newI = [(0, 0)] * 0\n        for x, y in I:\n            while newI and newI[-1][1] >= x:  # \u3064\u306a\u3050\n                x, y = min(x, newI[-1][0]), y\n                newI.pop()\n            newI.append((x, y))\n        I = newI\n    return I[0][0] == 0\n\ndef main(A):\n    N = len(A)\n    ans = 0\n    for keta in range(18):\n        for x in range(9, 0, -1):\n            if test(A, keta, x):\n                ans += x\n                break\n    return ans\n\nA = np.array(read().split(), np.int64)[1:]\nnp.random.shuffle(A)\nprint(main(A))",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s697462938":{
    "code_string":"H, W = map(int, input().split())\nflag = False\nfor i in range(H):\n    for j in range(W):\n        s = input()\n        if s == \"snuke\":\n            print(chr(ord('A')+j)+str(i+1))\n            flag = True\n            break\n\n    if flag:\n        break\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s876913410":{
    "code_string":"alpha = {1:'A', 2:'B', 3:'C', 4:'D', 5:'E', 6:'F', 7:'G', 8:'H', 9:'I', 10:'J', 11:'K', 12:'L', 13:'M', 14:'N', 15:'O', 16:'P', 17:'Q', 18:'R', 19:'S', 20:'T', 21:'U', 22:'V', 23:'W', 24:'X', 25:'Y', 26:'Z'}\nh, w = map(int, input().split())\nfor i in range(h):\n  a = list(map(int, input().split()))\n  for j in range(w):\n    if a[j] == 'snuke':\n      ans = alpha[j+1] + str(i+1)\n      break\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'snake'"
  },
  "s129437056":{
    "code_string":"n = int(input())\n\n\ndef ts(x):\n    return x * (x + 1)\n\n\nm = n\nfor i in range(math.ceil(math.sqrt(2 * n) - 2), math.floor(math.sqrt(2 * n)) + 1, 1):\n    if ts(i) < 2 * n <= ts(i + 1):\n        m = i + 1\n        break\n\na = n % (m + 1)\nb = n \/\/ (m + 1)\n\nif m % 2 == 0:\n    if a != 0:\n        print(a)\n    i = 1\n    c = 0\n    while c != b:\n        if i != a and m + 1 - i != a:\n            print(i)\n            print(m + 1 - i)\n            c += 1\n        i += 1\nelse:\n    \"\"\"\n  check=[]\n  if a!=0:\n      check.append(a)\n  i = 1\n  c = 0\n  while c!=b and i<(m+1)\/\/2:\n      if i!=a and m+1-i!=a:\n          check.append(i)\n          check.append(m+1-i)\n          c+=1\n      i+=1\n  if c==b:\n      for i in check:\n          print(i)\n  else:\n\n      n-=(m+1)\/\/2\n      a = n % (m + 1)\n      b = n \/\/ (m + 1)\n      if m % 2 == 0:\n          if a != 0:\n              print(a)\n          i = 1\n          c = 0\n          while c != b:\n              if i != a and m + 1 - i != a:\n                  print(i)\n                  print(m + 1 - i)\n                  c += 1\n      \"\"\"\n    print(m)\n    n -= m\n    m -= 1\n\n    a = n % (m + 1)\n    b = n \/\/ (m + 1)\n    if a != 0:\n        print(a)\n        i = 1\n        c = 0\n        while c != b:\n            if i != a and m + 1 - i != a:\n                print(i)\n                print(m + 1 - i)\n                c += 1\n            i += 1\n\n\n",
    "error_obj":"NameError: name 'math' is not defined"
  },
  "s133665905":{
    "code_string":"import sys\nfrom collections import defaultdict(int)\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, m = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    MOD = [defaultdict(int) for _ in range(m + 1)]\n    cnt = defaultdict(int)\n    for x in X:\n        MOD[x % m][x] += 1\n        cnt[x % m] += 1\n\n    res = cnt[0] \/\/ 2\n    if m % 2 == 0:\n        res += cnt[m \/\/ 2] \/\/ 2\n        \n    for i in range(1, (m + 1) \/\/ 2):\n        res += min(cnt[i], cnt[m - i])\n\n        if cnt[i] > cnt[m - i]:\n            diff = (cnt[i] - cnt[m - i]) \/\/ 2\n            for v in MOD[i].values():\n                if diff == 0:\n                    break\n                t = min(diff, v \/\/ 2)\n                diff -= t\n                res += t\n        elif cnt[i] < cnt[m - i]:\n            diff = (cnt[m - i] - cnt[i]) \/\/ 2\n            for v in MOD[m - i].values():\n                if diff == 0:\n                    break\n                t = min(diff, v \/\/ 2)\n                diff -= t\n                res += t\n\n    print(res)\n\n\nif __name__ == '__main__':\n    resolve()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s387572454":{
    "code_string":"def main():\n  n,m=map(int,input().split())\n  x=list(map(int,input().split()))\n  xmod=[y%m for y in x]\n  from collections import Counter\n  cx=dict(Counter(x))\n  cxmod=dict(Counter(xmod))\n  ans1,ans2=0,0 # ams1:m\u500d\u306b\u306a\u308b\u30da\u30a2\u3001ans2:\u540c\u6570\u306e\u30da\u30a2\u3002ans1\u304b\u3089\u3082\u3068\u3081\u308b\n  for k in cxmod.keys():\n    if k==0:\n      ans1+=cxmod[k]\/\/2\n      cxmod[k]-=2*(cxmod[k]\/\/2)\n    else:\n      if k==m-k:\n        ans1+=cxmod[k]\/\/2\n        cxmod[k]-=2*(cxmod[k]\/\/2)\n      elif m-k in keys:\n        tmp=min(cxmod[k],cxmod[m-k])\n        ans1+=tmp\n        cxmod[k]-=tmp\n        cxmod[m-k]-=tmp\n  for k in cx:\n    v=cx[k]\n    if v>=2 and cxmod[k%m]>=2:\n      tmp=min(v\/\/2,cxmod[k%m]\/\/2)\n      ans2+=tmp\n      cxmod[k%m]-=tmp*2\n\n  print(ans1+ans2)\nif __name__=='__main__':\n  main()\n\n",
    "error_obj":"NameError: name 'keys' is not defined"
  },
  "s868159665":{
    "code_string":"h,w=map(int, input().split())\ns=[list(input().split()) for i in range(h)]\nalp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nfor i in range(h):\n  for j in range(w):\n    if s[i][j]==\"snuke\":\n      print(alp[j+1]+(i+1))\n      break",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s087227460":{
    "code_string":"h, w = map(int, input().split())\na = [input().split() for i in range(h)]\nfor i in range(h):\n  for j in range(w):\n    if a[i][w] == \"snuke\":\n      print(chr(ord(\"A\") + j) + str(i + 1))\n      exit()",
    "error_obj":"IndexError: list index out of range"
  },
  "s079240305":{
    "code_string":"n, k = map(int,input().split())\nif n < 3:\n    print(0)\n    exit()\n\ntable = [[0] * 5 for i in range(11)]\nfor i in range(11):\n    for j in range(5):\n        t = 9 * (j + 2 + 7 * (i + 1))\n        table[i][j] = t % 11\n\nc = [0]\nfor row in table:\n    c.append(c[-1] + row.count(K))\n\nd,m = divmod(n - 2, 11)\nans = c[m] + c[-1] * d\nprint(ans)",
    "error_obj":"NameError: name 'K' is not defined"
  },
  "s465822053":{
    "code_string":"import sys\nimport numpy as np\nimport numba\nfrom numba import njit\ni8 = numba.int64\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n@njit((i8[:], ), cache=True)\ndef build(raw_data):\n    bit = raw_data.copy()\n    for i in range(len(bit)):\n        j = i + (i & (-i))\n        if j < len(bit):\n            bit[j] += bit[i]\n    return bit\n\n\n@njit((i8[:], i8), cache=True)\ndef get_sum(bit, i):\n    s = 0\n    while i:\n        s += bit[i]\n        i -= i & -i\n    return s\n\n\n@njit((i8[:], i8, i8), cache=True)\ndef add(bit, i, x):\n    while i < len(bit):\n        bit[i] += x\n        i += i & -i\n\n\n@njit((i8[:], i8), cache=True)\ndef find_kth_element(bit, k):\n    N = len(bit)\n    x, sx = 0, 0\n    dx = 1\n    while 2 * dx < N:\n        dx *= 2\n    while dx:\n        y = x + dx\n        if y < N:\n            sy = sx + bit[y]\n            if sy < k:\n                x, sx = y, sy\n        dx \/\/= 2\n    return x + 1\n\n@njit((i8, i8[:]), cache=True)\ndef main(N, AB):\n    A, B = AB[::2], AB[1::2]\n    Q = len(A)\n\n    bit = np.zeros(N + 1, np.int64)  # \u9577\u65b9\u5f62\u306e\u53f3\u4e0a\u306b\u306a\u308b x \u5ea7\u6a19\u96c6\u5408\u3092\u7ba1\u7406\n    bit_raw = np.zeros(N + 1, np.int64)\n    H = np.zeros(N + 1, np.int64)  # \u9577\u65b9\u5f62\u306e\u9ad8\u3055\u3092\u7ba1\u7406\n    H[0] = 10**13 + 10\n    bit_raw[N] = 1\n    add(bit, N, 1)\n\n    for i in range(Q):\n        a, b = A[i], B[i]\n        n = get_sum(bit, a - 1)\n        h = H[find_kth_element(bit, 1 + n)]\n        if not bit_raw[a]:\n            bit_raw[a] = 1\n            add(bit, a, 1)\n            H[a] = h\n        r = a\n\n        while b:\n            l = 0 if n == 0 else find_kth_element(bit, n)\n            n -= 1\n            area = (H[l] - H[r]) * (r - l)\n            if area <= b:\n                b -= area\n                if l:\n                    bit_raw[l] = 0\n                    add(bit, l, -1)\n                H[l], H[r] = 0, H[l]\n                continue\n            k = b \/\/ (r - l)\n            b -= k * (r - l)\n            H[r] += k\n            if b:\n                m = l + b\n                bit_raw[m] = 1\n                add(bit, m, 1)\n                H[m] = H[r] + 1\n                b = 0\n    for n in range(N, 0, -1):\n        H[n - 1] = max(H[n - 1], H[n])\n    return H[1:N + 1]\n\nN, Q = map(int, readline().split())\nAB = np.array(read().split(), np.int64)\n\nans = main(N, AB)\nprint('\\n'.join(map(str, ans.tolist())))",
    "error_obj":"ModuleNotFoundError: No module named 'numba'"
  },
  "s749441363":{
    "code_string":"h, w = map(int,input().split())\na = [list(input()) for _ in range(H)]\nc = 0\nfor p in a :\n    for q in p:\n        if q==\"#\":\n            c +=1\n \nif c == h + w - 1:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")",
    "error_obj":"NameError: name 'H' is not defined"
  },
  "s388445803":{
    "code_string":"h, w = map(int, input().split())\nmat_a = [ list(input()) for _ in range(h) ]\n\n\nans = 'Possible'\nans = 'Impossible'\n\ndef check(i,j):\n    if mat_a[i][j] == '.':\n        return True\n\n    count = 0\n    try:\n        if mat_a[i][j-1] == '#':\n            count += 1\n    except:\n        pass\n\n    try:\n        if mat_a[i-1][j] == '#':\n            count += 1\n    except:\n        pass\n\n    try:\n        if mat_a[i][j+1] == '#':\n            count += 1\n    except:\n        pass\n\n    try:\n        if mat_a[i+1][j] == '#':\n            count += 1\n    except:\n        pass\n\n    if count == 2 or count ==4:\n        return True\n    else:\n        return False    \n\n\nans = True\nfor i in range(h):\n    for j in range(w):\n        if not check(i,j):\n            if i+1 == h and j+1 == w:\n                continue\n            if i == 0 and j == 0:\n                continue\n            ans = False\n            break\n\nif ans:\n    print('Possible')\nelse:\n    print('Impossible')\n(env3) (kentaro:~\/git\/2020\/atcode\/20200717\/3 2020-07-17T17:09:31)$ vi main.py \n(env3) (kentaro:~\/git\/2020\/atcode\/20200717\/3 2020-07-17T17:10:52)$ cat main.py \nh, w = map(int, input().split())\nmat_a = [ list(input()) for _ in range(h) ]\n\ndef check(i,j):\n    if mat_a[i][j] == '.':\n        return True\n\n    count = 0\n    try:\n        if mat_a[i][j-1] == '#':\n            count += 1\n    except:\n        pass\n\n    try:\n        if mat_a[i-1][j] == '#':\n            count += 1\n    except:\n        pass\n\n    try:\n        if mat_a[i][j+1] == '#':\n            count += 1\n    except:\n        pass\n\n    try:\n        if mat_a[i+1][j] == '#':\n            count += 1\n    except:\n        pass\n\n    if count == 2 or count == 4:\n        return True\n    else:\n        return False    \n\n\nans = True\nfor i in range(h):\n    for j in range(w):\n        if not check(i,j):\n            if i+1 == h and j+1 == w:\n                continue\n            if i == 0 and j == 0:\n                continue\n            ans = False\n            break\n\nif ans:\n    print('Possible')\nelse:\n    print('Impossible')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s088063624":{
    "code_string":"H,W=4,5\na = [input() for i in range(H)]\n\n\nans=0\ncnt=0\n\nfor i in range(H-1):\n    for j in range(W-1):\n        if a[i][j] == '#' and a[i+1][j] == '#' and  a[i][j+1] == '#':\n            cnt+=1\n            break\n        elif a[i][j] == '#' and a[i+1][j] == '.' and  a[i][j+1] == '.':\n            cnt+=1\n            break\n        else:\n            continue\n \nprint('Impossible' if cnt>0 else 'Possible')\n        \n",
    "error_obj":"IndexError: string index out of range"
  },
  "s014427229":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\n\nif a == b + c or b == a + c or c == a + b:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '10 30 20'"
  },
  "s911062480":{
    "code_string":"def MAP(): return map(int, input().split())\nx = sorted(MAP(x))\nif x[0] + x[1] == x[2]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n",
    "error_obj":"NameError: name 'x' is not defined"
  },
  "s424764061":{
    "code_string":"a,b,c=int(input()),int(input()),int(input())\nif a+b==c or a+c==b or b+c==a:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '10 30 20'"
  },
  "s444690718":{
    "code_string":"a,b,c = map(int,input().split())\n\nif a+b == c:\n    print(\"Yes\")\nelif:\n    a+c == b:\n    print(\"Yes\")\nelif:\n    a == b+c:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s700271227":{
    "code_string":"L = sorted(list(map(int, input().split())))\nprint('Yes' if sum(L[:2] == L[2]) else 'No')",
    "error_obj":"TypeError: 'bool' object is not iterable"
  },
  "s619259215":{
    "code_string":"x = list(map(int,input().split()))\ny = sorted(x)\nif y[0]+y[1]=y[2]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s586433035":{
    "code_string":"if ( a + b == c ) or ( a + c == b ) or ( b + c == a ) :\n    print ( \"Yes\" )\nelse:\n    print ( \"No\" )",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s420380613":{
    "code_string":" a, b, c = map(int, input().split())\n\nif ((a+b)==c) or ((b+c)==a ) or ((c+a)==b):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s328456209":{
    "code_string":"a,b,c = map(int,input().split())\nif a + b == c pr a + c == b or b + c == a:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s559354004":{
    "code_string":"a, b, c = map(int,input().split())\nif a+b=c or b+c=a or c+a=b:\n  print(Yes)\nelse:\n  print(No)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s965131203":{
    "code_string":"import sys\nsys.setrecursionlimit(250000)\n\ndef main():\n    a,b,c = map(int, input().split())\n\n    if a == b + c :\n        print(\"Yes\")\n    elif b == a + c:\n        print(\"Yes\")\n    elif c == a + b:\n        print(\"Yes\")\n    else\n        print(\"No\")\nmain()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s575172486":{
    "code_string":"a,b,c = int(input.split())\nif a + b == c:\n  print(\"Yes\")\nelif a + c == b:\n  print(\"Yes\")\nelif b + c ==a:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  ",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s577624786":{
    "code_string":"a,b,c = (int(T) for T in input().split())\nprint(['No','Yes'][(a+ab)==c or (b+c)==a or (c+a)==b])",
    "error_obj":"NameError: name 'ab' is not defined"
  },
  "s921113505":{
    "code_string":"a,b,c = map(int, input().split())\n\nif (a+b+c) % 3 == 0:P\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s087781795":{
    "code_string":"a = list(map,int(input().split()))\na.sort()\n\nif a[0]+a[1] == a[2]:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s891046467":{
    "code_string":"a = list(map(int, input().split()))\n\nb = a.sort()\nprint(b)\nprint(\"Yes\" if b[0]+b[1] == b[2] else \"No\")\n",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s507575159":{
    "code_string":"x = list(map(int,input().split()))\nif x[0]+x[1] == x[2] or x[1]+x[2] = x[0] or x[0]+x[2] == x[1]:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s124699189":{
    "code_string":"# 3\u500b\u306e\u30d1\u30c3\u30af\u306b\u305d\u308c\u305e\u308c\u3001a,b,c\u500b\u306e\u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u304c\u5165\u3063\u3066\u3044\u308b\n# \u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u30922\u4eba\u306b\u5206\u3051\u308b\u969b\u3001\u500b\u6570\u304c\u7b49\u3057\u304f\u306a\u308b\u304b\u5224\u5b9a\n\n# \u5165\u529b\na = int(input())\nb = int(input())\nc = int(input())\n\n# \u51e6\u7406\nif a == b + c or b == a + c or c == a + b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '10 30 20'"
  },
  "s456866538":{
    "code_string":"ys = list(map(int,input().split()))\nys.sort()\nprint('Yes' if ys[0]+ys[1]==y[2] else 'No')",
    "error_obj":"NameError: name 'y' is not defined"
  },
  "s584057769":{
    "code_string":"a=list(map(int,input()))\na.sort()\nprint(\"Yes\") if max(a[2]==a[1]+a[0]) else print(\"No\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s337359509":{
    "code_string":"list.sort (l, reverse=True)\na = int (l[0])\nb = int (l[1])\nc = int (l[2])\nif a == b+c:\n  print ('Yes')\nelse:\n  print ('No')",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s802620834":{
    "code_string":"a,b,c=map(int,input().split())\nif a+b=c or a+c=b or b+c=a:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s027860487":{
    "code_string":"abc = map(int, input().split())\nabc.sort()\nif abc[0] + abc[1] == abc[2]:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"AttributeError: 'map' object has no attribute 'sort'"
  },
  "s074957590":{
    "code_string":"lst = list(map(int, input().split))\nlst.sort()\nif lst[0] + lst[1] == lst[2]:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s403139727":{
    "code_string":"# \u30ad\u30e3\u30f3\u30c7\u30a3\u306e\u500b\u6570\u3092\u53d6\u5f97\na,b,c\u3000= map(int, input().split())\n\n#\u5224\u5b9a\u7d50\u679c\u3092\u3082\u3068\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\nif a == b + c\\\nor b == a + c\\\nor c == a + b:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"SyntaxError: invalid non-printable character U+3000"
  },
  "s135640362":{
    "code_string":"a,b,c = map(int,input().split())\n\nif a+b = c or a+c = b or b+c = a:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s418715439":{
    "code_string":"p = list(map(int, input().split())).sort()\nprint('Yes' if p[0]+p[1]==p[2] else 'No')",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s385966192":{
    "code_string":"W,H,N=map(int,input().split())\nList = []\nfor i in range (N):\n  List.append(list(map(int, input().split())))\nWRange = [0,W]\nHRange = [0,H]\nfor i in range(N):\n  if List[i][2] == 1:\n    WRange[0] = List[i][0]\n  elif List[i][2] == 2:\n    WRange[1] = List[i][0]\n  elif List[i][2] == 3:\n    HRange[0] = List[i][1]\n  else List[i][2] == 4:\n    HRange[1] = List[i][1]\nif WRange[1]-WRange[0] >0:\n  W = WRange[1]-WRange[0]\nelse:\n  W = 0\nif HRange[1]-HRange[0] >0:\n  H = HRange[1]-HRange[0]\nelse:\n  H = 0\nres = H * W\nprint(res)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s947703129":{
    "code_string":"#prepare\nL = []\nQ = []\n\n#input\nW, H, N, = map(int,raw_input().split())\nfor i in range(N):\n    L.append(map(int,raw_input().split()))\nx1=0\nx2=W\ny1=0\ny2=H\n\n#calculate\nQ = [row[2] for row in L]\n\n\nfor k in range(N):\n    if Q[k] == 1:\n        x1 = max(x1,L[k][0])\n    elif Q[k] == 2:\n        x2 = min(x2,L[k][0])\n    elif Q[k] == 3:\n        y1 = max(y1,L[k][1])\n    elif Q[k] == 4:\n        y2 = min(y2,L[k][1])\n\nprint(max(0,x2-x1) * max(0,y2-y1))",
    "error_obj":"NameError: name 'raw_input' is not defined"
  },
  "s859381452":{
    "code_string":"W, H, N=map(int, input().split())\nhen=[0,W,0,H]\nfor _ in range(N):\n  x, y, a=map(int, input().split())\n  if a==1:\n    heb[a-1]=max(hen[a-1], x)\n  elif a==2:\n    hen[a-1]=min(hen[a-1], x)\n  elif a==3:\n    hen[a-1]=max(hen[a-1], y)\n  elif a==4:\n    hen[a-1]=min(hen[a-1], y)\nyoko=hen[1]-hen[0]\ntate=hen[3]-hen[2]\nif yoko<0 or tate<0:\n  ans=0\nelse:\n  ans=yoko*tate\nprint(ans)",
    "error_obj":"NameError: name 'heb' is not defined"
  },
  "s290874693":{
    "code_string":"w,h,n=map(int, input().split())\nx=[]\ny=[]\na=[]\nfor i in range(n):\n  s=map(int, input().split())\n  x.append(s[0])\n  y.append(s[1])\n  a.append(s[2])\nx_l=0\nx_h=w\ny_l=0\ny_h=h\nfor i in range(n):\n  if a[i]==1:\n    if x_l<x[i]:\n      x_l=x[i]\n  elif a[i]==2:\n    if x_h>x[i]:\n      x_h=x[i]\n  elif a[i]==3:\n    if y_l<y[i]:\n      y_l=y[i]\n  else:\n    if y_h>y[i]:\n      y_h=y[i]\ns=(x_h-x_l)*(y_h-y_l)\nif s>0:\n  print(s)\nelse:\n  print(\"0\")",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s962168423":{
    "code_string":"W,H,N=map(int.input().split())\na,b,c,d=0,W,0,H\n\nfor i in range(N):\n  x,y,A=map(int.input().split())\n  if A==1:\n    a=max(a,x)\n  if A==2:\n    b=min(b,x)\n  if A==3:\n    c=max(c,y)\n  if A==4:\n    d=min(d,y)\n  \nprint(max(0,b-a)*max(0,d-c))",
    "error_obj":"AttributeError: type object 'int' has no attribute 'input'"
  },
  "s471213575":{
    "code_string":"def p_grid(w, h):\n\tfor i in range(h):\n\t\tfor j in range(w):\n\t\t\tprint(grid[j + w*i], end='')\n\t\tprint()\n\ndef coloring():\n    line = input()\n    words = line.split()\n    W = int(words[0])\n    H = int(words[1])\n    N = int(words[2])\n\n    x = 0\n    y = 0\n    w = W\n    h = H\n\n    grid = []\n\n    for i in range(h):\n        for j in range(w):\n            grid.append(0)\n\n    for i in range(N):\n      s = input()\n      ws = s.split()\n      x = int(ws[0])\n      y = int(ws[1])\n      a = int(ws[2])\n      if a == 1 or a==3:\n        #rect = x * y\n        for i in range(y):\n            for j in range(x):\n                grid[j + w * i] = 1\n\n        for i in range(h):\n\t\t    for j in range(w):\n\t\t\t    print(grid[j + w*i], end='')\n\t\t    print()\n\n      if a == 2:\n        #rect = (w - x) * y\n        for i in range(y):\n            for j in range(x,w):\n                grid[j + w*i] = 1\n\n        for i in range(h):\n\t\t    for j in range(w):\n\t\t\t    print(grid[j + w*i], end='')\n\t\t    print()\n\n      if a == 4:\n        #rect = x * (h - y)\n        for i in range(y,h):\n            for j in range(x):\n                grid[j + w*i] = 1\n\n        for i in range(h):\n\t\t    for j in range(w):\n\t\t\t    print(grid[j + w*i], end='')\n\t\t    print()\n        \n    print(grid.count(0))\n\n\n\n\ncoloring()",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s227292639":{
    "code_string":"import sys\n\ndef nextrec(coor,pt):\n    if pt[2]==1:\n        coor[0]=min(max(coor[0],pt[0]),coor[2])\n    elif pt[2]==2:\n        coor[2]=max(min(coor[2],pt[0]),coor[0])\n    elif pt[2]==3:\n        coor[1]=min(max(coor[1],pt[1]),coor[3])\n    elif pt[2]==4:\n        coor[3]=max(min(coor[3],pt[1]),coor[1])\ndef main(w,h,n,pts):\n    rec=[0,0,w,h]\n    for x in range(n):\n        nextrec(rec,pt[x]):\n    return (rec[0]-rec[2])*(rec[1]-rec[3])\n\nw,h,n=map(int,sys.stdin.readline().strip().split())\npts=[list(map(int,sys.stdin.readline().strip().split())) \\\n    for x in range(n)]\n\nprint(main(w,h,n,pts))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s149559832":{
    "code_string":"W, H, N = map(int, input().split())\nxya = [list(map(int, input().split())) for _ in range(N)]\n\nS = [[1] * W for _ in range(H)]\nfor x, y, a in xya:\n    if a == 1:\n        for i in range(H):\n            for j in range(x):\n                S[i][j] = 0\n    elif a == 2:\n        for i in range(x, W):\n            for j in range(x, W)\n                S[i][j] = 0\n    elif a == 3:\n        for i in range(y):\n            for j in range(W):\n                S[i][j] = 0\n    else:\n        for i in range(y, H):\n            for j in range(W):\n                S[i][j] = 0\nprint(sum(S))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s658977742":{
    "code_string":"#\n# abc047 b\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5 4 2\n2 1 1\n3 3 4\"\"\"\n        output = \"\"\"9\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5 4 3\n2 1 1\n3 3 4\n1 4 2\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"10 10 5\n1 6 1\n4 1 3\n6 9 4\n9 4 2\n3 1 3\"\"\"\n        output = \"\"\"64\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    W, H, N = map(int, input().split())\n    a = []\n    ox = 0\n    oy = 0\n    for _ in range(N):\n        a.append(list(map(int, input().split())))\n    for i in range(N):\n        if a[i][2] == 1:\n            ox = max(a[i][0], ox)\n        elif a[i][2] == 2:\n            W = min(a[i][0], W)\n        elif a[i][2] == 3:\n            oy = max(a[i][1], oy)\n        elif a[i][2] == 4:\n            H = min(a[i][1], H)\n    print(max((W-ox))*max((H-oy), 0))\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s972905401":{
    "code_string":"a=input()\nb=0\nfor i in range(len(a)-1):\n  a[i]!=a[i+1]:\n    b=b+1\nif a[-2]!=a[-1]:\n  b=b+1\nprint(b)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s004243839":{
    "code_string":"S = input()\nX = S[0]\nans = 0\nwhile 1:    \n    for i in range(S):\n        if S[i] != X:\n            ans += 1\n            X =S[i]\n            S = S[i:]\n            break\n    else:\n        break\nprint(ans)\n    \n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s658918951":{
    "code_string":"s = input()\nans = 0\n\nfor i in range(len(s)-1):\n  if s[i] != S[i+1]:\n    ans += 1\n\nprint(ans)",
    "error_obj":"NameError: name 'S' is not defined"
  },
  "s046877047":{
    "code_string":"S = input()\ncntb = 1000000 if if S[0] == \"B\" and S[-1] == \"B\" else 0\ncntw = 1000000 if S[0] == \"W\" and S[-1] == \"W\" else 0\nfor s in S.split(\"B\"):\n  if s != \"\":\n    cntb += 1\nfor s in S.split(\"W\"):\n  if s != \"\":\n    cntw += 1\nprint(min(cntb, cntw))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s239257148":{
    "code_string":"\tdef main():\n    s = str(input())\n    b_count = s.count('B')\n    w_count = len(s) - b_count\n\n    if b_count == len(s) or w_count == len(s):\n        count = 0\n    else:\n        count = 0\n        index = 0\n        alp = s[index]\n\n        while True:\n            if b_count == 0 or w_count == 0:\n                break\n            else:\n                if s[index] == 'B':\n                    b_count -= 1\n                else:\n                    w_count -= 1\n\n                if s[index] == alp:\n                    index += 1\n                    continue\n                else:\n                    count += 1\n                    alp = s[index]\n                    index += 1\n\n        if not (b_count == 0 and w_count == 0):\n            count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s238856865":{
    "code_string":"S = input()\nList = list(S)\ntrial = 0\nfor i in range(1,len(List)):\n  if List[i] != List[i-1]:\n    trial += 1\nprint(res)",
    "error_obj":"NameError: name 'res' is not defined"
  },
  "s151983345":{
    "code_string":"n = input()\ngr = itertools.groupby(n)\nprint(len(gr)-1)",
    "error_obj":"NameError: name 'itertools' is not defined"
  },
  "s029403120":{
    "code_string":"#include <iostream>\n#include <string>\n#define rep(i,n) for (int i = 0; i < (int)(n); i++)\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    string s;\n    int ans = 0;\n    cin >> s;\n    rep(i,s.size()-1) {\n        if (s[i] != s[i+1]) {\n            ans++;\n        }\n    }\n    cout << ans << \"\\n\";\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s086700697":{
    "code_string":"#import\n#import math\n#import numpy as np\n#= int(input())\nS = input()\n#= map(int, input().split())\n#= list(map(int, input().split()))\n#= [input(), input()]\n#= [list(map(int, input().split())) for _ in range(N)]\n#= {i:[] for i in range(N)}\n\ns = S[0]\n\nr = 0\n\nfor i in range(1, len(S)):\n    if s != S[i]:\n        r += 1\n\n    s = S[i]\n\nprint(res)",
    "error_obj":"NameError: name 'res' is not defined"
  },
  "s284962664":{
    "code_string":"#!\/usr\/bin\/env python3\n\n# from numba import njit\n\n# input = stdin.readline\n\ndef calcGroup(s):\n  whiteCount = 0\n  blackCount = 0\n  prev = \"\"\n  for i in range(len(s)):\n    if s[i] == prev:\n      pass\n    else:\n      if s[i] = \"\":\n        pass\n      elif s[i] = \"W\":\n        whiteCount += 1\n      elif s[i] = \"B\":\n        blackCount += 1\n      else:\n        raise ValueError\n    prev = s[i]\n  return whiteCount,blackCount\n\n# @njit\ndef solve(s):\n  # white,black = calcGroup(s)\n  return min(calcGroup(s))\n\n\n\ndef main():\n  s = input()\n  print(solve(s))\n  return\n\nif __name__ == '__main__':\n  main()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s078914067":{
    "code_string":"if (n == len(s) and (s == t)):\n    print(n)\nelse:\n    ind = [0]\n    for i in range(1, len(s)):\n        if s[-i:] == t[:i]:\n            ind.append(i)\n\n    ind.reverse()\n    for i in ind:\n        if i == 0:\n            print(2*n)\n        else:\n            res = s[0:-i] + t\n            if len(res) >= n:\n                print(len(res))\n                break",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s874299402":{
    "code_string":"n=int(input())\ns=input()\nt=input()\n\nfor i in range(n,2*n-1):\n    if s[:2*n-i] == t[2*n-i]:\n        print(i)\n        exit()\nprint(2*n)",
    "error_obj":"IndexError: string index out of range"
  },
  "s822592088":{
    "code_string":"n=int(input())\ns=input()\nt=input()\nwhile True:\n  if s==t:\n    break\n  s=s[1:]\n  t=[:-1]\n  n+=1\nprint(n)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s256155000":{
    "code_string":"n = int(input())\ns = input()\nt = input()\nanswer = n\nfor i in range (n + 1) :\n  if answer == n :\n    newstring = s[0:i] + t[:n]\n  \tif newstring[0:n] == s :\n    \tanswer += i\nprint (answer)\n",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s175911929":{
    "code_string":"n, x = map(int, input().split())\nif abs(n-x)<=1 :\n  print('Yes')\nelse:\n  print('No')\n  exit()\nif n == x:\n  for i in range(2*(n-1)):\n    print(i+1)\nelif x == n-1:\n  print(n)\n  for i in range(2*(n-1)):\n    if i != n:\n      print(i)\nelse x == n-1:\n  for i in range(2*(n-1)):\n    if i != n:\n      print(i)\n  print(n)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s658375956":{
    "code_string":"n,x=list(map(int,input().split()))\nif x==1 or x==2*n-1:\n  print(\"No\")\nelif x==2*n-2:\n  print(\"Yes\")\n  for i in range(n-1):\n    print(i+1)\n  print(x)\n  print(2*n-1)\n  for i in range(n-1,x-1):\n    print(i+1)\nelse:\n  print(\"Yes\")\n  l=[i for i in range(1,x-1)]+[i for i in range(x,2*n-3)]\n  for i in range(n-1):\n    print(l[i]+1)\n  print(2*n-1)\n  print(x)\n  print(1)\n  print(2*n-2)\n  for i in range(n-1,2*n-3):\n    print(l[i]+1)",
    "error_obj":"IndexError: list index out of range"
  },
  "s126612773":{
    "code_string":"def main():\n    s=input()\n    a=s.find('C')\n    if(a==-1):\n        print('No')\n    else\n        a2=s.find('F',a+1,len(s))\n        if(a2==-1):\n            print('No')\n        else:\n            print('Yes')\n\nmain()\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s472647627":{
    "code_string":"k, t = list(map(int, input().split()))\nnums = list(map(int, input().split()))\n\nm = max(nums)\nrest = k - m\nif max - rest - 1 > 0:\n    print(max - rest - 1)\nelse:\n    print(0)\n",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'builtin_function_or_method' and 'int'"
  },
  "s352984650":{
    "code_string":"n,k=map(int,input().split())\na=list(map(int,input()split()))\ns=max(a)\nprint(max(2*s-n-1))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s207553329":{
    "code_string":"K, T = map(int, input().split())\nA = list(map(int, input().split()))\n\nA = sorted(A, reverse=True)\n\nprint(max(0, A[0] - 1 - sum(A[1:]))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s088027586":{
    "code_string":"# coding: utf-8\nimport sys\n#from operator import itemgetter\nsysread = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\nfrom heapq import heappop, heappush\nfrom collections import defaultdict\nsys.setrecursionlimit(10**7)\nimport math\n#from itertools import product, accumulate, combinations, product\n#import bisect\n#import numpy as np\n#from copy import deepcopy\nfrom collections import deque\n#from decimal import Decimal\n\nINF = 1 << 50\n\ndef run():\n    K, T, *A = map(int, read().split())\n    A = sorted(A)\n    A = deque(A)\n    high, low = 0, 0\n    last = None\n    while A:\n        #print(A)\n        if high == 1:\n            A.appendleft(1)\n            high = A.pop()\n\n        if not high:\n            high = A.pop()\n            if high == 1:break\n        elif not low:\n            low = A.popleft()\n        #print(high, low)       \n        \n        val = min(low, high-1)\n        if not val:\n            last = None\n        else:\n            last = 'LOW'\n        high -= val\n        low -= val\n        #print('-->', high, low)\n    if high == 1\n        if last == None:\n            print(max(low-high-1, 0))\n            return\n        else:\n            print(max(low - 1, 0)))\n            return\n    print(high - 1 + max(low - 1, 0))\n\nif __name__ == \"__main__\":\n    run()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s289576398":{
    "code_string":"3 3 33",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s589811887":{
    "code_string":"a=set(int,input().split())\nprint(len(a)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s726681050":{
    "code_string":"l = set(list(map, input().split()))\nprint(len(l))",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s867050968":{
    "code_string":"a = set(map(int,input()))\nprint(len(a))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s555800231":{
    "code_string":"a=input().split()\na.sort()\ncnt=0\nwhile len(s)>0:\n    i=a.count(a.pop(0))\n    for j in range(i):\n        a.pop(0)\n    cnt+=1\nprint(cnt)",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s200112065":{
    "code_string":"a = list(map(int, input()))\nprint(len(set(a)))",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s799515345":{
    "code_string":"#\u5165\u529b\nlst = input().split()\n\n#\u6574\u6570\u5024\u5316\nfor i in range(len(lst)):\n   lst[i] = int(lst[i])\n\n#\u30bd\u30fc\u30c8\nlst.sort()\n\n#\u51fa\u529b\nif lst[0] == lst[2]\n   print(3)\nelif lst[0] == lst[1] or lst[1] == lst[2]:\n   print(2)\nelse:\n   print(1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s034012326":{
    "code_string":"print(len(set([input() for i in range(3)])))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s673965203":{
    "code_string":"s = list(input().split())\nprint(len(set(s))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s903598249":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\n\ncount = 0\n\nif a != b:\n  count += 1\nif b != c:\n  count += 1\nif a != c:\n  count += 1\n  \nprint(int(count\/2))",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1 4'"
  },
  "s813685070":{
    "code_string":"j = int(input())\n\nx = j.split()\ny = []\n\nfor i in x:\n  if(i not in y):\n    y.append(i)\nprint(len(y))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1 4'"
  },
  "s018555880":{
    "code_string":"def paint():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    count = 1\n    if a != b:\n        count += 1\n    if a != c and b != c:\n        count += 1\n\n    print(count)\n\npaint()",
    "error_obj":"ValueError: invalid literal for int() with base 10: '3 1 4'"
  },
  "s595922270":{
    "code_string":"s=set(int(input().split()))\nprint(len(s))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s051186415":{
    "code_string":"abc=sorted(list(map(int,input().split())))\nif a==c:\n    print(1)\nelif a==b or b==c:\n    print(2)\nelse:\n    print(3)\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s300003209":{
    "code_string":"a,b,c=map(int,input().split())\nif a=b and b=c:\n    print(1)\nelif a=b and a!=c:\n    print(2)\nelif a!=b and b=c:\n    print(2)\nelif a=c and a!=b:\n    print(2)\nelse:\n    print(3)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s295728021":{
    "code_string":"sample = input()\nsample_list = sample.split(\" \")\ncount = 0\nflag = 0\nfor i in range(len(sample_list)):\n  for j in range(1, i):\n    if sample_list[i] == sample_list[j]:\n      flag = 1\n    if flag == 0:\n      count += 1\n    flag = 0\n  return count\n",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s300318023":{
    "code_string":"def iroha():\n    a, b, c = map(int, input().split())\n    if a == b and b == c and a == c:\n        print(1)\n    elif a != b and b != c and a != c:\n        print(3)\n    elif else:\n        print(2)\n\nif __name__ == \"__main__\":\n    iroha()\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s532790974":{
    "code_string":"a, b, c = map(int, input().split())\nm = set([a, b, c])\nprint(len(m)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s679424556":{
    "code_string":"lst = list(map(int,input().strip()))\nN = lst[0]\nK = lst[1]\nprint(K * (N-1)*(K-1))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s592229598":{
    "code_string":"ans = 1\nfor i in range(N):\n    if i == 0:\n        ans *= K\n    else:\n        ans *= K-1\nprint(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s186113090":{
    "code_string":"i = input()\nj = i.split()\nnum_balls = j[0]\nnum_colors = j[1]\nproduct = num_colors\nif(num_balls > 1 and num_colors == 1):\n  print(0)\nfor i in range(1, num_balls):\n  product *= (num_balls - 1)\nprint(product)",
    "error_obj":"TypeError: '>' not supported between instances of 'str' and 'int'"
  },
  "s531125481":{
    "code_string":"n = int(input())\nk = int(input())\n\nans=1\n\nfor i in range(k):\n  ans = ans*n\n  n -= 1\n  \nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 2'"
  },
  "s465636592":{
    "code_string":"N = int(input()) %10\nhon=[2,4,5,7,9]\nbon=[3]\n\nif N in hon:\n    print(\"hon\")\nelif N in bon:\n    print(\"bon\")\nelse:\n    print(\"pon\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '2 2'"
  },
  "s147126622":{
    "code_string":"N, K = map(int, input().split())\nprint(K * ((K - 1) ** (N - 1))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s711185083":{
    "code_string":"sample = input() # two numbers in a string\nnew_sample = sample.split(\" \")\n\nball = int(new_sample[0]) # number of balls\ncolor = int(new_sample[1]) # number of colors\nif color == 1 and ball > 1:\n  print(0)\nelse:\n\tproduct = color\n\n\n# for i in range(1, ball):\n  for i in range(1, ball):\n    product *= (color-1)\n  print(product)\n\n  \n# 3 balls, 10 colors\n# 1st spot, 10 choices\n# 2nd spot, 9 choices\n# 3rd spot, 9 choices\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s451670787":{
    "code_string":"n,k = map(int,input().split())\nprint(k*((k-1)**(n-1))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s160975742":{
    "code_string":"import math\nn = int(input())\nA, B = 0, 0\nfor i in range(n):\n    x, y = int(input.split())\n    dx, dy = 1, 1\n    if A > x:\n        dx = A \/\/ x\n        if A % x != 0:\n            dx += 1\n    \n    if B > y:\n        dy = B \/\/ y\n        if B % y != 0:\n            dy += 1\n\n    a = max(dx, dy)\n    A, B = a * x, a * y\nprint(A + B)",
    "error_obj":"AttributeError: 'builtin_function_or_method' object has no attribute 'split'"
  },
  "s130746901":{
    "code_string":"import sys\nimport numpy as np\nimport random\nimport math\nfrom decimal import Decimal\nimport itertools\nimport re\nimport bisect\nfrom collections import deque, Counter\nfrom functools import lru_cache\n\nsys.setrecursionlimit(10**9)\nINF = 10**13\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\ndef SERIES(n): return np.fromstring(sys.stdin.buffer.read(), dtype=np.int32, sep=' ')\ndef GRID(h,w): return np.fromstring(sys.stdin.buffer.read(), dtype=np.int32, sep=' ').reshape(h,-1)[:,:w]\ndef GRIDfromString(h,w): return np.frombuffer(sys.stdin.buffer.read(), 'S1').reshape(h,-1)[:,:w]\nMOD = 1000000007\n\ndef main():\n\tn = I()\n\tx, y = 1, 1\n\tfor _ in range(n):\n\t\tt, a = LI()\n\t\tm = max((x+t-1)\/\/a,(y+a-1)\/\/b)\n\t\tx, y = m*t, m*a\n\tprint(x+y)\n\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s184389308":{
    "code_string":"s = input()\nn = len(s)\np = 0\nfor e in s:\n  if e == 'p':\n    p += 1\nprint(s\/\/2 - p)",
    "error_obj":"TypeError: unsupported operand type(s) for \/\/: 'str' and 'int'"
  },
  "s566921579":{
    "code_string":"import math\nN = int(input())\nt= 1\na= 1\n\ndef t_small(t,a,t1,a1):\n    gain = -(-t\/\/t1)\n    t = gain*t1\n    a_tmp=gain*a1\n    if a_tmp<a:\n        gain_a = -(-a\/\/a_tmp)\n        t *= gain_a\n        a = a_tmp*gain_a\n    else:\n        a = a_tmp\n    return t,a,t+a\n\ndef a_small(t,a,t1,a1):\n    gain = -(-a\/\/a1)\n    a = gain*a1\n    t_tmp=gain*t1\n    if t_tmp<t:\n        gain_t = -(-t\/\/t_tmp)\n        a *= gain_t\n        t = t_tmp*gain_t\n    else:\n        t = t_tmp\n    return t,a,t+a\n\nans = 0\nfor _ in range(N):\n    t1,a1 = map(int,input().split())\n    tt1,aa1,sta1 = t_small(t,a,t1,a1)\n    tt2,aa2,sta2 = a_small(t,a,t1,a1)\n    if sta1<=sta2:\n        t=tt1;a=aa1,ans = sta1\n    else:\n        t=tt2,a=aa2,ans=sta2\nprint(ans)",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s327118509":{
    "code_string":"import sys\nfrom fractions import gcd\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninm = lambda: map(int, sys.stdin.readline().split())\ninl = lambda: list(inm())\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(*a, **dict(file=sys.stderr, **kw))\n\nN = ini()\n\n\ndef solve():\n    p = q = 1\n    for i in range(N):\n        x, y = inm()\n        k = 1\n        while True:\n            if x * k >= p and y * k >= q:\n                p = x * k\n                q = y * k\n                break\n            k += 1\n    return p + q\n\n\nprint(solve())\n",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s936748404":{
    "code_string":" s=input()\n print((s.count(\"g\")-s.count(\"p\"))\/\/2)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s419893273":{
    "code_string":"n = input()\na = 0\na = \"CODEFESTIVAL2016\"\nfor i, j in zip(n, a):\n  if i != j:\n    a += 1\nprint(a)\n  ",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s057141437":{
    "code_string":"S = input()\nT = 'CODEFESTIVAL2016'\nans = 0\nfor _ in range(16):\n  ans += S[i] != T[i]\nprint(ans)\n  ",
    "error_obj":"NameError: name 'i' is not defined"
  },
  "s024156933":{
    "code_string":"\"\"\"Boot-camp-for-Beginners_Easy003_B_Qualification-simulator_19-August-2020.py\"\"\"\nimport numpy as np\nimport sys\n\nN, A, B = map(int, input().split())\nS = str(input())\n\nfor i in range(len(N)):\n    if(S[i] == \"c\"):\n        print(\"No\")\n    else:\n        if(i >= A+B):\n            print(\"No\")\n        else:\n            if(S[i] == \"b\" and i < B):\n                print(\"No\")\n            else:\n                print(\"Yes\")\n",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s891718196":{
    "code_string":"N, A, B = map(int, input().split())\nS = input()\n \nok_count = 0\nok_fcount = 0\nfor i in range(N):\n  if S[i] == 'a':\n    if ok_count < A+B-1\n      print('Yes')\n      ok_count +=1\n      \n    else:\n      print('No')\n      \n  elif S[i] == 'b':\n    if ok_count <= A+B-1 and ok_fcount < B-1:\n      print('Yes')\n      ok_count+=1\n      ok_fcount+=1\n      \n    else:\n      print('No')\n      \n  else:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s848913933":{
    "code_string":"n, A, B = map(int, input().split())\na, b = 0\ns = input()\nfor i in range(n):\n    s_i = s[i]\n    if s_i == 'a':\n        if (a + b) < (A + B):\n            a += 1\n            print('Yes')\n        else:\n            print('No')\n    elif s_i == 'b':\n        if ((a + b) < (A + B)) & (b < B):\n            b += 1\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\n    \n",
    "error_obj":"TypeError: cannot unpack non-iterable int object"
  },
  "s777154586":{
    "code_string":"N = int(input())\nX = list(map(int, input().split()))\n\nHP = []\nfor p in range(1, 101, 1):\n    P = [p] * len(X)\n    delta = sum([(i - j) ** 2 for (i, j) in zip(X, P)])\n    HP.append(delta)\n\nprint(min(HP))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '10 2 3'"
  },
  "s942591766":{
    "code_string":"5 2 2\nccccc",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s344673379":{
    "code_string":"n, a, b = map(int, input().split())\ns = list(input())\n\nresult = []\ncnt = 0\ncnt_b = 0\nlimit = a + b\n\nfor student in s:\n    if student == c:\n        result.append(\"No\")\n    elif (student == \"a\") & (cnt < limit):\n        result.append(\"Yes\")\n        cnt += 1\n    elif (student == \"b\") & (cnt < limit) & (cnt_b < b):\n        result.append(\"Yes\")\n        cnt += 1\n        cnt_b += 1\n    else:\n        result.append(\"No\")\nprint(\"\\n\".join(result))",
    "error_obj":"NameError: name 'c' is not defined"
  },
  "s974952176":{
    "code_string":"X = input()\n\ncache = 0\nans = len(X)\n\nfor c in X:\n    if c == 'S'\n        cache += 1\n    else:\n        if cache > 0:\n            cache -= 1\n            ans -= 2\n\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s956965116":{
    "code_string":"import sys\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    import os, zlib, base64\n    open('solve.pyx', 'wb').write(zlib.decompress(base64.b85decode(\"c${rg?P`QD5d7~`ER=Fu@8pF3DAIcpIZBMHw=|bXvi9iPcTKFlmIf4eW_H|<JU~x@XC@OGFv^az8u6sdG8??Rf}u`NQx%Xw({*y5LB4-+AE?>+jZWc@q6*xT+vpKlUzFd&<jL}obo!Go&Q@+hukO8i^f<_4HG&E$Tr#mo?eU716Rb1c;{akPsWvabx{*wift-!$_MqVe$B5o8WDx2kSxzU^TASn_;Q3{vXb|=ljtz7k)%%8PC{OZwg8B$0bP@N+v$t?pkQL)t)E+3I#@X>(k*3uy&>56S?}6MF*&yQ}F#<2UK|vZ&ZEErW^;t4jS6Rzy69n9%ygk%=u;=2Bsv=&8P5jSKVl%{xQ)S!@{afc|+vln!vD&)N<4SVkrJBgeIHE}6#L0FRzK9ITpz4$#DzX7Rua@aL<hw`H?_^O$_66`A&C>\")))\n    os.system('cythonize -i -3 -b solve.pyx')\nimport solve",
    "error_obj":"ModuleNotFoundError: No module named 'solve'"
  },
  "s533113467":{
    "code_string":"s = input()\nprint(s[:4]+\" \"+s[4:]",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s815846972":{
    "code_string":"n = input()\nprint(\" \".join(n[:4], n[4:]))",
    "error_obj":"TypeError: str.join() takes exactly one argument (2 given)"
  },
  "s055909337":{
    "code_string":"#include <iostream>\nusing namespace std;\n\nint main() {\n  string s;\n  cin >> s;\n\n  for (int i=0; i<s.size(); i++) {\n    if (i==4) cout << ' ';\n    else cout << s[i];\n  }\n}",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s030854617":{
    "code_string":"#N = int(input())\n#a = list(map(int, input().split()))\n\nans=0\n\nif N%2==0:\n    for i in range(N\/\/2):\n      if a[a[i]-1]==i+1:\n        ans += 1\n            \nelse:\n    for i in range(N\/\/2 +1):\n        if a[a[i]-1]==i+1:\n          ans+=1\n\nprint(ans)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s003213909":{
    "code_string":"n = int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\nl = l[0]\ncnt = 0\nfor i in range(n):    \n    if l[i]-1 > i:\n        if( l[l[i]-1]-1 == i):\n            cnt+=1\nprint(cnt)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s368737521":{
    "code_string":"N=int(input())\nA=list(map(int, input().split()))\nans=0\nfor i in range(N):\n  if A[a[i-1]-1]==i+1:\n    ans+=1\nprint(ans\/\/2)",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s456622262":{
    "code_string":"N = int(input())\nrabit = [ int(v) for v in input().split(\" \") ]\nskip = set()\nnum = 0\n \nfor i in range(N):\n  n = rabit[i]\n  if i in skip:\n    continue\n  if rabit[n-1] == i+1:\n    skip.append(n-1)\n    num += 1\n \nprint(num)",
    "error_obj":"AttributeError: 'set' object has no attribute 'append'"
  },
  "s496794137":{
    "code_string":"n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(a):\n  if a[a[i] - 1] == i + 1:\n    ans += 1\nprint(ans \/\/ 2)",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s376164040":{
    "code_string":"import sys\nimport itertools\n# import numpy as np\nimport time\nimport math\nfrom heapq import heappop, heappush\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import permutations\nsys.setrecursionlimit(10 ** 7)\n \nINF = 10 ** 18\nMOD = 10 ** 9 + 7\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n# map(int, input().split())\nS = input()\nK = int(input())\n\nans = []\nfor i, c in enumerate(S):\n    num = ord('z') - ord(c) + 1\n    if K >= num:\n        K -= num\n        ans.append('a')\n    else:\n        ans.append(c)\nif K > 0:\n    ans[-1] = chr((ord(S[-1]) - ord('a') + K) % 26 + ord('a'))\nprint(\"\".join(an))\n    \n",
    "error_obj":"NameError: name 'an' is not defined"
  },
  "s493418513":{
    "code_string":"s,k,t=input(),int(input()),\"\"\nfor q in s:\n if(p:=(123-ord(q))%26)<=k:t+=\"a\";k-=p\n else:t+=q\n*a,b=t\nprint(a+chr((ord(b)-97+k)%26+97))",
    "error_obj":"TypeError: can only concatenate list (not \"str\") to list"
  },
  "s727725937":{
    "code_string":"s,k,t=input(),int(input()),\"\"\nfor q in s:\n if(p:=(123-ord(q))%26)<=k:n+=\"a\";K-=i\n else:n+=c\nprint(t[:-1]+chr((ord(t[-1])-97+k)%26+97))",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s022197860":{
    "code_string":"def actual(a, b, h):\n    return int((a + b) * h \/ 2)\n\na, b, h = map(int, input().split())\nprint(actual(a, b, h))\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s497621508":{
    "code_string":"print(eval('(i*i)*i\/\/2'.replace('i','int(input()')))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s013281981":{
    "code_string":"a,b,h=map(int,input().split())\nprint((a+b)*h\/\/2)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s280021849":{
    "code_string":"a,b,h = map(int,input().split())\n\nprint(((a+b)*h)\/\/2)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s929311442":{
    "code_string":"a=int(input())\nb=int(input())\nc=int(input())\n\nprint((a+b)*h\/2)",
    "error_obj":"NameError: name 'h' is not defined"
  },
  "s927576248":{
    "code_string":"a = int(input().split())\nb = int(input().split())\nh = int(input().split())\nprint(((a+b)*h)\/\/2)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s040047719":{
    "code_string":"a = int(input()\nb = int(input())\nh = int(input())\nprint( (a+b)*h\/\/2 )",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s510135134":{
    "code_string":"a, b, h = map(int, input().split())\n\nanswer = (a + b) * h \/\/ 2\n\nprint(answer)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s381848307":{
    "code_string":"print((int(input())+int(input()))*int(input()\/\/2)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s911989284":{
    "code_string":"(a,b,c) = (int(input()),int(input()),int(input()))\ns = (a+b)*h\/2\nprint(s)",
    "error_obj":"NameError: name 'h' is not defined"
  },
  "s810686727":{
    "code_string":"a = [int(input()) for i in range(5)]\n(a[0]+a[1])*a[2]\/2",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s114340775":{
    "code_string":"a, b, h = [input() for _ in range(3)]\nprint(int((a + b) * h \/ 2))\n",
    "error_obj":"TypeError: can't multiply sequence by non-int of type 'str'"
  },
  "s100961777":{
    "code_string":"  a, b, h = [int(input()) for _ in range(3)]\n  print((a+b)*h \/ 2)\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s779145400":{
    "code_string":"list = []\n\nfor i in range(3):\n    list.append(int(input()))\n\narea = (list[0]+list[1])*list[2]\/2)\n\n\nprint(int(area))",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s830376365":{
    "code_string":"a = int (input ())\nb = int (input ())\nh = int (input ()\/2)\nprint ((a+b)*h)\n",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'str' and 'int'"
  },
  "s985092681":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\n\nprint((a + b)*h\/\/2)",
    "error_obj":"NameError: name 'h' is not defined"
  },
  "s148089758":{
    "code_string":"a,b,c=eval('int(input())'*3)\nprint((a+b)*h\/\/2)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s734494107":{
    "code_string":"a,b,h=map(int,input().split())\nprint((a+b)*h\/2)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s724742958":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\n\nprint((a+b)*h\/\/2)",
    "error_obj":"NameError: name 'h' is not defined"
  },
  "s865843245":{
    "code_string":"import sys\n\ndef main(a,b,h):\n    reuturn (a+b)*h\/\/2\n\na =int(sys.stdin.readline().strip())\nb =int(sys.stdin.readline().strip())\nh =int(sys.stdin.readline().strip())\n\nprint(main(a,b,h))\n",
    "error_obj":"NameError: name 'reuturn' is not defined"
  },
  "s190182072":{
    "code_string":"a,b,c = map(int,input().split())\nprint((a+b)*h\/2)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s875232295":{
    "code_string":"a,b,h=[int(i) for i in input()]\nprint((a+b)*h\/2)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s472800817":{
    "code_string":"a,b,c=map(int,input().split())\nprint((a+b)*c\/\/2)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s214643900":{
    "code_string":"a, b, h = map(int, input().split())\n\nprint((a + b) * h \/ 2)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s242497895":{
    "code_string":"# \u5165\u529b\na, b, h = map(int, input().split())\n\n# \u51e6\u7406\nanswer = (a + b) * h \/2\n\n# \u51fa\u529b\nprint(int(answer))",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s572427272":{
    "code_string":"a, b, h = map(int, input().split())\nprint((a + b) * h \/\/ 2)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s423488634":{
    "code_string":"a = int(input())\nb = int(input())\nh = int(input())\nprint(in(((a+b)*h)\/2))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s594973946":{
    "code_string":"a = int(input())\nb = int(input())\nh = int(input())\narea = 0.5(a+b)*h\nprint(area)",
    "error_obj":"SyntaxWarning: 'float' object is not callable; perhaps you missed a comma?"
  },
  "s580941024":{
    "code_string":"d = { 'a':input(), 'b':input(), 'c':input() }\npointer = 'a'\nwhile True:\n    if 0 < len(d[pointer]):\n        tmp = d[pointer][0]\n        d[pointer] = s[pointer][1:]\n        pointer = tmp\n    else:\n        print(pointer.upper())\n        break",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s876203419":{
    "code_string":"#include <bits\/stdc++.h>\nusing namespace std;\n#define REP(i, n) for (int i = 0; i < (int)(n); i++)\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 100100100;\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-9;\nstruct Edge {\n  ll to;\n  ll cost;\n};\nint main() {\n  string sa, sb, sc;\n  cin >> sa >> sb >> sc;\n  char now = 'a';\n  while (true) {\n    if (now == 'a') {\n      if (sa.size() == 0) {\n        cout << 'A' << endl;\n        return 0;\n      }\n      now = sa[0];\n      sa.erase(sa.begin());\n    } else if (now == 'b') {\n      if (sb.size() == 0) {\n        cout << 'B' << endl;\n        return 0;\n      }\n      now = sb[0];\n      sb.erase(sb.begin());\n    } else {\n      if (sc.size() == 0) {\n        cout << 'C' << endl;\n        return 0;\n      }\n      now = sc[0];\n      sc.erase(sc.begin());\n    }\n  }\n}\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s514248822":{
    "code_string":"for i in range(3):\n  s.append(input())\nmember=[\"A\",\"B\",\"C\"]\nturn=0\n\nwhile True:\n  if s[turn]==\"\":\n    winner=turn\n    break\n  elif s[turn][0]==\"a\":\n    s[turn]=s[turn][1:]\n    turn=0\n  elif s[turn][0]==\"b\":\n    s[turn]=s[turn][1:]\n    turn=1\n  else:\n    s[turn]=s[turn][1:]\n    turn=2\nprint(member[winner])\n    \n",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s683539823":{
    "code_string":"alice = input()\nbob = input()\ncharlie = input()\n\nfor i in range(len(alice)):\n  if alice[i] == \"a\":\n    while alice[i] == \"a\":\n    \talice.pop(i)\n    \n  elif alice[i] == \"b\":\n    alice.pop(i)\n    if bob[i] == \"b\":\n      while bob[i] == \"b\":\n      \tbob.pop(i)\n    elif bob[i] == \"a\":\n      while bob[i] == \"a\":\n        alice.pop(i)\n    elif bob[i] == \"c\":\n       while bob[i] == \"c\":\n        charlie.pop(i)\n      \n  elif alice[i] == \"c\":\n    alice.pop(i)\n    if charlie[i] == \"c\":\n      while charlie[i] == \"c\":\n        charlie.pop(i)\n    elif charlie[i] == \"b\":\n      while charlie[i] == \"b\":\n        bob.pop(i)\n    elif charlie[i] == \"a\":\n      while charlie[i] == \"a\":\n        alice.pop(i)\n\nfor i in range(len(alice)):\n\tif len(alice) == 0 and alice[ ",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s502020790":{
    "code_string":"S = {i: input() for i in \"abc\"}\nn = \"a\"\nwhile S[n]:\n  n = S[n].pop(0)\n  \nprint(n.upper())",
    "error_obj":"AttributeError: 'str' object has no attribute 'pop'"
  },
  "s867583426":{
    "code_string":"lis=[]\nll=[\"a\",\"b\",\"c\"]\nfor i in range(3):\n  lis.append(list(input()))\nturn=0\nwhile 1:\n  x=ll.index(lis[turn].pop())\n  if lis[turn]=[]:\n    print(ll[turn].upper())\n    break\n  turn=x",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s369786755":{
    "code_string":"S = dict()\n\nS['a'] = input()[::-1]\nS['b'] = input()[::-1]\nS['c'] = input()[::-1]\n\nplayer = 'a'\n\nwhile S[player]:\n  player = S[player].pop()\n\n  \nres = player.upper()\nprint(res)\n  ",
    "error_obj":"AttributeError: 'str' object has no attribute 'pop'"
  },
  "s401563745":{
    "code_string":"S = Sa\ncard = S.pop(0)\nwhile True:\n    if card == 'a':\n        S = Sa\n    if card == 'b':\n        S = Sb\n    if card == 'c':\n        S = Sc\n    try:\n        card = S.pop(0)\n    except:\n        print(card.upper())\n        break",
    "error_obj":"NameError: name 'Sa' is not defined"
  },
  "s332841783":{
    "code_string":"s={'a': input(), 'b': input(), 'c' input()}\nnow='a'\nwhile s[now]!=\"\":\n  next =s[now][0]\n  s[now]=s[now][1:]\n  now= next\nprint(now.upper())",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s437297138":{
    "code_string":"alice = list(input())\nbob = list(input())\ncharlie = list(input())\n\ncurrent = alice\nwhile(len(alice) > 0 and len(bob) > 0 and len(charlie) > 0):\n  if(current[0] == 'a'):\n\tdel current[0]\n    current = alice\n  elif(current[0] == 'b'):\n    del current[0]\n\tcurrrent = bob\n  elif(current[0] == 'c'):\n    del current[0]\n\tcurrent = charlie\nif(len(alice) == 0):\n  print('A')\nelif(len(bob) == 0):\n  print('B')\nelif(len(charlie) == 0):\n  print('C')",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s466517065":{
    "code_string":"mb=input()\nmc=input()\nmdic={\"a\":ma,\"b\":mb,\"c\":mc}\nm=\"a\"\nndic={\"a\":0,\"b\":-1,\"c\":-1}\nwhile ndic[m]<len(mdic[m]):\n  m=mdic[m][ndic[m]]\n  ndic[m]+=1\nprint(m.upper())",
    "error_obj":"NameError: name 'ma' is not defined"
  },
  "s068634235":{
    "code_string":"n = input()\nl = len(n)\nans = 0\nfor i in range(l):\n  for j in range(l-i):\n    ans+=int(n[i]) * 10**j * 2**i * 2**(n-i-j-2)\nprint(ans)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s623242012":{
    "code_string":"def dfs(i,f):\n    if i == n-1:\n        return sum(list(map(int,input().split(\"+\"))))\n    return dfs(i+1,f+s[i+1]) + dfs[i+1,f + \"+\" + s[i+1]]\n\ns = input()\nn = len(s)\nprint(dfs(0,s[0]))",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s728454734":{
    "code_string":"s = input()\nn = len(s-1)\ntotal=0\nfor i in range(2**n):\n  pl=['']*n\n  ans=''\n  for j in range(n):\n    if ((i>>j)&1):\n      pl[n-1-j] = '+'\n  for k in range(n):\n    ans += s[k]+pl[k]\n  ans+=s[-1]\n  total += eval(ans)\n\nprint(total)",
    "error_obj":"TypeError: unsupported operand type(s) for -: 'str' and 'int'"
  },
  "s677309252":{
    "code_string":"def a(s,i):\n    if i == l-1:\n        return sum(map(int,s.split(\"+\")))\n    return a(s+s[i+1],i+1)+a(s+\"+\"+s[i+1],i+1)\ns = input()\nl = len(s)\nprint(a(s[0],0))",
    "error_obj":"IndexError: string index out of range"
  },
  "s584466912":{
    "code_string":"s = input()\n\nfor i in range(2**(len(s)-1)):\n    plus = [\"\"]*(len(s))\n    fomula = \"\"\n    for j in range(len(s)-1):\n        if(i >> j & 1):\n            plus[j] = \"+\"\n    for k in range(len(s)):\n        fomula += s[k] + plus[k]\n    ans += eval(fomula)\nprint(ans)",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s794484063":{
    "code_string":"# -*- coding: utf-8 -*-\n\ns = int(input())\nn = len(s) - 1\nanswer = 0\nfor i in range(2 ** n):\n    operation = [\"\"] * n\n    for j in range(n):\n        if (i >> j) & 1:\n            operation[n - 1 -j] = \"+\"\n    \n    formula = \"\"\n    for p_n, p_o in zip(s, operation + [\"\"]):\n        formula += (p_n + p_o)\n    \n    answer += eval(formula)\n\nprint(answer)",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s532178637":{
    "code_string":"from sys import stdin\ninput = stdin.readline\n\nS = input()\nn = len(S)\n\ntot = 0\n\nfor i in range(2**(n-1)):\n  f = S[0]\n  for j in range(n-1):\n       if ((i >> j) & 1):\n        f += \" \"\n       f += S[j+1]\n  \n  tot += sum(map(int, f.split(\" \")))\n\nprint(tot)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '\\n'"
  },
  "s514796426":{
    "code_string":"S = input()\ntotal = 0\nfor p in (product((0, 1), repeat=len(S)-1)):\n    ns = S[0]\n    for i, pp in enumerate(p, 1):\n        if pp == 0:\n            ns += S[i]\n        else:\n            total += int(ns)\n            ns = S[i]\n    total += int(ns)\nprint(total)\n\n\n",
    "error_obj":"NameError: name 'product' is not defined"
  },
  "s213516320":{
    "code_string":"\ndef a(t,i):\n    if i= len(s)-1:\n        return sum(map(int,t.split('+')))\n    return a(t+s[i+1],i+1) + a(t+'+'+s[i+1],i+1) #\u95a2\u6570\u306e\u4e2d\u306b\u5165\u308c\u308b\u3068\u6700\u5f8c\u306e\u9805\u3067\u307e\u3068\u3081\u3066\u51e6\u7406\u3067\u304d\u308b\ns = input()\nprint(a(s[0],0))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s634005364":{
    "code_string":"def a(t,i):\n    if i == n-1:\n        return sum(map(int,t.split()))\n    return a(t+s[i+1],i+1)+ a(t+\"+\"+s[i+1],i+1)\n\ns = input()\nn = len(s)\ni=0\nprint(a(s[0],0))\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '12+5'"
  },
  "s952328387":{
    "code_string":"s = sorted(list(map(int, input().split())))\na = s.pop(-1)\nb,c = a \/\/ 2, a - (a\/\/2)\nd = s[0] * a[1]\nprint(abs(d * b - d * c))",
    "error_obj":"TypeError: 'int' object is not subscriptable"
  },
  "s442961607":{
    "code_string":"import sys\ninput = sys.stdin.readline\n \ndef linput(ty=int, cvt=list):\n\treturn cvt(map(ty,input().split()))\n \ndef gcd(a: int, b: int):\n\twhile b: a, b = b, a%b\n\treturn a\n \ndef lcm(a: int, b: int):\n\treturn a * b \/\/ gcd(a, b)\n \ndef main():\n\t#n=int(input())",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s776891409":{
    "code_string":"header_code = \"\"\"\n#include \"\/opt\/ac-library\/atcoder\/internal_bit.hpp\"\n#include \"\/opt\/ac-library\/atcoder\/lazysegtree.hpp\"\n#include \"\/opt\/ac-library\/atcoder\/modint.hpp\"\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nnamespace aclython {\n\ntemplate <class S, S (*op)(S, S), S (*e)()> struct segtree {\n  public:\n    segtree() : segtree(0) {}\n    segtree(int n) : segtree(std::vector<S>(n, e())) {}\n    segtree(const std::vector<S>& v) : _n(int(v.size())) {\n        log = atcoder::internal::ceil_pow2(_n);\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n\n    void set(int p, S x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n\n    S get(int p) {\n        assert(0 <= p && p < _n);\n        return d[p + size];\n    }\n\n    S prod(int l, int r) {\n        assert(0 <= l && l <= r && r <= _n);\n        S sml = e(), smr = e();\n        l += size;\n        r += size;\n\n        while (l < r) {\n            if (l & 1) sml = op(sml, d[l++]);\n            if (r & 1) smr = op(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n        return op(sml, smr);\n    }\n\n    S all_prod() { return d[1]; }\n\n    template <bool (*f)(S)> int max_right(int l, S b) {\n        return max_right(l, b, [](S x, S y) { return f(x, y); });\n    }\n    template <class F> int max_right(int l, S b, F f) {\n        assert(0 <= l && l <= _n);\n        assert(f(e()));\n        if (l == _n) return _n;\n        l += size;\n        S sm = e();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!f(op(sm, d[l]), b)) {\n                while (l < size) {\n                    l = (2 * l);\n                    if (f(op(sm, d[l]), b)) {\n                        sm = op(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n\n    template <bool (*f)(S)> int min_left(int r, S b) {\n        return min_left(r, b, [](S x, S y) { return f(x, y); });\n    }\n    template <class F> int min_left(int r, S b, F f) {\n        assert(0 <= r && r <= _n);\n        assert(f(e()));\n        if (r == 0) return 0;\n        r += size;\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!f(op(d[r], sm), b)) {\n                while (r < size) {\n                    r = (2 * r + 1);\n                    if (f(op(d[r], sm), b)) {\n                        sm = op(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n\n  private:\n    int _n, size, log;\n    std::vector<S> d;\n\n    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n};\n\n\n\nint min_op(int n, int m){\n    return std::min(n, m);\n}\n\nint min_e(){\n    return (int)1e9;\n}\n\nstruct segtree_min {\n    public:\n        segtree_min() : segtree_min(0) {}\n        segtree_min(int n) : segtree_min(std::vector<int>(n, min_e())) {}\n        segtree_min(const std::vector<int>& vec) : seg(vec) {}\n\n        void set(int p, int x) {seg.set(p, x);}\n        int get(int p) {return seg.get(p);}\n        int prod(int l, int r) {return seg.prod(l, r);}\n        int all_prod() {return seg.all_prod();}\n\n        int max_right(int l, int v) {return seg.max_right(l, v, [](int x, int y) { return x<y; });}\n        int min_left(int r, int v) {return seg.min_left(r, v, [](int x, int y) { return x<y; });}\n\n    private:\n        segtree<int, min_op, min_e> seg;\n};\n\nint max_op(int n, int m){\n    return std::max(n, m);\n}\n\nint max_e(){\n    return 0;\n}\n\nstruct segtree_max {\n    public:\n        segtree_max() : segtree_max(0) {}\n        segtree_max(int n) : segtree_max(std::vector<int>(n, max_e())) {}\n        segtree_max(const std::vector<int>& vec) : seg(vec) {}\n\n        void set(int p, int x) {seg.set(p, x);}\n        int get(int p) {return seg.get(p);}\n        int prod(int l, int r) {return seg.prod(l, r);}\n        int all_prod() {return seg.all_prod();}\n\n        int max_right(int l, int v) {return seg.max_right(l, v, [](int x, int y) { return x<y; });}\n        int min_left(int r, int v) {return seg.min_left(r, v, [](int x, int y) { return x<y; });}\n\n    private:\n        segtree<int, max_op, max_e> seg;\n};\n\nusing mint = atcoder::modint998244353;\n\nstruct S {\n    mint a;\n    int size;\n    S(mint _a, int _size) : a(_a) ,size(_size) {}\n    S(int _a, int _size) : a(_a) ,size(_size) {}\n    S(const S &s) : a(s.a), size(s.size) {}\n    int get_a() { return (int)a.val(); }\n};\n\nstruct F {\n    mint a, b;\n    F(mint _a, mint _b) : a(_a), b(_b) {}\n    F(int _a, int _b) : a(_a), b(_b) {}\n    F(const F &f) : a(f.a), b(f.b) {}\n    int get_a() { return (int)a.val(); }\n    int get_b() { return (int)b.val(); }\n};\n\nS op(S l, S r) { return S{l.a + r.a, l.size + r.size}; }\n\nS e() { return S{0, 0}; }\n\nS mapping(F l, S r) { return S{r.a * l.a + r.size * l.b, r.size}; }\n\nF composition(F l, F r) { return F{r.a * l.a, r.b * l.a + l.b}; }\n\nF id() { return F{1, 0}; }\n\nstruct lazy_segtree{\n    lazy_segtree() : lazy_segtree(0) {}\n    lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}\n    lazy_segtree(const std::vector<S>& vec) : seg(vec) {}\n    void set(int p, S x) { seg.set(p, x); }\n    S get(int p) { return seg.get(p); }\n    S prod(int l, int r) { return seg.prod(l, r); }\n    S all_prod() { return seg.all_prod(); }\n    void apply(int p, F f) { seg.apply(p, f); }\n    void apply(int l, int r, F f) { seg.apply(l, r, f); }\n    private:\n        atcoder::lazy_segtree<S, op, e, F, mapping, composition, id> seg;\n};\n\n}\n\"\"\"\n\ncode = \"\"\"\n\n# distutils: language=c++\n# distutils: include_dirs=[\/home\/USERNAME\/.local\/lib\/python3.8\/site-packages\/numpy\/core\/include, \/opt\/ac-library]\n# cython: boundscheck=False\n# cython: wraparound=False\n\nfrom libcpp cimport bool\nfrom libcpp.vector cimport vector\ncdef extern from \".\/intermediate.hpp\" namespace \"aclython\" nogil:\n    cdef cppclass segtree_min:\n        segtree_min(vector[int] v)\n        void set(int p, int x)\n        int get(int p)\n        int prod(int l, int r)\n        int all_prod()\n        int max_right(int l, int v)\n        int min_left(int r, int v)\n\ncdef class SegTreeMin:\n    cdef segtree_min *_thisptr\n    def __cinit__(self, vector[int] v):\n        self._thisptr = new segtree_min(v)\n    cpdef void set(self, int p, int x):\n        self._thisptr.set(p, x)\n    cpdef int get(self, int p):\n        return self._thisptr.get(p)\n    cpdef int prod(self, int l, int r):\n        return self._thisptr.prod(l, r)\n    cpdef int all_prod(self):\n        return self._thisptr.all_prod()\n    cpdef int max_right(self, int l, int v):\n        return self._thisptr.max_right(l, v)\n    cpdef int min_left(self, int r, int v):\n        self._thisptr.min_left(r, v)\n\ncdef extern from \".\/intermediate.hpp\" namespace \"aclython\" nogil:\n    cdef cppclass segtree_max:\n        segtree_max(vector[int] v)\n        void set(int p, int x)\n        int get(int p)\n        int prod(int l, int r)\n        int all_prod()\n        int max_right(int l, int v)\n        int min_left(int r, int v)\n\ncdef class SegTreeMax:\n    cdef segtree_max *_thisptr\n    def __cinit__(self, vector[int] v):\n        self._thisptr = new segtree_max(v)\n    cpdef void set(self, int p, int x):\n        self._thisptr.set(p, x)\n    cpdef int get(self, int p):\n        return self._thisptr.get(p)\n    cpdef int prod(self, int l, int r):\n        return self._thisptr.prod(l, r)\n    cpdef int all_prod(self):\n        return self._thisptr.all_prod()\n    cpdef int max_right(self, int l, int v):\n        return self._thisptr.max_right(l, v)\n    cpdef int min_left(self, int r, int v):\n        self._thisptr.min_left(r, v)\n\n\ndef SegTree(v, op):\n    if op==\"min\":\n        return SegTreeMin(v)\n    elif op==\"max\":\n        return SegTreeMax(v)\n\ncdef extern from *:\n    ctypedef long long ll \"long long\"\n\ncdef extern from \".\/intermediate.hpp\" namespace \"aclython\" nogil:\n    cdef cppclass S:\n        S(int, int)\n        S(S &)\n        int get_a()\n        int size\n    cdef cppclass F:\n        F(int, int)\n        F(F &)\n        int get_a()\n        int get_b()\n    cdef cppclass lazy_segtree:\n        lazy_segtree(vector[S] v)\n        void set(int p, S x)\n        S get(int p)\n        S prod(int l, int r)\n        S all_prod()\n        void apply(int p, F f)\n        void apply(int l, int r, F f)\n\ncdef class LazySegTree:\n    cdef lazy_segtree *_thisptr\n    def __cinit__(self, vector[vector[int]] v):\n        cdef int n = v.size()\n        cdef vector[S] *sv = new vector[S]()\n        cdef S *s\n        for i in range(n):\n            s = new S(v.at(i).at(0), v.at(i).at(1))\n            sv.push_back(s[0])\n        self._thisptr = new lazy_segtree(sv[0])\n    cpdef void set(self, int p, vector[int] v):\n        cdef S *s = new S(v.at(0), v.at(1))\n        self._thisptr.set(p, s[0])\n    cpdef vector[int] get(self, int p):\n        cdef S *s = new S(self._thisptr.get(p))\n        cdef vector[int] *v = new vector[int]()\n        v.push_back(s.get_a())\n        v.push_back(s.size)\n        return v[0]\n    cpdef vector[int] prod(self, int l, int r):\n        cdef S *s = new S(self._thisptr.prod(l, r))\n        cdef vector[int] *v = new vector[int]()\n        v.push_back(s.get_a())\n        v.push_back(s.size)\n        return v[0]\n    cpdef vector[int] all_prod(self):\n        cdef S *s = new S(self._thisptr.all_prod())\n        cdef vector[int] *v = new vector[int]()\n        v.push_back(s.get_a())\n        v.push_back(s.size)\n        return v[0]\n    cpdef void apply(self, int p, vector[int] v):\n        cdef F *f = new F(v.at(0), v.at(1))\n        self._thisptr.apply(p, f[0])\n    cpdef void apply_range(self, int l, int r, vector[int] v):\n        cdef F *f = new F(v.at(0), v.at(1))\n        self._thisptr.apply(l, r, f[0])\n\"\"\"\n\n\nimport os, sys, getpass\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    code = code.replace(\"USERNAME\", getpass.getuser())\n    open('intermediate.hpp','w').write(header_code)\n    open('atcoder.pyx','w').write(code)\n    os.system('cythonize -i -3 -b atcoder.pyx')\n    sys.exit(0)\n\n\nfrom atcoder import SegTree\n\nN,x = list(map(int,input().split()))\nA = list(map(int,input().split()))\nST = SegTree(A,\"min\")\nans = 10**27\nfor i in range(N):\n    t = 0\n    for j in range(N):\n        if j-i<0:\n            t += min(ST.prod(0,j+1),ST.prod(N+j-i,N))\n        else:\n            t += ST.prod(j-i,j+1)\n\n    ans = min(t+i*x,ans)\n\nprint(ans)",
    "error_obj":"ModuleNotFoundError: No module named 'atcoder'"
  },
  "s629950488":{
    "code_string":"N,K,X,Y=[int(input()) for i in range(4)]\n\nif(K>N):\n  N=K\nelse:\n  \n\nZ=K*X+(N-K)*Y\nprint(Z)",
    "error_obj":"IndentationError: expected an indented block"
  },
  "s652850302":{
    "code_string":"# \u5165\u529b\nn, k, x, y = map(int, input().split())\n\n# \u51e6\u7406\nfirst_stay = k * x\nsecond_stay = (n - k) * y\n\ntotal_price = first_stay + second_stay\n\n# \u51fa\u529b\nprint(total_price)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s739759434":{
    "code_string":"import sys\nn,k,x,y = map(int,sys.stdio.read().split())\nhigh=n-k\nans=0\nif high > 0:\n  ans=x*k+high*y\nelse:\n  ans=n*x\nprint(ans)",
    "error_obj":"AttributeError: module 'sys' has no attribute 'stdio'"
  },
  "s313851401":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = 0\n\nfor i in range(1,a+1):\n  if i >= b+1:\n    e += d\n    else:\n      e += c\n      print(e)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s816456071":{
    "code_string":"n, k, x, y = map(int, [input for i in range(4)])\n\nprint(x*k + y*(n-k))",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s775644436":{
    "code_string":"n=int(input())\nk=int(input())\nx=int(input())\ny=int(input())\nif k <= n:\n    ans +=  k*x + (n -k)*y\nelse:\n    ans += x*n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s120316041":{
    "code_string":"n, k, x, y = map(int, input().split())\nif n <= k:\n  print(n * x)\nelse:\n  print(k * x + (n - k) * y)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s396922470":{
    "code_string":"n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nsum = 0\nif (n >= k):\n\tsum = k*x + (n - k)*y\n    print(sum)\nelse:\n\tsum = n*x\n    print(sum)",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s629893841":{
    "code_string":"    n, k, price, special = map(int, input().split())\n    result = 0\n    for i in range(n):\n        if i < k:\n            result += price\n        else:\n            result += special\n ",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s818758759":{
    "code_string":"n, k, x, y = map(int(input()) for i in range(4))\nif k <= n:\n  print(k*x)\nelse:\n  print(k*x + (n-k)*y)",
    "error_obj":"TypeError: map() must have at least two arguments."
  },
  "s536662385":{
    "code_string":"N, K, X, Y = map(int, input().split())\n\nif N <= K:\n    print(N * X)\nelse:\n    print(K * X + (N - K) * Y)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s048039210":{
    "code_string":"n,k,x,y=[int(input()) for i in range(n)]\nif k<=x:\n    print(n*k)\nelse:\n    print(k*x+(n-k)*y)",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s880676775":{
    "code_string":"a=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\nprint(int((c*(b-a)+d*(b)))",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s185561970":{
    "code_string":"n,k,x,y = [int(input) for i in range(4)]\nprint(min(n,k) * x + max(n-k,0) * y)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'builtin_function_or_method'"
  },
  "s581246296":{
    "code_string":"ab, bc, ca = map(int, input().rstrip().split())\nprint(ab*bc\/\/2)",
    "error_obj":"ValueError: not enough values to unpack (expected 3, got 1)"
  },
  "s493889273":{
    "code_string":"k, x, y, n = map(int, input().split())\n\nif n <= k:\n    print(n * x)\nelse:\n    print(k*x+(n-k)*y)\n# \u6f14\u7b97\u5b50\u306e\u5de6\u53f3\u306b\u7a7a\u767d\u3092\u5165\u308c\u308b\uff01",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s986356329":{
    "code_string":"input = list(map(int,input().split()))\nprint(int(input[1]*input[2] + (input[0]-input[1])*input[3]))",
    "error_obj":"IndexError: list index out of range"
  },
  "s608595389":{
    "code_string":"# abc044_a\n# https:\/\/atcoder.jp\/contests\/abc044\/tasks\/abc044_a\n\n# \u6700\u521d\u306eK\u6cca\u307e\u3067\u306f\u3001X\u5186\n# K\uff0b1\u6cca\u76ee\u4ee5\u964d\u306f\u3001Y\u5186\n\n# N\u6cca\u9023\u7d9a\u3067\u5bbf\u6cca\u3057\u305f\u969b\u306e\u5bbf\u6cca\u8cbb\n\n# \u5165\u529b\nn, k, x, y = map(int, input().split())\n\n# \u51e6\u7406\n\n# x\u5186\u3068y\u5186\nif n > k:\n    answer = k * x + (n - k) * y\n# x\u5186\u306e\u307f\nelse:\n    answer = n * x\n\nprint(answer)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s303805495":{
    "code_string":"N,K,X,Y=input().split()\nprint((K*X+(N-K)*Y) if N>=K else N*X)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s103116489":{
    "code_string":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.buffer.readline\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = int(readline())\n    K = int(readline())\n    X = int(readline())\n    Y = int(readline())\n    if N <= K:\n        ans = X * N\n    else:\n        ans = X * k + Y * (N - K)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n",
    "error_obj":"NameError: name 'k' is not defined"
  },
  "s049448303":{
    "code_string":"total_stay = int(input())\nnormal_stay = int(input())\nnormal_cost = int(input())\ndiscounted_cost = int(input())\nif total_stay <= normal_stay:\n  total_cost = total_stay * normal_cost\nelse:\n  total_cost = normal_stay * normal_cost + (total_stay - normal_stay) * discounted_cost\nprint(P)",
    "error_obj":"NameError: name 'P' is not defined"
  },
  "s781359504":{
    "code_string":"n, k, x, y = map(int, input().split())\n\nprint(int(k * x + y * (n - k)))\n",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s654250762":{
    "code_string":"# \u4e00\u6ccaX\u5186\u3001N(\u6cca\u6570)\u304cK\u6cca\u3088\u308a\u591a\u3051\u308c\u3070\u305d\u306e\u5206\u3060\u3051\u4e00\u6ccaY\u5186\nN,K,X,Y = map(int,input().split())\n# K\u6cca\u3088\u308a\u591a\u3044\u5834\u5408\u306f\u305d\u306e\u5206\u3060\u3051\u5358\u4fa1Y\u5186\u3092\u639b\u3051\u308b\nif N > K:\n    total_price = K * X + (N - K) * Y\n# K\u6cca\u3088\u308a\u5c11\u306a\u3044\u5834\u5408\u306f\u6cca\u6570\u306b\u5358\u4fa1X\u5186\u3092\u639b\u3051\u308b\nelse:\n    total_price = N * X\n\nprint(total_price)\n",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s381321669":{
    "code_string":"\n\nN, K, X, Y = map(int, input().split())\n\na = N * X\n\nb = K * X + (N - K) * Y\n\nif N <= K:\n    print(a)\nelse:\n    print(b)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s057367398":{
    "code_string":"n=int(input())\nk=int(input())\nx=int(input())\ny=int(input())\nif n=<k:\n  ans=n*x\nelse:\n  ans=k*x+y*(n-k)\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s806870973":{
    "code_string":"N,K,X,Y= map(int, input().split())\nyen1 = K * X\nyen2 = (N - K) * Y\nprint(yen1 + yen2)",
    "error_obj":"ValueError: not enough values to unpack (expected 4, got 1)"
  },
  "s119742169":{
    "code_string":"W = input()\nW_list = set(list(s for s in W))\nans = True \nfor s in W_list:\n    if W.count(s) % 2 != 0\n        False\n        break\n\nif ans:\n    print(\"Yes\")\nelse \n    print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s632561573":{
    "code_string":"s = input()\ndi = {}\nfor c in s:\n  di[c] = 0\nfor c in s:\n  di[c] +=1\n  \nis_beautiful = True\nfor c in s:\n  if di[c] %2 ==1:\n    is_beautiful = False\n\nprint('Yes' is is_beautiful else 'No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s549692934":{
    "code_string":"\ndef inp():\n    return int(input())\ndef inpl():\n    return list(map(int, input().split()))\ndef dbg(o):\n    print(o, file=sys.stderr)\n\n# ---------------------------------------\n\ndef main():\n    s = input()\n    dc = {}\n    for st in s:\n        if not st in dc:\n            dc[st] = 1\n        else:\n            dc[st] += 1\n    dbg(dc)\n    for k, v in dc.items():\n        if v % 2 == 1:\n            print(\"No\")\n            exit()\n    print(\"Yes\")\n\nmain()\n",
    "error_obj":"NameError: name 'sys' is not defined"
  },
  "s601312534":{
    "code_string":"s=input()\nd={}\nfor i in s:\n  d.get(i,0)+=1\nfor i in set(s):\n  if d[i]%2==1:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")\n",
    "error_obj":"SyntaxError: 'function call' is an illegal expression for augmented assignment"
  },
  "s384414749":{
    "code_string":"s = input()\nd = {}\nfor i in s:\n  if i in d:\n    d[i] += 1\n  else:\n    d[i] = 1\n\nfor key in d:\n  if d[key] %2 != 0\n  \tprint(\"No\")\n    break\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s310180785":{
    "code_string":"print('Yes'if all(input().count(i)%2==0for i in set(s))else'No')",
    "error_obj":"NameError: name 's' is not defined"
  },
  "s877773683":{
    "code_string":"a = list(input())\neven_number = range(0,101,2)\nvalues,count = *zip(a.most_common())\n\nif even_number in count:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n\n",
    "error_obj":"SyntaxError: can't use starred expression here"
  },
  "s437773252":{
    "code_string":"n = input()\nans = 0\nfor i ih set(n):\n  if n.count(i) % 2 == 0:\n    ans += 1\n    \nif ans == len(set(n)):\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s986780219":{
    "code_string":"from collection import Counter\nS = list(input())\n\nC = Counter(S)\n\nok = True\nfor s,x in list(C.items()):\n  if x % 2 != 0:\n    ok = False\n    break\n\nif ok:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"ModuleNotFoundError: No module named 'collection'"
  },
  "s660245515":{
    "code_string":"w=input()\n\ndict={}\nalh=\"abcdefghijklmnopqrstuvwxyz\"\nfor i in alh:\n  dict[i]=0\nfor i in w:\n  dict[i]+=1\nflag=True\nfor j in range(len(dict)):\n  if dict[j]%2==1:\n    flag=False\nif flag:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  \n",
    "error_obj":"KeyError: 0"
  },
  "s658873306":{
    "code_string":"s = input()\nalphabets = [0] * 26\nfor i in range(len(s)):\n    x = ord(s[i])\n    alphabets[x-97] += 1\nflag = True\nfor x in alphabets:\n    if x % 2 != 0:\n        ok = False\nif ok:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"NameError: name 'ok' is not defined"
  },
  "s436446110":{
    "code_string":"w = input()\n\ns = {}\nfor c  in w:\n    s[c] += 1\n\nb = True\nfor k,v in s.items():\n    b = b and v % 2 == 0\n\nif b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "error_obj":"KeyError: 'a'"
  },
  "s338335959":{
    "code_string":"w = input()\nA = [0] * 26\n\nfor in in w:\n    A[ord(i) - 97] += 1\n\nflag = True\nfor a in A:\n    if a % 2 == 1:\n        flag = False\n\n\nif flag == False:\n    print(\"No\")\nelse:\n    print(\"Yes\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s640413699":{
    "code_string":"n = input()\ndic = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]\nfor i in range(26):\n  if n.count(str(dic[i]))%2!=0:\n    print(\"No\")\n    exit()\nprint(\"Yes\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s407215184":{
    "code_string":"n=int(input())\ns=int(input())\nif n==s:\n  print(n+1)\n  exit()\nif (n+3)\/\/2<=s:\n  print(-1)\n  exit()\newew",
    "error_obj":"NameError: name 'ewew' is not defined"
  },
  "s805799739":{
    "code_string":"s = input()\n\nans1 = ((\"S\" in s) and (\"N\" in s)) or ((\"S\" not in s) & (\"N\" not in s))\nans2 = ((\"E\" in s) and (\"W\" in s)) or ((\"E\" not in s) & (\"W\" not in s)\n\nprint(\"Yes\" if ans1 and ans2 else \"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s378800675":{
    "code_string":"s = input()\n\nn = 0\ne = 0\nw = 0\ns = 0\n\nfor v in s:\n    if v == 'N': n+=1\n    if v == 'E': e+=1\n    if v == 'W': w+=1\n    if v == 'S': s+=1\n\nif n == s and e == w:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s431826903":{
    "code_string":"# coding: utf-8\n\ndef main():\n    S = input()\n    dic = {'N':0, 'S':0, 'E':0, 'W':0}\n    ans = 'No'\n\n    for s in S:\n        dic[s] += 1\n\n    if (dic['N'] == 0 and dic['S'] == 0) or (dic['N'] > 0 and dic['S'] > 0):\n        if (dic['E'] == 0 and dic['W'] == 0) or (dic['E'] > 0 and mp['W'] > 0):\n            ans = 'Yes'\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n",
    "error_obj":"NameError: name 'mp' is not defined"
  },
  "s366596957":{
    "code_string":"s = list(input())\nn = s.count('N')\nw = s.count('W')\ns = s.count('S')\ne = s.count('E')\nif (n + s) % 2 == 0 and (w + e) % 2 == 0:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"AttributeError: 'int' object has no attribute 'count'"
  },
  "s737699837":{
    "code_string":"s=input()\nans=[0]*4\nchecK='NWSE'\nfor i in range(len(s)):\n  for j in range(len(check)):\n    if s[i]==check[j]:\n      ans[j]+=1\nif (ans[0]%2+ans[2]%2)%2==0 and (ans[1]%2+ans[3]%2)%2==0:\n  print('Yes')\nelse:\n  print('No')",
    "error_obj":"NameError: name 'check' is not defined"
  },
  "s834662135":{
    "code_string":"s = input()\nwe = [0,0]\nns = [0,0]\n\nfor i in range(len(s)):\n    if s[i] == ('N'):\n        ns[0] == 1\n    elif s[i] == ('W'):\n        we[0] == 1\n    elif s[i] == ('S'):\n        ns[1] == 1\n    else\n        we[1] == 1\n\nif sum(we) % 2 == 0 and sum(ns) % 2 == 0:\n    print('Yes')\nelse:\n    print('No')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s313344487":{
    "code_string":"string = input()\n\nc1 = True\nc2 = True\nc3 = True\n\nif (\"W\" in string and not(\"E\" in string) or \"E\" in string and not(\"W\" in string): c1 = False\n    \nif (\"N\" in string and not(\"S\" in string) or \"S\" in string and not(\"N\" in string): c2 = False\n\nif \"N\" in string and \"S\" in string and \"E\" in string and \"W\" in string:\n    N = string.count(\"N\")\n    S = string.count(\"S\")\n    W = string.count(\"W\")\n    E = string.count(\"E\")\n    if not(N\/S == W\/E or N\/S == E\/W): c3 = False\n    \nif c1 and c2 and c3: print(\"Yes\")\nelse: print(\"No\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s414469097":{
    "code_string":"s=input()\n\ndef walk(s):\n  ls=len(s)\n  if ls%2==1:\n    print(\"NO\")\n    return\n  nc=0\n  sc=0\n  wc=0\n  ec=0\n  for i in range(ls):\n    if s[i]=\"W\":\n      wc+=1\n    elif s[i]=\"E\":\n      ec+=1\n    elif s[i]=\"N\":\n      nc+=1\n    else:\n      sc+=1\n  if wc==ec and nc==sc:\n    print(\"YES\")\n    return\n  else:\n    print(\"NO\")\n    return\nwalk(s)\n    ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s054192179":{
    "code_string":"n = int(input())\nans = 0\nlis = [int(input()) for i in range(n)]+[0]\n\ncount = 0\nm = -1\nfor i in range(n):\n    if lis[i]%2 == 0:\n        count += l[i]\/\/2\n    else:\n        if lis[i+1] > 1:\n            count += lis[i]\/\/2+1\n            lis[i+1] -= 1\n        else:\n            count += lis[i]\/\/2\nprint(count)",
    "error_obj":"NameError: name 'l' is not defined"
  },
  "s529521474":{
    "code_string":"import sys\nn = int(sys.stdin.readline())\nans = 0\nt = 0\nfor i in range(n):\n    a = int(sys.stdin.readline())\n    if a==0:\n        ans += t\/\/2\n        t = 0\n    else:\n        t += a\nif t>0: ans += t\/\/2\npritn(ans)",
    "error_obj":"NameError: name 'pritn' is not defined"
  },
  "s157512540":{
    "code_string":"from collections import Counter\nn=int(input())\na=[int(input()) for i in range(n)]\nb=Counter(a[::2])\na.sort()\nc=Counter(a[::2])\n\nans=0\nfor i in b:\n\tif i in c:\n\t\tans+=abs(b[i])-c[i])\n\telse:\n\t\tans+=b[i]\nprint(ans)",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s426348718":{
    "code_string":"import sys\nfrom subprocess import Popen, PIPE\nfrom itertools import groupby\nfrom collections import Counter\n\ndef main():\n    sys.stdin.readline()\n    S = sys.stdin.read()\n    T = []\n    inv_dict = {}\n    Factors = Popen(\"factor \" + S, stdout=PIPE).communicate()[0].split(b\"\\n\")\n    for factors in Factors:\n        factors = map(int, factors.split()[1:])\n        t = 1\n        t_inv = 1\n        for f, group in groupby(factors):\n            n = len(list(group)) % 3\n            if n == 1:\n                t *= f\n            elif n == 2:\n                t_inv *= f\n        t, t_inv = t * t_inv * t_inv, t * t * t_inv\n        T.append(t)\n        inv_dict[t] = t_inv\n\n    counter_T = Counter(T)\n    ans = 0\n    for t, t_cnt in counter_T.items():\n        if t == 1:\n            ans += 1\n            continue\n        t_inv = inv_dict[t]\n        t_inv_cnt = counter_T[t_inv]\n        if t_cnt > t_inv_cnt or (t_cnt == t_inv_cnt and t > t_inv):\n            ans += t_cnt\n    print(ans)\n\nmain()\n",
    "error_obj":"FileNotFoundError: [Errno 2] No such file or directory: 'factor 1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n'"
  },
  "s638410104":{
    "code_string":"N=int(input())\nA=list(map(int,input().split()))\nSum =0\nfor i in range(len(A)):\n  Sum += (A[0]-A[i])**2\nAnswer = Sum\nfor j in range(len(A)):\n  Sum =0\n  for k in range(-100,101):\n    Sum+= (A[k]-j)**2\n  Answer =min(Answer, Sum)\nprint(Answer)\n  \n",
    "error_obj":"IndexError: list index out of range"
  },
  "s734769666":{
    "code_string":"import collections\ns = input()\nls = len(s)\nif ls ==2 and s[0]=!s[1]:\n    print(-1,-1)\nelif ls ==2 and s[0]==s[1]:\n    print(1,2)\nfor i in range(2,ls):\n    tmp = collections.Counter(s[i-2:i+1])\n    if len(tmp.keys())<=2:\n        print(i-1,i+1)\n        exit()\nprint(-1,-1)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s599855302":{
    "code_string":"N = int(input())\nPrint (N * (N + 1) \/\/ 2)",
    "error_obj":"NameError: name 'Print' is not defined"
  },
  "s145192019":{
    "code_string":"k=0\n\nfor i in range(N+1):\n    k +=i\n    \nprint(k)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s080018525":{
    "code_string":"# 043A\n# N\u4eba\u306e\u6642\u306e\u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u306e\u5408\u8a08\u6570\n# \u5165\u529b\u5024 \u5b50\u4f9b\u306e\u4eba\u6570\n\n# \u5165\u529b\n = int(input())\n\n# \u51e6\u7406\nanswer = (n + 1) * n \/ 2\n\nprint(answer)\n",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s697116511":{
    "code_string":"for i in N:\n  x += 1\nprint(x)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s157988179":{
    "code_string":"val1=int(input())\n\nprint(val1*(val1+1)\/)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s137303428":{
    "code_string":"print(sum(list(range(1, int(input()+1)))))",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s675855535":{
    "code_string":"number = input()\nanswer = 0\n\nfor i in range(number):\n  number = number+1\n  answer = answer + number\n  \nprint(answer)\n",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s867233127":{
    "code_string":"N = int(input())\nres = int(N(N+1)\/2)\nprint(res)",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s645019945":{
    "code_string":"N = int (input ())\nprint (N*(N+1))\/2\n",
    "error_obj":"TypeError: unsupported operand type(s) for \/: 'NoneType' and 'int'"
  },
  "s187621424":{
    "code_string":"N = ini()\nprint(int((N*(N+1))\/2))\n'''\nsum = 0\nfor i in range(N):\n    sum += (i+1)\nprint(sum)\n'''",
    "error_obj":"NameError: name 'ini' is not defined"
  },
  "s976082587":{
    "code_string":"def iroha():\n    count = int(input())\n    result = 0\n    for i in range(count+1):\n        result += i\n\n    print(result)\n\n\nif __name__ == \"__main__\":\n    iroha(",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s875581655":{
    "code_string":"N = int(input())\nans = 1\nfor i in range(1,N+1):\n  ans += ans+i\nprint(answer)",
    "error_obj":"NameError: name 'answer' is not defined"
  },
  "s190845153":{
    "code_string":"\nN = int(input())\nlist = [int(a) for a in input().split()]\n\nA = sum(list)\/\/N\nans = 0\n\nfor k in range(N):\n    ans = ans + (list[j] - A) ** 2\n\nfor i in range(-100,100):\n    sum = 0\n    sum_new = 0\n    for j in range(N):\n        sum_new = sum_new + (list[j] - i) ** 2\n    if(sum > sum_new):\n        ans = sum_new\n\nprint(ans)\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s066567141":{
    "code_string":"n = input()\nans=0\nfor i in range(1, n+1):\n  ans+=i\nprint(ans)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s635159872":{
    "code_string":"N = int(input())\nans = 0\nfor i in range(1, N+1)\n    ans += i\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s319319778":{
    "code_string":"n=int(input())\na=list(map(int,input().split()))\nans=10**18\nfor num in range(-100,101):\n    cnt=0\n    for i in range(n):\n        cnt+=(num-a[i])**2\n    ans=min(ans,cnt)\nprint(ans)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s567629124":{
    "code_string":"def candy():\n   n=int(input())\n    a=0\n    for i in range (0,n)\n       a=a+1\n    print(a)\n    \ncandy(10)\n       ",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s282635466":{
    "code_string":"n=int(input()\nans=0\nfor i in range(1,n+1):\n    ans+=i\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s817396442":{
    "code_string":"N = int(input())\n\nans = 0\n\nfor(i = 1; i <= N; i++):\n    ans +=1\n\nprint(i)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s822300029":{
    "code_string":"ame = N * (N + 1) \/ 2\nprint(ame)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s790687625":{
    "code_string":"# \u7b49\u5dee\u6570\u5217\n\nN = int(input())\n\n# 1+2+3+4+...+(N-2)+(N-1)+N\n# N+(N-1)+(N-2)+...+4+3+2+1\n# \u4e0a\u3068\u4e0b\u3092\u8db3\u3057\u7b97\u3057\u3066\u3001\uff12\u3067\u5272\u308b\n\na = N+1\nb = N\n\n# print( a * b \/ 2 )\n\n# TypeError: can only concatenate str (not \"int\")\n# N\u3068\u3044\u3046\u6587\u5b57\u3068\u6570\u5b57\u3092\u9023\u7d50\u3067\u304d\u306a\u3044??\nprint(math.floor(a * b \/ 2 )",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s254822796":{
    "code_string":"# 1\u4eba\u76ee\u306f\uff11\u500b\na = 1\n\n# \u5165\u529b\nb, c = map(int, input().split())\n\n# \u51e6\u7406\nanswer = a + b + c\n\n# \u51fa\u529b\nprint(answer)",
    "error_obj":"ValueError: not enough values to unpack (expected 2, got 1)"
  },
  "s234210965":{
    "code_string":"n = int(input())\n\nans = n(1+n)\/2\nprint(ans)",
    "error_obj":"TypeError: 'int' object is not callable"
  },
  "s268787857":{
    "code_string":"N=input()\nprint(N*(N+1)\/2)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s957239434":{
    "code_string":"\n\n\n\n#\u4ed6\u4eba\u306e\u30b3\u30d4\u30fc\nn=input()\nn = int(input())\ncandy = (1 \/ 2) * n * (n + 1)\nprint(int(candy))\n#\u4ed6\u4eba\u306e\u30b3\u30d4\u30fc\n\n\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s284853103":{
    "code_string":"x = N\nif x % 2 == 1:\n    print((N + 1)*(N \/\/ 2)+(N + 1) \/ 2)\nif x % 2 == 0:\n    print((N + 1) * N \/ 2)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s343373394":{
    "code_string":"n = int(input())\nnum = 0\nfor num in range(n+1):\n  total = total + num\nprint(total)\n",
    "error_obj":"NameError: name 'total' is not defined"
  },
  "s763647030":{
    "code_string":"n = input()\nprint(n * (n + 1) \/ 2)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s309907247":{
    "code_string":"N = input()\nsum = 0\n\nfor i in range(N):\n    sum += i**2\n    \nprint(sum)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s524872246":{
    "code_string":" A\u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u3068N\u306b\u3093\u306e\u5b50\u4f9b\u30a4\u30fc\u30b8\u30fc\n\n# \u7af6\u30d7\u30ed\u5e7c\u7a1a\u5712\u306b\u306fN\u4eba\u306e\u5b50\u4f9b\u304c\u3044\u307e\u3059\u3002\u3048\u3073\u5148\u751f\u306f\u3001\u5b50\u4f9b\u305f\u3061\u3092\u4e00\u5217\u306b\u4e26\u3079\u3001\u4e00\u4eba\u76ee\u306b\u306f\u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u30921\u500b\u3001\u4e8c\u4eba\u76ee\u306b\u306f2\u500b,...,N\u4eba\u3081\u306b\u306fN\u500b\u3042\u3052\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n# \u5fc5\u8981\u306a\u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u306e\u500b\u6570\u306e\u5408\u8a08\u306f\u4f55\u500b\u3067\u3057\u3087\u3046\uff1f\n# 1 <= N <= 100\n\n# N\u306f\u5b50\u4f9b\u306e\u4eba\u6570\nN = int(input())\n# print(N)\n\n# answer\u306f\u5408\u8a08\u500b\u6570\nanswer = (N * (N + 1) \/\/ 2)\n\nprint(answer)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s481326681":{
    "code_string":"candy = N * N \/2 + N \/2\n\nprint(candy)",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s375606271":{
    "code_string":"n = int(input()\n\ntotal = 0\n\nfor i in range(n+1):\n    total += i\n\nprint(total)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s929010074":{
    "code_string":"n = int(input())\nwhile n > 0:\n    a += n\n    n -= 1\nprint(a)\n",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s043110082":{
    "code_string":"\nopperations = list(input())\ndisplay_stack = []\nfor opperation in opperations:\n    if opperation == \"B\":\n        if display_stack:\n            display_stack.pop()\n    else:\n        display_stack.append(opperation)\nprint(''.join(display_stack))\n\u00df\n",
    "error_obj":"NameError: name '\u00df' is not defined"
  },
  "s521125497":{
    "code_string":"    s = input()\n    ans = ''\n    for i in range(len(s)):\n        if s[i] == '0':\n            ans += '0'\n            \n        elif s[i] == '1':\n            ans += '1'\n            \n        else:\n            if ans != '':\n                ans = ans[:-1]\n                \n    print(ans)",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s529113310":{
    "code_string":"#\u5165\u529b\ninput = input()\n\nlst = []\ntext = ''\n\n#\u64cd\u4f5c\nfor i in range(len(input)):\n   if input[i] == '0':\n      text = text + '0'\n   elif input[i] == '1':\n      text = text + '1'\n   elif input[i] = 'B':\n      if text != '': #\u6587\u5b57\u5217\u304c\u7a7a\u3067\u306a\u3044\u3068\u304d\u306e\u307fBS\u5b9f\u884c\n         text = text[:-1]\n\n#\u51fa\u529b\nprint(text)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s000253590":{
    "code_string":"s=[]\na=int(input())\n\nif a==0:\n    s.append(0)\nelif a==1:\n    s.append(1)\nelse:\n    if len(s)>0:\n        s.pop()\n        \nfor l in s:\n    print(l)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '01B0'"
  },
  "s307439951":{
    "code_string":"s=list(str(input()))\n\nans=[]\nfor i in s:\n  if i=='1':\n    ans.append('1')\n  elif i=='0':\n    ans.append(0,'0')\n  else:\n    if ans:\n      ans.pop(-1)\n    else:\n      continue\n\nprint(''.join(ans))",
    "error_obj":"TypeError: list.append() takes exactly one argument (2 given)"
  },
  "s200220653":{
    "code_string":"s = input()\ntxt = []\n\nfor c in s:\n  if c == 'B' && len(txt) > 0:\n    txt.pop()\n  else:\n    txt.append(c)\n    \nprint(''.join(txt))\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s789988445":{
    "code_string":"s = str(input())\na = []\n \nfor i in len(s):\n    if s[i] == '0':\n        a.append('0')\n    elif s[i] == '1':\n        a.append('1')\n    else:\n        if len(a) != 0:\n            a.pop()\n \nprint(''.join(a))",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s327183613":{
    "code_string":"def key():\n    a=input()\n    b=input()\n    c=input()\n    d=input()\n    key=[a,b,c,d]\n    if key[0]=='b':\n        print('')\n    elif key[0]=='0':\n        print('0')\n    else:\n        print('1')\n    if key[1]=='b':\n        key.pop()\n    elif key[1]=='0':\n        print('0')\n    else:\n        print('1')\n    if key[2]=='b':\n        key.pop()\n    elif key[2]=='0':\n        print('0')\n    else:\n        print('1')\n    if key[3]=='b':\n        key.pop()\n    elif key[3]=='0':\n        print('0')\n    else:\n        print('1')\n\nkey()\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s651677621":{
    "code_string":"r = []\nfor i in input():\n    if 'B' == i:\n        if r:\n            r.pop()\n    else:\n        r.append(i)\nprint(''.join(r)",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s284166846":{
    "code_string":"n = input()\na = \"\"\nfor i in range(n):\n  if i ==\"0\":\n    a+=i\n  elif i ==\"1\":\n    a+=i\n  elif i ==\"B\":\n    a = a[:-1]\nprint(a)",
    "error_obj":"TypeError: 'str' object cannot be interpreted as an integer"
  },
  "s707829785":{
    "code_string":"import re\ntext = input()\nb_length = int(re.sub('[^B]', '', text))\nfor _ in range(b_length):\n    text = re.sub('(0|1)??B', '', text, 1)\nprint(text)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'B'"
  },
  "s381910811":{
    "code_string":"# -*- coding: utf-8 -*-\n# B - \u30d0\u30a4\u30ca\u30ea\u30cf\u30c3\u30af\u30a4\u30fc\u30b8\u30fc\n\ns = input()\nlistAns = []\n\nset1 = ['0', '1']\nset2 = ['B']\n\nlistS = list(s)\n\nprint(listS)\n\nfor i in listS:\n    if i in set1:\n        listAns.append(i)\n\n    elif i in set2:\n        if len(listAns) != 0:\n            listAns.pop()\n\nans = reduce(lambda x, y: x + y, [str(x) for x in listAns])\n\nprint(ans)",
    "error_obj":"NameError: name 'reduce' is not defined"
  },
  "s018223737":{
    "code_string":"s=input()\n\nans=''\nfor x in s:\n  if ans<>'':\n    if x=='B'\n      ans=ans[:-1]\n      continue\n  if x<>'B':\n    ans+=x\nprint(ans)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s581762032":{
    "code_string":"import bisect,collections,copy,heapq,itertools,math,numpy,string\nfrom fractions import gcd\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split())) # tuple\u3082\u691c\u8a0e\u3059\u308b\u3002\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\ndef main():\n    N = S()\n    L = [i for i in N]\n\n    for i, num in enumerate(L):\n        if(i != 0 and num == \"B\"):\n            L[i-1] = \"\"\n\n    L.remove(\"B\")\n    print(\"\".join(L))\n\nif __name__ == '__main__':\n    main()",
    "error_obj":"ImportError: cannot import name 'gcd' from 'fractions' (\/usr\/lib\/python3.9\/fractions.py)"
  },
  "s039037537":{
    "code_string":"s = input()\nfor i in range(len(s)-1):\n  if s[i+1] != 'B':\n    ans += s[i]\n    \nprint(ans)\n",
    "error_obj":"NameError: name 'ans' is not defined"
  },
  "s283103077":{
    "code_string":"N = int(input())\nan = list(map(int, input()))\n\ncost = 10000*3\nans = 10000*3\nfor i in range(-100,100+1):\n    cost = sum([(j - i)**2 for j in an])\n    ans = min(ans, cost)\n\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s493095796":{
    "code_string":"n = int(input())\na = list(map(int, input(split())))\n\nans = 1e9\nfor p in a:\n  sub = 0\n  for q in a:\n    sub += pow(p - q, 2)\n  ans = min(ans, sub)\n\nprint(ans)",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s840578778":{
    "code_string":"\nN = int(input())\nlist = [int(a) for a in input().split()]\n\nA = sum(list)\/\/N\n\nfor k in range(N):\n    ans = (list[j] - A) ** 2\n\nfor i in range(-100,100):\n    sum = 0\n    sum_new = 0\n    for j in range(N):\n        sum = sum + (list[j] - A) ** 2\n        sum_new = sum_new + (list[j] - i) ** 2\n    if(sum > sum_new):\n        ans = sum_new\n\nprint(ans)\n",
    "error_obj":"NameError: name 'j' is not defined"
  },
  "s698579549":{
    "code_string":"N = int(input())\nl = list(map(int,input().split()))\nl_ans = [[] for _ in range(200)]\n\nfor i in range(-100,101):\n    sum = 0\n\n    for j in range(N):\n        sum = sum + (i-l[j])**2\n\n    l_ans[i+100] = sum\n\nprint(l_ans)\nprint(min(l_ans))",
    "error_obj":"IndexError: list assignment index out of range"
  },
  "s158004777":{
    "code_string":"import math\n\nN = int(input())\nA = [int(a) for a in input().split(\" \")]\nave = sum(A) \/ N\ncan1 = math.floor(ave)\ncan2 = math.ceil(ave)\n\ncost1 = sum([(a - can1) ** 2 for a in A])\ncost2 = sum([(a - can2) ** 2 for a in A])\nprint(min[cost1, cost2])",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not subscriptable"
  },
  "s632659416":{
    "code_string":"a = int(input())\nb = list(map(int,input().split()))\nc = int(input())\nd = 0\n\nfor i in b:\n    d += (int(i) - int(c)) ** 2\nprint(d)",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s539909184":{
    "code_string":"N = int(input())\nA = list(map(int, input().split()))\n\nans = INF\nfor i in range(-100, 101):\n    val = 0\n    for a in A:\n        val += (a - i) ** 2\n    ans = min(ans, val)\nprint(ans)",
    "error_obj":"NameError: name 'INF' is not defined"
  },
  "s680716071":{
    "code_string":"def resolve():\n    S = list(input())\n    if len(S) == 2:\n        print(-1, -1)    \n    for i in range(len(S)-3):\n        if S[i] == S[i+1] or S[i+1] == S[i+2] or S[i+2] == S[i]):\n            print(i+1, i+3)\n            return\n    print(-1, -1)\n\n\nif __name__ == '__main__':\n    resolve()",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s379064339":{
    "code_string":"s = input()\nN = len(s)\nif N == 2:\n    if s[0] == s[1]:\n        print('1 2')\n        quit()\n    else:\n        print('-1,-1')\n        quit()\nfor i in range(N-2):\n    if s[i] == s[i+1] or s[i] == s[i+2]:\n        print(i+1, i+3)\n        quit()\nif s[-1] == s[-2]:\n    print(N-1, N\n    quit()\nprint('-1 -1')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s607057264":{
    "code_string":"if a > 0:\n    print('Positive')\nif a <= 0 and b >= 0:\n    print('Zero')\nelse:\n    if (b - a + 1) % 2 == 0:\n        print('Positive')\n    else:\n        print('Negative')",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s508734179":{
    "code_string":"a,b=map(int,inout().split())\nif a>=0:\n    print(\"Positive\" if a!=0 else \"Zero\")\nif a<0 and b>0:\n    print(\"Zero\")\nif b<=0:\n    if b==0:\n        print(\"Zero\")\n    else:\n        if (a-b+1)%2==0:\n            print(\"Positive\")\n        else:\n            print(\"Negative\")",
    "error_obj":"NameError: name 'inout' is not defined"
  },
  "s989601197":{
    "code_string":"a, b = map(int, input().split())\nc = b - a\nif a <= 0 <= b:\n    print(\"Zero\")\n \nelif a > 0:\n    print(\"Positive\")\n \nelif b < 0:a\n    if c%2 == 1:\n        print(\"Positive\")\n    else:\n        print(\"Negative\")",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s508615445":{
    "code_string":"a,b=map(int,input().split())\nif ab<=0:\n  print('Zero')\nelif a>0:\n  print('Positive')\nelif b<0:\n  if (b-a+1)%2==0:\n    print('Positive')\n  else:\n    print('Negative')",
    "error_obj":"NameError: name 'ab' is not defined"
  },
  "s552814198":{
    "code_string":"a,b = map(int,input().split())\nc= (b-a+1)*(a+b)\/\/2\nif c>0:\n    print(\"Positive\")\nelif c=0:\n    print(\"Zero\")\nelse:\n    print(\"Negative\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s248262293":{
    "code_string":"a, b = map(int(input().split())\nif a > 0:\n  print(\"Positive\")\nelif a < 0 :\n  if (b - a) % 2 == 0 :\n      print(\"Positive\")\n  else:\n      print(\"Negative\")\nelse:\n   print(\"Zero\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s665716431":{
    "code_string":"a,b=map(int,input().split())\n\nif a>0 and b>0:\n  print('Positive')\n  exit()\nelif a=0 or b=0:\n  print('Zero')\n  exit()\nelif a<0 and 0<b:\n  if abs(a)%2==0:\n    print('Positive')\n   \texit()\n  else:\n    print('Negative')\n    exit()\nelse:\n  if abs(b-a)%2==0:\n    print('Negative')\n    exit()\n  else:\n    print('Positive')\n    exit()\n\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s810754928":{
    "code_string":"n,m = map(int,input().split())\npossible = [0]*n\nkosuu = [1]*n\npossible[0] = 1\n\nL = []\n\nif flag == False:\n    print(1)\n    exit()\nfor i in range(m):\n    x,y = L[i][0],L[i][1]\n    x,y = x-1,y-1\n    if kosuu[x] >=2 and possible[x] == 1:\n        possible[y] = 1\n        kosuu[x] -=1\n        kosuu[y] +=1\n    elif kosuu[x] == 1 and possible[x] == 1:\n        possible[x] = 0\n        possible[y] = 1\n        kosuu[x] = 0\n        kosuu[y] +=1\n    elif kosuu[x] >=2 and possible[x] == 0:\n        kosuu[x] -=1\n        kosuu[y] +=1\n    elif kosuu[x] == 1 and possible[x] == 0:\n        kosuu[x] = 0\n        kosuu[y] +=1\nprint(sum(possible))",
    "error_obj":"NameError: name 'flag' is not defined"
  },
  "s482817317":{
    "code_string":"n, k = map(int, input().split())\nd = list(map(int, input().split()))\n\ndef is_ok(num):\n  s = str(num)\n  for ng in d:\n    if ng in s: return False\n  \n  return True\n\nwhile True:\n  if is_ok(n):\n    print(n)\n    exit()\n  \n  n += 1\n  ",
    "error_obj":"TypeError: 'in <string>' requires string as left operand, not int"
  },
  "s245223769":{
    "code_string":"class Factorial:\n    def __init__(self, max_fact, mod):\n        #mod should be prime number\n        #using homogeneous_product(n,r), max_fact \u2267 max(n+r-1)\n        f = [1] * (max_fact + 1)\n        for idx in range(2, max_fact + 1):\n            f[idx] = f[idx - 1] * idx\n            f[idx] %= mod\n        if mod > max_fact:\n            fi = [pow(f[-1], mod - 2, mod)]\n            for idx in range(max_fact, 0, -1):\n                fi += [fi[-1] * idx % mod]\n            fi = fi[::-1]\n        else:\n            fi = [pow(n, mod - 2, mod) for n in f]\n        self.mod = mod\n        self.f = f\n        self.fi = fi\n\n    def factorial(self, n):\n        return self.f[n]\n\n    def factorial_inverse(self, n):\n        return self.fi[n]\n\n    def combination(self, n, r):\n        f = self.f\n        fi = self.fi\n        return f[n] * fi[r] * fi[n - r] % self.mod\n\n    def permutation(self, n, r):\n        return self.f[n] * self.fi[n - r] % self.mod\n\n    def homogeneous_product(self, n, r):\n        f = self.f\n        fi = self.fi\n        return f[n + r - 1] * fi[r] * fi[n - 1] % self.mod\n\n\nmax_fact = 2 * 10 ** 6\nmod = 10**9 + 7\nfact_instance = Factorial(max_fact, mod)\ncomb = fact_instance.combination\nperm = fact_instance.permutation\ncombrep = fact_instance.homogeneous_product\n\nH, W, A, B = [int(_) for _ in input().split()]\nans = comb(H + W - 2, H - 1)\nfor x in range(H - A, H):\n    ans -= comb(x + B - 1, B - 1) * (H - 1 - x + W - B, W - B)\nprint(ans)\n",
    "error_obj":"TypeError: unsupported operand type(s) for -=: 'int' and 'tuple'"
  },
  "s158149266":{
    "code_string":"a,b,c=map(int,input().split())\nif((a*b*c)%7=0)and((a*b*c)\/7=25):\n\tprint(\"YES\")\nelse:\n  \tprint(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s839397582":{
    "code_string":"A,B,C = int(input())\nres = \"NO\"\nif A == 5 or A == 7:\n  if B == 5 or B == 7:\n    if C == 5 or C == 7:\n      if A+B+C == 17:\n        res = \"YES\"\nprint(res)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 5 7'"
  },
  "s781513145":{
    "code_string":"stdin << A, B, C\nlst = [A, B, C]\nsl = sort(lst)\nif sl[0] == 5 && sl[1] == 5 && sl[2] == 7\n  print('YES')\nelse\n  print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s762234134":{
    "code_string":"n,l=map(int,input().split())\ns=sorted([input() for i in range(n)])\nprint(*s,sep=\"\")",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s780921856":{
    "code_string":"l = [int(x) for x in input().split()]\nl = sorted(l)\nif l.count(5)==2 and l.count(7)==1:\n  print(\"YES\")\nelse:\n  print(\"NO\"",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s118264044":{
    "code_string":"a = list(map(int,input().split()))\nnum_5 = 0\nnum_7 = 0\n\nfor  i in a:\n  if i==\"5\":\n    num_5 = num_5+1\n  if i==\"7\":\n    num_7 = num_7+1\n\nif num_5=2 and num_7=1:\n  print \"YES\"\nelse:\n  print \"NO\"",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s126215273":{
    "code_string":"def test():\n  x=input()\n  x=x.split()\n  if x =['5','5','7']:\n    print(\"YES\")\n  elif x =['5','7','5']:\n    print(\"YES\")\n  elif x =['7','5','5']:\n    print(\"YES\")\n  else:\n    print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s105504565":{
    "code_string":"data = input().split()\n\nseven = 0\nfive = 0\n\nfor i in range(data):\n\tif int(i) == 7:\n\t\tseven += 1\n\telif int(i) == 5:\n\t\tfive +=1\n\nif seven == 1 and five == 2:\n\tprint('YES')\nelse:\n\tprint('NO')",
    "error_obj":"TypeError: 'list' object cannot be interpreted as an integer"
  },
  "s394174844":{
    "code_string":"a, b, c = map(int, input().split())\niroha=[a,b,c]\n\nif iroha.count(2)==5 and iroha.count(1)==7:\n  print(\"YES\")\nelse:\n  prnt(\"NO\")",
    "error_obj":"NameError: name 'prnt' is not defined"
  },
  "s018739781":{
    "code_string":"def test(): \n  arr = input()\n  arr = [int(i) for i in arr]\n  arr = sorted(arr)\n  if arr==[5, 5, 7]:\n    print(\"YES\")\n  else:\n    print(\"NO\")  \ntest()\n  \t",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s019555455":{
    "code_string":"a,b,c = sorted(map(int, input().split()))\nif (a+b+c==17)&(a==b)&(c==7):\n  return(\"YES\")\nelse:\n  return(\"NO\")",
    "error_obj":"SyntaxError: 'return' outside function"
  },
  "s754528169":{
    "code_string":"A, B, C=list(map(int, input().split(\" \"))\nif [A, B, C].count(5)==2 and [A, B, C].count(7)==1:\n  print('Yes')\nelse:\n  print('No'))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s332700858":{
    "code_string":"i = 0\nk_n = []\nk_n_all = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\np_price, k_number = map(int, input().split())\nk_n = map(int, input().split())\nresult_number = list(set(k_n_all) - set(k_n))\nresult_price = p_price\n\nwhile True:\n    x = 0\n    y = 0\n    z = list(map(int, str(result_price)))\n    while x < len(z):\n        if z[x] in result_number:\n            y += 0\n        else:\n            y += 1\n        x += 1\n\n    if y == 0:\n        print(result_price)\n        break\n    else:\n        result_price += 1",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s980703818":{
    "code_string":"list = list(map(int,input().split()))\n\nfive = 0\nseven = 0\n\nfor i in list:\n  if i == 5:\n    five += 1\n  elif i == 7:\n    seven += 1\n  else:\n      pass\n\nif seven == 1 and five == 2:\n  print(TRUE)\nelse:\n    print(NO)",
    "error_obj":"NameError: name 'TRUE' is not defined"
  },
  "s147632012":{
    "code_string":"A,B,C=map(int,input().sprit())\nif sorted[A,B,C]=[5,5,7]:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n  ",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s390629549":{
    "code_string":"def main():\n    a, b, c = map(int, input().split())\n    if sum(a, b, c) == 17:\n        print('YES')\n    else:\n        print('NO')\n\n\nif __name__ == \"__main__\":\n    main()",
    "error_obj":"TypeError: sum() takes at most 2 arguments (3 given)"
  },
  "s716746251":{
    "code_string":"A=list(map(int,input().split()))\nsort(A)\nif A==[5,5,7]:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n    \n",
    "error_obj":"NameError: name 'sort' is not defined"
  },
  "s154423310":{
    "code_string":"a = map(int, input().split())\n\nsuccess_cases = [(a[0], a[1], a[2]), (a[1], a[2], a[0]), a[2], a[0], a[1])]\n\nfor c in success_cases:\n    if c == (5,7,5):\n        print(\"YES\")\n        return\nprint(\"NO\")\n\n",
    "error_obj":"SyntaxError: closing parenthesis ')' does not match opening parenthesis '['"
  },
  "s008791833":{
    "code_string":"a, b, c = map(int, input().split())\n\nif a=5, b=5, c=7:\n  print(\"Yes\")\nelif a=5, b=7, c=5:\n  print(\"Yes\")\nelif a=7, b=5, c=5:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s422096951":{
    "code_string":"a,b,c = map(int, input().split())\n\nif len(a) == 7:\n    if len(b) == 5 and len(c) == 5:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \nif len(b) == 7:\n    if len(a) == 5 and len(c) == 5:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif len(c) == 7:\n    if len(a) == 5 and len(b) == 5:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
    "error_obj":"TypeError: object of type 'int' has no len()"
  },
  "s611815313":{
    "code_string":"s = input()\ns = s.split()\n\ns.sort()\n\nif s = [\"5\",\"5\",\"7\"]:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s222397154":{
    "code_string":"    l = list(map(int, input().split()))\n\n    counter5 = 0\n    counter7 = 0\n\n    for num in l:\n        if num == 5:\n            counter5+=1\n        \n        if num == 7:\n            counter7+=1\n\n    if counter5 == 2 and counter7 == 1:\n        print(\"Yes\")\n    \n    else:\n        print(\"No\")",
    "error_obj":"IndentationError: unexpected indent"
  },
  "s032576559":{
    "code_string":"nums = map(int, input().split())\nif nums.count(5) == 2 and nums.count(7) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"AttributeError: 'map' object has no attribute 'count'"
  },
  "s501462542":{
    "code_string":"if(a==5 & b==7 & c==5):\n    print('yes')\nelif(a==7 & b==5 & c==5):\n    print('yes')\nelif(a==5 & b==5 & c==7):\n    print('yes')\nelse:\n    print('no')",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s585127916":{
    "code_string":"a = int(input())\nb = int(input())\nc = int(input())\nif a>b or b>c or a>c or a>b:\n    print(\"NO\")\nelse:\n    print(\"YES\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 5 7'"
  },
  "s432669392":{
    "code_string":"a =list(map(int,input().split()))\nif a+b+c ==19 and a.count(\"7\") ==2:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "error_obj":"NameError: name 'b' is not defined"
  },
  "s557456891":{
    "code_string":"x = input().split()\nfn = 0\nsn = 0\n\nfor i in range(len(x)):\n  if int(x[i]) == 5:\n    fn += 1\n  elif int(x[i]) == 7:\n    sn += 1\n\nif fn = 2:\n  if sn = 5:\n    print(\"YES\")\n  else:\n    print(\"NO\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s876465434":{
    "code_string":"N, L = map(int, input().split())\nS = sorted([input() for i in range(N)])\nprint(''.join(S))",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s649845362":{
    "code_string":"A, B, C = map(int, input())\n\nnum5 = 0\nnum7 = 0\nans = 'NO'\n\nfor num in [A, B, C]:\n  if num == 5:\n    num5+=1\n  elif num == 7:\n    num7+=1\n  else:\n    break\nif num5 ==2 and num7 == 1:\n  ans = 'YES'\nprint(ans)",
    "error_obj":"ValueError: invalid literal for int() with base 10: ' '"
  },
  "s068586565":{
    "code_string":"s = list(map(int, input().split()))\n\nfor i in s:\n  if i == 5:\n    count5+=1\n  else:\n    count7+=1\n\nif count5 == 2 and count7 == 1:\n  print(\"YES\")\n\nelse:\n  print(\"NO\")\n    ",
    "error_obj":"NameError: name 'count5' is not defined"
  },
  "s328796732":{
    "code_string":"a,b,c=map(int,input().split())\nif a==b==5 and c==7:\n  print('YES')\nelif a==c==5 and b==7:\n  print('YES')\nelif b==c==5 amd c==7:\n  print(\"YES\")\nelse:\n  print('NO')",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s994508311":{
    "code_string":"from sys import stdin\n\nA,B,C = [int(x) for x in stdin.realine().rstrip().split()]\n\nif A+B+C == 17 and A>=5 and B>=5 and C>=5:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n  ",
    "error_obj":"AttributeError: '_io.TextIOWrapper' object has no attribute 'realine'"
  },
  "s021841369":{
    "code_string":"n = int(input())\nprint(n*(n+1)\/\/2)",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 5 7'"
  },
  "s265131796":{
    "code_string":"a = list(map(int,input().split()))\n\na,sort()\nprint('YES' if a[0] == 5 and a[1] == 5 and a[2] == 7 else 'NO')\n",
    "error_obj":"NameError: name 'sort' is not defined"
  },
  "s534170854":{
    "code_string":"# 042a\n\ndef atc_042a(input_value: str) -> str:\n    ABC = input_value.split(\" \")\n    if ABC.count(\"5\") == 2 and ABC.count(\"7\") == 1:\n        return \"YES\"\n    return \"NO\"\n\nInput_value_1 = input()\nprint(atc_042a(input_value_1))\n",
    "error_obj":"NameError: name 'input_value_1' is not defined"
  },
  "s526486725":{
    "code_string":"abc=list(map(int,input().split()))\nabc.sort()\nif a[0]==5 and a[1]==5 and a[2]==7:\n    print(\"YES\")\n    exit()\nprint(\"NO\")",
    "error_obj":"NameError: name 'a' is not defined"
  },
  "s457896567":{
    "code_string":"L=input().split()\nA,B,C=int(L[0]),int(L[1]),int(L[2])\nX=set([5,7])\nans = []\nfor i in range(len(X)):\n    ans.append([A,B,C].count(X[i]))\nif ans == [2,1]:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n",
    "error_obj":"TypeError: 'set' object is not subscriptable"
  },
  "s405860257":{
    "code_string":"clause_list = list(map(int, input().split()))\n\nfor index, clause in enumerate(clause_list):\n  if clause = 5:\n    clause_list.pop(index)\n    break\n\nfor index, clause in enumerate(clause_list):\n  if clause = 7:\n    clause_list.pop(index)\n    break\n\nfor index, clause in enumerate(clause_list):\n  if clause = 5:\n    clause_list.pop(index)\n    break\n\nprint('YES' if len(clause_list) == 0 else 'NO')\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s701440487":{
    "code_string":"# list \u306b\u5165\u529b\u3092\u683c\u7d0d\nlist = list(int, input().split())\n# \u5c0f\u3055\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\nlist.sort()\n\nif list[0] == 5 and list[1] == 5 and list[2] == 7:\n    print('Yes')\nelse:\n    print('No')\n",
    "error_obj":"TypeError: list expected at most 1 argument, got 2"
  },
  "s307484788":{
    "code_string":"S = int(input())\n\nif S.count(5) == 2 && S.count(7):\n  print(\"YES\")\nelse:\n  print(\"NO\")",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s173512490":{
    "code_string":"#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n\na=int(input())\nb=int(input())\nc=int(input())\n\nif 7 == a:\n    if 5 == b and 5 == c:\n        print(\"YES\", end=\"\\n\")\nelif 5 == a:\n    if (7 == b and 5 == c) or (5 == b and 7 == c):\n        print(\"YES\", end=\"\\n\")\nelse:\n    print(\"NO\", end=\"\\n\")",
    "error_obj":"ValueError: invalid literal for int() with base 10: '5 5 7'"
  },
  "s688466594":{
    "code_string":"A = input()\nB = input()\nC = input()\n\nL = [A, B, C]\n\nfor x in L:\n    if len(x) == 7:\n        L.remove(x)\n        for y in L:\n            if len(y) != 5:\n                break\n        else:\n            print(\"YES\")\n            break\nelse:\n    print(\"NO\")\n",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s174637486":{
    "code_string":"a,b,c = map(int,input().split())\nif a == 5 and b == 7 and c == 7) or (a == 7 and b == 5 and c == 7) or (a == 7 and b == 7 c == 5):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")",
    "error_obj":"SyntaxError: unmatched ')'"
  },
  "s076227002":{
    "code_string":"num = list(map(int, input().split()))\n\nnum = num.sorted\nif(num[0]==5 and num[1]==5 and num[2] == 7):\n    print(\"YES\")\nelse:\n    print(\"NO\")",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s011417029":{
    "code_string":"s = map(int(input().split()))\nif s.count('7') == 1 and s.count('5') == 2:\n  print('YES')\nelse:\n  print('NO')",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s075314970":{
    "code_string":"# -*- coding: utf-8 -*-\n\nif __name__ == \"__main__\":\n    str_sum = sum([map(int, input().split())])\n    if str_sum == 17:\n        print('YES')\n    else:\n        print('NO')\n",
    "error_obj":"TypeError: unsupported operand type(s) for +: 'int' and 'map'"
  },
  "s963352784":{
    "code_string":"N, L = map(int, input().split())\ninput_line1 = [input() for i in range(N)]\ninput_line2 = []\nfor i in range(N):\n \tinput_line2.append(min(input_line1))\n    input_line1.remove(min(input_line1))\nprint(\"\".join(input_line2))\n\t",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s971266680":{
    "code_string":"first= input()\nfirst = first.split()\n\nN = int(first[0])\nL =[]\nfor i in range(N)\n  s = input()\n  L.append(s)\n  \nL.sort()\nfor i in L:\n  print(i,end=\"\")\n\n",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s763317872":{
    "code_string":"n,l=map(int,input().split)\ns=sorted([input() for i in range(n)])\nprint(*s,sep=\"\")",
    "error_obj":"TypeError: 'builtin_function_or_method' object is not iterable"
  },
  "s013250153":{
    "code_string":"N, L = map(int, input().split())\nS = [input() for s in range(N)]\nS.sort()\noutput = \"\"\nfor i in S:\n  output+=i\nprunt(output)",
    "error_obj":"NameError: name 'prunt' is not defined"
  },
  "s755169572":{
    "code_string":"N,L=map(int,input().split())\nS=[input() for i in range(N)] \nS.sorted()\nfor i in range(len(S)):\n    print(S[i])",
    "error_obj":"AttributeError: 'list' object has no attribute 'sorted'"
  },
  "s584018464":{
    "code_string":"N,L = map(int, input().split())\nstring_list = [input() for i in range(N)]\nstring_list.sort()\nprint(''.join(string_list)\n",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s769494888":{
    "code_string":"n,l = map(int,input(),split())\ns = [input() for _ in range(n)]\ns.sort()\nfor k in s:\n  print(k, end =\"\")",
    "error_obj":"NameError: name 'split' is not defined"
  },
  "s565513629":{
    "code_string":"#ABC042B\nn,l=map(int,input().split())\n\na=[]\nfor i in range(n)\n    a.append(input())\n    \na.sort()\n\nprint(''.join(mylist))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s503451665":{
    "code_string":"N,L=map(int,input().split())\nList = []\nfor i in range (N):\n  List.append(int(input()))\nList.sort()\nres = \"\"\nfor i in range(N):\n  res+=List[i]\nprint(res)",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'dxx'"
  },
  "s252202671":{
    "code_string":"n,l=map(int,input().split())\nfor i in range(n):\n     list[i] = str(input())\nnewlist=list.sorted()\nprint(newlist,sep='')",
    "error_obj":"TypeError: 'type' object does not support item assignment"
  },
  "s549683307":{
    "code_string":"Firstline = input()\nFirstline = Firstline.split()\n\nList = []\nfor i in int(Firstline[0]):\n  List.append(input())\n\nList.sort()\ns = \"\"\nfor i in List:\n  s += i\n\nprint(s)",
    "error_obj":"TypeError: 'int' object is not iterable"
  },
  "s902827800":{
    "code_string":"l, n = map(int, input().split())\na = []\nfor i in range(n):\n  a.append(input())\na.sort()\nb = \"\"\nfor i in a:\n  b += a\nprint(b)",
    "error_obj":"TypeError: can only concatenate str (not \"list\") to str"
  },
  "s161223955":{
    "code_string":"n, l = map(int, input().split())\ns = sorted([map(int, input().split()) for _ in range(n)])\nprint(*s, sep='')",
    "error_obj":"TypeError: '<' not supported between instances of 'map' and 'map'"
  },
  "s693480527":{
    "code_string":"from sys import stdin, stdout\nfrom time import perf_counter\n\nimport sys\nsys.setrecursionlimit(10**9)\nmod = 10**9+7\n\nimport sys\nsys.stdout = open(\"e:\/cp\/output.txt\",\"w\")\nsys.stdin = open(\"e:\/cp\/input.txt\",\"r\")\n\n\n\nn,l = map(int, input().split())\ns = [input() for _ in range(n)]\ns.sort()\nresult = ''.join(s)\nprint(s)\n",
    "error_obj":"FileNotFoundError: [Errno 2] No such file or directory: 'e:\/cp\/output.txt'"
  },
  "s075564224":{
    "code_string":"a,b=map(int,input().split())\ns=sorted([input() for i in range(n)])\nprint(*s,sep=\"\")",
    "error_obj":"NameError: name 'n' is not defined"
  },
  "s677325914":{
    "code_string":"from sys import stdin\ninput = stdin.readline\n\nL, N = map(int, input().split())\nD = []\n\nfor i in range(N):\n    D.append(input()\n\nD.sort()\n\nprint(''.join(D))",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s329607102":{
    "code_string":"#!\/usr\/bin\/python\n# -*- coding: UTF-8 -*-\n\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef _main():\n\tinput()\n    s = sorted(list(input().split()))\n    print(\"\".join(s))\n\n\nif __name__ == \"__main__\":\n    _main()\n",
    "error_obj":"IndentationError: unindent does not match any outer indentation level"
  },
  "s871747659":{
    "code_string":"n,l=map(int,input().split())\ns=[]\nfor i in range(n):\n    s.append(str(input()))\n\na=\"\".join(sorted(s))    \n\n             \nprint(a",
    "error_obj":"SyntaxError: unexpected EOF while parsing"
  },
  "s639014337":{
    "code_string":"a,b=map(int,input().split())\ns=sorted([input() for i in range(N)])\nprint(*s,sep=\"\")",
    "error_obj":"NameError: name 'N' is not defined"
  },
  "s454178521":{
    "code_string":"5 5 7\nYes\nN,L = map(int,input().split())\nstr_list=[]\nfinal_str = \"\"\nfor i in range(N):\n    str_list.append(input())\nnew_list = sorted(str_list)\nfor n in range(N):\n    final_str += new_list[n]\nprint(final_str)\n3 3",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s020057962":{
    "code_string":"n, l = (map(int, input().split()))\nss = []\nfor i in range(n):\n    ss.append(input())\n\nss.sort()\nprint(str.join(ss))\n",
    "error_obj":"TypeError: descriptor 'join' for 'str' objects doesn't apply to a 'list' object"
  },
  "s740381791":{
    "code_string":"n,l=map(int,input().split())\ns=[int(input()) for _ in range(n)]\ns.sort()\n\nfor i in s:\n  print(i,end=\"\")\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'dxx'"
  },
  "s743720192":{
    "code_string":"# \u5165\u529b\nN,L = list(map(int, input().split()))\nS = []\nfor _ in range(N):\n    S.add(str(input()))\n\n# \u51fa\u529b\nprint(''.join(sorted(S)))",
    "error_obj":"AttributeError: 'list' object has no attribute 'add'"
  },
  "s835892815":{
    "code_string":"n, l = map(int, input().split())\nsl = []\nfor i in range(n):\n    s = input()\n    sl.append(s)\nsl.sort()\n\"print(sl)\nans = \"\"\nfor i in range(n):\n    ans += sl[i]\nprint(ans)",
    "error_obj":"SyntaxError: EOL while scanning string literal"
  },
  "s632008943":{
    "code_string":"n, l = map(int, input().split())\ns = [int(input()) for i in range(n)]\n\ns.sort()\nS = \"\"\nfor i in s:\n    S += i\nprint(S)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: 'dxx'"
  },
  "s309097272":{
    "code_string":"a = input().split()\ntg = a[0]\nok_nums = set(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\")\nng_nums = set(input().split())\nok_nums = ok_nums - ng_nums\nrt = 0\ni = int(tg)\nwhile True:\n  if ok_nums >= set(d for d in str(i)):\n    print(i)\n    break\n  else:\n    i+=1\n ",
    "error_obj":"TypeError: set expected at most 1 argument, got 10"
  },
  "s104652535":{
    "code_string":"# -*- coding: utf-8 -*-\n# C - \u3053\u3060\u308f\u308a\u8005\u3044\u308d\u306f\u3061\u3083\u3093\n\nN, K = map(int, input().split())\nD = list(map(int, input().split()))\nnumList = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlistAns = []\n\nnum = []\nlistN = [int(x) for x in list(str(N))]\n\n# print(listN)\n\nfor i in numList:\n    if i not in D:\n        num.append(i)\n\n# print(num)\n\nfor i in listN:\n    for j in num:\n        if j >= i:\n            listAns.append(j)\n            break\n            \n# print(listAns)\nans = int(reduce(lambda x, y: x + y, [str(x) for x in listAns]))\nprint(ans)",
    "error_obj":"NameError: name 'reduce' is not defined"
  },
  "s411831596":{
    "code_string":"n, k= input().split()\nl = list(map(int,input().split()))\ncheckNum=[i for i in range(11)]\n\ndef find(x):\n    while x!=checkNum[x]:\n        checkNum[x]=checkNum[checkNum[x]]\n        x=checkNum[x]\n    return x\n\nfor i in l:\n    checkNum[find(i)]=checkNum[find(i+1)]\n\nfin=\"\"\nfor i in range(len(n)):\n    first=int(n[i])\n    k=find(first)\n    if k==first:\n        fin+=str(k)\n    else:\n        if k!=10:\n            fin+=str(k)\n            i+=1\n        else:fin+=str(find(1))\n        fin+=str(find(0))*(len(n)-i)\n        break\n\np",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s292449210":{
    "code_string":"import itertools\n\nN, K = map(int, input().split())\n\nD = list(map(int, input().split()))\ndic = [0,1,2,3,4,5,6,7,8,9]\n\nfor i in D:\n    dic.remove(i)\n\ndict = map(str, dic)\nn = len(str(N)) #\u4f55\u6841\u304b\n\nans = []\nfor i in range(2):\n    for v in itertools.permutations(dict, n+i):\n        if int(''.join(v)) >= N:\n            ans.append(int(''.join(v)))\nprint(min(ans))",
    "error_obj":"ValueError: min() arg is an empty sequence"
  },
  "s063927303":{
    "code_string":"N,K = list(map(int,input().split()))\nD = list(map(int,input().split()))\n\nD_ = [_ for _ in range(10) if _ not in D]\nD_.sort()\n\nN_=N+1\nbreak_flag=False\nfor s_ in D_:\n    if break_flag:\n        break\n    elif s_ == 0:\n        continue\n    for p in product(D_,repeat=len(str(N_))-1):\n        ans=int(str(s_)+''.join(map(str,p)))\n        if N+1 <= ans:\n            print(ans)\n            break_flag=True\n            break",
    "error_obj":"NameError: name 'product' is not defined"
  },
  "s543903491":{
    "code_string":"N , K = input().split()\nDk = list(map(int, input().split()))\n\nfor i in range(N,10*N+1):\n    if set(i)&set(Dk) == set():\n        print(i)",
    "error_obj":"TypeError: can only concatenate str (not \"int\") to str"
  },
  "s820063456":{
    "code_string":"#ABC042C\nN,K=map(int,input().split())\nN=str(N)\nN_len=len(N)\na=[]\nout=N\nfor i in range(K):\n    a.append(input())\nfor i2 in range(N_len):    \n    for i3 in range(K):\n        if N[i2]==a[i3]:\n            out += 1\nprint(out)\n    \n    ",
    "error_obj":"EOFError: EOF when reading a line"
  },
  "s734618616":{
    "code_string":"n,k = input().split()\nd = list(map(int,input().split()))\nnum = [i for i in range(10)]\nposs = list(set(d) ^ set(num))\nan = int(n)\nwhile True:\n    sum = 0\n    for p in poss:\n        sum += n.count(str(p))\n    if sum ==len(n):\n        break\n    else:\n        an +=1\nprint(an)",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s952411409":{
    "code_string":"n,k=map(int,input().split())\nd=set(map(int,input().split()))\ni=n\nwhile True:\n    if not set((str(i)))&d: i+=1\n    else:\n        print(i)\n        exit()",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s998426956":{
    "code_string":"def check(n,s):\n    v=str(n)\n    for i in v:\n        if i in s:\n            return False\n    return True \ndef solve():\n    n,k=mp()\n    s=input().split()\n    s=set(s)\n \n    while True:\n        if check(n,s):\n            print(n)\n            break\n        else:\n            n+=1\nfor _ in range(1):\n    solve()",
    "error_obj":"NameError: name 'mp' is not defined"
  },
  "s991773600":{
    "code_string":"N, K = map(int, input().split())\nl = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nfor _ in range(K):\n    l.remove(int(input()))\nn = [int(x) for x in str(N)]\nc = len(n)\n\nmax = l[0]\nmin = l[-1]\nif N > 1111 * max:\n    b = 10000*min([i for i in l if i>0]) + 1111*min\nelse:\n    a = [max] * c\n    for j in range(c):\n        if a[j] > n[j]:\n            a[j] = min([i for i in l if i>=n[j]])\n    b = \"\"\n    for j in range(c):\n        b += str(a[j])\n    b = int(b)\n\nprint(b)\n",
    "error_obj":"ValueError: invalid literal for int() with base 10: '1 3 4 5 6 7 8 9'"
  },
  "s345758312":{
    "code_string":"def digit():\n    N, K = [int(n) for n in input().split()]\n    digit = [int(n) for n in input().split()]\n\n    for i in range(N, N*10):\n        b = i\n        while b != 0:\n            if (b % 10) in digit:\n                break\n            b \/= 10\n        if b == 0:\n            print(i)\n            break:\n\ndigit()",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s847675542":{
    "code_string":"a,b=map(int,input().split())\nfac=[0]*200001#i\u306e\u968e\u4e57mod(1000000007)\ninv=[0]*200001#i\u306e\u9006\u5143mod(1000000007)\nfac[0]=1\nans=0\nfor i in range(1,200001):\n    fac[i]=fac[i-1]*i%1000000007\ninv[200000]=pow(fac[200000],1000000005,1000000007)\nfor i in range(199999,0,-1):\n    inv[i]=(inv[i+1]*(i+1))%1000000007\n    inv[0]=1\nfor i in range(h-a):\n    if i==0:\n        if h==1:\n            x=1\n        else:\n            x=(fac[w-b+h-2\n                   -i]*inv[w-1-b]*inv[h-1-i])%1000000007\n    elif w==b+1:\n        x=(fac[b-1+i]*inv[b-1]*inv[i])%1000000007\n    else:\n        x=((fac[b-1+i]*inv[b-1]*inv[i])%1000000007)*((fac[w-b+h-2-i]*inv[w-b-1]*inv[h-1-i])%1000000007)\n    ans=(ans+x)%1000000007\nprint(ans)",
    "error_obj":"ValueError: too many values to unpack (expected 2)"
  },
  "s908233789":{
    "code_string":"h,w,a,b=map(int,input().split())\n\np=10**9+7\n#p=127\n\ndef modp_factorial(n):\n    s=1\n    for x in range(1,h+1):\n        s=(s*x) % p\n    return s\ndef modp_prod(lst):\n    s=1\n    for x in lst:\n        s=(s*x)%p\n    return s\ndef inv(n):\n    s=1\n    q=p-2\n    while q>0:\n        if q&1:\n            s=s*n % p\n        n=n*n\n        q>>=1\n    return s\n\nl=[1]\nf=1\nfor x in range(1,h+w+1):\n    f=f*x % p\n    l.append(f)\ninvl=[inv(l[-1])]\nfor n in range(h+w,1,-1):\n    invl.append((invl[-1]*n) % p)\ninvl.append(1)\ninvl.reverse()\n\n\ns=0\nfor x in range(1,h-a+1):\n    s=s+modp_prod([l[x+b-2],invl[x-1],invl[b-1]\\\n        ,l[w-b+h-x-1],invl[h-x],invl[w-b-1]])% p\nprint(s)\n",
    "error_obj":"TLEError: Time limit exceeded"
  },
  "s680323602":{
    "code_string":"P = 10**9+7\nfac = [1]\nifac = [1]\nff = 1\nfor i in range(1,200001):\n  ff *= i\n  ff %= p\n  fac.append(ff)\n  ifac.append(pow(ff, p-2, p))\ndef ncr(n, r, p): \n  return (fac[n] * ifac[r] % p * ifac[n-r] % p);\n\nh,w,a,b = map(int,input().split())\ns = 0\nnC = b-1\nkC = 0\nnD = w-b-1+h-1\nkD = h-1\nfor i in range(h-a):\n  C = ncr(nC, kC, P)\n  D = ncr(nD, kD, P)\n  s = (s + C * D) % P\n  nC += 1\n  kC += 1\n  kD -= 1\n  nD -= 1\nprint(s)\n",
    "error_obj":"NameError: name 'p' is not defined"
  },
  "s933900905":{
    "code_string":"n=int(input())\na=map(int,input().split())\nans=0\nfor i in range(0,2*n,2):\n    ans+=a[i+1]\nprint(ans)",
    "error_obj":"TypeError: 'map' object is not subscriptable"
  },
  "s525380249":{
    "code_string":"n=int(input())\narr=list(map(int,input().split()))\narr=arr.sort()\ns=0\nfor i in range(0,(2*n)-1,2):\n  s+=arr[i]\nprint(s)",
    "error_obj":"TypeError: 'NoneType' object is not subscriptable"
  },
  "s821577378":{
    "code_string":"N=int(input())\narray=input()\nL=[int(val) for val in array.split()]\nL=sorted(L)\ntotal=0\nstart=0\nP=[L for val in L]\nfor _ in range(N):\n  total+=min(P[start],P[start+1])\n  P.pop(start)\n  P.pop(start+1)\n  start+=2\nprint(total)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'list'"
  },
  "s131254454":{
    "code_string":"try:\n  k=input()\nexcept EOFError:\n  print(\"wtf\")\n\ntry:\n  li=input()\nexcept EOFError:\n  print(\"wtf2\")\n\n\nli.sort()\nsum=0\nfor k in range(len(li)):\n  \n  if k%2==0:\n   \n    sum=sum+li[k]\nprint(sum)",
    "error_obj":"AttributeError: 'str' object has no attribute 'sort'"
  },
  "s604076487":{
    "code_string":"n = int(input())\na = sorted(map(int, input().split()))\ns = 0\nfor i in range(2n-1):\n  s += min(a[i], a[i+1])\nprint(s)",
    "error_obj":"SyntaxError: invalid syntax"
  },
  "s420396881":{
    "code_string":"N = int(input())\nL = list(map(int, input().split()))\nL.sort()\nS = 0\nfor i in range (0, 2*N+1, 2):\n  S += L[i]\nprint(S)",
    "error_obj":"IndexError: list index out of range"
  },
  "s838662080":{
    "code_string":"\nnum = int(input())\nli = int(input().split())\n\nprint(num)\nprint(li)",
    "error_obj":"TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'"
  },
  "s112597968":{
    "code_string":"from collections import Counter\n \nn = int(input())\n \narr = list(map(int, input().split()))\n \ncounts = Counter(arr)\n \nres = 0\n \nfor k,v in counts.items():\n  if v>=2:\n    res += v\/\/2\n    counts[k] = v%2\n    \nitems = sorted(counts.items())\nfor i in range(len(items)-1):\n  res+=min(items[i], items[i+1])\n  \nprint(res)",
    "error_obj":"TypeError: unsupported operand type(s) for +=: 'int' and 'tuple'"
  },
  "s311100241":{
    "code_string":"N,X = input().split()\nN,X = int(N), int(X)\nanswer = X+ (N-X)\n\n\ndef rhombus(N,X):\n  \tif N<X:\n        temp = N\n        N = X\n        X = temp \n        \n    if X==1: \n        return N+1\n    if X==0:\n        return 0\n\n    if N%X == 0:\n        return X*(N\/\/X)*2-X\n      \n    else: \n        k = N\/\/X\n        return k*2*X + rhombus(X,N-(k*X))\n\n      \n\nanswer = answer + rhombus(N-X,X)\nprint(answer)",
    "error_obj":"TabError: inconsistent use of tabs and spaces in indentation"
  },
  "s297220978":{
    "code_string":"import math\nn, x = map(int, input().split())\nprint(3 * (n - gcd(n, x)))\n",
    "error_obj":"NameError: name 'gcd' is not defined"
  }
}