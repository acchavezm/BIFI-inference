class WeightedUnionFind ( ) : <NEWLINE> <INDENT> def __init__ ( self , n ) : <NEWLINE> <INDENT> self . n = n <NEWLINE> self . parents = [ - 1 ] * n <NEWLINE> self . weight = [ 0 ] * n <NEWLINE> <NL> <DEDENT> def find ( self , x ) : <NEWLINE> <INDENT> if self . parents [ x ] < 0 : <NEWLINE> <INDENT> return x <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> px = self . find ( self . parents [ x ] ) <NEWLINE> self . weight [ x ] += self . weight [ self . parents [ x ] ] <NEWLINE> self . parents [ x ] = px <NEWLINE> return px <NEWLINE> <NL> <DEDENT> <DEDENT> def union ( self , x , y , w ) : <NEWLINE> <INDENT> w += self . weight [ x ] - self . weight [ y ] <NEWLINE> x = self . find ( x ) <NEWLINE> y = self . find ( y ) <NEWLINE> if x == y : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> if self . parents [ x ] > self . parents [ y ] : <NEWLINE> <INDENT> x , y , w = y , x , - w <NEWLINE> <DEDENT> self . parents [ x ] += self . parents [ y ] <NEWLINE> self . parents [ y ] = x <NEWLINE> self . weight [ y ] = w <NEWLINE> return <NEWLINE> <NL> <DEDENT> def weig ( self , x ) : <NEWLINE> <INDENT> self . find ( x ) <NEWLINE> return self . weight [ x ] <NEWLINE> <NL> <DEDENT> def diff ( self , x , y ) : <NEWLINE> <INDENT> return self . weigh ( y ) - self . weigh ( x ) <NEWLINE> <NL> <DEDENT> <DEDENT> ( n , m ) , * q = [ [ * map ( int , o . split ( ) ) ] for o in open ( 0 ) ] <NEWLINE> UF = WeightedUnionFind ( n + 1 ) <NEWLINE> for l , r , d in q : <NEWLINE> <INDENT> if UF . same ( l , r ) : <NEWLINE> <INDENT> if d != abs ( UF . diff ( l , r ) ) : <NEWLINE> <INDENT> print ( <STRING> ) ; exit ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> UF . union ( l , r , d ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> root = [ - 10 ** 10 ] * N <NEWLINE> for i in range ( M ) : <NEWLINE> <INDENT> l , r , d = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( root [ l ] < - 10 ** 9 - 1 ) and ( root [ r ] < - 10 ** 9 - 1 ) : <NEWLINE> <INDENT> root [ l ] = 0 <NEWLINE> root [ r ] = d <NEWLINE> <DEDENT> elif ( root [ l ] < - 10 ** 9 - 1 ) : <NEWLINE> <INDENT> root [ l ] = root [ r ] - d <NEWLINE> <DEDENT> elif ( root [ r ] < - 10 ** 9 - 1 ) : <NEWLINE> <INDENT> root [ r ] = root [ l ] + d <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if root [ l ] + d != root [ r ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> quit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> if root [ i ] < - 10 ** 9 - 1 : <NEWLINE> <INDENT> root [ i ] = 0 <NEWLINE> <NL> <DEDENT> <DEDENT> x = min ( root ) <NEWLINE> y = max ( root ) <NEWLINE> if y - x > 10 ** 9 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> quit ( ) <NEWLINE> <NL> <DEDENT> print ( <STRING> ) <NEWLINE> <NL>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> par = [ i for i in range ( n ) ] <NEWLINE> diff = [ 0 ] * n <NEWLINE> <NL> def find ( x ) : <NEWLINE> <INDENT> if par [ x ] == x : <NEWLINE> <INDENT> return x , 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a , b = find ( par [ x ] ) <NEWLINE> par [ x ] = a <NEWLINE> diff [ x ] += b <NEWLINE> return a , diff [ x ] <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> def unite ( x , y , z ) : <NEWLINE> <INDENT> s , ws = find ( x ) <NEWLINE> t , wt = find ( y ) <NEWLINE> <COMMENT> <NL> if s == t : <NEWLINE> <INDENT> if ws - wt == z : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> par [ s ] = t <NEWLINE> diff [ s ] = z <NEWLINE> <NL> <DEDENT> <DEDENT> unites = [ ] <NEWLINE> for _ in range ( m ) : <NEWLINE> <INDENT> l , r , d = map ( int , input ( ) . split ( ) ) <NEWLINE> unites . append ( ( l , r , d ) ) <NEWLINE> unite ( l - 1 , r - 1 , d ) <NEWLINE> <DEDENT> for x , y , z in unites : <NEWLINE> <INDENT> unites ( x - 1 , y - 1 , d ) <NEWLINE> <NL> <DEDENT> print ( <STRING> ) <NEWLINE>
<COMMENT> <NL> <NL> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a * b % 2 = 0 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT>
input_list = input ( ) . split ( <STRING> ) <NEWLINE> a = int ( input_list [ 0 ] ) <NEWLINE> b = int ( input_list [ 0 ] ) <NEWLINE> <NL> N = a * b <NEWLINE> <NL> if N % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> return 0 <NEWLINE>
a , b = input ( ) . split ( ) <NEWLINE> <NL> if ( a * b % 2 == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> <NL> b = int ( input ( ) ) <NEWLINE> <NL> seki = a * b <NEWLINE> <NL> if seki % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
print ( <STRING> if eval ( input ( ) . replace ( <STRING> , <STRING> ) % 2 ) else <STRING> ) <NEWLINE>
a , b = map ( int , input ( ) , split ( ) ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a * b // 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
ｖa , b = [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> if a [ 0 ] % 2 == 0 | | a [ 1 ] % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) , split ( ) ) <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = a * b <NEWLINE> if ( c % 2 == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( c % 2 == 1 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> return <STRING> if a * b % 2 == 0 else <STRING> <NEWLINE>
a , b = int ( input ( ) ) , int ( input ( ) ) <NEWLINE> <NL> ans = a * b <NEWLINE> <NL> if ans % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = int ( input ( ) . split ( ) ) <NEWLINE> if a % b == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> <COMMENT> <NL> a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> if int ( a * b / 2 ) == int ( a * b / 2 + 0.5 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n , m = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> if int ( ( n + m ) / 2 ) == n + m : <NEWLINE> <INDENT> print ( Even ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( Odd ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> x = a * b <NEWLINE> if x % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
<COMMENT> <NL> b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if B * C % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) ) <NEWLINE> <NL> c = a * b <NEWLINE> <NL> if c % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int . input ( ) . split ( ) ) <NEWLINE> <NL> answer = a * b <NEWLINE> <NL> if answer % == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . replace ( <STRING> ) ) <NEWLINE> print ( [ <STRING> , <STRING> ] [ ( a * b ) % 2 ] ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . spilit ( ) ) <NEWLINE> <NL> x = a * b <NEWLINE> <NL> if x % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
N = int ( input ( ) ) <NEWLINE> tm_pos = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( N ) ] <NEWLINE> for i in tm_pos : <NEWLINE> <INDENT> if i [ 0 ] < i [ 1 ] + i [ 2 ] or i [ 0 ] % 2 != ( i [ 1 ] + i [ 2 ] ) % 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
x , y = map ( int ( input ( ) . split ( ) ) ) <NEWLINE> <NL> if ( x * y ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> X = a * b <NEWLINE> if X % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> rab = input ( <STRING> ) <NEWLINE> ab = rab . split ( <STRING> ) <NEWLINE> a = int ( rab [ 0 ] ) <NEWLINE> b = int ( rab [ 1 ] ) <NEWLINE> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
if ( a * b & 1 == 1 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> print ( <STRING> if a % 2 != 0 and b % 2 != 0 else <STRING> ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> c = a * b <NEWLINE> if c / 2 = 0 <NEWLINE> print ( <STRING> ) <NEWLINE> elif c / 2 = 1 <NEWLINE> print ( <STRING> ) <NEWLINE>
import sys <NEWLINE> <NL> args = sys . argv <NEWLINE> <NL> <COMMENT> <NL> <NL> x1 = int ( args [ 1 ] ) <NEWLINE> x2 = int ( args [ 2 ] ) <NEWLINE> <NL> if ( x1 * x2 ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> c = <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = amp ( int , input ( ) . split ( ) ) <NEWLINE> c = a * b <NEWLINE> if ( c % 2 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) ) <NEWLINE> if a * b % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
result = a * b <NEWLINE> if result % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> if a * b % 2 == 0 : <NEWLINE> <INDENT> answer = <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> answer = <STRING> <NEWLINE> <NL> <DEDENT> print ( answer ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> if a & 2 == 0 or b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
mycode = <STRING> <NEWLINE> <NL> import sys <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <COMMENT> <NEWLINE> <INDENT> import os <NEWLINE> with open ( <STRING> , <STRING> ) as f : <NEWLINE> <INDENT> f . write ( mycode ) <NEWLINE> <DEDENT> os . system ( <STRING> ) <NEWLINE> <NL> <DEDENT> import mycode <NEWLINE>
x = split ( ) . input ( ) <NEWLINE> y = int ( x [ 0 ] ) * int ( x [ 1 ] ) <NEWLINE> if y % 2 = 0 : <NEWLINE> <INDENT> print ( Even ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( Odd ) <NEWLINE> <DEDENT>
num = input ( ) . split ( <STRING> ) <NEWLINE> a = num [ 0 ] <NEWLINE> b = num [ 1 ] <NEWLINE> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( <STRING> ) ) <NEWLINE> m = a * b <NEWLINE> if m % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a . b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if ( a * b ) % 2 != 0 else <STRING> ) <NEWLINE>
a , b = input ( int ( ) ) <NEWLINE> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a * b % 2 = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> print ( <STRING> if a * b % == 0 else <STRING> ) <NEWLINE>
x = imput ( ) . split ( ) <NEWLINE> y = int ( x [ 0 ] ) * int ( x [ 1 ] ) <NEWLINE> if y % 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> b = input ( ) <NEWLINE> <NL> multi = int ( a ) * int ( b ) <NEWLINE> <NL> if multi % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = [ int ( e ) for e in raw_input ( ) . split ( ) ] <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print <STRING> <NEWLINE> <DEDENT>
n = ( a * b ) % 2 <NEWLINE> if n == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a * b / 2 == 0 : <NEWLINE> <INDENT> print ( Even ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( Odd ) <NEWLINE> <DEDENT>
int main ( ) { <NEWLINE> int a , b ; <NEWLINE> cin >> a > > b ; <NEWLINE> int c = a * b ; <NEWLINE> if ( c % 2 == 0 ) puts ( <STRING> ) ; <NEWLINE> else puts ( <STRING> ) ; <NEWLINE> return 0 ; <NEWLINE>
a = 20 <NEWLINE> b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if a % b == 0 ) <NEWLINE>
a , b = map ( int , input ( ) ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> print ( a ) <NEWLINE> print ( b ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( imt , input ( ) . split ( ) ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( <STRING> ) <NEWLINE> if int ( a ) * int ( b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> continue <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE>
a = int ( input ( <STRING> ) ) <NEWLINE> b = int ( input ( <STRING> ) ) <NEWLINE> c = a * b <NEWLINE> if c % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a * b % 2 = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if a * b % 2 == else <STRING> ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int . input ( ) . split ( ) ) <NEWLINE> if ( a * b ) % 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( a * b % 2 ) : <NEWLINE> <INDENT> printf ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> printf ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> a , b = input ( ) , input ( ) <NEWLINE> <COMMENT> <NL> c = ( a * b ) % 2 <NEWLINE> if c != 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
input_line = int ( input ( ) . split ( ) ) <NEWLINE> <NL> result = input_line [ 0 ] * input_line [ 1 ] <NEWLINE> <NL> if result % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> ｂ = input ( ) <NEWLINE> c = int ( a ) * int ( b ) <NEWLINE> <NL> if c % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> print ( <STRING> if a * b % 2 == 0 else <STRING> ) <NEWLINE>
x = input ( ) . split ( ) <NEWLINE> y = int ( x [ 0 ] ) * int ( x [ 1 ] ) <NEWLINE> if y % 2 = 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . strip ( ) ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if num ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( Even ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( Odd ) <NEWLINE> <DEDENT>
a , b = map ( int ( input ( ) ) . split ( ) ) <NEWLINE> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( Even ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( Odd ) <NEWLINE> <DEDENT>
if ( a * b ) % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) * int ( input ( ) ) <NEWLINE> print ( <STRING> if a % 2 == 0 else <STRING> ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> n = a * b <NEWLINE> <NL> if n % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> x = a * b <NEWLINE> <NL> if x % 2 == 0 : <NEWLINE> <INDENT> answer = <STRING> <NEWLINE> <DEDENT> elif x % 2 == 1 : <NEWLINE> <INDENT> answer = <STRING> <NEWLINE> <NL> <DEDENT> print ( answer ) <NEWLINE>
def main ( ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> ) if a * B % 2 != 0 else print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
a , b = map ( int ( input ( ) . split ( ) ) ) <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a * b % 2 = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( a * b ) % 2 != 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = int ( input ( ) . rstrip ( ) . split ( ) ) <NEWLINE> <NL> c = a * b <NEWLINE> <NL> d = c / 2 <NEWLINE> <NL> if ( d == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> if ( a % 2 ) = 0 or ( b % 2 ) = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> b = input ( ) <NEWLINE> <NL> int ( a ) <NEWLINE> int ( b ) <NEWLINE> <NL> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if a * b % == 0 else <STRING> ) <NEWLINE>
z = a * b <NEWLINE> if ( z % 2 ) == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> mult = a * b <NEWLINE> if mult % 2 = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a * b % 2 = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if ( A * B ) % 2 == 0 : <NEWLINE> <INDENT> print ( Even ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( Odd ) <NEWLINE> <DEDENT>
<NL> def product ( a , b ) : <NEWLINE> <INDENT> return a * b <NEWLINE> <NL> <DEDENT> def judge ( num ) : <NEWLINE> <INDENT> if num % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> a , b = map ( int , input ( ) ) <NEWLINE> <NL> judge ( product ( a , b ) ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> if a * b % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
print ( [ <STRING> , <STRING> ] [ max ( 0 , sum ( map ( lambda x : int ( x ) % 2 , input ( ) ) ) - 1 ) ] ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = a * b <NEWLINE> if s % 2 == 0 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( a * b ) / 2 %= 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> c = ( a * b ) % 2 <NEWLINE> if c = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<NL> a = int ( input ( ) ) <NEWLINE> <NL> <NL> <NL> b = int ( input ( ) ) <NEWLINE> <NL> if ( a * b ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> z = int ( str ( x ) + str ( y ) ) <NEWLINE> for i in range ( int ( z ** ( 1 / 2 ) ) + 1 ) : <NEWLINE> <INDENT> if i ** 2 = z : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
a , b = input ( ) . split ( ) <NEWLINE> c = a + b <NEWLINE> import math <NEWLINE> if int ( math . sqrt ( c ) ) ** 2 == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import numpy as np <NEWLINE> a , b = input ( ) . split ( ) <NEWLINE> c = a + b <NEWLINE> d = np . sqrt ( c ) <NEWLINE> if isinstance ( d , int ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> num = int ( a + b ) <NEWLINE> <NL> for i in range ( 1 , 101 ) : <NEWLINE> <INDENT> if num == i * i : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> return <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> <NL> c = int ( a + b ) <NEWLINE> <NL> import math <NEWLINE> <NL> if math . sprt ( c ) . isdigit ( ) == True : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT>
<NL> list = input ( ) . split ( ) <NEWLINE> <NL> num = int ( list [ 0 ] + list [ 1 ] ) <NEWLINE> <NL> num_squrt = math . sqrt ( num ) <NEWLINE> <NL> if num_squrt . is_integer ( ) == True : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> <NL> S = int ( a + b ) <NEWLINE> <NL> if math . sqrt ( S ) . is_integer ( ) == True : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
if str ( int ( str ( map ( int , input ( ) . split ( ) ) [ 0 ] ) + str ( map ( int , input ( ) . split ( ) ) [ 1 ] ) ) ** 0.5 ) . split ( <STRING> ) [ 1 : ] [ 0 ] == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import bisect <NEWLINE> from copy import copy <NEWLINE> from collections import deque , Counter <NEWLINE> from decimal import Decimal <NEWLINE> def s ( ) : return input ( ) <NEWLINE> def i ( ) : return int ( input ( ) ) <NEWLINE> def S ( ) : return input ( ) . split ( ) <NEWLINE> def I ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> def X ( ) : return list ( input ( ) ) <NEWLINE> def L ( ) : return list ( input ( ) . split ( ) ) <NEWLINE> def l ( ) : return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> def lcm ( a , b ) : return a * b // math . gcd ( a , b ) <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> a = l ( ) <NEWLINE> ans = <STRING> . join ( a ) <NEWLINE> for i in range ( 1 , 101 ) : <NEWLINE> <INDENT> if ans == i ** 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> sys . exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
a = str ( input ( ) ) <NEWLINE> b = str ( input ( ) ) <NEWLINE> <NL> n = a + b <NEWLINE> <NL> for i in range ( int ( n ) // 2 ) : <NEWLINE> <INDENT> if i ** 2 == int ( n ) : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
heck = int ( input ( ) . replace ( <STRING> , <STRING> ) ) <NEWLINE> print ( <STRING> if ( check ** 0.5 ) % 1 == 0 else <STRING> ) <NEWLINE>
ab = int ( input ( ) . replace ( <STRING> , <STRING> ) ) <NEWLINE> print ( [ <STRING> , <STRING> ] [ any ( i ** 2 == ab for i in range ( ab ) ) <NEWLINE>
a = int ( list ( input ( ) . split ( ) ) . join ( <STRING> ) ) <NEWLINE> print ( <STRING> if int ( a ** .5 ) == ( a ** .5 ) else <STRING> ) <NEWLINE>
a , b = map ( int , input ( ) . split ) <NEWLINE> if isinstance ( ( 10 * a + b ) ^ ( 1 / 2 ) , int ) == True : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> <NL> c = a + b <NEWLINE> c = int ( c ) <NEWLINE> <NL> for i in range ( 400 ) [ 1 : ] : <NEWLINE> <INDENT> if c = i ** 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = 0 <NEWLINE> s += b <NEWLINE> s += a * ( 10 ** len ( b ) ) <NEWLINE> for i in range ( 320 ) : <NEWLINE> <INDENT> if s == i * i : <NEWLINE> <INDENT> print ( i ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
a , b = map ( input ( ) . split ( ) ) <NEWLINE> c = a + b <NEWLINE> c = int ( c ) ** 0.5 <NEWLINE> if isinstance ( c , int ) == True : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) <NEWLINE> ab = int ( <STRING> + <STRING> ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( 350 ) : <NEWLINE> <INDENT> if int ( ab ** ( 1 / 2 ) ) == i : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> ans += 1 <NEWLINE> quit ( ) <NEWLINE> <DEDENT> <DEDENT> if ans == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if str ( int ( str ( a ) + str ( b ) ) ** 0.5 ) % 1 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> b = input ( ) <NEWLINE> a += b <NEWLINE> can = 0 <NEWLINE> for i in range ( 1 , 100 ) : <NEWLINE> <INDENT> if ( i * i == int ( a ) ) : <NEWLINE> <INDENT> can = 1 <NEWLINE> <DEDENT> <DEDENT> if ( can == 1 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> res = int ( a + b ) <NEWLINE> ans = <STRING> <NEWLINE> for i in range ( res ** 0.5 ) : <NEWLINE> <INDENT> if i ** 2 == res : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
a , b = imput ( ) . split ( ) <NEWLINE> a = int ( a + b ) <NEWLINE> for i in range ( 1 , 320 ) : <NEWLINE> <INDENT> if i ** 2 == a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> e1 , e2 = map ( str , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> count = 0 <NEWLINE> a = e1 + e2 <NEWLINE> for i in range ( int ( a ) ) : <NEWLINE> <INDENT> if a / i == i : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> if count > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import math <NEWLINE> a , b = input ( ) . split ( ) <NEWLINE> gosei = int ( a + b ) <NEWLINE> tekito = math . ceil ( mast . sqrt ( 100100 ) ) <NEWLINE> r = <STRING> <NEWLINE> for i in range ( 1 , tekito + 1 ) : <NEWLINE> <INDENT> if i ** 2 == gosei : <NEWLINE> <INDENT> r = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( r ) <NEWLINE>
a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> n = int ( a + b ) <NEWLINE> for i in range ( 0 , 110 ) : <NEWLINE> <INDENT> if i ** 2 == n : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> exit ( ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE>
N = int ( input ( ) . remove ( <STRING> , <STRING> ) ) <NEWLINE> <NL> print ( <STRING> if round ( N ** 0.5 ) ** 2 == N else <STRING> ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> P = [ ( 0 , 0 , 0 ) ] * ( N + 1 ) <NEWLINE> <NL> D = [ 0 ] * ( N + 1 ) <NEWLINE> <NL> P [ 0 ] = ( 0 , 0 , 0 ) <NEWLINE> D [ 0 ] = 1 <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> t , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> dt = t - P [ i - 1 ] [ 0 ] <NEWLINE> dx = abs ( x - P [ i - 1 ] [ 1 ] ) <NEWLINE> dy = abs ( y - P [ i - 1 ] [ 2 ] ) <NEWLINE> if dt < ( dx + dy ) : 時間 < 移動距離 <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if ( ( dx + dy ) == 0 and dt % 2 != 0 ) : 移動しない場合には時間はmod2 == 0 <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <COMMENT> <NL> <DEDENT> if ( dt - ( dx + dy ) ) % 2 != 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> P [ i ] = ( t , x , y ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> xy = [ ] <NEWLINE> try : <NEWLINE> <INDENT> while True : <NEWLINE> <INDENT> t = input ( ) . split ( ) <NEWLINE> t = list ( map ( int , t ) ) <NEWLINE> xy . append ( t ) <NEWLINE> <DEDENT> <DEDENT> except EOFError : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> loc = [ 0 , 0 ] <NEWLINE> time = 0 <NEWLINE> for i in range ( N + 1 ) : <NEWLINE> <INDENT> a = xy [ i ] <NEWLINE> time = a [ 0 ] - time <NEWLINE> dis = abs ( loc [ 0 ] - a [ 1 ] ) + abs ( loc [ 1 ] - a [ 2 ] ) <NEWLINE> if ( time - dis ) < 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> elif ( time - dis ) % 2 == 0 : <NEWLINE> <INDENT> loc = [ a [ 1 ] , a [ 2 ] ] <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> flag = <STRING> <NEWLINE> p , q , r = 0 , 0 , 0 <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> t , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> a = x + y - p - q <NEWLINE> e = t - r <NEWLINE> if a <= e : <NEWLINE> <INDENT> if ( e - a ) % 2 != 0 : <NEWLINE> <INDENT> flag = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> flag = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> p = x <NEWLINE> q = y <NEWLINE> r = t <NEWLINE> <DEDENT> print ( flag ) N = int ( input ( ) ) <NEWLINE> flag = <STRING> <NEWLINE> p , q , r = 0 , 0 , 0 <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> t , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> a = x + y - p - q <NEWLINE> e = t - r <NEWLINE> if a <= e : <NEWLINE> <INDENT> if ( e - a ) % 2 != 0 : <NEWLINE> <INDENT> flag = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> flag = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> p = x <NEWLINE> q = y <NEWLINE> r = t <NEWLINE> <DEDENT> print ( flag ) <NEWLINE>
dt = 0 <NEWLINE> dx = 0 <NEWLINE> dy = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if abs ( txy [ i ] [ 1 ] - dx ) + abs ( txy [ i ] [ 2 ] - dy ) > txy [ i ] [ 0 ] - dt or ( txy [ i ] [ 1 ] + txy [ i ] [ 2 ] ) % 2 != txy [ i ] [ 0 ] % 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> dt = txy [ i ] [ 0 ] <NEWLINE> dx = txy [ i ] [ 1 ] <NEWLINE> dy = txy [ i ] [ 2 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> arr = [ [ 0 , 0 , 0 ] + [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> t1 , x1 , y2 = arr [ i ] <NEWLINE> t2 , x2 , y2 = arr [ i + 1 ] <NEWLINE> if abs ( x1 - x2 ) + abs ( y1 - y2 ) > t1 + t2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if ( abs ( x1 - x2 ) + abs ( y1 - y2 ) ) % 2 != ( t1 + t2 ) % 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> t = 0 <NEWLINE> x = 0 <NEWLINE> y = 0 <NEWLINE> for i in range ( N ) <NEWLINE> <INDENT> nt , nx , ny = map ( int , input ( ) . split ( ) ) <NEWLINE> km = abs ( nx - x ) + abs ( ny - y ) <NEWLINE> if km > ( nt - t ) or ( km - ( nt - t ) ) % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> t , x , y = nt , nx , ny <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> found = True <NEWLINE> for _ in range ( n ) : <NEWLINE> <INDENT> t , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if t == 0 : <NEWLINE> <INDENT> if x == 0 and y == 0 : <NEWLINE> <INDENT> found = False <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if t % ( x + y ) != 0 : <NEWLINE> <INDENT> found = False <NEWLINE> <DEDENT> <DEDENT> <DEDENT> if found : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] <NEWLINE> <NL> pT , pX , pY = 0 , 0 , 0 <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> cT , cX , cY = l [ i ] <NEWLINE> mvT , mvX , mvY = abs ( cT - pT ) , abs ( cX - pX ) , abs ( cY - pY ) <NEWLINE> <NL> dam = mvT - ( mvX + mvY ) <NEWLINE> <NL> if dam % 2 == 1 or dam < 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> pT , pX , pY = l [ i ] <NEWLINE> <NL> <DEDENT> print ( <STRING> ) <NEWLINE> <NL>
N = int ( input ( ) ) <NEWLINE> T = [ [ 0 , 0 , 0 ] ] + [ map ( int , input ( ) . split ( ) ) for _ in range ( N ) ] <NEWLINE> flag = <STRING> <NEWLINE> i = 0 <NEWLINE> while flag == <STRING> and i < len ( T ) - 1 : <NEWLINE> <INDENT> dis = abs ( T [ i ] [ 2 ] - T [ i ] [ 2 ] ) + abs ( T [ i ] [ 1 ] - T [ i ] [ 1 ] ) <NEWLINE> _t = T [ i ] [ 0 ] - T [ i ] [ 0 ] <NEWLINE> if dis > _t or _t % 2 != dis % 2 : <NEWLINE> <INDENT> flag = <STRING> <NEWLINE> <DEDENT> i += 1 <NEWLINE> <DEDENT> print ( flag ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <NL> import sys <NEWLINE> <NL> n = int ( sys . stdin . readline ( ) . strip ( ) ) <NEWLINE> <NL> txy = [ ( 0 , 0 , 0 ) ] + [ tuple ( map ( int , l . strip ( ) . split ( <STRING> ) ) ) for l in sys . stdin . readlines ( ) ] <NEWLINE> check_txy = [ abs ( _x - _xp ) + abs ( _y - _ yp ) <= _t - _tp and ( _t + _x + _y ) % 2 == 0 for ( _t , _x , _y ) , ( _tp , _xp , _yp ) in zip ( txy [ 1 : ] , txy ) ] <NEWLINE> if all ( check_txy ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> ex_t , ex_x , ex_y = 0 , 0 , 0 <NEWLINE> count = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> t , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if abs ( x - ex_x ) + abs ( y - ex_y ) <= abs ( t - ex_t ) and t % 2 = ( x + y ) % 2 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> ex_t , ex_x , ex_y = t , x , y <NEWLINE> <DEDENT> print ( <STRING> if count == N else <STRING> ) <NEWLINE>
<COMMENT> <NL> N = int ( input ( ) ) <NEWLINE> <NL> plan = [ ] <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> ti , xi , yi = map ( int , input ( ) . split ( ) ) <NEWLINE> plan . append ( ( ti , xi , yi ) ) <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> spot = ( 0 , 0 , 0 ) <COMMENT> <NEWLINE> result = <STRING> <NEWLINE> for t , x , y in plan : <NEWLINE> <INDENT> tdiff = t - spot [ 0 ] <NEWLINE> xdiff = abs ( x - spot [ 1 ] ) <NEWLINE> ydiff = abs ( y - spot [ 2 ] ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> if ( tdiff % 2 == ( xdiff + ydiff ) % 2 ) and ( ( xdiff + ydiff ) <= tdiff ) : <NEWLINE> <STRING> <NEWLINE> <INDENT> spot = ( t , x , y ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> result = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( result ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> T = [ ] <NEWLINE> X = [ ] <NEWLINE> Y = [ ] <NEWLINE> T [ 0 ] = X [ 0 ] = Y [ 0 ] = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> t , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> T . append ( t ) <NEWLINE> X . append ( x ) <NEWLINE> Y . append ( y ) <NEWLINE> <NL> <DEDENT> flag = True <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> time = T [ i + 1 ] - T [ i ] <NEWLINE> dist = abs ( X [ i + 1 ] - X [ i ] ) + abs ( Y [ i + 1 ] - Y [ i ] ) <NEWLINE> if time < dist or ( dist % 2 != time % 2 ) : <NEWLINE> <INDENT> flag = False <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if flag : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> <NL> for _ in range ( n ) : <NEWLINE> <INDENT> t , x , y = map ( int , n . split ( ) ) <NEWLINE> if x + y > t or ( t - x - y ) % 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> <NL>
<INDENT> n = int ( input ( ) ) <NEWLINE> pos = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] <NEWLINE> <NL> def func ( n , pos ) : <NEWLINE> <INDENT> c_t , c_x , c_y = 0 , 0 , 0 <NEWLINE> <NL> for i in pos : <NEWLINE> <INDENT> d_t = i [ 0 ] - c_t <NEWLINE> z = abs ( i [ 1 ] - c_x ) + abs ( i [ 2 ] - c_y ) <NEWLINE> <NL> if z > d_t or ( d_t - z ) % 2 != 0 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> c_t , c_x , c_y = 0 , 0 , 0 <NEWLINE> <NL> <DEDENT> <DEDENT> return <STRING> <NEWLINE> <NL> <NL> <DEDENT> print ( func ( n , pos ) ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> n = int ( input ( ) ) <NEWLINE> t = [ - 1 for _ in <NEWLINE> x = [ - 1 for _ in <NEWLINE> y = [ - 1 for _ in <NEWLINE> for i in range ( n <NEWLINE> <INDENT> t [ i ] , x [ i ] , <NEWLINE> <NL> <DEDENT> dt = [ - 1 for _ i <NEWLINE> dx = [ - 1 for _ i <NEWLINE> dy = [ - 1 for _ i <NEWLINE> for i in range ( n <NEWLINE> <INDENT> if i == 0 : <NEWLINE> <INDENT> dt [ 0 ] = <NEWLINE> dx [ 0 ] = <NEWLINE> dy [ 0 ] = <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dt [ i ] = <NEWLINE> dx [ i ] = <NEWLINE> dy [ i ] = <NEWLINE> <NL> <DEDENT> <DEDENT> ok = True <NEWLINE> for i in range ( n <NEWLINE> <INDENT> tr = dt [ i ] % 2 <NEWLINE> pr = ( dx [ i ] + <NEWLINE> if ( tr == pr <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ok = Fal <NEWLINE> <COMMENT> <NL> break <NEWLINE> <NL> <DEDENT> <DEDENT> if ok : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> tp , xp , yp = 0 , 0 , 0 <NEWLINE> for _ in range ( n ) : <NEWLINE> <INDENT> t , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> td = t - tp <NEWLINE> xd = x - xp <NEWLINE> yd = y - yp <NEWLINE> if td < abs ( xd ) + abs ( yd ) or ( td - abs ( xd ) - abs ( yd ) ) % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> tp = t <NEWLINE> xp = x <NEWLINE> yp = y <NEWLINE> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
<COMMENT> <NL> import math <NEWLINE> n = int ( input ( ) ) <NEWLINE> t = 0 <NEWLINE> x = 0 <NEWLINE> y = 0 <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> for ti , xi , yi in map ( int , input ( ) . split ( ) ) : <NEWLINE> <INDENT> if abs ( xi - x ) + abs ( yi - y ) > abs ( ti - t ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> elif ( abs ( xi - x ) + abs ( yi - y ) - abs ( ti - t ) ) % 2 != 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t = ti <NEWLINE> x = xi <NEWLINE> y = yi <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> t , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if t < x + y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif t % 2 != p % 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
Row = int ( input ( ) ) <NEWLINE> List = [ ] <NEWLINE> for i in range ( Row ) : <NEWLINE> <INDENT> List . append ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <DEDENT> x = 0 <NEWLINE> y = 0 <NEWLINE> flag = True <NEWLINE> for i in range ( Row ) : <NEWLINE> <INDENT> reqT = List [ i ] [ 1 ] - x + List [ i ] [ 2 ] - y <NEWLINE> chck = reqT - T <NEWLINE> if chck < 0 or chck % 2 == 1 : <NEWLINE> <INDENT> flag = False <NEWLINE> break <NEWLINE> <DEDENT> x = List [ i ] [ 1 ] <NEWLINE> y = List [ i ] [ 2 ] <NEWLINE> <DEDENT> if flag : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n , a , b = map ( int , input . split ( ) ) <NEWLINE> if ( a - b ) % 2 == 0 : print ( <STRING> ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> As = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> def f ( m ) : <NEWLINE> <INDENT> debug = m <NEWLINE> for a in As : <NEWLINE> <INDENT> i = m // a <NEWLINE> m = i * a <NEWLINE> <DEDENT> return m <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> l = 1 <NEWLINE> r = 10 ** 5 + 1 <NEWLINE> while r - l > 1 : <NEWLINE> <INDENT> m = ( r + l ) // 2 <NEWLINE> if f ( m ) <= 1 : l = m <NEWLINE> else : r = m <NEWLINE> <DEDENT> ans1 = r <NEWLINE> l = 1 <NEWLINE> r = 10 ** 5 + 1 <NEWLINE> while r - l > 1 : <NEWLINE> <INDENT> m = ( r + l ) // 2 <NEWLINE> if f ( m ) <= 2 : l = m <NEWLINE> else : r = m <NEWLINE> <DEDENT> ans2 = l <NEWLINE> <NL> if ans1 >= ans2 : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( ans1 [ 1 ] , ans2 [ 0 ] ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> print ( s . replace ( 2017 , 2018 ) ) <NEWLINE>
S = input ( ) <NEWLINE> <NL> S [ 4 ] = <STRING> <NEWLINE> print ( S ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> d_i_list = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> <NL> print ( len ( list ( set ( d_i_list ) ) ) ) <NEWLINE>
s = list ( input ( ) ) <NEWLINE> s [ 3 ] = 8 <NEWLINE> print ( <STRING> . join ( s ) ) <NEWLINE>
s = input ( ) <NEWLINE> print ( 2018 + s [ 3 : ] ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for j in range ( N + 1 ) : <NEWLINE> <INDENT> for i in range ( N + 1 ) : <NEWLINE> <INDENT> sum = 10000 * j + 5000 * i + 1000 * ( N - i - j ) <NEWLINE> if ( sum == Y and N - i - j >= 0 ) : <NEWLINE> <INDENT> print ( j , i , N - i - j ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
a = input ( ) <NEWLINE> a [ 3 ] = <STRING> <NEWLINE> print ( a ) <NEWLINE>
s = input ( ) <NEWLINE> s [ : 4 ] = <STRING> <NEWLINE> print ( s ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> d = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> ans = [ ] <NEWLINE> <NL> for i in range ( n ) : <NEWLINE> <INDENT> if d [ i ] not in ans : <NEWLINE> <INDENT> ans . append ( d [ i ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( len ( ans ) ) <NEWLINE>
s = List ( input ( ) ) <NEWLINE> s [ 3 ] = <STRING> <NEWLINE> print ( s ) <NEWLINE>
S = input ( ) <NEWLINE> print ( S . replace ( 7 , 8 , 1 ) ) <NEWLINE>
a , b , c = map ( int , inpput ( ) . split ( <STRING> ) ) <NEWLINE> a = 2018 <NEWLINE> print ( a , <STRING> , b , <STRING> , c ) <NEWLINE>
S = list ( input ( ) ) <NEWLINE> S [ 3 ] = 8 <NEWLINE> print ( <STRING> . join ( S ) ) <NEWLINE>
s = input ( ) <NEWLINE> s [ 3 ] = <STRING> <NEWLINE> print ( s ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> exist_flag = False <NEWLINE> for i in range ( N + 1 ) : <NEWLINE> <INDENT> for j in range ( N + 1 - i ) : <NEWLINE> <INDENT> if Y == 10000 * i + 5000 * j + 1000 * ( N - i - j ) : <NEWLINE> <INDENT> exist_flag = True <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if exist_flag : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> if not exist_flag : <NEWLINE> <INDENT> i , j , k = - 1 , - 1 , - 1 <NEWLINE> <DEDENT> print ( i , j , k ) <NEWLINE>
a = input ( ) <NEWLINE> a [ 3 ] = <STRING> <NEWLINE> print ( a ) <NEWLINE>
s = list ( input ( ) ) <NEWLINE> s [ 3 ] = 8 <NEWLINE> for in in s : <NEWLINE> <INDENT> print ( s , end = <STRING> ) <NEWLINE> <DEDENT>
S = str ( input ( ) ) <NEWLINE> S [ 3 ] = 8 <NEWLINE> print ( S ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> for x in range ( N + 1 ) : <NEWLINE> <INDENT> for y in range ( N + 1 ) : <NEWLINE> <INDENT> z = N - x - y <NEWLINE> if x + y + z == N and 10000 * x + 5000 * y + 1000 * z == Y : <NEWLINE> <INDENT> print ( x , y , z ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( - 1 , - 1 , - 1 , sep = <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ : 2 ] + <STRING> + s [ 4 : ] <NEWLINE>
S = input ( ) <NEWLINE> print ( S [ 4 ] <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> s [ 3 ] = <STRING> <NEWLINE> print ( s ) <NEWLINE>
s = input ( ) <NEWLINE> pirnt ( s [ : 3 ] + <STRING> + s [ 4 : ] ) <NEWLINE>
s = input ( ) <NEWLINE> res = <STRING> + s [ 4 , len ( s ) ] <NEWLINE> print ( res ) <NEWLINE>
S = input ( ) <NEWLINE> <NL> print ( S . replace ( <STRING> , <STRING> ) <NEWLINE>
a = input ( ) <NEWLINE> a [ 3 ] = <STRING> <NEWLINE> print ( a ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( <STRING> ) ) <NEWLINE> print ( <STRING> + int ( b ) + <STRING> + int ( c ) ) <NEWLINE>
s = input ( ) <NEWLINE> s [ 3 ] = <STRING> <NEWLINE> print ( s ) <NEWLINE>
s = str ( input ( ) ) <NEWLINE> s [ 3 ] = <STRING> <NEWLINE> print ( s ) <NEWLINE>
S = input ( ) <NEWLINE> S [ 3 ] = <STRING> <NEWLINE> print ( S ) <NEWLINE>
Row = int ( input ( ) ) <NEWLINE> List = [ ] <NEWLINE> for i in range ( Row ) : <NEWLINE> <INDENT> List . append ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <DEDENT> s_l = set ( List ) <NEWLINE> print ( len ( s_l ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> d = list ( int ( input ( ) ) for i in range ( n ) ) <NEWLINE> cnt = 0 <NEWLINE> st = 100 <NEWLINE> l = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if d < st : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> st = d <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> l . append ( cnt ) <NEWLINE> st = 100 <NEWLINE> cnt = 0 <NEWLINE> <DEDENT> <DEDENT> l . sort ( ) <NEWLINE> print ( l [ len ( l ) - 1 ] ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> d = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> d . extend ( int ( input ( ) ) ) <NEWLINE> <DEDENT> print ( len ( set ( d ) ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> List = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> ans = 0 <NEWLINE> while True <NEWLINE> for i , j in range ( n ) : <NEWLINE> <INDENT> if i == j : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> print ( n - ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = [ input ( ) for i in range ( N ) ] <NEWLINE> B = [ ] <NEWLINE> while len ( A ) != 0 : <NEWLINE> <INDENT> if A [ 0 ] not in B : <NEWLINE> <INDENT> B . append ( A [ 0 ] ) <NEWLINE> <DEDENT> A . popleft ( ) <NEWLINE> <DEDENT> print ( len ( B ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> B = A . copy ( ) <NEWLINE> counter = 0 <NEWLINE> for num in range ( N - 2 ) : <NEWLINE> <INDENT> if A [ num ] in B : <NEWLINE> <INDENT> counter += 1 <NEWLINE> while A [ num ] in B : <NEWLINE> <INDENT> B . remove ( A [ num ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( counter ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> s = set ( ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> s . add ( int ( input ( ) ) <NEWLINE> <NL> <DEDENT> print ( min ( 3 , len ( s ) ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> d = list ( int ( input ( ) ) for _ in range ( N ) ) <NEWLINE> print ( len ( set ( sortd ( d ) ) ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = sorted [ input ( ) for _ in range ( N ) ] <NEWLINE> print ( len ( set ( A ) ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> cake = [ input ( ) for i range ( n ) ] <NEWLINE> <NL> print ( len ( set ( cake ) ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> num = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> num . sort ( ) <NEWLINE> count = 1 <NEWLINE> <NL> for i in range ( N - 1 ) : <NEWLINE> <INDENT> if not num [ i ] == num [ i + 1 ] : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> m = { } <NEWLINE> <NL> for i in range ( n ) : <NEWLINE> <INDENT> x = int ( input ( ) ) <NEWLINE> m . add ( x ) <NEWLINE> <NL> <DEDENT> print ( len ( m ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> d = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> x = sorted ( d , reverse = True ) <NEWLINE> <NL> ans = 1 <NEWLINE> for i in range ( N - 1 ) : <NEWLINE> <INDENT> if x [ i ] - x [ i + 1 ] > 0 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> list_a = [ int ( input ( ) ) for i in range ( N ) ] <NEWLINE> s = [ ] <NEWLINE> for i in list_a : <NEWLINE> <INDENT> if s . count ( i ) == 0 <NEWLINE> <INDENT> s . append ( i ) <NEWLINE> <DEDENT> <DEDENT> print ( len ( s ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> d = int ( input ( ) ) <NEWLINE> <NL> <DEDENT> dset = set ( d ) <NEWLINE> print ( len ( dset ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> d = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> <NL> print ( len ( set ( d ) ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> D = [ int ( input ( ) ) for _ in range ( n ) ] <NEWLINE> print ( len ( set ( D ) ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> mochi = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> a = int ( input ( ) ) <NEWLINE> if not a in mochi : <NEWLINE> <INDENT> mochi . append ( a ) <NEWLINE> <NL> <DEDENT> <DEDENT> mochi . sorted ( ) <NEWLINE> print ( len ( mochi ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> <NL> List = sorted ( list ( set ( list ( int ( input ( ) ) for i in range ( N ) ) ) ) ) <NEWLINE> <NL> print ( len ( List ( ) ) ) <NEWLINE>
mycode = <STRING> <NEWLINE> <NL> import sys <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <COMMENT> <NEWLINE> <INDENT> import os <NEWLINE> with open ( <STRING> , <STRING> ) as f : <NEWLINE> <INDENT> f . write ( mycode ) <NEWLINE> <DEDENT> os . system ( <STRING> ) <NEWLINE> <NL> <DEDENT> import mycode <NEWLINE>
N = int ( input ( ) ) <NEWLINE> D = [ int ( input ( ) ) for _ in range ( N ) ] <NEWLINE> <NL> l = [ 0 ] * 100 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> l [ d [ i ] - 1 ] = 1 <NEWLINE> <NL> <DEDENT> print ( sum ( l ) ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ans = [ - 1 , - 1 , - 1 ] <NEWLINE> <NL> for n1 in range ( N + 1 ) : <NEWLINE> <INDENT> for n2 in range ( N - n1 + 1 ) : <NEWLINE> <INDENT> yen = n1 * 10000 + n2 * 5000 + ( N - n1 - n2 ) * 1000 <NEWLINE> if yen == Y : <NEWLINE> <INDENT> ans = [ n1 , n2 , N - n1 - n2 ] <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> . join ( ans ) ) <NEWLINE>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> y //= 1000 <NEWLINE> for i in range ( n + 1 ) : <NEWLINE> <INDENT> for j in range ( n - i + 1 ) : <NEWLINE> <INDENT> if n - ( i + j ) < 0 <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> if 9 * i + 4 * j + n == y : <NEWLINE> <INDENT> print ( i , j , n - ( i + j ) ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> , <STRING> , <STRING> ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for x in range ( N + 1 ) : <NEWLINE> <INDENT> for y in range ( N - x + 1 ) : <NEWLINE> <INDENT> z = N - x - y <NEWLINE> if 10000 * a + 5000 * b + 1000 * c == Y : <NEWLINE> <INDENT> print ( a , b , c ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( - 1 , - 1 , - 1 ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( n + 1 ) : <NEWLINE> <INDENT> for g in range ( n - i ) : <NEWLINE> <INDENT> s = n - i - g <NEWLINE> if 10000 * i + 5000 * g 1000 * s == y : <NEWLINE> <INDENT> print ( i , g , s ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> y = y / 1000 <NEWLINE> for i in range ( n + 1 ) : <NEWLINE> <INDENT> for j in range ( n - i + 1 ) : <NEWLINE> <INDENT> if 10 * i + 5 * j + 1 * ( n - i - j ) == y : <NEWLINE> <INDENT> print ( i ) <NEWLINE> print ( j ) <NEWLINE> print ( n - i - j ) <NEWLINE> exit ( 1 ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( - 1 ) <NEWLINE> print ( - 1 ) <NEWLINE> print ( - 1 ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> res = ( - 1 , - 1 , - 1 ) <NEWLINE> for x in range ( N + 1 ) : <NEWLINE> <INDENT> for y in range ( N + 1 - x ) : <NEWLINE> <INDENT> if N - x - y >= 0 and 10000 * x + 5000 * y + 1000 * z == Y : <NEWLINE> <INDENT> res = ( x , y , N - x - y ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( res [ 0 ] , res [ 1 ] , res [ 2 ] ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for a in range ( n + 1 ) : <NEWLINE> <INDENT> for b in range ( n - a + 1 ) : <NEWLINE> <INDENT> c = n - a - b <NEWLINE> if 10000 * a + 5000 * b + 1000 * c == Y : <NEWLINE> <INDENT> print ( a , b , c ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( - 1 , - 1 , - 1 ) <NEWLINE>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> y = y // 1000 <NEWLINE> <NL> <COMMENT> <NL> for i in range ( n + 1 ) : <NEWLINE> <INDENT> for j in range ( n + 1 ) : <NEWLINE> <COMMENT> <NL> <INDENT> money = y - i * 10 - j * 50 <NEWLINE> <NL> <COMMENT> <NL> if money == n - i - j : <NEWLINE> <INDENT> print ( <STRING> . format ( i , j , money ) ) <NEWLINE> return 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if y > 10000 * n : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for p in range ( n + 1 ) : <NEWLINE> <INDENT> for q in range ( n - p + 1 ) : <NEWLINE> <INDENT> if 10000 * p + 5000 * q + 1000 * ( n - p - q ) == y : <NEWLINE> <INDENT> print ( p , q , r ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> a , b , c = - 1 , - 1 , - 1 <NEWLINE> x = y // 1000 - n <NEWLINE> if y % 1000 == 0 : <NEWLINE> <INDENT> for i in range ( n + 1 ) : <NEWLINE> <INDENT> for j in range ( n + 1 - j ) : <NEWLINE> <INDENT> if x == 9 * i + 4 * j : <NEWLINE> <INDENT> a = i <NEWLINE> b = j <NEWLINE> c = n - i - j <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if a != - 1 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( a , b , c ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> res_x = - 1 , res_y = - 1 , res_z = - 1 <NEWLINE> for x in range ( N ) : <NEWLINE> <INDENT> for j in range ( N - x ) : <NEWLINE> <INDENT> z = N - x - y <NEWLINE> if 10000 * x + 5000 * y + 1000 * z == Y : <NEWLINE> <INDENT> res_x = x <NEWLINE> res_y = y <NEWLINE> res_z = z <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> . format ( res_x , res_y , res_z ) ) <NEWLINE>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( n + 1 ) : <NEWLINE> <INDENT> for j in range ( n + 1 ) : <NEWLINE> <INDENT> if ( y - 1000 * i - 5000 * j ) / 10000 = n - i - j : <NEWLINE> <INDENT> print ( i , j , n - i - j ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( - 1 , - 1 , - 1 ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> exist_flag = False <NEWLINE> for i in range ( N + 1 ) : <NEWLINE> <INDENT> for j in range ( N + 1 - i ) : <NEWLINE> <INDENT> if Y == 10000 * i + 5000 * j + 1000 * ( N - i - j ) : <NEWLINE> <INDENT> exist_flag = True <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if exist_flag : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> if not exist_flag : <NEWLINE> <INDENT> i , j , k = - 1 , - 1 , - 1 <NEWLINE> <DEDENT> print ( i , j , k ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> flag = 0 <NEWLINE> for x in range ( N + 1 ) : <NEWLINE> <INDENT> if flag > 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> for y in range ( N - x + 1 ) : <NEWLINE> <INDENT> if 10000 * x + 5000 * y + 1000 * z == Y and flag == 0 : <NEWLINE> <INDENT> z = N - x - y <NEWLINE> flag += 1 <NEWLINE> print ( x , y , z ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> if flag == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> or i in range ( n + 1 ) : <NEWLINE> <INDENT> for j in range ( n - i + 1 ) : <NEWLINE> <INDENT> print ( i , j , n - i - j ) <NEWLINE> if 10000 * i + 5000 * j + 1000 * ( n - i - j ) == y : <NEWLINE> <INDENT> print ( i , j , n - i - j ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> print ( - 1 , - 1 , - 1 ) <NEWLINE> <DEDENT> <DEDENT>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> a = - 1 <NEWLINE> b = - 1 <NEWLINE> c = - 1 <NEWLINE> judge = False <NEWLINE> <NL> money = x * 10000 + y * 5000 + z * 1000 <NEWLINE> for x in range ( 20 , - 1 , - 1 ) : <NEWLINE> <INDENT> money_max = x * 10000 + ( N - x ) * 5000 <NEWLINE> money_min = x * 10000 + ( N - x ) * 1000 <NEWLINE> if money_min <= Y and Y <= money_max : <NEWLINE> <INDENT> for y in range ( N - x , - 1 , - 1 ) : <NEWLINE> <INDENT> money = x * 10000 + y * 5000 + ( N - x - y ) * 1000 <NEWLINE> if money == Y : <NEWLINE> <INDENT> a = x <NEWLINE> b = y <NEWLINE> c = N - ( x + y ) <NEWLINE> judge = True <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> if judge : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> print ( a , b , c ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> Y = int ( input ( ) ) <NEWLINE> <NL> answer = [ ] <NEWLINE> comb = [ ] <NEWLINE> for j in range ( N + 1 ) : <NEWLINE> <INDENT> for i in range ( N + 1 ) : <NEWLINE> <INDENT> sum = 10000 * j + 5000 * i + 1000 * ( N - i - j ) <NEWLINE> if ( sum == Y and N - i - j >= 0 ) : <NEWLINE> <INDENT> print ( j , i , N - i - j ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N , Y = input ( ) . split ( ) <NEWLINE> N = int ( N ) <NEWLINE> Y_k = int ( Y ) / 1000 <NEWLINE> <NL> answer - [ - 1 , - 1 , - 1 ] <NEWLINE> for i in range ( N + 1 ) : <NEWLINE> <INDENT> for j in range ( N + 1 - i ) : <NEWLINE> <INDENT> k = N - i - j <NEWLINE> if 10 * i + 5 * j + 1 * k == Y_k : <NEWLINE> <INDENT> answer = [ i , j , k ] <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( answer [ 0 ] , answer [ 1 ] , answer [ 2 ] ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for x in range ( N + 1 ) : <NEWLINE> <INDENT> for y in range ( N + 1 - x ) : <NEWLINE> <INDENT> if 10000 * x + 5000 * y + 1000 * ( N - x - y ) == Y : <NEWLINE> <INDENT> print ( x , y , z ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
A = 10000 <NEWLINE> B = 5000 <NEWLINE> C = 1000 <NEWLINE> ans_A = - 1 <NEWLINE> ans_B = - 1 <NEWLINE> ans_C = - 1 <NEWLINE> x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> for a in range ( x + 1 ) : <NEWLINE> <INDENT> for b in range ( x - a + 1 ) : <NEWLINE> <INDENT> for c in range ( x - a - b + 1 ) : <NEWLINE> <INDENT> if a * A + b * B + c * C = y : <NEWLINE> <INDENT> ans_A = a <NEWLINE> ans_B = b <NEWLINE> ans_C = c <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( ans_A , ans_B , ans_C ) <NEWLINE>
import sys <NEWLINE> N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> for x in range ( N ) : <NEWLINE> <INDENT> for y in range ( N ) : <NEWLINE> <INDENT> if 10000 * x + 5000 * y + 1000 * ( N - x - y ) == Y : <NEWLINE> <INDENT> print ( x + <STRING> + y + <STRING> + N - x - y ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( - 1 , - 1 , - 1 ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for a in range ( N + 1 ) : <NEWLINE> <INDENT> for b in range ( N + 1 - a ) : <NEWLINE> <INDENT> if 10000 * a + 5000 * b + 1000 * c == Y : <NEWLINE> <INDENT> print ( a , b , N - a - b ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( - 1 , - 1 , - 1 ) <NEWLINE> <DEDENT>
n , y = map ( int , input ( ) . split ( ) ) <NEWLINE> y = y // 1000 <NEWLINE> for i in range ( n + 1 ) : <NEWLINE> <INDENT> for j in range ( n + 1 - i ) : <NEWLINE> <INDENT> k = n - i - j <NEWLINE> if 10 * i + 5 * j + 1 * k == y : <NEWLINE> <INDENT> print ( str ( i ) + <STRING> + str ( j ) + <STRING> + str ( k ) ) <NEWLINE> syexit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = False <NEWLINE> for i in range ( N + 1 ) : <NEWLINE> <INDENT> for j in range ( N + 1 ) : <NEWLINE> <INDENT> k = N - i - j <NEWLINE> if 10000 * i + 5000 * j + 1000 * k == Y and z >= 0 : <NEWLINE> <INDENT> ans = True <NEWLINE> print ( i , j , k ) <NEWLINE> <DEDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> if ans == False : <NEWLINE> <INDENT> print ( - 1 , - 1 , - 1 ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> int main ( ) <NEWLINE> { <NEWLINE> <INDENT> int N , a , b , c ; <NEWLINE> long Y , yn ; <NEWLINE> <NL> scanf ( <STRING> , & N ) ; <NEWLINE> scanf ( <STRING> , & Y ) ; <NEWLINE> <NL> Y = Y / 1000 ; <NEWLINE> yn = Y - N ; <NEWLINE> <NL> for ( c = 0 ; c <= N ; c + + ) { <NEWLINE> <INDENT> b = ( yn - 9 * c ) / 4 ; <NEWLINE> if ( ( yn - 9 * c ) % 4 == 0 ) { <NEWLINE> <INDENT> a = N - b - c ; <NEWLINE> if ( ( a >= 0 ) & & ( yn == 4 * b + 9 * c ) ) { <NEWLINE> <INDENT> printf ( <STRING> , a , b , c ) ; <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE> printf ( <STRING> , - 1 , - 1 , - 1 ) ; <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( N + 1 ) : <NEWLINE> <INDENT> for j in range ( N + 1 - i ) : <NEWLINE> <INDENT> if Y == i * 10000 + j * 5000 + ( N - i - j ) * 1000 : <NEWLINE> <INDENT> print ( i , j , ( n - i - j ) ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> total = 0 <NEWLINE> for x in range ( N + 1 ) : <NEWLINE> <INDENT> for y in range ( N + 1 - x ) : <NEWLINE> <INDENT> for z in range ( N + 1 - x - y ) : <NEWLINE> <INDENT> if Y == 10000 * x + 5000 * y + 1000 * z : <NEWLINE> <INDENT> total = total + 1 <NEWLINE> ans = str ( x ) + <STRING> + str ( y ) + <STRING> + str ( z ) <NEWLINE> print ( ans ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> break <NEWLINE> <DEDENT> break <NEWLINE> if total == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for x in range ( N + 1 ) : <NEWLINE> <INDENT> for y in range ( N - x + 1 ) : <NEWLINE> <INDENT> z = N - x - y <NEWLINE> if 10000 * i + 5000 * j + z * 1000 == Y : <NEWLINE> <INDENT> print ( x , y , z ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( - 1 , - 1 , - 1 ) <NEWLINE>
for i in range ( 0 , N + 1 ) : <NEWLINE> <INDENT> for j in range ( 0 , N + 1 - i ) : <NEWLINE> <INDENT> if i == ( ( Y - 1000 * N - 4000 * j ) / 9000 ) : <NEWLINE> <INDENT> if ( N - i - j ) >= 0 : print ( str ( i ) + <STRING> + str ( j ) + <STRING> + str ( N - i - j ) ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> Y = int ( input ( ) ) <NEWLINE> <NL> a = - 1 <NEWLINE> b = - 1 <NEWLINE> c = - 1 <NEWLINE> for i in range ( 0 , N + 1 ) : <NEWLINE> <INDENT> for j in range ( 0 , N - i + 1 ) : <NEWLINE> <INDENT> if 10000 * i + 5000 * j + 1000 * ( N - i - j ) == Y : <NEWLINE> <INDENT> a = i <NEWLINE> b = j <NEWLINE> c = N - i - j <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( a , b , c ) <NEWLINE>
import sys <NEWLINE> <NL> n , h = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ list ( map ( int , x . split ( ) ) ) for x in sys . stdin . readlines ( ) ] <NEWLINE> a . sort ( reverse = True ) <NEWLINE> b = sorted ( a , key = lambda x : x [ 1 ] , reverse = True ) <NEWLINE> cnt = 0 <NEWLINE> for i in b : <NEWLINE> <INDENT> if i [ 1 ] < a [ 0 ] [ 0 ] : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> cnt += 1 <NEWLINE> h -= i [ 1 ] <NEWLINE> if h <= 0 : <NEWLINE> <INDENT> print ( cnt ) <NEWLINE> <DEDENT> <DEDENT> print ( min ( cnt + - ( - h // a [ 0 ] [ 0 ] ) ) ) <NEWLINE>
N , H = map ( int , input ( ) . split ( ) ) <NEWLINE> AB = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] <NEWLINE> A , B = zip ( * AB ) <NEWLINE> <NL> a = max ( A ) <NEWLINE> B = [ b for b in B if b > a ] <COMMENT> <NEWLINE> B . sort ( reverse = True ) <NEWLINE> <NL> answer = 0 <NEWLINE> hp = H <NEWLINE> attack_cnt = 0 <NEWLINE> <NL> for b in B : <NEWLINE> <INDENT> if hp <= 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> attack_cnt += 1 <NEWLINE> hp -= b <NEWLINE> <NL> <DEDENT> if hp > 0 : <NEWLINE> <INDENT> attack_cnt += ( hp - 1 ) // a + 1 <NEWLINE> <NL> <DEDENT> print ( attack_cnt ) <NEWLINE>
N , H = map ( int , input ( ) . split ( ) ) <NEWLINE> slash = 0 <NEWLINE> Throw = [ ] <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> slash = max ( slash , a ) <NEWLINE> if b > a : Throw . append ( b ) <NEWLINE> <COMMENT> <NL> <DEDENT> Throw = sorted ( [ th for th in Throw if th > slash ] , reversed = True ) <NEWLINE> dmg , cnt = 0 , 0 <NEWLINE> for throw in Throw : <NEWLINE> <INDENT> if dmg >= H : break <NEWLINE> dmg += throw <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> if dmg < H : <NEWLINE> <INDENT> from math import ceil <NEWLINE> cnt += ceil ( ( H - dmg ) / slash ) <NEWLINE> <DEDENT> print ( cnt ) <NEWLINE>
N , H = map ( int , input ( ) . split ( ) ) <NEWLINE> B = [ ] <NEWLINE> A = 0 <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> A = max ( A , a ) <NEWLINE> B . append ( b ) <NEWLINE> <DEDENT> B = sorted ( reverse = True ) + [ 0 ] <NEWLINE> <NL> i = 0 <NEWLINE> while B [ i ] >= A : <NEWLINE> <INDENT> i += 1 <NEWLINE> <DEDENT> B = B [ : i ] <NEWLINE> <NL> ans = 0 <NEWLINE> for i in range ( len ( B ) ) : <NEWLINE> <INDENT> H -= B [ i ] <NEWLINE> ans += 1 <NEWLINE> if H <= 0 : <NEWLINE> <INDENT> print ( ans ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( ans + ( H - 1 ) // A + 1 ) <NEWLINE>
n , H = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ ] <NEWLINE> b = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> ai , bi = map ( int , input ( ) . split ( ) ) <NEWLINE> a . append ( ai ) <NEWLINE> b . append ( bi ) <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> amax = max ( a ) <NEWLINE> b . sort ( reverse = True ) <NEWLINE> <COMMENT> <NL> i = 0 <NEWLINE> while H > 0 : <NEWLINE> <INDENT> if amax < b [ i ] : <NEWLINE> <INDENT> H -= b [ i ] <NEWLINE> ans += 1 <NEWLINE> i += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += H // amax <NEWLINE> if H % amax != 0 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
from math import ceil <NEWLINE> n , h = map ( int , input ( ) . split ( ) ) <NEWLINE> data1 , data2 = [ ] , [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> data1 . append ( [ a , b ] ) <NEWLINE> data2 . append ( [ a , b ] ) <NEWLINE> <NL> <DEDENT> data1 = sorted ( data1 , key = lambda x : x [ 0 ] , reverse = True ) <NEWLINE> data2 = sorted ( data2 , key = lambda x : x [ 1 ] , reverse = True ) <NEWLINE> ans = 0 <NEWLINE> while data1 [ 0 ] [ 0 ] < data2 [ 0 ] [ 1 ] : <NEWLINE> <INDENT> h -= data2 [ 0 ] [ 1 ] <NEWLINE> ans += 1 <NEWLINE> del data2 [ 0 ] <NEWLINE> <DEDENT> ans += ceil ( h / data1 [ 0 ] [ 0 ] ) <NEWLINE> print ( ans ) <NEWLINE>
N , H = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> A = [ ] <NEWLINE> B = [ ] <NEWLINE> amax = - 1 <NEWLINE> bmax = - 1 <NEWLINE> <NL> for _ in range ( N ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> A . append ( a ) <NEWLINE> B . append ( b ) <NEWLINE> <NL> if amax < a : <NEWLINE> <INDENT> amax = a <NEWLINE> <NL> <DEDENT> if bmax < b : <NEWLINE> <INDENT> bmax = b <NEWLINE> <NL> <DEDENT> <DEDENT> if amax >= bmax : <NEWLINE> <INDENT> m = H % amax <NEWLINE> if m != 0 : <NEWLINE> <INDENT> ans = H // amax + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = H // amax <NEWLINE> <NL> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> ans = 0 <NEWLINE> throw_lst = list ( filter ( lambda x : x > amax , B ) ) . sort ( reverse = True ) <NEWLINE> <NL> for tb in throw_lst : <NEWLINE> <INDENT> H -= tb <NEWLINE> ans += 1 <NEWLINE> if H <= 0 : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> m = H % amax <NEWLINE> if m != 0 : <NEWLINE> <INDENT> ans += H // amax + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += H // amax <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
def resolve ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> N , H = [ int ( item ) for item in input ( ) . split ( ) ] <NEWLINE> ab = [ [ int ( item ) for item in input ( ) . split ( ) ] for _ in range ( N ) ] <NEWLINE> <NL> a_max = max ( ab , key = lambda x : x [ 0 ] ) <NEWLINE> res = H // a_max <NEWLINE> if H % a_max != 0 : <NEWLINE> <INDENT> res += 1 <NEWLINE> <NL> <DEDENT> temp_attack = res * a_max <NEWLINE> b_delta = [ b - a_max for a , b in ab ] <NEWLINE> <NL> throw_atk_sum = 0 <NEWLINE> throw_num = 0 <NEWLINE> <NL> for item in b_delta : <NEWLINE> <INDENT> if b_delta > 0 : <NEWLINE> <INDENT> throw_atk_sum += item <NEWLINE> throw_num += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if throw_atk_sum < temp_attack : <NEWLINE> <INDENT> reduce_num = throw_atk_sum // a_max <NEWLINE> print ( res - reduce_num ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> res = 0 <NEWLINE> for a , b in ab : <NEWLINE> <INDENT> H -= b <NEWLINE> res += 1 <NEWLINE> if H <= 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> print ( res ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> from fractions import gcd <NEWLINE> from itertools import combinations , permutations , accumulate , product <COMMENT> <NEWLINE> <COMMENT> <NL> from collections import deque , defaultdict , Counter <NEWLINE> import decimal <NEWLINE> import re <NEWLINE> import math <NEWLINE> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> import sys <NEWLINE> sys . setrecursionlimit ( 10000000 ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> from sys import stdin <NEWLINE> readline = stdin . readline <NEWLINE> def readInts ( ) : <NEWLINE> <INDENT> return list ( map ( int , readline ( ) . split ( ) ) ) <NEWLINE> <DEDENT> def readTuples ( ) : <NEWLINE> <INDENT> return tuple ( map ( int , readline ( ) . split ( ) ) ) <NEWLINE> <DEDENT> def I ( ) : <NEWLINE> <INDENT> return int ( readline ( ) ) <NEWLINE> <DEDENT> n , h = readInts ( ) <NEWLINE> A = [ 0 ] * n <NEWLINE> B = [ 0 ] * n <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a , b = readInts ( ) <NEWLINE> A [ i ] = a <NEWLINE> B [ i ] = b <NEWLINE> <DEDENT> A = sorted ( A , reverse = True ) <NEWLINE> B = sorted ( B , reverse = True ) <NEWLINE> MAX = a [ 0 ] <NEWLINE> ans = 0 <NEWLINE> for v in b : <NEWLINE> <COMMENT> <NL> <INDENT> if h <= 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> if v > MAX : <COMMENT> <NEWLINE> <COMMENT> <NL> <INDENT> ans += 1 <NEWLINE> h -= v <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> if h > 0 : <NEWLINE> <INDENT> ans += ( h + MAX - 1 ) // MAX <COMMENT> <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> print ( 24 + ( 24 - a ) <NEWLINE>
m = input ( ) <NEWLINE> print ( 48 - m ) <NEWLINE>
a = input ( ) <NEWLINE> a = 48 - a <NEWLINE> print ( a ) <NEWLINE>
i = ( 48 - i ) <NEWLINE> print ( input ( ) ) <NEWLINE>
a = input ( ) <NEWLINE> b = 24 - a <NEWLINE> c = 24 + b <NEWLINE> print ( c ) <NEWLINE>
a = input ( ) <NEWLINE> print ( 48 - a ) <NEWLINE>
print ( 48 - input ( ) ) <NEWLINE>
M = int ( input ( ) ) <NEWLINE> ans = 48 - M <NEWLINE> printg ( ans ) <NEWLINE>
print ( 48 - int ( input ( ) ) <NEWLINE>
print ( 48 - int ( input ( ) ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if input ( ) [ a ] == <STRING> and input ( ) . count ( <STRING> ) == 1 else <STRING> ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> n = input ( ) <NEWLINE> if n [ a ] == <STRING> : <NEWLINE> <INDENT> n = n . pop ( a ) <NEWLINE> if n . isdecimal ( ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> S = list ( map ( str , input ( ) . split ( - ) ) ) <NEWLINE> ans = <STRING> <NEWLINE> if A == len ( S [ 0 ] ) : <NEWLINE> <INDENT> if B == len ( S [ 1 ] ) : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> S = input ( ) <NEWLINE> print ( <STRING> if re . search ( <STRING> . format ( A , B ) , S ) else <STRING> ) <NEWLINE>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> S = input ( ) <NEWLINE> a = <STRING> <NEWLINE> for i in range ( A + B + 2 ) : <NEWLINE> <INDENT> if i != A : <NEWLINE> <INDENT> if S [ i ] != <STRING> : <NEWLINE> <INDENT> a = <STRING> <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if S [ i ] == <STRING> : <NEWLINE> <INDENT> a = <STRING> <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( a ) <NEWLINE>
<INDENT> A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> S = input ( ) <NEWLINE> C = <STRING> <NEWLINE> for i in range ( len ( S ) ) : <NEWLINE> <INDENT> if i == A : <NEWLINE> <INDENT> if S [ i ] == <STRING> : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if S [ i ] in C : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> <DEDENT> resolve ( ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = input . split ( <STRING> ) <NEWLINE> if len ( s [ 0 ] ) == a and len ( s [ 1 ] ) == b and len ( s ) == 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = input ( ) <NEWLINE> print ( <STRING> if ( s . count ( <STRING> ) == 1 and s [ a ] == <STRING> and s . count ( ) == a + b + 1 ) else <STRING> ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = str ( input ( ) ) <NEWLINE> e = [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if a = i : <NEWLINE> <INDENT> if s [ i ] != <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if s [ i ] not in e : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
def actual ( a , b , s ) : <NEWLINE> <INDENT> if s [ a ] != <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <NL> <DEDENT> for i in range ( 0 , a ) : <NEWLINE> <INDENT> if not <STRING> <= s [ i ] <= <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> for j in range ( a + 1 , len ( s ) + 1 ) : <NEWLINE> <INDENT> if not <STRING> <= s [ j ] <= <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> return <STRING> <NEWLINE> <NL> <NL> <DEDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = input ( ) <NEWLINE> <NL> print ( actual ( a , b , s ) ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = input ( ) <NEWLINE> flg = 0 <NEWLINE> for i in range ( a + b ) : <NEWLINE> <INDENT> if not ( 0 <= int ( s [ i ] ) <= 9 ) : <NEWLINE> <INDENT> if s [ a ] == <STRING> : <NEWLINE> <INDENT> flg = 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> if flg == 1 else <STRING> ) <NEWLINE>
def main ( ) : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> csf = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n - 1 ) ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if i == n - 1 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t = 0 <NEWLINE> for c , s , f in csf [ i : ] : <NEWLINE> <INDENT> t = max ( s , t ) <NEWLINE> t = math . ceil ( t / f ) * f + c <NEWLINE> <COMMENT> <NL> <DEDENT> print ( t ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
import sys <NEWLINE> sys . setrecursionlimit ( 10 ** 10 ) <NEWLINE> <NL> n = int ( input ( ) ) <NEWLINE> info = [ ] <NEWLINE> for _ in range ( n - 1 ) : <NEWLINE> <INDENT> c , s , f = map ( int , input ( ) . split ( ) ) <NEWLINE> info . append ( [ c , s , f ] ) <NEWLINE> <COMMENT> <NL> <NL> <DEDENT> def func ( i , low ) : <NEWLINE> <INDENT> if i == low : <NEWLINE> <INDENT> return info [ i ] [ 1 ] + info [ i ] [ 0 ] <NEWLINE> <NL> <DEDENT> return func2 ( func ( i - 1 , low ) , info [ i ] [ 2 ] , info [ i ] [ 1 ] ) + info [ i ] [ 0 ] <NEWLINE> <NL> <DEDENT> def func2 ( n , f , s ) : <NEWLINE> <INDENT> if n <= s : <NEWLINE> <INDENT> return s <NEWLINE> <DEDENT> if n % f == 0 : <NEWLINE> <INDENT> return n <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return n // f * f + f <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> <DEDENT> for i in range ( n ) : <NEWLINE> <INDENT> if i == n - 1 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> print ( func ( n - 2 , i ) ) <NEWLINE> <DEDENT>
int ( input ( ) ) <NEWLINE> yo = [ ] <NEWLINE> for _ in range ( n - 1 ) : <NEWLINE> <INDENT> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> yo . append ( a ) <NEWLINE> <NL> <DEDENT> def ans ( x ) : <NEWLINE> <INDENT> if x == n - 1 : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t = 0 <NEWLINE> for i in range ( x , n - 1 ) : <NEWLINE> <INDENT> if t <= yo [ i ] [ 1 ] : <NEWLINE> <INDENT> t = yo [ i ] [ 1 ] + yo [ i ] [ 0 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> s = t - yo [ i ] [ 1 ] <NEWLINE> if s % yo [ i ] [ 2 ] == 0 : <NEWLINE> <INDENT> t = t + yo [ i ] [ 0 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> mo = s % yo [ i ] [ 2 ] <NEWLINE> t = t + yo [ i ] [ 2 ] - mo + yo [ i ] [ 0 ] <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return t <NEWLINE> <NL> <DEDENT> <DEDENT> for j in range ( n ) : <NEWLINE> <INDENT> print ( ans ( j ) ) <NEWLINE> <NL> <DEDENT>
import numpy as np <NEWLINE> <NL> def seachPrimeNum ( N ) : <NEWLINE> <INDENT> max = int ( np . sqrt ( N ) ) <NEWLINE> seachList = [ i for i in range ( 2 , N + 1 ) ] <NEWLINE> primeNum = [ ] <NEWLINE> while seachList [ 0 ] <= max : <NEWLINE> <INDENT> primeNum . append ( seachList [ 0 ] ) <NEWLINE> tmp = seachList [ 0 ] <NEWLINE> seachList = [ i for i in seachList if i % tmp != 0 ] <NEWLINE> <DEDENT> primeNum . extend ( seachList ) <NEWLINE> return primeNum <NEWLINE> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <DEDENT> def main ( ) : <NEWLINE> <INDENT> Q = int ( input ( ) ) <NEWLINE> list = seachPrimeNum ( 100000 ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> c = [ 0 ] * 100001 <NEWLINE> c [ 0 ] = 0 <NEWLINE> for i in range ( 1 , 100001 , 1 ) : <NEWLINE> <COMMENT> <NL> <INDENT> if i in list and ( i + 1 ) / 2 in list : <NEWLINE> <INDENT> c [ i ] = c [ i - 1 ] + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> c [ i ] = c [ i - 1 ] <NEWLINE> <COMMENT> <NL> <DEDENT> <DEDENT> for i in range ( Q ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( c [ r ] - c [ l - 1 ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> main ( ) <NEWLINE>
import math <NEWLINE> from itertools import accumulate <NEWLINE> <NL> def eratosthenes ( n ) : <NEWLINE> <INDENT> prime_list = [ ] <NEWLINE> num_list = [ i for i in range ( 2 , n + 1 ) ] <NEWLINE> limit = math . sqrt ( n ) <NEWLINE> while True : <NEWLINE> <INDENT> if limit <= num_list [ 0 ] : <NEWLINE> <INDENT> return prime_list + num_list <NEWLINE> <DEDENT> prime_list . append ( num_list [ 0 ] ) <NEWLINE> num_list = [ e for e in num_list if e % num_list [ 0 ] != 0 ] <NEWLINE> <NL> <DEDENT> <DEDENT> er_list = eratosthenes ( 100000 ) <NEWLINE> count = [ ] <NEWLINE> <NL> j = 0 <NEWLINE> for i in range ( er_list [ - 1 ] ) : <NEWLINE> <INDENT> if i == er_list [ j ] : <NEWLINE> <INDENT> j += 1 <NEWLINE> if ( i + 1 ) // 2 in er_list : <NEWLINE> <INDENT> count . append ( 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count . append ( 0 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> count . append ( 0 ) <NEWLINE> <DEDENT> <DEDENT> count = list ( accumulate ( count ) ) <NEWLINE> <NL> Q = int ( input ( ) ) <NEWLINE> for i in range ( Q ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( count [ r ] - count [ l - 1 ] ) <NEWLINE> <DEDENT>
def era ( M ) : <NEWLINE> <INDENT> p = [ 1 ] * M <NEWLINE> p [ 0 ] = p [ 1 ] = 0 <NEWLINE> for x in range ( 2 , int ( ~ - M ** .5 ) + 1 ) : <NEWLINE> <INDENT> if p [ x ] : <NEWLINE> <INDENT> for y in range ( x * x , M , x ) : <NEWLINE> <INDENT> p [ y ] = 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return p <NEWLINE> <DEDENT> INF = 10 ** 5 + 1 <NEWLINE> E = erat ( INF ) <NEWLINE> Q = [ 0 ] * INF <NEWLINE> from itertools import * <NEWLINE> for i in range ( INF ) : <NEWLINE> <INDENT> q [ i ] = i % 2 * p [ i ] * p [ - ~ i // 2 ] <NEWLINE> <DEDENT> * a , = accumulate ( [ 0 ] + q ) <NEWLINE> for _ in [ None ] * int ( input ( ) ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( a [ - ~ r ] - a [ l ] ) <NEWLINE> <DEDENT>
import sys <NEWLINE> from itertools import accumulate <NEWLINE> def input ( ) : return sys . stdin . readline ( ) . strip ( ) <NEWLINE> <NL> <NL> def get_sieve_of_eratosthenes ( n ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not isinstance ( n , int ) : <NEWLINE> <INDENT> raise TypeError ( <STRING> ) <NEWLINE> <DEDENT> if n < 2 : <NEWLINE> <INDENT> return [ ] <NEWLINE> <DEDENT> prime = [ 2 ] <NEWLINE> limit = int ( n ** 0.5 ) <NEWLINE> data = [ i + 1 for i in range ( 2 , n , 2 ) ] <NEWLINE> while True : <NEWLINE> <INDENT> p = data [ 0 ] <NEWLINE> if limit < p : <NEWLINE> <INDENT> return prime + data <NEWLINE> <DEDENT> prime . append ( p ) <NEWLINE> data = [ e for e in data if e % p != 0 ] <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> def main ( ) : <NEWLINE> <INDENT> primes = get_sieve_of_eratosthenes ( 100000 ) <NEWLINE> like = [ 0 ] * 10 ** 5 <NEWLINE> for i in range ( 3 , 10 ** 5 ) : <NEWLINE> <INDENT> if i in primes and ( i + 1 ) // 2 in primes : <NEWLINE> <INDENT> like [ i ] = 1 <NEWLINE> <DEDENT> <DEDENT> like = list ( accumulate ( like ) ) <NEWLINE> <NL> q = int ( input ( ) ) <NEWLINE> for _ in range ( q ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> if l < 3 : l = 3 <NEWLINE> if r < 3 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> continue <NEWLINE> <DEDENT> print ( like [ r ] - like [ l - 1 ] ) <NEWLINE> <NL> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
import math <NEWLINE> def eratosthenes ( n ) : <NEWLINE> <INDENT> prime_list = [ ] <NEWLINE> num_list = [ i for i in range ( 2 , n + 1 ) ] <NEWLINE> limit = math . sqrt ( n ) <NEWLINE> while True : <NEWLINE> <INDENT> if limit <= num_list [ 0 ] : <NEWLINE> <INDENT> return prime_list + num_list <NEWLINE> <DEDENT> prime_list . append ( num_list [ 0 ] ) <NEWLINE> num_list = [ e for e in num_list if e % num_list [ 0 ] != 0 ] <NEWLINE> <NL> <DEDENT> <DEDENT> ls = eratosthenes ( 100000 ) <NEWLINE> ls2 = [ ] <NEWLINE> count = 0 <NEWLINE> for i in ls : <NEWLINE> <INDENT> ls2 . append ( count ) <NEWLINE> if ( i + 1 ) // 2 in ls : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> Q = int ( input ( ) ) <NEWLINE> for i in range ( Q ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ls2 [ r - 1 ] - ls2 [ l - 1 ] ) <NEWLINE> <DEDENT>
import math <NEWLINE> import numpy as np <NEWLINE> def get_prime ( n ) : <NEWLINE> <INDENT> if n <= 1 : <NEWLINE> <INDENT> return [ ] <NEWLINE> <DEDENT> prime = [ 2 ] <NEWLINE> limit = int ( math . sqrt ( n ) ) <NEWLINE> <NL> data = [ i + 1 for i in range ( 2 , n , 2 ) ] <NEWLINE> while limit > data [ 0 ] : <NEWLINE> <INDENT> prime . append ( data [ 0 ] ) <NEWLINE> data = [ j for j in data if j % data [ 0 ] != 0 ] <NEWLINE> <DEDENT> return prime + data <NEWLINE> <DEDENT> def is_prime ( n ) : <NEWLINE> <INDENT> if n == 1 : return False <NEWLINE> <NL> for k in range ( 2 , int ( math . sqrt ( n ) ) + 1 ) : <NEWLINE> <INDENT> if n % k == 0 : <NEWLINE> <INDENT> return False <NEWLINE> <NL> <DEDENT> <DEDENT> return True <NEWLINE> <DEDENT> n = int ( input ( ) ) <NEWLINE> a = get_prime ( 10 ** 5 + 1 ) <NEWLINE> b = np . array ( [ 0 ] * ( 10 ** 5 + 2 ) ) <NEWLINE> c = 0 <NEWLINE> d = 0 <NEWLINE> add = 0 <NEWLINE> for i in range ( 1 , len ( a ) ) : <NEWLINE> <INDENT> if is_prime ( ( a [ i ] + 1 ) / 2 ) : <NEWLINE> <INDENT> d = a [ i ] <NEWLINE> b [ c : d ] = add <NEWLINE> c = d <NEWLINE> add += 1 <NEWLINE> <DEDENT> <DEDENT> b [ c : ] = add <NEWLINE> b [ 0 : : 2 ] = 0 <NEWLINE> <NL> for i in range ( n ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( b [ max ( 0 , l [ i ] - 2 ) ] - b [ r [ i ] ] ) <NEWLINE> <DEDENT>
q = int ( input ( ) ) <NEWLINE> l , r = [ 0 ] * q , [ 0 ] * q <NEWLINE> for i in range ( q ) : <NEWLINE> <INDENT> l [ i ] , r [ i ] = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <DEDENT> mini = min ( min ( l ) , min ( r ) ) <NEWLINE> maxi = max ( max ( l ) , max ( r ) ) <NEWLINE> ans = [ 0 ] * ( maxi + 1 ) <NEWLINE> prime = [ 0 ] * ( maxi + 1 ) <NEWLINE> def judge_prime ( n ) : <NEWLINE> <INDENT> for i in range ( 2 , int ( n ** 0.5 ) + 1 ) : <NEWLINE> <INDENT> if n % i == 0 : <NEWLINE> <INDENT> return False <NEWLINE> <NL> <DEDENT> <DEDENT> return True if n != 1 else False <NEWLINE> <NL> <DEDENT> for i in range ( ( mini + 1 ) // 2 , maxi + 1 ) : <NEWLINE> <INDENT> prime [ i ] = judge_prime ( i ) <NEWLINE> <NL> <DEDENT> for i in range ( mini , maxi + 1 , 2 ) : <NEWLINE> <INDENT> ans [ i ] = ans [ i - 2 ] + 1 if prime [ i ] and prime [ ( i + 1 ) // 2 ] else ans [ i - 2 <NEWLINE> <DEDENT> for i in range ( q ) : <NEWLINE> <INDENT> print ( ans [ r [ i ] ] - ans [ max ( 0 , l [ i ] - 2 ) ] ) <NEWLINE> <DEDENT>
import numpy as np <NEWLINE> def isP ( x ) : <NEWLINE> <INDENT> for i in range ( 2 , int ( np . sqrt ( x ) ) + 1 ) : <NEWLINE> <INDENT> if x % i == 0 : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> return True <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> MAX = int ( 10e5 + 1 ) <NEWLINE> P = [ isP ( x ) for x in range ( MAX ) ] <NEWLINE> Ans = [ 0 ] * MAX <NEWLINE> cnt = 0 <NEWLINE> for i in range ( 1 , MAX ) : <NEWLINE> <INDENT> if P [ i ] and P [ ( i + 1 ) // 2 ] : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> Ans [ i ] = cnt <NEWLINE> <NL> <DEDENT> q = int ( input ( ) ) <NEWLINE> for i in range ( q ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( Ans [ r ] - Ans [ l - 1 ] ) <NEWLINE> <DEDENT>
import math <NEWLINE> <NL> Q = int ( input ( ) ) <NEWLINE> lr = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( Q ) ] <NEWLINE> <NL> MAX = 10 ** 5 <NEWLINE> limit = int ( math . sqrt ( MAX ) ) <NEWLINE> primes = [ 2 ] <NEWLINE> table = [ i + 1 for i in range ( 2 , MAX , 2 ) ] <NEWLINE> while limit > table [ 0 ] : <NEWLINE> <INDENT> primes . append ( table [ 0 ] ) <NEWLINE> table = [ j for j in table if j % table [ 0 ] != 0 ] <NEWLINE> <DEDENT> table = primes + table <NEWLINE> <NL> similars = [ ] <NEWLINE> for i in range ( len ( table ) ) : <NEWLINE> <INDENT> n = table [ i ] <NEWLINE> if ( n + 1 ) // 2 in table : <NEWLINE> <INDENT> similars . append ( n ) <NEWLINE> <NL> <DEDENT> <DEDENT> for i in lr : <NEWLINE> <INDENT> l = i [ 0 ] <NEWLINE> r = i [ 1 ] <NEWLINE> cand = [ x for x in similars if l <= x <= r ] <NEWLINE> print ( len ( cand ) ) <NEWLINE> <DEDENT>
from bisect import bisect_left as bsl <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> with open ( 0 ) as f : <NEWLINE> <INDENT> Q = int ( f . readline ( ) ) <NEWLINE> Query = [ tuple ( map ( int , line . split ( ) ) ) for line in f . readlines ( ) ] <NEWLINE> <NL> <DEDENT> p_table = makePtable ( 10 ** 5 ) <NEWLINE> p_set = set ( p_table ) <NEWLINE> Like2017 = [ p for p in p_table if ( p + 1 ) // 2 in p_set ] <NEWLINE> database = [ bsl ( Like2017 , i ) for i in range ( 1 , 10 ** 5 + 1 ) ] <NEWLINE> <NL> for l , r in Query : <NEWLINE> <INDENT> print ( database [ r ] - database [ l - 1 ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> def makePtable ( N ) : <NEWLINE> <INDENT> table = list ( range ( 2 , N + 1 ) ) <NEWLINE> result = [ ] <NEWLINE> while len ( table ) != 0 : <NEWLINE> <INDENT> p = table [ 0 ] <NEWLINE> result . append ( p ) <NEWLINE> table = [ x for x in table [ 1 : ] if x % p != 0 ] <NEWLINE> <DEDENT> return result <NEWLINE> <NL> <DEDENT> main ( ) <NEWLINE>
A , B , C , D = map ( int , input ( ) . split ( ) ) <NEWLINE> if A + B > C + D : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif A + B > C + D : : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c , d = map ( int , input ( ) ) <NEWLINE> if a + b > c + d : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( a + b ) == ( c + d ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B , C , D = map ( int , input ( ) ) <NEWLINE> print ( <STRING> if ( A + B ) < ( C + D ) else <STRING> if ( A + B ) == ( C + D ) else <STRING> ) <NEWLINE>
A , B , C , D = map ( int , input ( ) , split ( ) ) <NEWLINE> if A + B > C + D : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif : <NEWLINE> <INDENT> A + B < C + D : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A = input ( ) <NEWLINE> B = input ( ) <NEWLINE> C = input ( ) <NEWLINE> D = input ( ) <NEWLINE> L = int ( A ) + int ( B ) <NEWLINE> R = int ( C ) + int ( D ) <NEWLINE> if L > R : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif L == R : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B , C , D = [ int ( input ( ) ) for i in range ( 4 ) ] <NEWLINE> if A + B > C + D : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif A + B == C + D : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif A + B < C + D : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
I = input ( ) . split ( ) <NEWLINE> A , B , C , D = [ int ( i ) for i in I ] <NEWLINE> <NL> if int ( A + B > C + D : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif A + B < C + D : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> if a + b < c + d : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a + b = c + d : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> A = int ( input ( ) ) <NEWLINE> B = int ( input ( ) ) <NEWLINE> ans_list = [ ] <NEWLINE> <NL> for i in range ( 0 , N + 1 ) : <NEWLINE> <INDENT> if i < 10 : <NEWLINE> <INDENT> if i >= A and i <= B : <NEWLINE> <INDENT> ans_list . append ( i ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> temp = list ( map ( int , str ( i ) ) ) <NEWLINE> temp = temp [ 0 ] + temp [ 1 ] <NEWLINE> if temp >= A and temp <= B : <NEWLINE> <INDENT> ans_list . append ( i ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( sum ( ans_list ) ) <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> <NL> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> mod = 0 <NEWLINE> while n > 0 : <NEWLINE> <INDENT> mod += ( i % 10 ) <NEWLINE> i //= 10 <NEWLINE> <DEDENT> if mod >= a and mod <= b : <NEWLINE> <INDENT> ans += mod <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> count = 0 <NEWLINE> <NL> for i in range ( N + 1 ) : <NEWLINE> <INDENT> if A <= i <= B : <NEWLINE> <INDENT> count += sum ( list ( str ( i ) ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( len ( N ) ) : <NEWLINE> <INDENT> i = str ( i ) <NEWLINE> count = 0 <NEWLINE> for j in i : <NEWLINE> <INDENT> count += int ( j ) <NEWLINE> <DEDENT> if A <= count and B >= count : <NEWLINE> <INDENT> ans += int ( i ) <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> d = sum ( list ( map ( int , list [ str ( i ) ] ) ) ) <NEWLINE> if A <= d <= B : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
def sum ( n ) : <NEWLINE> <INDENT> str_n = str ( n ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( len ( str_n ) ) : <NEWLINE> <INDENT> ans += int ( str_n [ i ] ) <NEWLINE> <DEDENT> return ans <NEWLINE> <NL> <DEDENT> N , A , B = map ( int , [ input ( ) for i in range ( 3 ) ] ) <NEWLINE> <NL> ans1 = 0 <NEWLINE> for i in range ( N + 1 ) : <NEWLINE> <INDENT> if A <= sum ( i ) <= B : <NEWLINE> <INDENT> ans1 += i <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT> print ( ans1 ) <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) ) <NEWLINE> print ( sum ( i for i in range ( 1 + n + 1 ) if a <= sum ( map ( int , str ( i ) ) <= b ) ) ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> S = sum ( i for i in range ( 1 , N + 1 ) if A <= sum ( list ( map ( int , str ( i ) ) ) <= B ) <NEWLINE> print ( S ) <NEWLINE> <NL>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> sum = 0 <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> if A <= sum ( list ( map ( int , str ( i ) ) ) ) <= B : <NEWLINE> <INDENT> sum += i <NEWLINE> <NL> <DEDENT> <DEDENT> print ( sum ) <NEWLINE>
n , a , b = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> c = 0 <NEWLINE> def sual ( N , A , B ) : <NEWLINE> <INDENT> l = list ( <STRING> . format ( N ) ) <NEWLINE> s = sum ( l ) <NEWLINE> if A <= s <= B : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> for x in range ( n ) : <NEWLINE> <INDENT> if sual ( x + 1 , a , b ) : <NEWLINE> <INDENT> c = c + x + 1 <NEWLINE> <DEDENT> <DEDENT> print ( c ) <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> total = 0 <NEWLINE> for i in range ( n + 1 ) : <NEWLINE> <INDENT> x = str ( i ) <NEWLINE> y = 0 <NEWLINE> for j in X : <NEWLINE> <INDENT> y += int ( j ) <NEWLINE> <NL> <DEDENT> if a <= y <= b : <NEWLINE> <INDENT> total += i <NEWLINE> <DEDENT> <DEDENT> print ( total ) <NEWLINE>
[ a , b , c ] = [ int ( i ) for i in input ( ) . split ( <STRING> ) ] <NEWLINE> goukei = 0 <NEWLINE> for i in range ( 1 , a + 1 ) : <NEWLINE> <INDENT> kurainowa = 0 <NEWLINE> kisuu = [ int ( k ) for k in list ( str ( i ) ) ] <NEWLINE> for j in range ( 0 , len ( kissu ) - 1 + 1 ) : <NEWLINE> <INDENT> kurainowa = kurainowa + kissu [ j ] <NEWLINE> <DEDENT> if kurainowa < b + 1 and a - 1 < kurainowa : <NEWLINE> <INDENT> goukei = goukei + i <NEWLINE> <DEDENT> <DEDENT> print ( goukei ) <NEWLINE>
N , A , B = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> cnt = 0 <NEWLINE> for n range ( 1 , N ) : <NEWLINE> <INDENT> val = 0 <NEWLINE> tmp = N <NEWLINE> while tmp // N > 0 : <NEWLINE> <INDENT> val = tmp % 10 <NEWLINE> tmp = tmp // 10 <NEWLINE> <NL> <DEDENT> if val >= A and val <= B : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE>
a , b , c = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> c = int ( c ) <NEWLINE> d = 0 <NEWLINE> for i in range ( 1 , a + 1 ) : <NEWLINE> <INDENT> if b <= ( i // 10000 + ( i // 1000 - ( i // 10000 ) * 10000 ) ) + ( i // 100 - ( i // 1000 ) * 1000 ) ) + ( i // 10 - ( i // 100 ) * 100 ) + ( i // 1 - ( i // 10 ) * 10 ) <= c : <NEWLINE> <INDENT> d = d + i <NEWLINE> <DEDENT> <DEDENT> print ( d ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> souryou = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> j = i + 1 <NEWLINE> j_str = str ( j ) <NEWLINE> goukei = 0 <NEWLINE> for k in range ( len ( j_str ) ) : <NEWLINE> <INDENT> goukei = goukei + int ( j_str [ k ] ) <NEWLINE> <DEDENT> if goukei >= A & & goukei <= B : <NEWLINE> <INDENT> souryou = souryou + j <NEWLINE> <DEDENT> <DEDENT> print ( str ( souryou ) ) <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> sum = 0 <NEWLINE> <NL> for i in range ( n + 1 ) : <NEWLINE> <INDENT> if a <= sum ( map ( int , str ( i ) ) ) <= b : <NEWLINE> <INDENT> count += i <NEWLINE> <NL> <DEDENT> <DEDENT> print ( sum ) <NEWLINE>
<INDENT> n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> for num in range ( n ) : <NEWLINE> <INDENT> num += 1 <NEWLINE> num_0 = num <NEWLINE> place_of_10000 = num // 10000 <NEWLINE> num -= 10000 * place_of_10000 <NEWLINE> place_of_1000 = num // 1000 <NEWLINE> num -= 1000 * place_of_1000 <NEWLINE> place_of_100 = num // 100 <NEWLINE> num -= 100 * place_of_100 <NEWLINE> place_of_10 = num // 10 <NEWLINE> num -= 10 * place_of_10 <NEWLINE> <NL> tmp = place_of_10000 + place_of_1000 + place_of_100 + place_of_10 + num <NEWLINE> if a <= tmp and tmp <= b : <NEWLINE> <INDENT> ans += num_0 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <DEDENT>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> <NL> for n in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> if A <= sum ( n ) <= B : <NEWLINE> <INDENT> ans += n <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N , A , B = map ( int , [ input ( ) for i in range ( 3 ) ] ) <NEWLINE> s = 0 <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> k = 0 <NEWLINE> j = i <NEWLINE> while ( j > 0 ) : <NEWLINE> <INDENT> k += j % 10 <NEWLINE> j = j // 10 <NEWLINE> <DEDENT> if ( A <= k and k <= B ) : <NEWLINE> <INDENT> s = s + i <NEWLINE> <DEDENT> <DEDENT> print ( s ) <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> if a <= sum ( [ int ( c ) for c in str ( i ) ] ) = > b : <NEWLINE> <INDENT> ans += i <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> n = 0 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> result = sum ( list ( map ( int , str ( i ) ) ) ) <NEWLINE> if result >= a and result <= b : <NEWLINE> <INDENT> ans += i <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> sum = 0 <NEWLINE> for num in range ( N + 1 ) : <NEWLINE> <INDENT> if A <= sum ( [ int ( x ) for x in str ( num ) ] ) <= B : <NEWLINE> <INDENT> sum += num <NEWLINE> <DEDENT> <DEDENT> print ( sum ) <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> cnt = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> n_list = list ( int ( i ) ) <NEWLINE> if sum ( n_list ) >= a and sum ( n_list ) <= b : <NEWLINE> <INDENT> cnt += i <NEWLINE> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> ii = list ( i ) <NEWLINE> ii = sum ( ii ) <NEWLINE> if ii in range ( a , b + 1 ) : <NEWLINE> <INDENT> ans += i <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = int ( input ( ) ) <NEWLINE> B = int ( input ( ) ) <NEWLINE> <NL> sum = 0 <NEWLINE> for i in range ( N + 1 ) : <NEWLINE> <INDENT> nums = list ( str ( i ) ) <NEWLINE> tmp = 0 <NEWLINE> for j in nums : <NEWLINE> <INDENT> tmp = tmp + int ( j ) <NEWLINE> <DEDENT> if A <= tmp : <NEWLINE> <INDENT> if tmp <= B : <NEWLINE> <INDENT> sum = sum + i <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( sum ) <NEWLINE>
import math <NEWLINE> X , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( int ( math . floor ( Y / X , 2 ) + 1 ) ) <NEWLINE>
import math <NEWLINE> <NL> x = input ( ) <NEWLINE> y = input ( ) <NEWLINE> <NL> <NL> cnt = 0 <NEWLINE> <NL> while x <= y : <NEWLINE> <INDENT> x *= 2 <NEWLINE> cnt += 1 <NEWLINE> <NL> <DEDENT> print ( cnt ) <NEWLINE>
s = list ( map ( int , list ( input ( ) ) ) ) <NEWLINE> ans = n <NEWLINE> for i in range ( len ( s ) - 1 ) : <NEWLINE> <INDENT> if s [ i ] != s [ i + 1 ] : <NEWLINE> <INDENT> ans = min ( ans , max ( i + 1 , len ( s ) - i - 1 ) ) <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
S = input ( ) <NEWLINE> l = len ( S ) <NEWLINE> if l % 2 == 1 : <NEWLINE> <INDENT> m = S [ l // 2 ] <NEWLINE> c = 1 <NEWLINE> for i in range l // 2 : <NEWLINE> <INDENT> if S [ l // 2 - i - 1 ] == m and S [ l // 2 + i + 1 ] == m : <NEWLINE> <INDENT> c += 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> ans = c + ( l - c ) // 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> m1 = S [ l // 2 - 1 ] <NEWLINE> m2 = S [ l // 2 ] <NEWLINE> c = 0 <NEWLINE> if m1 == m2 : <NEWLINE> <INDENT> c = 2 <NEWLINE> for i in range l // 2 - 1 : <NEWLINE> if S [ l // 2 - i - 2 ] == m1 and S [ l // 2 + i + 1 ] == m1 : <NEWLINE> <INDENT> c += 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> ans = c + ( l - c ) // 2 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
S = input ( ) <NEWLINE> <NL> a = n <NEWLINE> n = len ( S ) <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if S [ i ] != S [ i + 1 ] : <NEWLINE> <INDENT> a = min ( a , max ( i + 1 , n - i + 1 ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( a ) <NEWLINE>
<COMMENT> <NL> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> X , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> while ( X <= Y ) { <NEWLINE> <INDENT> x *= 2 <NEWLINE> ans += 1 <NEWLINE> <DEDENT> } <NEWLINE> print ( ans ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> multi = math . ceil ( ( a + b ) / 2 ) <NEWLINE> <NL> print ( str ( multi ) ) <NEWLINE>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> import math <NEWLINE> print ( math . celi ( ( x + y ) / 2 ) ) <NEWLINE>
a , b = map ( int , input ( ) ) <NEWLINE> x = ( a + b ) // 2 <NEWLINE> print ( x ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> import math <NEWLINE> print ( math . ceil ( a + b / 2 ) <NEWLINE>
a , b = map ( int , input ( ) . spoit ( ) ) <NEWLINE> print ( ( a + b + 1 ) // 2 ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> x = ( a + b ) / 2 <NEWLINE> if x % 1 == 0 : <NEWLINE> <INDENT> print ( int ( x ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( x ) + 1 ) <NEWLINE> <DEDENT>
import math <NEWLINE> print ( math . ceil ( ( int ( input ( ) ) + int ( input ( ) ) ) / 2 ) ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( min ( N * A , B ) ) <NEWLINE>
a , b = map ( int , input ( ) ) <NEWLINE> import math <NEWLINE> print ( math . ceil ( ( a + b ) / 2 ) ) <NEWLINE>
a , b = int ( input ( ) . split ( ) ) <NEWLINE> <NL> x = ( a + b ) / 2 <NEWLINE> <NL> if x == int ( x ) : <NEWLINE> <INDENT> print ( x ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> x += 1 <NEWLINE> print ( int ( x ) ) <NEWLINE> <DEDENT>
from math import ceil <NEWLINE> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ceil ( ( a + b ) / 2 ) <NEWLINE>
import math <NEWLINE> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> mean = ( a + b ) / 2.0 <NEWLINE> print ( int ( math . ceil ( mean ) ) <NEWLINE>
a , b = map ( int , input ( ) split ( ) ) <NEWLINE> print ( ( a + b ) // 2 ) <NEWLINE>
a , b = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> s = ( a + b ) % 2 <NEWLINE> t = ( a + b ) / 2 <NEWLINE> if s == 0 : <NEWLINE> <INDENT> print ( t ) <NEWLINE> else : <NEWLINE> print ( t + 0.5 ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = math . ceil ( ( a + b ) / 2 ) <NEWLINE> print ( ans ) <NEWLINE> <NL>
<NL> import math <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> x , y = map ( int , input ( ) ) <NEWLINE> print ( math . floor ( ( x + y ) / 2 ) ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ( a + b + 1 ) / 2 ) ) <NEWLINE>
a <NEWLINE>
import math <NEWLINE> a , b = input ( ) . split ( ) <NEWLINE> print ( math . ceil ( a + b / 2 ) ) <NEWLINE>
import math <NEWLINE> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( math . celi ( ( a + b ) / 2 ) ) ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( a + b ) % == 0 : <NEWLINE> <INDENT> print ( ( a + b ) // 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( ( ( a + b ) // 2 ) + 1 ) <NEWLINE> <DEDENT>
import numpy as np <NEWLINE> ab = input ( ) . split ( <STRING> ) <NEWLINE> print ( np . round ( np . mean ( int ( ab [ 0 ] ) , int ( ab [ 1 ] ) ) ) ) <NEWLINE>
import math <NEWLINE> num1 = int ( input ( ) ) <NEWLINE> num2 = int ( input ( ) ) <NEWLINE> X = ( num1 + num2 ) / 2 <NEWLINE> print ( math . ceil ( X ) ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( a + b ) % 2 == 0 : <NEWLINE> <INDENT> print ( round ( ( a + b ) / 2 ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( round ( ( a + b + 1 ) / 2 ) <NEWLINE> <DEDENT>
import math <NEWLINE> a , b = map ( int , input ( ) ) <NEWLINE> print ( math . ceil ( ( a + b ) / 2 ) ) <NEWLINE>
s = list ( input ( ) ) <NEWLINE> t = list ( input ( ) ) <NEWLINE> s1 = s . sort ( ) <NEWLINE> t1 = t . sort ( ) <NEWLINE> if s1 < t1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> <NL> u = sorted ( [ s ] ) <NEWLINE> v = sorted ( [ t ] , reversed = True ) <NEWLINE> <NL> print ( <STRING> if u < v else <STRING> ) <NEWLINE>
S = list ( input ( ) ) <NEWLINE> T = list ( input ( ) ) <NEWLINE> s = [ ] <NEWLINE> t = [ ] <NEWLINE> for i in S : <NEWLINE> <INDENT> s . append ( int ( ord ( i ) ) ) <NEWLINE> <DEDENT> for i in T : <NEWLINE> <INDENT> t . append ( int ( ord ( i ) ) ) <NEWLINE> <NL> <DEDENT> s . sort ( reverse = True ) <NEWLINE> t . sort ( reverse = True ) <NEWLINE> for i in range ( max ( len ( s ) , len ( t ) ) ) : <NEWLINE> <INDENT> if t [ i ] > s [ i ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> elif s [ i ] != t [ i ] : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> if len ( t ) > len ( s ) : <NEWLINE> <INDENT> for i in s : <NEWLINE> <INDENT> if i == len ( s ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif i not in t : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t . remove ( i ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE> <NL>
x = sorted ( list ( input ( ) ) ) <NEWLINE> y = sorted ( list ( input ( ) ) , reverse = true ) <NEWLINE> a = <STRING> <NEWLINE> b = <STRING> <NEWLINE> for ( p , q ) in zip x , y : <NEWLINE> <INDENT> a += p <NEWLINE> b += q <NEWLINE> <DEDENT> if a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <NL> <DEDENT>
s = list ( input ( ) ) <NEWLINE> t = list ( input ( ) ) <NEWLINE> for i in s : <NEWLINE> <INDENT> for j in t : <NEWLINE> <INDENT> if ord ( i ) < ord ( j ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> count = 0 <NEWLINE> if len ( s ) < len ( t ) : <NEWLINE> <INDENT> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] = t [ i ] : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> if count = len ( s ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> <NL> s = list ( input ( ) ) <NEWLINE> t = list ( input ( ) ) <NEWLINE> for i in s : <NEWLINE> <INDENT> for j in t : <NEWLINE> <INDENT> if ord ( i ) < ord ( j ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> S = sorted ( s ) <NEWLINE> T = sorted ( t ) <NEWLINE> count = 0 <NEWLINE> if len ( s ) < len ( t ) : <NEWLINE> <INDENT> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if S [ i ] = S [ i ] : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> if count = len ( s ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> <NL>
a = [ input ( ) for i in range ( 2 ) ] <NEWLINE> <NL> sp = <STRING> . join ( sorted ( list ( a [ 0 ] ) ) ) <NEWLINE> tmp = list ( a [ 1 ] ) <NEWLINE> tmp . sort ( ) . reverse ( ) <NEWLINE> tp = <STRING> . join ( tmp ) <NEWLINE> <NL> if sp < tp : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) . sorted ( ) <NEWLINE> t = input ( ) . sorted ( reverse = True ) <NEWLINE> if ( new_s < new_t ) : print ( <STRING> ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
import sys <NEWLINE> from string import ascii_lowercase as alph <NEWLINE> from itertools import zip_longest <NEWLINE> <NL> s , t = [ list ( l ) for l in sys . stdin . read ( ) . split ( ) ] <NEWLINE> d = dict ( ( w , x ) for w , x in zip ( alph , range ( 26 ) ) ) <NEWLINE> d [ <STRING> ] = - 1 <NEWLINE> s . sort ( key = d . get ) <NEWLINE> t . sort ( key = d . get , reverse = True ) <NEWLINE> for x , y in zip_longest ( s , t , fillvalue = <STRING> ) : <NEWLINE> <INDENT> if d [ x ] < d [ y ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> elif d [ x ] > d [ y ] <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> s = s . sort ( ) <NEWLINE> t = t . sort ( reverse = True ) <NEWLINE> if s < t : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import bisect <NEWLINE> from copy import copy <NEWLINE> from collections import deque , Counter <NEWLINE> from decimal import Decimal <NEWLINE> def s ( ) : return input ( ) <NEWLINE> def i ( ) : return int ( input ( ) ) <NEWLINE> def S ( ) : return input ( ) . split ( ) <NEWLINE> def I ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> def X ( ) : return list ( input ( ) ) <NEWLINE> def L ( ) : return list ( input ( ) . split ( ) ) <NEWLINE> def l ( ) : return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> def lcm ( a , b ) : return a * b // math . gcd ( a , b ) <NEWLINE> def gcd ( * numbers ) : reduce ( math . gcd , numbers ) <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> count = 0 <NEWLINE> ans = 0 <NEWLINE> <NL> a = s ( ) <NEWLINE> t = s ( ) <NEWLINE> <NL> a . sort ( ) <NEWLINE> y = <STRING> . join ( a ) <NEWLINE> t = sorted ( t , reverse = True ) <NEWLINE> x = <STRING> . join ( t ) <NEWLINE> if y < x : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> b = input ( ) <NEWLINE> a = list ( a ) <NEWLINE> b = list ( b ) <NEWLINE> <NL> if ( a . sort ( reverse = True ) < b . sort ( ) ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
S = sorted ( input ( ) ) <NEWLINE> T = sorted ( input ( ) ) <NEWLINE> <NL> print ( <STRING> if ( S < t ) else <STRING> ) <NEWLINE> <NL>
s , t = map ( str , input ( ) . split ( ) ) <NEWLINE> s_array = [ ] <NEWLINE> t_array = [ ] <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> s_array . append ( s [ i ] ) <NEWLINE> <DEDENT> for i in range ( len ( t ) ) : <NEWLINE> <INDENT> t_array . append ( t [ i ] ) <NEWLINE> <NL> <DEDENT> s_array = sorted ( s_array ) <NEWLINE> <NL> t_array = sorted ( t_array , reverse = True ) <NEWLINE> for i in range ( min ( [ len ( s_array ) , len ( t_array ) ] ) ) : <NEWLINE> <INDENT> if s_array [ i ] < t_array [ i ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> elif s_array [ i ] > t_array [ i ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> s . sort ( ) <NEWLINE> t . sort ( reverse = True ) <NEWLINE> for i in range ( min ( len ( s ) , len ( t ) ) ) : <NEWLINE> <INDENT> if ord ( s [ i ] ) == ord ( t [ i ] ) : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> elif ord ( s [ i ] ) < ord ( t [ i ] ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = list ( list ( i for i in input ( ) ) . sort ( ) ) <NEWLINE> t = list ( list ( i for i in input ( ) ) . sort ( ) ( reverse = True ) ) <NEWLINE> A = True <NEWLINE> for i in range ( min ( len ( s ) , len ( t ) ) ) : <NEWLINE> <INDENT> if s [ i ] < t [ i ] : <NEWLINE> <INDENT> A = True <NEWLINE> <DEDENT> elif s [ i ] > t [ i ] : <NEWLINE> <INDENT> A = False <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if len ( s ) < len ( t ) : A = True <NEWLINE> else : A = False <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> if A else <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> ListS = list ( s ) <NEWLINE> ListT = list ( t ) <NEWLINE> ListS . sort ( ) <NEWLINE> ListT . sort ( reverse = True ) <NEWLINE> S = <STRING> <NEWLINE> T = <STRING> <NEWLINE> for i in range ( len ( ListS ) ) : <NEWLINE> <INDENT> S += ListS [ i ] <NEWLINE> <DEDENT> for i in range ( len ( ListT ) ) : <NEWLINE> <INDENT> T += ListT [ i ] <NEWLINE> <DEDENT> if S == T : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> List . append ( S ) <NEWLINE> List . append ( T ) <NEWLINE> List . sort ( ) <NEWLINE> if List [ 0 ] == S : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT>
N = input ( ) <NEWLINE> A = sorted ( [ int ( x ) for x in input ( ) . split ( ) ] ) <NEWLINE> import bisect as bs <NEWLINE> ans = 0 <NEWLINE> f = lambda X , x : bs . bisect_right ( X , x ) - bs . bisect_left ( X . x ) <NEWLINE> for a in set ( A ) : <NEWLINE> <INDENT> cnt = f ( A , a ) <NEWLINE> if cnt < a : <NEWLINE> <INDENT> ans += cnt <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += cnt - a <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> alist = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> from collections import Counter <NEWLINE> adic = Counter ( alist ) <NEWLINE> count = 0 <NEWLINE> for k , v in adic : <NEWLINE> <INDENT> if int ( k ) <= v : <NEWLINE> <INDENT> count += ( v - int ( k ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count += v <NEWLINE> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> * A , = map ( int , input ( ) . split ( ) ) <NEWLINE> dic = { } <NEWLINE> for a in A : <NEWLINE> <INDENT> if a in dic : <NEWLINE> <INDENT> dic [ a ] += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic [ a ] = 1 <NEWLINE> <DEDENT> <DEDENT> for k , v in dic . items ( ) : <NEWLINE> <INDENT> if k == v : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> elif k > v : <NEWLINE> <INDENT> ans += v <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += v - k <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import numpy as np <NEWLINE> MOD = 10 ** 9 + 7 <NEWLINE> <NL> def fft_convolve ( f , g ) : <NEWLINE> <INDENT> Lf , Lg = f . shape [ - 1 ] , g . shape [ - 1 ] <NEWLINE> L = Lf + Lg - 1 <NEWLINE> fft_len = 1 << L . bit_length ( ) <NEWLINE> fh , fl = f >> 15 , f & ( 1 << 15 ) - 1 <NEWLINE> gh , gl = g >> 15 , g & ( 1 << 15 ) - 1 <NEWLINE> def conv ( f , g ) : <NEWLINE> <INDENT> Ff = np . fft . rfft ( f , fft_len ) <NEWLINE> Fg = np . fft . rfft ( g , fft_len ) <NEWLINE> h = np . fft . irfft ( Ff * Fg ) <NEWLINE> return np . rint ( h ) [ ... , : L ] . astype ( np . int64 ) % MOD <NEWLINE> <DEDENT> x = conv ( fl , gl ) <NEWLINE> z = conv ( fh , gh ) <NEWLINE> y = conv ( fl + fh , gl + gh ) - x - z <NEWLINE> return ( x + ( y << 15 ) + ( z << 30 ) ) % MOD <NEWLINE> <NL> <DEDENT> s = input ( ) <NEWLINE> x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> Rob = list ( s . split ( <STRING> ) ) <NEWLINE> <NL> X = [ len ( r ) for r in Rob [ : : 2 ] ] <NEWLINE> Y = [ len ( r ) for r in Rob [ 1 : : 2 ] ] <NEWLINE> <NL> def solve ( ) : <NEWLINE> <INDENT> y = abs ( y ) <NEWLINE> Xst = X [ 0 ] <NEWLINE> X = X [ 1 : ] <NEWLINE> if abs ( x - Xst ) <= sum ( X ) and y <= sum ( Y ) : <NEWLINE> <INDENT> f = np . array ( [ 1 ] , np . int64 ) <NEWLINE> for i in X : <NEWLINE> <INDENT> L = [ 0 ] * ( 2 * i + 1 ) <NEWLINE> L [ 0 ] , L [ - 1 ] = 1 , 1 <NEWLINE> f = np . convolve ( f , np . array ( L , np . int64 ) ) <NEWLINE> <DEDENT> FlagX = f [ abs ( x - Xst ) + sum ( X ) ] <NEWLINE> g = np . array ( [ 1 ] , np . int64 ) <NEWLINE> for j in Y : <NEWLINE> <INDENT> L = [ 0 ] * ( 2 * j + 1 ) <NEWLINE> L [ 0 ] , L [ - 1 ] = 1 , 1 <NEWLINE> g = np . convolve ( g , np . array ( L , np . int64 ) ) <NEWLINE> <DEDENT> FlagY = g [ y + sum ( Y ) ] <NEWLINE> if FlagX and FlagY : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> solve ( ) <NEWLINE>
a = input ( ) <NEWLINE> print ( a . count ( 1 ) ) <NEWLINE>
n = input ( ) <NEWLINE> def sum ( n ) : <NEWLINE> <INDENT> s = str ( n ) <NEWLINE> a = list ( map ( int , s ) ) <NEWLINE> return sum ( a ) <NEWLINE> <NL> <DEDENT> print ( sum ( n ) ) <NEWLINE>
S = map ( int , input ( ) . split ( ) ) <NEWLINE> c = 0 <NEWLINE> <NL> if S % 10 == 1 : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> if S // 100 == 1 : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> if ( S // 10 ) % 10 == 1 : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> print ( c ) <NEWLINE>
a = input ( ) <NEWLINE> print ( a . count ( 1 ) ) <NEWLINE>
str1 = input ( ) <NEWLINE> s_list = list ( str1 ) <NEWLINE> str_len = len ( str1 ) <NEWLINE> n = 0 <NEWLINE> for i in range ( str_len ) : <NEWLINE> <INDENT> if == s_list [ i ] : <NEWLINE> <INDENT> n = n + 1 <NEWLINE> <DEDENT> <DEDENT> print ( n ) <NEWLINE>
s = list ( input ( ) ) <NEWLINE> from collections import Counter <NEWLINE> s_count = s . Counter ( ) <NEWLINE> print ( s_count [ <STRING> ] ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s . sount ( <STRING> ) ) <NEWLINE>
num_list = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> count = 0 <NEWLINE> <NL> for i in range ( 3 ) : <NEWLINE> <INDENT> count += num_list [ i ] <NEWLINE> <NL> <DEDENT> print ( count ) <NEWLINE>
s = input ( ) <NEWLINE> ans = 0 <NEWLINE> if s = 1 : <NEWLINE> <INDENT> ans += <STRING> <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
s = string ( input ( ) ) <NEWLINE> counter = 0 <NEWLINE> <NL> for i in range ( 3 ) : <NEWLINE> <INDENT> print ( s [ i ] ) <NEWLINE> if s [ i ] == 1 : <NEWLINE> <INDENT> counter += 1 <NEWLINE> <DEDENT> <DEDENT> print ( counter ) <NEWLINE>
a = list ( input ( ) ) <NEWLINE> count = 0 <NEWLINE> for i in a : <NEWLINE> <INDENT> if a [ i ] == 1 : count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
from sys import stdin <NEWLINE> a = [ int ( x ) for x in list ( stdin . readline ( ) ) ] <NEWLINE> y = 0 <NEWLINE> <NL> for x in a : <NEWLINE> <INDENT> if x == 1 : <NEWLINE> <INDENT> y += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( y ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( a + b + c ) <NEWLINE>
nums = input ( ) <NEWLINE> print ( nums . count ( 1 ) ) <NEWLINE>
a = input ( ) <NEWLINE> count = 0 <NEWLINE> <NL> count += 1 if a [ 0 ] == 1 <NEWLINE> count += 1 if a [ 1 ] == 1 <NEWLINE> count += 2 if a [ 2 ] == 1 <NEWLINE> print ( count ) <NEWLINE>
s = map ( input ( ) ) <NEWLINE> count = 0 <NEWLINE> if s [ 0 ] == <STRING> : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> if s [ 1 ] == <STRING> : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> if s [ 2 ] == <STRING> : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> count = 0 <NEWLINE> exist_odd = False <NEWLINE> <NL> while exist_odd == False : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> if a [ i ] % 2 != 0 : <NEWLINE> <INDENT> exist_odd = True <NEWLINE> if n != i : <NEWLINE> <INDENT> count -= 1 <NEWLINE> <DEDENT> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a [ i ] = a [ i ] / 2 <NEWLINE> <DEDENT> <DEDENT> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
s = input ( ) <NEWLINE> ans = 0 <NEWLINE> ans += [ int ( i ) for i in s ] <NEWLINE> print ( ans ) <NEWLINE>
<COMMENT> <NL> lol = input ( <STRING> ) <NEWLINE> S1 = int ( lol [ 0 : 0 ] ) <NEWLINE> S2 = int ( lol [ 1 : 1 ] ) <NEWLINE> S3 = int ( lol [ 2 : 2 ] ) <NEWLINE> Ss = [ S1 , S2 , S3 ] <NEWLINE> cnt = 0 <NEWLINE> Ss . sort ( ) <NEWLINE> for 1 in Ss : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> del Ss [ 0 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( cnt ) <NEWLINE> break <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> print ( s . count ( 1 ) ) <NEWLINE>
print ( input ( ) , count ( <STRING> ) ) <NEWLINE>
print ( input ( ) . count ( 1 ) ) <NEWLINE>
for int ( j ) in input ( ) : <NEWLINE> <INDENT> if j == 1 : <NEWLINE> <INDENT> Count += 1 <NEWLINE> <DEDENT> <DEDENT> print ( Count ) <NEWLINE>
<COMMENT> <NL> s = input ( <STRING> ) <NEWLINE> i = 0 <NEWLINE> <COMMENT> <NL> <INDENT> for j in range ( 3 ) : <NEWLINE> <COMMENT> <NL> <INDENT> if s [ j ] == <STRING> : <NEWLINE> <INDENT> i += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> i += 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( i ) <NEWLINE>
print ( intput ( ) . count ( <STRING> ) ) <NEWLINE>
a , b , c = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> <NL> print ( a + b + c ) <NEWLINE>
inp = map ( str , input ( ) ) <NEWLINE> <NL> print ( inp . count ( 1 ) ) <NEWLINE> <NL>
S = list ( input ( ) ) <NEWLINE> print ( sum ( S ) ) <NEWLINE>
print ( input ( ) . count ( 1 ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> while all ( i % 2 == 0 for i in a ) : <NEWLINE> <INDENT> ans += 1 <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> a [ j ] //= 2 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> b = a <NEWLINE> t = - 1 <NEWLINE> s = 0 <NEWLINE> while s == 0 : <NEWLINE> <INDENT> for i in range ( N ) : <NEWLINE> <INDENT> if b [ i ] % 2 != 0 : <NEWLINE> <INDENT> s = 1 <NEWLINE> <DEDENT> b [ i ] = b [ i ] / 2 <NEWLINE> <DEDENT> t = t + 1 <NEWLINE> <DEDENT> print ( t ) <NEWLINE>
str ( s ) = input ( ) <NEWLINE> count = 0 <NEWLINE> for v in range ( 1 , 4 ) : <NEWLINE> <INDENT> if 1 in s [ v ] : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
A , B , C = int ( input ( ) ) <NEWLINE> print ( int ( A ) + int ( B ) + int ( C ) ) <NEWLINE>
a = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( a . count ( 1 ) ) <NEWLINE>
s = input ( ) <NEWLINE> cout = 0 <NEWLINE> for a in s : <NEWLINE> <INDENT> if a == <STRING> <NEWLINE> <INDENT> cout += 1 <NEWLINE> <DEDENT> <DEDENT> print ( cout ) <NEWLINE>
x = str ( input ( ) ) <NEWLINE> a = int ( x [ 0 ] ) <NEWLINE> b = int ( x [ 1 ] 9 <NEWLINE> c = int ( x [ 2 ] ) <NEWLINE> <NL> <NL> print ( a + b + c ) <NEWLINE>
print ( count ( <STRING> ) ) <NEWLINE>
a = input ( ) <NEWLINE> print ( a . count ( <STRING> ) <NEWLINE>
a , b , c = input ( ) . split ( ) <NEWLINE> <NL> i = 0 <NEWLINE> if a == 1 : <NEWLINE> <INDENT> i + + <NEWLINE> <DEDENT> if b == 1 : <NEWLINE> <INDENT> i + + <NEWLINE> <DEDENT> if c == 1 : <NEWLINE> <INDENT> i + + <NEWLINE> <DEDENT> print ( i ) <NEWLINE>
s = input ( ) <NEWLINE> a , b , c = int ( s [ 0 ] ) , int ( s [ 1 ] ) , int ( s [ 2 ] ) <NEWLINE> count = 0 <NEWLINE> if a == 1 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> if b == 1 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> if C == 1 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
x = input ( ) <NEWLINE> X = list ( <STRING> . format ( x ) ) <NEWLINE> A = sum ( X ) <NEWLINE> print ( A ) <NEWLINE>
marbles = input ( ) <NEWLINE> num = marbles . count ( 1 ) <NEWLINE> print ( num ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> c = 0 <NEWLINE> while True : <NEWLINE> <INDENT> for i in range ( N ) : <NEWLINE> <INDENT> if A [ i ] % 2 != 0 : <NEWLINE> <INDENT> print ( c ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> A [ i ] = A [ i ] / 2 <NEWLINE> <DEDENT> <DEDENT> c = c + 1 <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> while 1 : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> if a [ i ] % 2 : <NEWLINE> <INDENT> print ( ans ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> a [ i ] //= 2 <NEWLINE> <DEDENT> ans += 1 <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> if s = <STRING> : <NEWLINE> <INDENT> print ( 3 ) <NEWLINE> <DEDENT> elif s = <STRING> or <STRING> or <STRING> : <NEWLINE> <INDENT> print ( 2 ) <NEWLINE> <DEDENT> elif s = <STRING> or <STRING> or <STRING> : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> else s = <STRING> : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> ans = s . count ( 1 ) <NEWLINE> print ( ans ) <NEWLINE>
s = input ( ) <NEWLINE> for x in s : <NEWLINE> <INDENT> if x != <STRING> : <NEWLINE> <INDENT> count = count + 1 <NEWLINE> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
s = int ( input ( ) ) <NEWLINE> a = s . count ( 1 ) <NEWLINE> print ( a ) <NEWLINE>
s = input ( ) <NEWLINE> count = 0 <NEWLINE> for i for range ( 3 ) : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
S1 , S2 , S3 = map ( str , input ( ) . split ( ) ) <NEWLINE> input_sum = str ( S1 + S2 + S3 ) <NEWLINE> <NL> print ( input_sum . count ( <STRING> ) ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s . count ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> print ( count ( <STRING> ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> print ( n . count ( 1 ) ) <NEWLINE>
import sys <NEWLINE> <NL> args = sys . argv <NEWLINE> <NL> <COMMENT> <NL> <NL> def f ( arg_list ) : <NEWLINE> <INDENT> even_arg_list = [ ] <NEWLINE> for i in arg_list : <NEWLINE> <INDENT> if i % 2 == 0 : <NEWLINE> <INDENT> even_arg_list . append ( i / 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> return even_arg_list <NEWLINE> <NL> <NL> <DEDENT> counter = 0 <NEWLINE> _list = map ( lambda x : int ( x ) , args [ 1 : ] ) <NEWLINE> while True : <NEWLINE> <INDENT> _list = f ( _list ) <NEWLINE> if _list == False : <NEWLINE> <INDENT> print ( counter ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> counter += 1 <NEWLINE> <COMMENT> <NL> <DEDENT>
N = input ( ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> def GCD ( a , b ) : <NEWLINE> <INDENT> if a < b : <NEWLINE> <INDENT> a , b = b , a <NEWLINE> <DEDENT> while a % b != 0 : <NEWLINE> <INDENT> a , b = b , a % b <NEWLINE> <DEDENT> print ( b ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> for i in range ( N - 1 ) : <NEWLINE> <INDENT> ans = GCD ( A [ i ] , A [ i + 1 ] ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE> <NL> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = np . array ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <NL> count = 0 <NEWLINE> while 1 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> while A [ i ] % 2 == 0 : <NEWLINE> <INDENT> A [ i ] = A [ i ] / 2 <NEWLINE> cnt = cnt + 1 <NEWLINE> <DEDENT> ans . append ( cnt ) <NEWLINE> <DEDENT> print ( min ( sns ) ) <NEWLINE>
from sys import stdin <NEWLINE> <NL> n = stdin . readline ( ) . rstrip ( ) <NEWLINE> a = [ int ( x ) for x in stdin . readline ( ) . rstrip ( ) . split ( ) ] <NEWLINE> <NL> count = 0 <NEWLINE> b = a [ 0 ] <NEWLINE> while True : <NEWLINE> <INDENT> if b % 2 == 1 : break <NEWLINE> b = b // 2 <NEWLINE> count = count + 1 <NEWLINE> <DEDENT> minc = count <NEWLINE> <NL> for b in a [ 1 : ] : <NEWLINE> <INDENT> count = 0 <NEWLINE> while True : <NEWLINE> <INDENT> if b % 2 == 1 : break <NEWLINE> b = b // 2 <NEWLINE> count = count + 1 <NEWLINE> <NL> <DEDENT> minc = min ( [ minc , count ] ) <NEWLINE> <NL> <DEDENT> print ( minc ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> count = 0 <NEWLINE> while ( true ) : <NEWLINE> <INDENT> flag = 0 <NEWLINE> for i in range ( 0 , a , 1 ) : <NEWLINE> <INDENT> if ( b [ i ] % 2 == 1 ) : <NEWLINE> <INDENT> flag = 1 <NEWLINE> <DEDENT> <DEDENT> if flag == 1 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> for i in range ( 0 , a , 1 ) : <NEWLINE> <INDENT> b [ i ] /= 2 <NEWLINE> <DEDENT> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
a = input ( ) <NEWLINE> b = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = [ ] <NEWLINE> max_b = max ( b ) <NEWLINE> d = 0 <NEWLINE> for i in b <NEWLINE> <INDENT> while i % 2 = 0 <NEWLINE> <INDENT> i = i / 2 <NEWLINE> d += 1 <NEWLINE> <DEDENT> ans . append ( d ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
n = input ( ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> while all ( _ % 2 == 0 for _ in a ) : <NEWLINE> <INDENT> a = [ _ / 2 for _ in a ] <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = input ( ) <NEWLINE> l = input ( ) . split ( ) <NEWLINE> cnt = 0 <NEWLINE> while len ( [ True for x in l if x % 2 == 0 ] ) : <NEWLINE> <INDENT> l = [ x / 2 for x in l ] <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> print ( cnt ) <NEWLINE>
import math <NEWLINE> N = input ( ) . int ( ) <NEWLINE> A = map ( int , input ( ) . split ( ) ) <NEWLINE> B = map ( bin , A ) <NEWLINE> def Y ( x ) : <NEWLINE> <INDENT> y = len ( x ) - x . rfind ( <STRING> ) - 1 <NEWLINE> return y <NEWLINE> <DEDENT> C = map ( Y , B ) <NEWLINE> print ( min ( C ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> cnt = 0 <NEWLINE> <NL> while all ( i % 2 == 0 for i in a ) : <NEWLINE> <INDENT> A = [ i // 2 for i in a ] <NEWLINE> cnt += 1 <NEWLINE> <NL> <DEDENT> print ( cnt ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> n_length = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> counter = 0 <NEWLINE> while all ( i % 2 == 0 for i in n_length ) : <NEWLINE> <INDENT> n_list = [ i / 2 for i in n_length ] <NEWLINE> counter = + 1 <NEWLINE> <DEDENT> print ( counter ) <NEWLINE>
x = int ( input ( ) ) <NEWLINE> y = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> count = 0 <NEWLINE> <NL> for i in y : <NEWLINE> <INDENT> if i % 2 = 0 : <NEWLINE> <INDENT> y [ i ] == i % 2 <NEWLINE> count += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pass <NEWLINE> <NL> <DEDENT> <DEDENT>
num = int ( input ( ) ) <NEWLINE> <NL> vals = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> cnt = 0 <NEWLINE> while ( True ) <NEWLINE> <INDENT> for i in range ( num ) : <NEWLINE> <INDENT> if vals [ i ] % 2 == 1 : <NEWLINE> <INDENT> print ( cnt ) <NEWLINE> break <NEWLINE> else : <NEWLINE> vals [ i ] = vals [ i ] / 2 <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> count = 1 <NEWLINE> <NL> while all ( a [ i ] % ( 2 ** count ) == 0 ) : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> print ( count - 1 ) <NEWLINE>
N = input ( ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> cnt = 0 <NEWLINE> while True : <NEWLINE> <INDENT> odd_flag = False <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if A [ i ] % 2 == 1 : <NEWLINE> <INDENT> odd_flag = True <NEWLINE> <DEDENT> <DEDENT> if odd_flag : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> A [ i ] = A [ i ] // 2 <NEWLINE> <DEDENT> cnt += 1 <NEWLINE> <NL> <DEDENT> print ( cnt ) <NEWLINE>
n = input ( ) <NEWLINE> <NL> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> counts = 0 <NEWLINE> while all ( a % 2 == 0 for a in A ) : <NEWLINE> <INDENT> A = [ a / 2 for a in A ] <NEWLINE> <INDENT> counts += 1 <NEWLINE> <DEDENT> <DEDENT> print ( counts ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> li = list ( map ( int , input ( ) . split ( ) ) <NEWLINE> b = float ( <STRING> ) <NEWLINE> <NL> for a in li : <NEWLINE> <INDENT> c = 0 <NEWLINE> while a % 2 == 0 : <NEWLINE> <INDENT> a = a / 2 <NEWLINE> c += 1 <NEWLINE> <DEDENT> b = min ( b , c ) <NEWLINE> <DEDENT> print ( b ) <NEWLINE> <NL>
import math <NEWLINE> N = input ( ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> for i in a : <NEWLINE> <INDENT> B = min ( len ( bin ( i ) ) - bin ( i ) . rfind ( <STRING> ) - 1 ) <NEWLINE> <DEDENT> print ( B ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> cnt = 0 <NEWLINE> <NL> while all ( i % 2 == 0 for i in a ) : <NEWLINE> <INDENT> A = [ i // 2 for i in a ] <NEWLINE> cnt += 1 <NEWLINE> <NL> <DEDENT> print ( cnt ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> n = int ( input ( ) ) <NEWLINE> ai = list ( map ( int ( ) , input . split ( ) ) ) <NEWLINE> b = [ ] <NEWLINE> for a in ai : <NEWLINE> <INDENT> count = 0 <NEWLINE> while a % 2 == 0 : <NEWLINE> <INDENT> count += 1 <NEWLINE> a /= 2 <NEWLINE> <DEDENT> b . append ( count ) <NEWLINE> <DEDENT> print ( min ( b ) ) <NEWLINE>
n = input ( ) <NEWLINE> a_list = input ( ) . split ( <STRING> ) <NEWLINE> <NL> def count_divide ( number , max_cnt = - 1 ) : <NEWLINE> <INDENT> count = 0 <NEWLINE> mod = - 1 <NEWLINE> while mod != 0 : <NEWLINE> <INDENT> q , mod = divmod ( number ) <NEWLINE> count += 1 <NEWLINE> if max_cnt != - 1 & count >= max_cnt : <NEWLINE> <INDENT> return max_cnt <NEWLINE> <DEDENT> <DEDENT> return count <NEWLINE> <NL> <DEDENT> result = - 1 <NEWLINE> for a in a_list : <NEWLINE> <INDENT> result = count_divide ( int ( a ) , result ) <NEWLINE> <DEDENT> print ( result ) <NEWLINE>
import math <NEWLINE> n = input ( ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = float ( <STRING> ) <NEWLINE> for i in a : <NEWLINE> <INDENT> ans = min ( ans , len ( bin ( i ) ) - bin ( i ) . rfind ( <STRING> ) - 1 ) <NEWLINE> <DEDENT> print ( round ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> an = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> n = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if an % 2 == 0 : <NEWLINE> <INDENT> n += 1 <NEWLINE> <DEDENT> <DEDENT> print ( an / 2 ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> flag = 0 <NEWLINE> nums = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> cnt = 0 <NEWLINE> <NL> while flag == 0 : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> num = nums [ 0 ] / 2 <NEWLINE> key = nums [ 0 ] % 2 <NEWLINE> if key == 1 : <NEWLINE> <INDENT> flag == 1 <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> del nums [ 0 ] <NEWLINE> nums . append ( num ) <NEWLINE> <DEDENT> <DEDENT> if flag == 0 : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> while True : <NEWLINE> <INDENT> for i in l : <NEWLINE> <INDENT> if i % 2 != 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> ans += 1 <NEWLINE> l = [ i / 2 for i in l ] <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
INPUT = [ input ( ) for i in range ( 2 ) ] <NEWLINE> INPUT = list ( map ( int , INPUT ) ) <NEWLINE> <NL> def check_even ( l ) : <NEWLINE> <INDENT> return sum ( [ i % 2 for i in INPUT ] ) == 0 <NEWLINE> <NL> <DEDENT> check_even ( INPUT ) <NEWLINE> <NL> count = 0 <NEWLINE> while True : <NEWLINE> <INDENT> if check_even ( INPUT ) : <NEWLINE> <INDENT> INPUT = [ i / 2 for i in INPUT ] <NEWLINE> count += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
import numpy as num <NEWLINE> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ary = num . array ( A ) <NEWLINE> b = len ( A ) <NEWLINE> S = 1 <NEWLINE> ans = 0 <NEWLINE> while True : <NEWLINE> <INDENT> for i in range ( b ) : <NEWLINE> <INDENT> S *= A [ i ] <NEWLINE> <DEDENT> if S % 2 == 0 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> ary = ary / 2 <NEWLINE> ary = A <NEWLINE> S = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( ans ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
N = int ( input ( ) ) <NEWLINE> List = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> flag = True <NEWLINE> res = 0 <NEWLINE> while flag : <NEWLINE> <INDENT> for i in range ( N ) : <NEWLINE> <INDENT> if List [ i ] & 2 == 1 : <NEWLINE> <INDENT> flag = False <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if not flag : <NEWLINE> <INDENT> res += 1 <NEWLINE> <DEDENT> <DEDENT> print ( res ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> s = list ( map ( it , input ( ) . split ( ) ) ) <NEWLINE> count = - 0 <NEWLINE> while all ( i % 2 == 0 for i in s ) : <NEWLINE> <INDENT> s = [ i / 2 for i in s ] <NEWLINE> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> count = 0 <NEWLINE> while all ( a % 2 == 0 for a in A ) : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( input ( ) . split ( ) ) <NEWLINE> <NL> ans = float ( <STRING> ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> a = A [ i ] <NEWLINE> ans_tmp = 0 <NEWLINE> while a % 2 == 0 : <NEWLINE> <INDENT> a = a // 2 <NEWLINE> ans_tmp += 1 <NEWLINE> <DEDENT> ans = min ( ans_tmp , ans ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> cnt = 0 <NEWLINE> while all ( a % 2 == 0 for a in l ) : <NEWLINE> <INDENT> l = [ a / 2 for a in l ] <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ map ( int , input ( ) . split ( ) ) ] <NEWLINE> l = [ 0 for i in range ( n ) ] <NEWLINE> for i in range ( len ( a ) ) : <NEWLINE> <INDENT> while a [ i ] % 2 == 0 : <NEWLINE> <INDENT> a [ i ] /= 2 <NEWLINE> l [ i ] += 1 <NEWLINE> <DEDENT> <DEDENT> print ( min ( l ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> t = True <NEWLINE> x = 0 <NEWLINE> <NL> while T == True : <NEWLINE> <INDENT> x += 1 <NEWLINE> for i in a : <NEWLINE> <INDENT> if i % 2 == 0 : <NEWLINE> <INDENT> a = list ( map ( lambda x : x / 2 , a ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t = False <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( x ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> count = 0 <NEWLINE> <NL> while all ( i % 2 == 0 for i in A ) : <NEWLINE> <INDENT> a = [ j / 2 for j in a ] <NEWLINE> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = map ( int , input ( ) . split ( ) ) <NEWLINE> while True : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> if a [ i ] % 2 == 1 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> a [ i ] = a [ i ] // 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += 1 <NEWLINE> continue <NEWLINE> <DEDENT> break <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> cnt = 0 <NEWLINE> while True : <NEWLINE> <INDENT> if [ a % 2 for a in A ] == [ 0 ] * N : <NEWLINE> <INDENT> A = [ a // 2 for a in A ] <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE> <NL> <NL>
import ( sys ) <NEWLINE> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = 0 <NEWLINE> while ( True ) : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> if ( a [ i ] % 2 != 0 ) : <NEWLINE> <INDENT> print ( b ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> a [ i ] = a [ i ] // 2 <NEWLINE> <DEDENT> b += 1 <NEWLINE> <DEDENT> print ( b ) <NEWLINE>
def actual ( N , A ) : <NEWLINE> <INDENT> count = 0 <NEWLINE> <NL> while True : <NEWLINE> <INDENT> is_all_even = all ( [ a % 2 == 0 for a in A ] ) <NEWLINE> <NL> if is_all_even : <NEWLINE> <INDENT> A = [ a // 2 for a in A ] <NEWLINE> count += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> return count <NEWLINE> <NL> <DEDENT> N = int ( input ( ) ) <NEWLINE> A = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( actual ( N , A ) ) <NEWLINE>
import sys <NEWLINE> <NL> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> read = sys . stdin . buffer . read <NEWLINE> sys . setrecursionlimit ( 10 ** 7 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> <NL> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> <NL> ans = INF <NEWLINE> for a in A : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> while True : <NEWLINE> <INDENT> q , mod = divmod ( a , 2 ) <NEWLINE> if mod != 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> cnt += 1 <NEWLINE> a = q <NEWLINE> <DEDENT> ans = min ( ans , cnt ) <NEWLINE> <DEDENT> print ( ants ) <NEWLINE>
import copy <NEWLINE> <NL> kaisu = int ( input ( ) ) <NEWLINE> <NL> s_suji_list = input ( ) . split ( <STRING> ) <NEWLINE> suji_list = [ ] <NEWLINE> count = 0 <NEWLINE> cotinule_flg = True <NEWLINE> for suji in s_suji_list : <NEWLINE> <INDENT> i_suji = int ( suji ) <NEWLINE> if suji % 2 == 0 : <NEWLINE> <INDENT> suji_list . append ( suji / 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> continue_flg = False <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> count = 1 <NEWLINE> <NL> while ( continue_flg ) : <NEWLINE> <INDENT> temp_list = copy . copy ( suji_list ) <NEWLINE> suji_list . clear ( ) <NEWLINE> count += 1 <NEWLINE> for suji in temp_list : <NEWLINE> <INDENT> if suji % 2 == 0 : <NEWLINE> <INDENT> suji_list . append ( suji / 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count -= 1 <NEWLINE> continue_flg = False <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
def d ( n ) : <NEWLINE> <INDENT> while n % 2 == 0 : <NEWLINE> <INDENT> n /= 2 <NEWLINE> ans += 1 <NEWLINE> <DEDENT> return ans <NEWLINE> <NL> <DEDENT> n = int ( input ( ) ) <NEWLINE> a = map ( int , input ( ) . split ( ) ) <NEWLINE> t = min ( list ( map ( d , a ) ) ) <NEWLINE> <NL> print ( t ) <NEWLINE> <NL>
N = int ( input ( ) ) <NEWLINE> a = [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> b = a <NEWLINE> t = 0 <NEWLINE> s = sum ( b ) <NEWLINE> while s % 2 == 0 : <NEWLINE> <INDENT> for i in range ( N ) : <NEWLINE> <INDENT> b [ i ] = b [ i ] / 2 <NEWLINE> t = t + 1 <NEWLINE> <DEDENT> <DEDENT> print ( t ) <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> Xl = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> from collections import Counter <NEWLINE> Xdic = Counter ( xl ) <NEWLINE> valuelist = sorted ( list ( Xdic . values ( ) ) , reverse = True ) <NEWLINE> print ( sum ( valuelist [ k : ] ) ) <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> if ( len ( set ( a ) ) <= k ) : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic_a = { x : 0 for x in set ( A ) } <NEWLINE> for i in a : <NEWLINE> <INDENT> dic_a [ i ] += 1 <NEWLINE> <DEDENT> sum = 0 <NEWLINE> a = sorted ( dic_a . items ( ) , key = lambda x : x [ 0 ] ) <NEWLINE> for i in range ( k , len ( a ) ) : <NEWLINE> <INDENT> sum += a [ i ] [ 1 ] <NEWLINE> <DEDENT> print ( sum ) <NEWLINE> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> freq = [ 0 ] * n + 1 <NEWLINE> for i in l : <NEWLINE> <INDENT> freq [ i ] += 1 <NEWLINE> <DEDENT> freq . sort ( ) <NEWLINE> vf = len ( freq ) - k if len ( freq ) > k else 0 <NEWLINE> print ( sum ( freq [ : vf ] ) ) <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = [ 0 ] * n <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> b [ a [ i ] ] += 1 <NEWLINE> <DEDENT> c = [ i for i in b if i != 0 ] <NEWLINE> c . sort ( ) <NEWLINE> if len ( c ) - k > 0 : <NEWLINE> <INDENT> print ( sum ( ( c [ 0 : len ( c ) - k ] ) ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a = [ 0 ] * 10 ** 8 <NEWLINE> cnt = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if a [ A [ i ] ] == 0 : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> a [ A [ i ] ] += 1 <NEWLINE> <DEDENT> a . sort ( reverse = True ) <NEWLINE> sum = 0 <NEWLINE> for i in range ( cnt - K ) : <NEWLINE> <INDENT> sum += a [ cnt - i - 1 ] <NEWLINE> <NL> <DEDENT> print ( sum ) <NEWLINE>
from collections import defaultdict <NEWLINE> <NL> n , k = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> d = defaultdict ( int ) <NEWLINE> for x in a : <NEWLINE> <INDENT> d [ x ] += 1 <NEWLINE> <NL> <DEDENT> av = reverse ( sorted ( d . values ( ) ) ) <NEWLINE> ks = 0 <NEWLINE> idx = 0 <NEWLINE> while ks < k : <NEWLINE> <INDENT> ks += av [ idx ] <NEWLINE> idx += 1 <NEWLINE> <DEDENT> print ( idx ) <NEWLINE>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> A . sort ( ) <NEWLINE> temp = 1 <NEWLINE> V = [ ] <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if A [ i ] == A [ i + 1 ] : <NEWLINE> <INDENT> temp += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> V . append ( temp ) <NEWLINE> temp = 1 <NEWLINE> <NL> <DEDENT> <DEDENT> V . append ( temp ) <NEWLINE> V . sort ( ) <NEWLINE> ans = N - sum ( V [ - k : ] ) <NEWLINE> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> mina = min ( A ) <NEWLINE> mini = A . index ( mina ) <NEWLINE> maxa = max ( A ) <NEWLINE> maxi = A . index ( mixa ) <NEWLINE> <NL> if mina >= 0 : <NEWLINE> <INDENT> print ( N - 1 ) <NEWLINE> for i in range ( N - 1 ) : <NEWLINE> <INDENT> print ( <STRING> . format ( i + 1 , i + 2 ) ) <NEWLINE> <DEDENT> <DEDENT> elif maxa < 0 : <NEWLINE> <INDENT> print ( N - 1 ) <NEWLINE> for i in range ( N - 1 ) : <NEWLINE> <INDENT> print ( <STRING> . format ( N - i , N - i - 1 ) ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if - mina < maxa : <NEWLINE> <INDENT> print ( 2 * N - 1 ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> print ( <STRING> . format ( maxi + 1 , i + 1 ) ) <NEWLINE> <DEDENT> for i in range ( N - 1 ) : <NEWLINE> <INDENT> print ( <STRING> . format ( i + 1 , i + 2 ) ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( 2 * N - 1 ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> print ( <STRING> . format ( mini + 1 , i + 1 ) ) <NEWLINE> <DEDENT> for i in range ( N - 1 ) : <NEWLINE> <INDENT> print ( <STRING> . format ( N - i , N - i - 1 ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
I = int ( input ( ) ) <NEWLINE> L = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> print ( 2 * I - 1 , flush = True ) <NEWLINE> <NL> m = 0 <NEWLINE> for i , item in enumerate ( L ) : <NEWLINE> <INDENT> if abs ( item ) > abs ( m ) : <NEWLINE> <INDENT> m = item <NEWLINE> m_index = i <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( L ) : <NEWLINE> <INDENT> print ( m_index + 1 , i + 1 , flush = True ) <NEWLINE> <NL> <DEDENT> if m >= 0 : <NEWLINE> <INDENT> for i in range ( 0 , I - 1 ) : <NEWLINE> <INDENT> print ( i + 1 , i + 2 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( I , 0 ) : <NEWLINE> <INDENT> print ( i , i - 1 ) <NEWLINE> <DEDENT> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> a1 = sorted ( a ) <NEWLINE> a2 = [ ] <NEWLINE> count = 0 <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if a1 [ i ] == a1 [ i + 1 ] : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a2 . append ( count ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> a2 . append ( count ) <NEWLINE> l = sorted ( a2 ) <NEWLINE> print ( sun ( l [ : len ( l ) - k - 1 ] ) ) <NEWLINE>
from collections import Counter <NEWLINE> N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> N = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> A = Counter ( N ) <NEWLINE> C = list ( A . values ( ) ) <NEWLINE> C = C . sort ( reverse = True ) <NEWLINE> if len ( C ) <= K : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = sum ( C [ - ( len ( C ) - K ) : ] ) <NEWLINE> print ( ans ) <NEWLINE> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> kaburi = [ ] <NEWLINE> <NL> for i in range ( n ) : <NEWLINE> <INDENT> if not a [ i ] in kaburi : <NEWLINE> <INDENT> kaburi . append ( a [ i ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> kaisu = 0 <NEWLINE> <NL> while True : <NEWLINE> <INDENT> p = n <NEWLINE> q = 0 <NEWLINE> if k >= len ( kaburi ) : <NEWLINE> <INDENT> print ( kaisu ) <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for j in range ( len ( kaburi ) ) : <NEWLINE> <INDENT> p = min ( p , a . count ( kaburi [ j ] ) ) <NEWLINE> if p > a . count ( kaburi [ j ] ) : <NEWLINE> <INDENT> q = kaburi [ j ] <NEWLINE> <DEDENT> <DEDENT> kaisu += p <NEWLINE> print ( p , q , kaisu , len ( kaburi ) ) <NEWLINE> kaburi . remove ( q ) <NEWLINE> <DEDENT> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> import sys <NEWLINE> import numpy as np <NEWLINE> ikimasu = sys . stdin . buffer . readline <NEWLINE> ini = lambda : int ( ins ( ) ) <NEWLINE> ina = lambda : list ( map ( int , ikimasu ( ) . split ( ) ) ) <NEWLINE> ins = lambda : ikimasu ( ) . strip ( ) <NEWLINE> <NL> n = ini ( ) <NEWLINE> tmp = ina ( ) <NEWLINE> num , index = 0 , 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if ( abs ( tmp [ i ] ) > num ) : <NEWLINE> <INDENT> num , index = tmp [ i ] , i <NEWLINE> <DEDENT> <DEDENT> print ( 2 n - 2 ) <NEWLINE> if ( num <= 0 ) : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> if ( i != index ) : <NEWLINE> <INDENT> print ( index + 1 , i + 1 ) <NEWLINE> <DEDENT> <DEDENT> for i in range ( n , 1 , - 1 ) : <NEWLINE> <INDENT> print ( i , i - 1 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> if ( i != index ) : <NEWLINE> <INDENT> print ( index + 1 , i + 1 ) <NEWLINE> <DEDENT> <DEDENT> for i in range ( 1 , n ) : <NEWLINE> <INDENT> print ( i , i + 1 ) <NEWLINE> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <DEDENT> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
<NL> if N * A < B : <NEWLINE> <INDENT> print ( N * A ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( B ) <NEWLINE> <DEDENT>
a , b , c = input ( ) . split ( ) <NEWLINE> if a * b <= c : <NEWLINE> <INDENT> print ( int ( a * b ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( c ) <NEWLINE> <DEDENT>
N , A , B = map ( int , input ( ) ) <NEWLINE> <NL> if N * A <= B : <NEWLINE> <INDENT> print ( N * A ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( B ) <NEWLINE> <DEDENT>
N , A , B = map ( int , input ( ) , split ( ) ) <NEWLINE> print ( min ( N * A , B ) ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ) <NEWLINE> print ( min ( N * A , B ) ) <NEWLINE>
n , a , b = map ( int , intput ( ) . split ( ) ) <NEWLINE> a = n * a <NEWLINE> print ( min ( a , b ) ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( min ( A * T , B ) ) <NEWLINE>
<COMMENT> <NL> <NL> n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( min ( n * a ) , b ) <NEWLINE>
<COMMENT> <NL> n = input ( ) <NEWLINE> print ( <STRING> if sum ( map ( int , n ) ) % n == 0 else <STRING> ) <NEWLINE>
N = input ( ) <NEWLINE> if N % sum ( map ( int , N ) ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = input ( ) <NEWLINE> Nnum = int ( N ) <NEWLINE> Nls = list ( N ) <NEWLINE> FN = sum ( Nls ) <NEWLINE> if Nnum % FN == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = input ( ) <NEWLINE> a = int ( N ) <NEWLINE> b = list ( N ) <NEWLINE> sum = 0 <NEWLINE> <NL> for i in b : <NEWLINE> <INDENT> sum += i <NEWLINE> <NL> <DEDENT> if a % sum == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x = input ( ) <NEWLINE> a = int ( x ) <NEWLINE> b = list ( x ) <NEWLINE> b = sum ( b ) <NEWLINE> <NL> if a % b == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> s = 0 <NEWLINE> while N // 10 > 0 <NEWLINE> <INDENT> a = N % 10 <NEWLINE> s += a <NEWLINE> N = N // 10 <NEWLINE> <DEDENT> if N % s == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = input ( ) <NEWLINE> m = list ( n ) <NEWLINE> if int ( n ) % sum ( m ) == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = input ( ) <NEWLINE> f = 0 <NEWLINE> for i in range ( len ( n ) ) : <NEWLINE> <INDENT> f += n [ i ] <NEWLINE> <DEDENT> if int ( n ) % f == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> sum = 0 <NEWLINE> for i in str ( n ) : <NEWLINE> <INDENT> sum += int ( i ) <NEWLINE> <DEDENT> if ( N % sum == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> str_n = str ( n ) <NEWLINE> wa = 0 <NEWLINE> for i in range ( len ( str_n ) ) : <NEWLINE> <INDENT> wa += int ( str_n [ i ] ) <NEWLINE> <DEDENT> if x % wa == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = input ( ) <NEWLINE> a = sum ( map ( int , str ( N ) ) ) <NEWLINE> if N % a == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = list ( input ( ) ) <NEWLINE> N = int ( sum ( n ) ) <NEWLINE> M = 0 <NEWLINE> for i in range ( len ( n ) ) : <NEWLINE> <INDENT> M += int ( n [ i ] ) <NEWLINE> <DEDENT> if N % M == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> F = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( N ) ] <NEWLINE> P = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( N ) ] <NEWLINE> <NL> ans = - 10 ** 9 <NEWLINE> for i in range ( 2 ** 10 - 1 ) : <NEWLINE> <INDENT> Bit = [ 1 ] ** 10 <NEWLINE> for j in range ( 10 ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> Bit [ j ] = 0 <NEWLINE> <DEDENT> <DEDENT> count = 0 <NEWLINE> for k in range ( N ) : <NEWLINE> <INDENT> op = sum ( b & f for b , f in zip ( Bit , F [ k ] ) ) <NEWLINE> count += P [ k ] [ op ] <NEWLINE> <DEDENT> ans = max ( ans , count ) <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> F = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( N ) ] <NEWLINE> P = [ [ int ( i ) for i in input ( ) . split ( ) ] for j in range ( N ) ] <NEWLINE> <NL> ci = 0 <NEWLINE> c = [ ] <NEWLINE> P_max = - 1000000000 <NEWLINE> for i in range ( 2 ) : <NEWLINE> <INDENT> for j in range ( 2 ) : <NEWLINE> <INDENT> for k in range ( 2 ) : <NEWLINE> <INDENT> for l in range ( 2 ) : <NEWLINE> <INDENT> for m in range ( 2 ) : <NEWLINE> <INDENT> for n in range ( 2 ) : <NEWLINE> <INDENT> for o in range ( 2 ) : <NEWLINE> <INDENT> for p in range ( 2 ) : <NEWLINE> <INDENT> for q in range ( 2 ) : <NEWLINE> <INDENT> for r in range ( 2 ) : <NEWLINE> <INDENT> if i == j == k == l == m == n == o == p == q == r == 0 : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> for s in range ( N ) : <NEWLINE> <INDENT> ci = F [ s ] [ 0 ] * i + F [ s ] [ 1 ] * j + F [ s ] [ 2 ] * k + F [ s ] [ 3 ] * l + F [ s ] [ 4 ] * m + F [ s ] [ 5 ] * n + F [ s ] [ 6 ] * o + F [ s ] [ 7 ] * p + F [ s ] [ 8 ] * q + F [ s ] [ 9 ] * r <NEWLINE> c . append ( ci ) <NEWLINE> <DEDENT> P_sample = P [ 0 ] [ c [ 0 ] ] + P [ 1 ] [ c [ 1 ] ] + P [ 2 ] [ c [ 2 ] ] + P [ 3 ] [ c [ 3 ] ] + P [ 4 ] [ c [ 4 ] ] + P [ 5 ] [ c [ 5 ] ] + P [ 6 ] [ c [ 6 ] ] + P [ 7 ] [ c [ 7 ] ] + P [ 8 ] [ c [ 8 ] ] + P [ 9 ] [ c [ 9 ] ] <NEWLINE> P_max = max ( P_max , P_sample ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( P_max ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> F = [ [ ] for TF in range ( 0 , N ) ] <NEWLINE> for TF in range ( 0 , N ) : <NEWLINE> <INDENT> F [ TF ] = [ int ( T ) for T in input ( ) . split ( ) ] <NEWLINE> <DEDENT> P = [ [ ] for TP in range ( 0 , N ) ] <NEWLINE> for TP in range ( 0 , N ) : <NEWLINE> <INDENT> P [ TP ] = [ int ( T ) for T in input ( ) . split ( ) ] <NEWLINE> <NL> <DEDENT> MAXB = - 10 ** 9 <NEWLINE> for TB in range ( 1 , 2 ** 10 ) : <NEWLINE> <INDENT> BaseConv , BaseSInd = ForBaseConvert ( TB , 10 , 2 ) <NEWLINE> Benefit = 0 <NEWLINE> for TN in range ( 0 , N ) : <NEWLINE> <INDENT> Count = sum ( 1 if F [ TN ] [ TT ] == 1 else 0 for TT in BaseSInd [ 1 ] ) <NEWLINE> Benefit += P [ TN ] [ Count ] <NEWLINE> <DEDENT> if MAXB < Benefit : <NEWLINE> <INDENT> MAXB = Benefit <NEWLINE> <DEDENT> <DEDENT> print ( MAXB ) <NEWLINE>
import sys <NEWLINE> n = int ( input ( ) ) <NEWLINE> F = [ list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) for _ in range ( n ) ] <NEWLINE> P = [ list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) for _ in range ( n ) ] <NEWLINE> ans = 0 <NEWLINE> for i in range ( 1 , pow ( 2 , 10 ) ) : <NEWLINE> <INDENT> b = bin ( i ) [ 2 : ] . zfill ( 10 ) <NEWLINE> t = 0 <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> c = 0 <NEWLINE> for k in range ( 10 ) : <NEWLINE> <INDENT> if int ( b [ k ] ) and F [ j ] [ k ] : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> <DEDENT> a += P [ j ] [ c ] <NEWLINE> <DEDENT> ans = max ( ans , a ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
import sys <NEWLINE> import numpy as np <NEWLINE> readline = sys . stdin . readline <NEWLINE> read = sys . stdin . read <NEWLINE> <NL> n , c , * stc = map ( int , read ( ) ) <NEWLINE> m = 2 * 10 ** 5 <NEWLINE> cht = np . zeros ( ( c , m + 1 ) , dtype = <STRING> ) <NEWLINE> for s , t , c in zip ( * [ iter ( stc ) ] * 3 ) : <NEWLINE> <INDENT> cht [ c - 1 , 2 * t - 1 : 2 * s ] = np . ones ( 2 * t - 2 * s + 1 ) <NEWLINE> <DEDENT> print ( max ( np . sum ( cht , axis = 0 ) ) ) <NEWLINE>
def main ( ) : <NEWLINE> <INDENT> from itertools import accumulate <NEWLINE> n , c , * stc = map ( int , open ( 0 ) . read ( ) . split ( ) ) <NEWLINE> table = [ 0 ] * ( 10 ** 5 + 2 ) <NEWLINE> m = list ( zip ( stc [ : : 3 ] , stc [ 1 : : 3 ] , stc [ 2 : : 3 ] ) ) <NEWLINE> m = sorted ( key = lambda a : ( a [ 2 ] , a [ 0 ] , a [ 1 ] ) ) <NEWLINE> <NL> ch_ = 0 <NEWLINE> t_ = 0 <NEWLINE> for s , t , ch in m : <NEWLINE> <INDENT> if ch != ch_ : <NEWLINE> <INDENT> ch_ = ch <NEWLINE> t_ = 0 <NEWLINE> <DEDENT> if t_ == s : <NEWLINE> <INDENT> table [ t_ + 1 ] += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> table [ s ] += 1 <NEWLINE> <NL> <DEDENT> table [ t + 1 ] -= 1 <NEWLINE> t_ = t <NEWLINE> <NL> <DEDENT> * x , = accumulate ( table ) <NEWLINE> ans = max ( x ) <NEWLINE> <NL> print ( ans ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
import sys <NEWLINE> import numpy as np <NEWLINE> readline = sys . stdin . readline <NEWLINE> read = sys . stdin . read <NEWLINE> <NL> n , c = map ( int , readline ( ) . split ( ) ) <NEWLINE> m = 2 * 10 ** 5 <NEWLINE> stc = [ list ( map ( int , l . split ( ) ) ) for l in read ( ) . splitlines ( ) ] <NEWLINE> cht = np . array ( [ ] ) <NEWLINE> for e in stc : <NEWLINE> <INDENT> w = e [ 1 ] - e [ 0 ] <NEWLINE> cht . vstack ( ( cht , np . pad ( np . ones ( 2 * ( e [ 1 ] - e [ 0 ] ) + 1 ) , ( 2 * e [ 0 ] - 1 , m - 2 * e [ 1 ] ) , mode = <STRING> , constant_values = ( 1 , 1 ) ) ) ) <NEWLINE> <DEDENT> mnr = 0 <NEWLINE> for i in range ( 1 , m + 1 ) : <NEWLINE> <INDENT> mnr = max ( mnr , sum ( cht [ ch ] [ i ] for ch in range ( c ) ) ) <NEWLINE> <DEDENT> print ( mnr ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> import sys <NEWLINE> readline = sys . stdin . readline <NEWLINE> <NL> import numpy as np <NEWLINE> from numba import jit <NEWLINE> <NL> N , Q = map ( int , readline ( ) . split ( ) ) <NEWLINE> P = [ tuple ( map ( int , readline ( ) . split ( ) ) ) for i in range ( Q ) ] <NEWLINE> P = np . array ( P , dtype = int ) <NEWLINE> <NL> @ jit ( <STRING> ) <NEWLINE> def solve ( N , P ) : <NEWLINE> <INDENT> ans = np . zeros ( len ( P ) , dtype = int ) <NEWLINE> for i in range ( len ( P ) ) : <NEWLINE> <INDENT> v = P [ i ] [ 0 ] - 1 <NEWLINE> w = P [ i ] [ 1 ] - 1 <NEWLINE> while v != w : <NEWLINE> <INDENT> if v > w : <NEWLINE> <INDENT> v = ( v - 1 ) // N <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> w = ( w - 1 ) // N <NEWLINE> <DEDENT> <DEDENT> ans [ i ] = v + 1 <NEWLINE> <DEDENT> return ans <NEWLINE> <NL> <DEDENT> ans = solve ( N , P ) <NEWLINE> for a in ans : <NEWLINE> <INDENT> print ( a ) <NEWLINE> <DEDENT>
<COMMENT> <NL> import re <NEWLINE> <NL> s = input ( ) <NEWLINE> STR = <STRING> <NEWLINE> if len ( s ) > len ( STR ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> regex = re . compile ( <STRING> ) <NEWLINE> mo = regex . search ( s ) <NEWLINE> if mo == None : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> ~ <NEWLINE>
s = input ( ) <NEWLINE> <COMMENT> <NL> if ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) <NEWLINE> or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) or ( s == <STRING> ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> AKB = { <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> } <NEWLINE> <NL> print ( <STRING> if s in pos else <STRING> ) <NEWLINE>
S = input ( ) <NEWLINE> if len ( S ) >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
import sys <NEWLINE> S = list ( input ( ) ) <NEWLINE> <NL> L = list ( <STRING> ) <NEWLINE> for l in L : <NEWLINE> <INDENT> if not l in <STRING> . join ( S ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> sys . exit ( 0 ) <NEWLINE> <NL> N = [ ] <NEWLINE> <DEDENT> <DEDENT> for i in range ( len ( S ) - 1 ) : <NEWLINE> <INDENT> if S [ i ] == <STRING> or S [ i ] == <STRING> or S [ i ] == <STRING> : <NEWLINE> <INDENT> if S [ i + 1 ] != <STRING> : <NEWLINE> <INDENT> N . append ( i + 1 ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> i = 0 <NEWLINE> for n in N : <NEWLINE> <INDENT> S . insert ( n + i , <STRING> ) <NEWLINE> i += 1 <NEWLINE> <NL> <DEDENT> if <STRING> . join ( S ) in <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
from itertools import product <NEWLINE> <NL> <NL> candidates = [ ] <NEWLINE> non_as = [ <STRING> , <STRING> , <STRING> , <STRING> ] <NEWLINE> for seps in product ( [ <STRING> , <STRING> ] , repeat = 4 ) : <NEWLINE> <INDENT> candidates . add ( <STRING> . append ( sep + non_a for sep , non_a in zip ( seps , non_as ) ) ) <NEWLINE> <NL> <DEDENT> print ( <STRING> ) if input ( ) in candidates else print ( <STRING> ) <NEWLINE>
s = [ c for c in <STRING> ] <NEWLINE> L = [ ] <NEWLINE> for i in range ( 0 , 2 ) : <NEWLINE> <INDENT> for j in range ( 0 , 2 ) : <NEWLINE> <INDENT> for k in range ( 0 , 2 ) : <NEWLINE> <INDENT> for l in range ( 0 , 2 ) : <NEWLINE> <INDENT> if i == 0 : <NEWLINE> <INDENT> s [ 0 ] = <STRING> <NEWLINE> <DEDENT> if j == 0 : <NEWLINE> <INDENT> s [ 4 ] = <STRING> <NEWLINE> <DEDENT> if k == 0 : <NEWLINE> <INDENT> s [ 6 ] = <STRING> <NEWLINE> <DEDENT> if l == 0 : <NEWLINE> <INDENT> s [ 8 ] = <STRING> <NEWLINE> <DEDENT> while <STRING> in s : <NEWLINE> <INDENT> s . remove ( <STRING> ) <NEWLINE> <DEDENT> L . append ( s ) <NEWLINE> s = [ c for c in <STRING> ] <COMMENT> <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> S = [ c for c in input ( ) ] <NEWLINE> for el in L : <NEWLINE> <INDENT> if S == el : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> sys . exit ( 0 ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
S = input ( ) <NEWLINE> if len ( S ) >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif S == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else ; <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
s = list ( input ( ) ) <NEWLINE> a = s . count ( <STRING> ) <NEWLINE> b = s . count ( <STRING> ) <NEWLINE> c = s . count ( <STRING> ) <NEWLINE> if min ( a , b , c ) != 0 and max ( a , b , c ) - min ( a , b , c ) <= 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a + b + c = max ( a , b , c ) and max ( a , b , c ) == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = len ( s ) <NEWLINE> set = set ( s ) <NEWLINE> m = len ( set ) <NEWLINE> a = s . count ( <STRING> ) <NEWLINE> b = s . count ( <STRING> ) <NEWLINE> c = s . count ( <STRING> ) <NEWLINE> if m == 1 : <NEWLINE> <INDENT> if n == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> elif m == 2 : <NEWLINE> <INDENT> if c == 0 : <NEWLINE> <INDENT> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> elif b == 0 : <NEWLINE> <INDENT> if a == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if b == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> d = n // m <NEWLINE> res = 0 <NEWLINE> if a <= d : <NEWLINE> <INDENT> res += 1 <NEWLINE> <DEDENT> if b <= d : <NEWLINE> <INDENT> res += 1 <NEWLINE> <DEDENT> if c <= d : <NEWLINE> <INDENT> res += 1 <NEWLINE> <DEDENT> if res <= 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
s = input ( ) <NEWLINE> <NL> dic = { } <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] in dic : <NEWLINE> <INDENT> dic [ s [ i ] ] += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic [ s [ i ] ] = 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if len ( dic ) == 1 : <NEWLINE> <INDENT> if len ( s ) == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> elif len ( dic ) == 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> first = <STRING> <NEWLINE> second = <STRING> <NEWLINE> for k , v in dic . items ( ) : <NEWLINE> <INDENT> if v > dic [ first ] : <NEWLINE> <INDENT> second = first <NEWLINE> first = k <NEWLINE> <NL> <DEDENT> elif v > dic [ second ] : <NEWLINE> <INDENT> second = k <NEWLINE> <NL> <DEDENT> <DEDENT> tmp = first + second <NEWLINE> dic [ first ] -= 1 <NEWLINE> dic [ second ] -= 1 <NEWLINE> ans = <STRING> <NEWLINE> for i in range ( 1 , len ( s ) - 1 ) : <NEWLINE> <INDENT> if tmp [ i - 1 ] == <STRING> : <NEWLINE> <INDENT> if tmp [ i ] == <STRING> : <NEWLINE> <INDENT> if dic [ <STRING> ] == 0 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic [ <STRING> ] -= 1 <NEWLINE> tmp += <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> if tmp [ i ] == <STRING> : <NEWLINE> <INDENT> if dic [ <STRING> ] == 0 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic [ <STRING> ] -= 1 <NEWLINE> tmp += <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> elif tmp [ i - 1 ] == <STRING> : <NEWLINE> <INDENT> if tmp [ i ] == <STRING> : <NEWLINE> <INDENT> if dic [ <STRING> ] == 0 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic [ <STRING> ] -= 1 <NEWLINE> tmp += <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> if tmp [ i ] == <STRING> : <NEWLINE> <INDENT> if dic [ <STRING> ] == 0 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic [ <STRING> ] -= 1 <NEWLINE> tmp += <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> elif tmp [ i - 1 ] == <STRING> : <NEWLINE> <INDENT> if tmp [ i ] == <STRING> : <NEWLINE> <INDENT> if dic [ <STRING> ] == 0 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic [ <STRING> ] -= 1 <NEWLINE> tmp += <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> if tmp [ i ] == <STRING> : <NEWLINE> <INDENT> if dic [ <STRING> ] == 0 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dic [ <STRING> ] -= 1 <NEWLINE> tmp += <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <DEDENT>
import numpy as np <NEWLINE> from numba import njit <NEWLINE> <NL> <NL> @ njit ( <STRING> , cache = True ) <NEWLINE> def solve ( N , D ) : <NEWLINE> <INDENT> ans = 0 <NEWLINE> for i in range ( 1 << N ) : <NEWLINE> <INDENT> clocks = np . zeros ( ( N + 2 ) , dtype = np . int8 ) <NEWLINE> clocks [ - 1 ] = 24 <NEWLINE> for j in range ( N ) : <NEWLINE> <INDENT> if i >> j & 1 : <NEWLINE> <INDENT> clocks [ j + 1 ] = D [ j ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> clocks [ j + 1 ] = 24 - D [ j ] <NEWLINE> <DEDENT> <DEDENT> clocks . sort ( ) <NEWLINE> ans = max ( ans , np . min ( np . diff ( clocks ) ) ) <NEWLINE> <DEDENT> return ans <NEWLINE> <NL> <NL> <DEDENT> N = int ( input ( ) ) <NEWLINE> D = np . array ( input ( ) . split ( ) , dtype = np . int8 ) <NEWLINE> if N >= 24 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( solve ( N , D ) ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> c = Counter ( s ) <NEWLINE> v = list ( c . values ( ) ) <NEWLINE> if max ( v ) - min ( v ) > 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
from collections import Counter <NEWLINE> n = list ( input ( ) ) <NEWLINE> c = Counter ( n ) <NEWLINE> if max ( list ( c . values ) ) >= 3 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = str ( input ( ) ) <NEWLINE> a , b , c , d = N [ 0 ] , N [ 1 ] , N [ 2 ] , N [ 3 ] <NEWLINE> <NL> ans = <STRING> <NEWLINE> if a == b and b = A = c : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> elif b == c and c == d : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <NL> <NL> <DEDENT> print ( ans ) <NEWLINE>
a = int ( inout ( ) ) <NEWLINE> if a [ 0 ] == a [ 1 ] == a [ 2 ] or a [ 1 ] == a [ 2 ] == a [ 3 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> print ( <STRING> if a [ 1 ] == a [ 2 ] == a [ 0 ] or a [ 1 ] == a [ 2 ] == a [ 3 ] , else <STRING> ) <NEWLINE>
<NL> N = int ( input ( ) ) <NEWLINE> <NL> if N [ 0 ] == N [ 1 ] and N [ 1 ] == N [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> elif N [ 1 ] == N [ 2 ] and N [ 2 ] == N [ 3 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = list ( int ( input ( ) ) ) <NEWLINE> a = set ( N ) <NEWLINE> a = list ( a ) <NEWLINE> if len ( a ) <= 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import bisect , collections , copy , heapq , itertools , math , string <NEWLINE> import sys <NEWLINE> def I ( ) : <NEWLINE> <COMMENT> <NL> <INDENT> return int ( sys . stdin . readline ( ) . rstrip ( ) ) <NEWLINE> <DEDENT> def LI ( ) : <NEWLINE> <COMMENT> <NL> <INDENT> return list ( map ( int , sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) ) <NEWLINE> <DEDENT> def S ( ) : <NEWLINE> <COMMENT> <NL> <INDENT> return sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> <DEDENT> def LS ( ) : <NEWLINE> <COMMENT> <NL> <INDENT> return list ( sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) <NEWLINE> <NL> <DEDENT> A = S ( ) <NEWLINE> <NL> if A [ 0 ] == A [ 1 ] == A [ 2 ] or A [ 1 ] == A [ 2 ] == A [ 3 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT>
N = input ( ) <NEWLINE> s1 = N [ 1 : len ( N ) ] <NEWLINE> s2 = N [ 0 : len ( N ) - 1 ] <NEWLINE> isOk = True <NEWLINE> for i in range ( 1 , len ( N - 1 ) ) : <NEWLINE> <INDENT> if s1 [ i ] != s1 [ i - 1 ] : <NEWLINE> <INDENT> break <NEWLINE> isOk = False <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <NL> <DEDENT> <DEDENT> if isOk : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> isOk = True <NEWLINE> for i in range ( 1 , len ( N - 1 ) ) : <NEWLINE> <INDENT> if s2 [ i ] != s2 [ i - 1 ] : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <NL> <DEDENT> <DEDENT> if isOk : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = input ( ) <NEWLINE> print ( <STRING> if [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] in n else <STRING> ) <NEWLINE>
N = list ( input ( ) ) <NEWLINE> print ( <STRING> if N [ 1 ] == N [ 2 ] and ( N [ 0 ] == N [ 1 ] or N [ 2 ] == N [ 3 ] ) else <STRING> ) a <NEWLINE>
n = int ( input ( ) ) <NEWLINE> for i in range ( 2 ) : <NEWLINE> <INDENT> if n [ i ] == n [ i + 1 ] and n [ i + 1 ] == n [ i + 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> dp = [ [ ] for i in range ( 87 ) ] <NEWLINE> dp [ 0 ] = 2 <NEWLINE> dp [ 1 ] = 1 <NEWLINE> <NL> for i in range ( 2 , 87 ) : <NEWLINE> <INDENT> dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] <NEWLINE> if i == N : <NEWLINE> <INDENT> print ( dp [ i ] ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( dp [ N ] ) <NEWLINE> <DEDENT>
<COMMENT> <NL> n = list ( input ( ) ) <NEWLINE> if ( n [ 0 ] n [ 1 ] n [ 2 ] or n [ 0 ] n [ 2 ] n [ 3 ] or n [ 0 ] n [ 1 ] n [ 3 ] or n [ 1 ] n [ 2 ] n [ 3 ] ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> if n [ 1 ] == n [ 2 ] : <NEWLINE> <INDENT> if n [ 0 ] == n [ 1 ] or n [ 2 ] == n [ 3 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> if ( ( t [ 0 : 1 ] == t [ 1 : 2 ] == t [ 2 : 3 ] ) or ( t [ 1 : 2 ] == t [ 2 : 3 ] == t [ 3 : 4 ] ) ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> import sys , re <NEWLINE> from collections import deque , defaultdict , Counter <NEWLINE> from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians <NEWLINE> from itertools import accumulate , permutations , combinations , product <NEWLINE> from operator import itemgetter , mul <NEWLINE> from copy import deepcopy <NEWLINE> from string import ascii_lowercase , ascii_uppercase , digits <NEWLINE> from bisect import bisect , bisect_left <NEWLINE> from fractions import gcd <NEWLINE> from heapq import heappush , heappop <NEWLINE> from functools import reduce <NEWLINE> import numpy as np <NEWLINE> def input ( ) : return sys . stdin . readline ( ) . strip ( ) <NEWLINE> def INT ( ) : return int ( input ( ) ) <NEWLINE> def MAP ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> def ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) ) <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> S = input ( ) <NEWLINE> if S [ 0 ] == S [ 1 ] == s [ 2 ] or S [ 1 ] == S [ 2 ] == s [ 3 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> L = [ 2 , 1 ] <NEWLINE> <NL> for i in range ( 2 , N ) : <NEWLINE> <INDENT> L . append ( L [ i - 1 ] + L [ i - 2 ] ) <NEWLINE> <DEDENT> print ( L [ N + 1 ] ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> L = [ ] * ( N + 1 ) <NEWLINE> L [ 0 ] = 2 <NEWLINE> L [ 1 ] = 1 <NEWLINE> for i in range ( 2 , N + 1 ) : <NEWLINE> <INDENT> L [ i ] = L [ i - 1 ] + L [ i - 2 ] <NEWLINE> <DEDENT> print ( L [ N ] ) <NEWLINE>
import functools <NEWLINE> @ fuctools . lru_cache ( maxsize = None ) <NEWLINE> <NL> def luca ( n ) : <NEWLINE> <INDENT> if n == 0 : <NEWLINE> <INDENT> return 2 <NEWLINE> <DEDENT> elif n == 1 : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return luca ( n - 1 ) + luca ( n - 2 ) <NEWLINE> <NL> <DEDENT> <DEDENT> N = int ( input ( ) ) <NEWLINE> <NL> print ( luca ( N ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> L = [ ] <NEWLINE> L . append ( 2 ) <NEWLINE> L . append ( 1 ) <NEWLINE> for i in range ( 3 , n + 1 ) : <NEWLINE> <INDENT> x = L [ i - 1 ] + L [ i - 2 ] <NEWLINE> L . append ( x ) <NEWLINE> <NL> <DEDENT> print ( L [ n ] ) <NEWLINE>
N = input ( ) <NEWLINE> <NL> L = [ 2 , 1 ] <NEWLINE> <NL> if N == 1 : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> i = 1 <NEWLINE> while i < N : <NEWLINE> <INDENT> L . append ( L [ i ] + L [ i - 1 ] ) <NEWLINE> i += 1 <NEWLINE> <DEDENT> print ( L [ - 1 ] ) <NEWLINE> <DEDENT>
<COMMENT> <NL> N = int ( input ( ) ) <NEWLINE> import ita <NEWLINE> data = ita . array . make1d ( N + 1 ) <NEWLINE> data [ 0 ] = 2 <NEWLINE> data [ 1 ] = 1 <NEWLINE> for i in range ( 2 , N + 1 ) : <NEWLINE> <INDENT> data [ i ] = data [ i - 1 ] + data [ i - 2 ] <NEWLINE> <DEDENT> print ( data [ N ] ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> s = [ ] <NEWLINE> s . append ( 2 ) <NEWLINE> s . append ( 1 ) <NEWLINE> if n == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> elif n == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( 2 , 86 ) : <NEWLINE> <INDENT> k = s [ i - 2 ] + s [ i - 1 ] <NEWLINE> s . apend ( k ) <NEWLINE> if i == n - 1 : <NEWLINE> <INDENT> print ( s [ i ] ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
N = int ( input ( ) ) <NEWLINE> L = [ 0 ] * 87 <NEWLINE> L [ 0 ] = 2 <NEWLINE> L [ 1 ] = 1 <NEWLINE> <NL> for i in range ( 2 , 88 ) : <NEWLINE> <INDENT> L [ i ] = L [ i - 1 ] + L [ i - 2 ] <NEWLINE> <NL> <DEDENT> print ( L [ N ] ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> l = [ 2 , 1 ] <NEWLINE> i = 0 <NEWLINE> while i < n : <NEWLINE> <INDENT> l . append ( l [ - 1 ] + l [ - 2 ] ) <NEWLINE> <DEDENT> print ( l [ n - 2 ] ) <NEWLINE>
from itertools import product <NEWLINE> <NL> s = input ( ) <NEWLINE> <NL> for op in product ( [ <STRING> , <STRING> ] , repeat = len ( s ) - 1 ) : <NEWLINE> <INDENT> formula = <STRING> <NEWLINE> for i in range ( len ( s - 1 ) ) : <NEWLINE> <INDENT> formula += s [ i ] + op [ i ] <NEWLINE> <DEDENT> formula += s [ 1 ] <NEWLINE> if eval ( formula ) == 7 : <NEWLINE> <INDENT> print ( formula + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
def make7 ( i , f , sum ) : <NEWLINE> <INDENT> if i == 3 : <NEWLINE> <INDENT> if sum == 7 : <NEWLINE> <INDENT> print ( f + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> make7 ( i + 1 , f + <STRING> + S [ i + 1 ] , sum + S [ i + 1 ] ) <NEWLINE> make7 ( i + 1 , f + <STRING> + S [ i + 1 ] , sum - S [ i + 1 ] ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> S = input ( ) <NEWLINE> n = len ( S ) <NEWLINE> <NL> make7 ( 0 , S [ 0 ] , S [ 0 ] ) <NEWLINE>
n = input ( ) <NEWLINE> l = len ( n ) <NEWLINE> <NL> for i in range ( 2 ** l ) : <NEWLINE> <INDENT> op = [ <STRING> ] * l <NEWLINE> for j in range ( l ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> op [ l - j - 1 ] = <STRING> <COMMENT> <NEWLINE> <DEDENT> <DEDENT> formula = <STRING> <NEWLINE> for op1 , op2 in zip ( n , op + [ <STRING> ] ) : <COMMENT> <NEWLINE> <INDENT> formula += op1 + op2 <NEWLINE> <DEDENT> if eval ( formula ) == 7 : <NEWLINE> <INDENT> print ( formula + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
import itertools <NEWLINE> x = list ( input ( ) ) <NEWLINE> <NL> for lst in itertools . product ( [ <STRING> , <STRING> ] , repeat = 3 ) <NEWLINE> <INDENT> sum = int ( x [ 0 ] ) <NEWLINE> for i in range ( 3 ) : <NEWLINE> <INDENT> if lst [ i ] == <STRING> : <NEWLINE> <INDENT> sum += int ( x [ i + 1 ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> sum -= int ( x [ i + 1 ] ) <NEWLINE> <DEDENT> <DEDENT> if sum == 7 : <NEWLINE> <INDENT> print ( x [ 0 ] + lst [ 0 ] + x [ 1 ] + lst [ 1 ] + x [ 2 ] + lst [ 2 ] + x [ 3 ] + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
def dfs ( i , f , sum ) : <NEWLINE> <INDENT> if i == 3 and sum == 7 : <NEWLINE> <INDENT> print ( f + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dfs ( i + 1 , f + <STRING> + s [ i + 1 ] , sum - int ( s [ i + 1 ] ) ) <NEWLINE> dfs ( i + 1 , f + <STRING> + s [ i + 1 ] , sum + int ( s [ i + 1 ] ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> s = input ( ) <NEWLINE> dfs ( 0 , s [ 0 ] , int ( s [ 0 ] ) ) <NEWLINE> <NL> <NL> <NL>
A , B , C , D = input ( ) <NEWLINE> for i in range ( 2 ** 3 ) : <NEWLINE> <INDENT> op = [ <STRING> , <STRING> , <STRING> ] <NEWLINE> <INDENT> for j in range ( len ( op ) ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> op [ j ] = <STRING> <NEWLINE> <NL> <NL> <NL> <NL> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> def main ( ) : <NEWLINE> <INDENT> A , B , C , D = input ( ) <NEWLINE> for i in range ( 2 ** 3 ) : <NEWLINE> <INDENT> op = [ <STRING> , <STRING> , <STRING> ] <NEWLINE> for j in range ( len ( op ) ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> op [ j ] = <STRING> <NEWLINE> <DEDENT> <DEDENT> if eval ( A + op [ 0 ] + B + op [ 1 ] + C + op [ 2 ] + D ) == 7 : <NEWLINE> <INDENT> print ( A + op [ 0 ] + B + op [ 1 ] + C + op [ 2 ] + D + <STRING> ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> main ( ) <NEWLINE> <DEDENT>
A , B , C , D = input ( ) . split ( ) <NEWLINE> <NL> for i in range ( 2 ** 3 ) : <NEWLINE> <INDENT> op = [ <STRING> ] * 3 <NEWLINE> for j in range ( 3 ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> op [ 3 - 1 - j ] = <STRING> <NEWLINE> <DEDENT> <DEDENT> if eval ( A + op [ 0 ] + B + op [ 1 ] + C + op [ 2 ] + D ) == 7 : <NEWLINE> <INDENT> print ( A + op [ 0 ] + B + op [ 1 ] + C + op [ 2 ] + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
L = input ( ) <NEWLINE> a = int ( L [ 0 ] ) <NEWLINE> b = int ( L [ 1 ] ) <NEWLINE> c = int ( L [ 2 ] ) <NEWLINE> d = int ( L [ 3 ] ) <NEWLINE> <NL> import itertools <NEWLINE> <NL> A = ( 1 , - 1 ) <NEWLINE> <NL> def c ( x ) : <NEWLINE> <INDENT> if x == 1 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> for v in itertools . product ( A , repeat = 3 ) : <NEWLINE> <INDENT> s = a + b * v [ 0 ] + c * v [ 1 ] + d * v [ 2 ] <NEWLINE> if s == 7 : <NEWLINE> <INDENT> print ( L [ 0 ] + c ( v [ 0 ] ) + L [ 1 ] + c ( v [ 1 ] ) + L [ 2 ] + c ( v [ 2 ] ) + L [ 3 ] + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
n = input ( ) <NEWLINE> op_cnt = len ( n ) - 1 <COMMENT> <NEWLINE> for i in range ( 2 ** op_cnt ) : <NEWLINE> <INDENT> op = [ <STRING> ] * op_cnt <NEWLINE> for j in range ( op_cnt ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> op [ op_cnt - 1 - j ] = <STRING> <NEWLINE> formula = <STRING> <NEWLINE> for p_n , p_o in zip ( n , op + [ <STRING> ] ) : <NEWLINE> <INDENT> formula += ( p_n + p_o ) <NEWLINE> if eval ( formula ) == 7 : <NEWLINE> <INDENT> print ( formula + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
n = input ( ) <NEWLINE> <NL> for i in range ( 2 ** 3 ) : <NEWLINE> <INDENT> ss = <STRING> <NEWLINE> for j in range ( 3 ) : <NEWLINE> <INDENT> ss += n [ j ] <NEWLINE> if ( ( i >> j ) & 1 == True ) : <NEWLINE> <INDENT> ss += <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ss += <STRING> <NEWLINE> <DEDENT> <DEDENT> ans = eval ( ss ) <NEWLINE> if ( ans == 7 ) : <NEWLINE> <INDENT> ss += <STRING> <NEWLINE> print ( ss ) <NEWLINE> <DEDENT> <DEDENT>
a , b , c , d = map ( lambda x : int ( x ) , list ( input ( ) ) ) <NEWLINE> <NL> cnt = 0 <NEWLINE> def get_str ( a ) : <NEWLINE> <INDENT> if a >= 0 : <NEWLINE> <INDENT> s = <STRING> . format ( a ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> s = <STRING> . format ( a ) <NEWLINE> <DEDENT> return s <NEWLINE> <NL> <DEDENT> for i in range ( 1 << 4 - 1 ) : <NEWLINE> <INDENT> if ( i >> 3 ) % 2 == 0 : <NEWLINE> <INDENT> a = - a <NEWLINE> <DEDENT> if ( i >> 2 ) % 2 == 0 : <NEWLINE> <INDENT> b = - b <NEWLINE> <DEDENT> if ( i >> 1 ) % 2 == 0 : <NEWLINE> <INDENT> c = - c <NEWLINE> <DEDENT> if ( i >> 0 ) % 2 == 0 : <NEWLINE> <INDENT> d = - d <NEWLINE> <NL> <DEDENT> if a + b + c + d == 7 : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> s += get_str ( a ) <NEWLINE> s += get_str ( b ) <NEWLINE> s += get_str ( c ) <NEWLINE> s += get_str ( d ) <NEWLINE> s += <STRING> <NEWLINE> if a >= 0 : <NEWLINE> <INDENT> print ( s [ 1 : : ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <DEDENT> <DEDENT>
a , b , c , d = input ( ) . split ( ) <NEWLINE> pm = <STRING> <NEWLINE> for i in pm : <NEWLINE> <INDENT> for j in pm : <NEWLINE> <INDENT> for k in pm : <NEWLINE> <INDENT> total = a + i + b + j + c + k + d <NEWLINE> if eval ( total ) == 7 : <NEWLINE> <INDENT> print ( total + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
<NL> def a ( s , i ) : <NEWLINE> <INDENT> if i = l - 1 : <NEWLINE> <INDENT> if eval ( s ) == 7 : <NEWLINE> <INDENT> print ( s + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> return <NEWLINE> <DEDENT> a ( s + <STRING> + N [ i + 1 ] , i + 1 ) <NEWLINE> a ( s + <STRING> + N [ i + 1 ] , i + 1 ) <NEWLINE> <NL> <DEDENT> N = input ( ) <NEWLINE> l = len ( N ) <NEWLINE> <NL> a ( N [ 0 ] , 0 ) <NEWLINE>
<COMMENT> <NL> <NL> S = input ( ) <NEWLINE> num = len ( S ) - 1 <NEWLINE> <NL> for i in range ( 2 ** num ) : <NEWLINE> <INDENT> op = [ <STRING> ] * num <NEWLINE> for j in range ( num ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> op [ num - j - 1 ] = <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> formula = <STRING> <NEWLINE> for op_S , op_num in zip ( S , num + [ <STRING> ] ) : <NEWLINE> <INDENT> formula += op_S + op_num <NEWLINE> <NL> <DEDENT> if eval ( formula ) == 7 : <NEWLINE> <INDENT> print ( formula + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
import sys <NEWLINE> <NL> input = sys . stdin . readline <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> nums = list ( map ( int , list ( input ( ) ) ) ) <NEWLINE> for i in range ( 8 ) : <NEWLINE> <INDENT> ts = sum ( nums ) <NEWLINE> ops = [ <STRING> ] * 3 <NEWLINE> for j in range ( 3 ) : <NEWLINE> <INDENT> if i >> j & 1 : <NEWLINE> <INDENT> ts -= nums [ j + 1 ] * 2 <NEWLINE> ops [ j ] = <STRING> <NEWLINE> <DEDENT> <DEDENT> if ts == 7 : <NEWLINE> <INDENT> for i in range ( 3 ) : <NEWLINE> <INDENT> ans += str ( nums [ i ] ) + ops [ i ] <NEWLINE> <DEDENT> ans += str ( nums [ 3 ] ) + <STRING> <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
<INDENT> lst = [ int ( a ) for a in input ( ) ] <NEWLINE> for bit in range ( 1 << len ( lst ) ) : <NEWLINE> <INDENT> sum = 0 <NEWLINE> op_lst = [ ] <NEWLINE> for i in range ( len ( lst ) ) : <NEWLINE> <INDENT> if bit & ( 1 << i ) : <NEWLINE> <INDENT> sum += lst [ i ] <NEWLINE> op_lst . append ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> sum -= lst [ i ] <NEWLINE> op_lst . append ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> if sum == 7 : <NEWLINE> <INDENT> print ( lst [ 0 ] , op_lst [ 1 ] , lst [ 1 ] , op_lst [ 2 ] , lst [ 2 ] , op_lst [ 3 ] , lst [ 3 ] , <STRING> , sep = <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n = input ( ) <NEWLINE> l = len ( n ) - 1 <NEWLINE> <NL> for i in range ( 2 ** l ) : <NEWLINE> <INDENT> op = [ <STRING> ] * l <NEWLINE> for j in range ( l ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> op [ i - j - 1 ] = <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> formula = <STRING> <NEWLINE> for op_num , op_l in zip ( n , op + [ <STRING> ] ) : <NEWLINE> <INDENT> formula += op_num + op_l <NEWLINE> <DEDENT> if eval ( formula ) == 7 : <NEWLINE> <INDENT> print ( formula + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
n = input ( ) <NEWLINE> op_cnt = len ( n ) - 1 <NEWLINE> for i in range ( 2 ** op_cnt ) : <NEWLINE> <INDENT> op = [ <STRING> ] * op_cnt <COMMENT> <NEWLINE> for j in range ( op_cnt ) : <NEWLINE> <INDENT> if ( ( i >> j ) & 1 ) : <NEWLINE> <INDENT> op [ - 1 - j ] = <STRING> <NEWLINE> formula = <STRING> <NEWLINE> <DEDENT> <DEDENT> for p_n , p_o in zip ( n , op + [ <STRING> ] ) : <COMMENT> <NEWLINE> <INDENT> formula += ( p_n + p_o ) <NEWLINE> <DEDENT> if eval ( formula ) == 7 : <COMMENT> <NEWLINE> <INDENT> print ( formula + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
from itertools import product <NEWLINE> <NL> s = input ( ) <NEWLINE> <NL> for op in product ( [ <STRING> , <STRING> ] , repeat = len ( s ) - 1 ) : <NEWLINE> <INDENT> formula = <STRING> <NEWLINE> for i in range ( len ( s - 1 ) ) : <NEWLINE> <INDENT> formula += s [ i ] + op [ i ] <NEWLINE> <DEDENT> formula += s [ - 1 ] <NEWLINE> if eval ( formula ) == 7 : <NEWLINE> <INDENT> print ( formula + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
def a ( t , i ) : <NEWLINE> <INDENT> if i = l - 1 : <NEWLINE> <INDENT> if eval ( t ) == 7 : <NEWLINE> <INDENT> print ( t + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> return <NEWLINE> <DEDENT> a ( t + <STRING> + N [ i + 1 ] , i + 1 ) <NEWLINE> a ( t + <STRING> + N [ i + 1 ] , i + 1 ) <NEWLINE> <NL> <DEDENT> N = input ( ) <NEWLINE> l = len ( N ) <NEWLINE> a ( N [ 0 ] , 0 ) <NEWLINE> <NL> <NL> <NL> <NL>
<NL> ABCD = str ( input ( ) ) <NEWLINE> A = ABCD [ 0 ] <NEWLINE> B = ABCD [ 1 ] <NEWLINE> C = ABCD [ 2 ] <NEWLINE> D = ABCD [ 3 ] <NEWLINE> <NL> if int ( A ) + int ( B ) + int ( C ) + int ( D ) == 7 : <NEWLINE> <INDENT> print ( A + <STRING> + B + <STRING> + C + <STRING> + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if int ( A ) - int ( B ) + int ( C ) + int ( D ) == 7 : <NEWLINE> <INDENT> print ( A + <STRING> + B + <STRING> + C + <STRING> + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if int ( A ) + int ( B ) - int ( C ) + int ( D ) == 7 : <NEWLINE> <INDENT> print ( A + <STRING> + B + <STRING> + C + <STRING> + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if int ( A ) - int ( B ) - int ( C ) + int ( D ) == 7 : <NEWLINE> <INDENT> print ( A + <STRING> + B + <STRING> + C + <STRING> + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if int ( A ) + int ( B ) + int ( C ) - int ( D ) == 7 : <NEWLINE> <INDENT> print ( A + <STRING> + B + <STRING> + C + <STRING> + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if int ( A ) - int ( B ) + int ( C ) - int ( D ) == 7 : <NEWLINE> <INDENT> print ( A + <STRING> + B + <STRING> + C + <STRING> + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if int ( A ) + int ( B ) - int ( C ) - int ( D ) == 7 : <NEWLINE> <INDENT> print ( A + <STRING> + B + <STRING> + C + <STRING> + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if int ( A ) - int ( B ) - int ( C ) - int ( D ) == 7 : <NEWLINE> <INDENT> print ( A + <STRING> + B + <STRING> + C + <STRING> + D + <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT>
nums = input ( ) <NEWLINE> N = 3 <NEWLINE> for i in range ( 2 ** N ) : <NEWLINE> <INDENT> equation = <STRING> <NEWLINE> for j in range ( N + 1 ) : <NEWLINE> <INDENT> equation += nums [ j ] <NEWLINE> if ( ( i >> j ) & 1 ) : <NEWLINE> <INDENT> equation += <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> equation += <STRING> <NEWLINE> <DEDENT> <DEDENT> if eval ( equation ) == 7 : <NEWLINE> <INDENT> print ( equation + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
def dump ( a , b , c ) : <NEWLINE> <INDENT> if a == operator . add : <NEWLINE> <INDENT> a = <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a = <STRING> <NEWLINE> <DEDENT> if b == operator . add : <NEWLINE> <INDENT> b = <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> b = <STRING> <NEWLINE> <DEDENT> if c == operator . add : <NEWLINE> <INDENT> c = <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> c = <STRING> <NEWLINE> <DEDENT> print ( vals [ 0 ] + a + vals [ 1 ] + b + vals [ 2 ] + c + vals [ 3 ] + <STRING> ) <NEWLINE> <NL> <DEDENT> for a in ( operator . add , operator . sub ) : <NEWLINE> <INDENT> for b in ( operator . add , operator . sub ) : <NEWLINE> <INDENT> for c in ( operator . add , operator . sub ) : <NEWLINE> <INDENT> if c ( b ( a ( nums [ 0 ] , nums [ 1 ] ) , nums [ 2 ] ) , nums [ 3 ] ) == 7 : <NEWLINE> <INDENT> dump ( a , b , c ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
ABCD = input ( ) <NEWLINE> A = int ( ABCD [ 0 ] ) <NEWLINE> B = int ( ABCD [ 1 ] ) <NEWLINE> C = int ( ABCD [ 2 ] ) <NEWLINE> D = int ( ABCD [ 3 ] ) <NEWLINE> for i in 1 : <NEWLINE> <NL> <INDENT> if A + B + C + D == 7 : <NEWLINE> <INDENT> print ( str ( A ) + <STRING> + str ( B ) + <STRING> + str ( C ) + <STRING> + str ( D ) + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A - B + C + D == 7 : <NEWLINE> <INDENT> print ( str ( A ) + <STRING> + str ( B ) + <STRING> + str ( C ) + <STRING> + str ( D ) + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A + B - C + D == 7 : <NEWLINE> <INDENT> print ( str ( A ) + <STRING> + str ( B ) + <STRING> + str ( C ) + <STRING> + str ( D ) + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A + B + C - D == 7 : <NEWLINE> <INDENT> print ( str ( A ) + <STRING> + str ( B ) + <STRING> + str ( C ) + <STRING> + str ( D ) + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A - B - C + D == 7 : <NEWLINE> <INDENT> print ( str ( A ) + <STRING> + str ( B ) + <STRING> + str ( C ) + <STRING> + str ( D ) + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A - B + C - D == 7 : <NEWLINE> <INDENT> print ( str ( A ) + <STRING> + str ( B ) + <STRING> + str ( C ) + <STRING> + str ( D ) + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A + B - C - D == 7 : <NEWLINE> <INDENT> print ( str ( A ) + <STRING> + str ( B ) + <STRING> + str ( C ) + <STRING> + str ( D ) + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A - B - C - D == 7 : <NEWLINE> <INDENT> print ( str ( A ) + <STRING> + str ( B ) + <STRING> + str ( C ) + <STRING> + str ( D ) + <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
import sys <NEWLINE> a , b , c , d = input ( ) <NEWLINE> for i in range ( 2 ** ( len ( op ) - 1 ) ) : <NEWLINE> <INDENT> op = [ <STRING> ] * 3 <NEWLINE> for j in range ( len ( op ) - 1 ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 == 1 : <NEWLINE> <INDENT> op [ j ] = <STRING> <NEWLINE> <DEDENT> <DEDENT> if eval ( a + op [ 0 ] + b + op [ 1 ] + c + op [ 2 ] + d ) == 7 : <NEWLINE> <INDENT> print ( a + op [ 0 ] + b + op [ 1 ] + c + op [ 2 ] + d + <STRING> ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> <DEDENT>
from networkx import * <NEWLINE> h , w = map ( int , input ( ) . split ( ) ) ; r = range ( 10 ) ; G = DiGraph ( ) ; G . add_nodes_from ( r ) ; C = [ [ * map ( int , input ( ) . split ( ) ) ] for _ in <STRING> * 10 ] ; G . add_weighted_edges_from ( [ ( i , j , C [ i ] [ j ] ) for i in r for j in r ] ) ; S = [ single_source_dijkstra_path_length ( G , i ) [ 1 ] for i in r ] ; A = [ [ * map ( int , input ( ) . split ( ) ) ] for _ in r ] ; print ( sum ( S [ abs ( x ) ] for a in A for x in a ) ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b input ( ) . split ( ) <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> if a < b else <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> alp = <STRING> <NEWLINE> if x == y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif alp . index ( x ) < alp . index ( y ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
print ( [ <STRING> , <STRING> , <STRING> ] [ min ( 2 , max ( 0 , 1 + int ( <STRING> + input ( ) ) - int ( <STRING> + input ( ) ) ) ) a , b = input ( ) . split ( ) <NEWLINE> print ( [ <STRING> , <STRING> , <STRING> ] [ min ( 2 , max ( 0 , 1 + int ( a , 16 ) - int ( b , 16 ) ) ) ] ) <NEWLINE>
a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> List = [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> c = 0 <NEWLINE> d = 0 <NEWLINE> for i in range ( 6 ) : <NEWLINE> <INDENT> if a == List [ i ] : <NEWLINE> <INDENT> c = i <NEWLINE> <DEDENT> if b == List [ i ] : <NEWLINE> <INDENT> d = i <NEWLINE> <DEDENT> <DEDENT> if c < d : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif d < c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> p = ( 1 / 2 ) ** M <NEWLINE> <NL> <COMMENT> <NL> E = 1 / p <NEWLINE> ans = ( 1900 * M + 100 * ( N - M ) ) * E <NEWLINE> ans = round ( ans ) <NEWLINE> print ( ans ) <NEWLINE>
a , b = input ( ) <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
l = [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] <NEWLINE> x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if l . index ( x ) > l . index ( y ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif l . index ( x ) < l . index ( y ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B , C , D , E , F = 10 , 11 , 12 , 13 , 14 , 15 <NEWLINE> x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if x < y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x > y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else if a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
X , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> if X < Y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif X > Y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if x < y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x > y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if ord ( x ) < ord ( y ) : print ( <STRING> ) <NEWLINE> elif ord ( x ) > ord ( y ) : print ( <STRING> ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
lst = [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] <NEWLINE> a = input ( ) <NEWLINE> if lst . index ( a [ 0 ] ) > lst . index ( a [ 1 ] ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif lst . index ( a [ 0 ] ) == lst . index ( a [ 1 ] ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A = 1 <NEWLINE> B = 2 <NEWLINE> C = 3 <NEWLINE> D = 4 <NEWLINE> E = 5 <NEWLINE> F = 6 <NEWLINE> X , Y = input ( ) . split ( ) <NEWLINE> if X < Y : <NEWLINE> <INDENT> pritn ( <STRING> ) <NEWLINE> <DEDENT> elif X > Y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif X == Y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> if a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elsif a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B = input ( ) . split ( ) <NEWLINE> <NL> mydict = { <STRING> : 11 , <STRING> : 12 , <STRING> : 14 , <STRING> : 13 , <STRING> : 14 , <STRING> : 15 } <NEWLINE> <NL> print ( <STRING> ) if mydict ( A ) > mydict ( B ) else print ( <STRING> ) if mydict ( A ) < mydict ( B ) else print ( <STRING> ) <NEWLINE>
a , b = input ( ) . split ( ) <NEWLINE> if a . isalpha ( ) > b . isalpha ( ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a . isalpha ( ) < b . isalpha ( ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> else : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( input ( ) ) <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y , z = map ( int ( input ( ) . split ( ) ) ) <NEWLINE> ans = 1 <NEWLINE> x -= ( y + 2 * z ) <NEWLINE> print ( ans + x // ( y + z ) ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ( a - b - 2 * c ) // ( b + C ) + 1 ) <NEWLINE>
<NL> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> print ( ( a - c ) // ( b + z ) ) <NEWLINE>
x , y , z = map ( int , input ( ) . split ( ) ) <NEWLINE> while True : <NEWLINE> <INDENT> n = 0 <NEWLINE> if n * y + ( n + 1 ) * z > x : <NEWLINE> <INDENT> print ( n - 1 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> n += 1 <NEWLINE> <DEDENT>
64145 123 456 <NEWLINE>
import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import collections <NEWLINE> import heapq <NEWLINE> import re <NEWLINE> import numpy as np <NEWLINE> <NL> rr = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> rs = lambda : sys . stdin . readline ( ) . split ( ) <NEWLINE> ri = lambda : int ( sys . stdin . readline ( ) ) <NEWLINE> rm = lambda : map ( int , sys . stdin . readline ( ) . split ( ) ) <NEWLINE> rl = lambda : list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) <NEWLINE> inf = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> n , m = ri ( ) <NEWLINE> print ( ( m * 1900 + ( n - m ) * 100 ) * 2 ** m ) <NEWLINE> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL>
import sys <NEWLINE> import math <NEWLINE> import heapq <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> inf = float ( <STRING> ) <NEWLINE> from math import sqrt <NEWLINE> from collections import deque <NEWLINE> from collections import Counter <NEWLINE> from collections import defaultdict <NEWLINE> <COMMENT> <NL> from collections import OrderedDict <NEWLINE> <COMMENT> <NL> from math import ceil <NEWLINE> input = lambda : sys . stdin . readline ( ) . strip ( ) <NEWLINE> sys . setrecursionlimit ( 11451419 ) <NEWLINE> from decimal import Decimal <COMMENT> <NEWLINE> from functools import lru_cache <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> A = 100 * ( n - m ) + 1900 * m <NEWLINE> p = pow ( 2 , m ) <NEWLINE> <NL> @ lru_cache ( maxsize = 10 ** 10 ) <NEWLINE> def per ( n ) : <NEWLINE> <INDENT> if n == 1 : <NEWLINE> <INDENT> return 1 / p <NEWLINE> <DEDENT> return ( 1 - sum ( [ per ( i ) for i in range ( 1 , n ) ] ) ) * ( 1 / p ) <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> for i in range ( 1 , 10000 ) : <NEWLINE> <INDENT> ans += i * A * per ( i ) <NEWLINE> <DEDENT> print ( round ( ans ) ) <NEWLINE>
N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( 1900 * M + 100 * ( N - M ) ) * 2 ** M <NEWLINE>
N , M = map ( int . input ( ) . split ( ) ) <NEWLINE> ans = ( 1900 * M + 100 * ( N - M ) ) * ( 2 ** M ) <NEWLINE> print ( ans ) <NEWLINE>
N , Z , W = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> print ( abs ( W - a [ 0 ] ) if n == 1 else max ( abs ( W - a [ - 1 ] ) , abs ( a [ - 1 ] - a [ - 2 ] ) ) ) <NEWLINE>
from collections import deque <NEWLINE> class Dinic : <NEWLINE> <INDENT> def __init__ ( self , N ) : <NEWLINE> <INDENT> elf . N = N <NEWLINE> self . G = [ [ ] for i in range ( N ) ] <NEWLINE> <NL> <DEDENT> def add_edge ( self , fr , to , cap ) : <NEWLINE> <INDENT> forward = [ to , cap , None ] <NEWLINE> forward [ 2 ] = backward = [ fr , 0 , forward ] <NEWLINE> self . G [ fr ] . append ( forward ) <NEWLINE> self . G [ to ] . append ( backward ) <NEWLINE> <NL> <DEDENT> def add_multi_edge ( self , v1 , v2 , cap1 , cap2 ) : <NEWLINE> <INDENT> edge1 = [ v2 , cap1 , None ] <NEWLINE> edge1 [ 2 ] = edge2 = [ v1 , cap2 , edge1 ] <NEWLINE> self . G [ v1 ] . append ( edge1 ) <NEWLINE> self . G [ v2 ] . append ( edge2 ) <NEWLINE> <NL> <DEDENT> def bfs ( self , s , t ) : <NEWLINE> <INDENT> self . level = level = [ None ] * self . N <NEWLINE> deq = deque ( [ s ] ) <NEWLINE> level [ s ] = 0 <NEWLINE> G = self . G <NEWLINE> while deq : <NEWLINE> <INDENT> v = deq . popleft ( ) <NEWLINE> lv = level [ v ] + 1 <NEWLINE> for w , cap , _ in G [ v ] : <NEWLINE> <INDENT> if cap and level [ w ] is None : <NEWLINE> <INDENT> level [ w ] = lv <NEWLINE> deq . append ( w ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return level [ t ] is not None <NEWLINE> <NL> <DEDENT> def dfs ( self , v , t , f ) : <NEWLINE> <INDENT> if v == t : <NEWLINE> <INDENT> return f <NEWLINE> <DEDENT> level = self . level <NEWLINE> for e in self . it [ v ] : <NEWLINE> <INDENT> w , cap , rev = e <NEWLINE> if cap and level [ v ] < level [ w ] : <NEWLINE> <INDENT> d = self . dfs ( w , t , min ( f , cap ) ) <NEWLINE> if d : <NEWLINE> <INDENT> e [ 1 ] -= d <NEWLINE> rev [ 1 ] += d <NEWLINE> return d <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return 0 <NEWLINE> <NL> <DEDENT> def flow ( self , s , t ) : <NEWLINE> <INDENT> flow = 0 <NEWLINE> INF = 10 ** 9 + 7 <NEWLINE> G = self . G <NEWLINE> while self . bfs ( s , t ) : <NEWLINE> <INDENT> * self . it , = map ( iter , self . G ) <NEWLINE> f = INF <NEWLINE> while f : <NEWLINE> <INDENT> f = self . dfs ( s , t , INF ) <NEWLINE> flow += f <NEWLINE> <DEDENT> <DEDENT> return flow <NEWLINE> <NL> <NL> <NL> <DEDENT> <DEDENT> import sys <NEWLINE> sys . setrecursionlimit ( 10 ** 7 ) <NEWLINE> input = sys . stdin . readline <NEWLINE> <NL> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> score = 0 <NEWLINE> INF = float ( <STRING> ) <NEWLINE> graph = Dinic ( n + 2 ) <NEWLINE> <NL> for i in range ( n ) : <NEWLINE> <INDENT> if a [ i ] > 0 : <NEWLINE> <INDENT> graph . add_edge ( i + 1 , n + 1 , a [ i ] ) <NEWLINE> score += a [ i ] <NEWLINE> <DEDENT> elif a [ i ] < 0 : <NEWLINE> <INDENT> graph . add_edge ( 0 , i + 1 , - a [ i ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( 1 , n // 2 + 1 ) : <NEWLINE> <INDENT> for j in range ( 2 * i , n + 1 , i ) : <NEWLINE> <INDENT> graph . add_edge ( i , j , INF ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( score - graph . flow ( 0 , n + 1 ) ) <NEWLINE> <NL>
A = input ( ) . split ( ) <NEWLINE> B = input ( ) . split ( ) <NEWLINE> if A [ 0 ] == B [ 2 ] and A [ 1 ] == B [ 1 ] and A [ 2 ] == B [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> s . reverse ( ) <NEWLINE> <NL> if s == t : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x = str ( input ( ) ) <NEWLINE> y = str ( input ( ) ) <NEWLINE> z = x . reversed ( ) <NEWLINE> w = y . reversed ( ) <NEWLINE> if x == w and y == z : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
L = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> R = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> if L [ 0 ] == R [ 2 ] and L [ 1 ] == R [ 1 ] and L [ 2 ] == R [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
for x , y in zip ( input ( ) , reversed ( input ) ) : <NEWLINE> <INDENT> if x != y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n , s = map ( str , input ( ) . split ( ) ) <NEWLINE> if n [ 0 ] == s [ 2 ] and n [ 1 ] == s [ 1 ] and n [ 2 ] == s [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
<COMMENT> <NL> <NL> def atc_077a ( input_value : str ) -> str : <NEWLINE> <INDENT> C1 = input_value [ 0 ] <NEWLINE> C2 = input_value [ 1 ] <NEWLINE> <NL> if C1 [ 0 ] == C2 [ 2 ] and C1 [ 1 ] == C2 [ 1 ] and C1 [ 2 ] == C2 [ 0 ] <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> C1 = input ( ) <NEWLINE> C2 = input ( ) <NEWLINE> print ( atc_077a ( [ C1 , C2 ] ) ) <NEWLINE>
c = input ( ) <NEWLINE> d = input ( ) <NEWLINE> if c [ 0 ] == d [ 3 ] and c [ 1 ] == d [ 1 ] and c [ 2 ] == d [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) <NEWLINE> if a [ 0 ] == b [ 2 ] and a [ 1 ] == b [ 1 ] and a [ 2 ] == b [ 0 ] : print ( <STRING> ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
c11 , c12 , c13 = map ( int , input ( ) . split ( ) ) <NEWLINE> c21 , c22 , c23 = map ( int , input ( ) . split ( ) ) <NEWLINE> if c11 == c23 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif c12 == c22 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif c13 == c31 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x = [ list ( map ( str , input ( ) . split ( ) ) ) for i in range ( 2 ) ] <NEWLINE> if x [ 0 ] [ 0 ] == x [ 1 ] [ 2 ] and x [ 0 ] [ 1 ] == x [ 1 ] [ 1 ] and x [ 1 ] [ 0 ] == x [ 0 ] [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
S1 = input ( ) <NEWLINE> S2 = input ( ) <NEWLINE> if S1 . reverse == S2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> if a [ 0 ] == b [ 2 ] and a [ 1 ] == b [ 1 ] and a [ 2 ] == b [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x = input ( ) <NEWLINE> y = input ( ) <NEWLINE> if x [ : : - 1 ] = y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
c1 = input ( ) <NEWLINE> c2 = input ( ) <NEWLINE> print ( <STRING> if c1 = c2 [ - 1 : : - 1 ] else <STRING> ) <NEWLINE>
<NL> C = str ( input ( ) ) <NEWLINE> <NL> <NL> if C [ 0 ] == C [ 5 ] and C [ 1 ] == C [ 4 ] and C [ 2 ] == C [ 3 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> <NL> x = 0 <NEWLINE> while 1 : <NEWLINE> <INDENT> if x ** 2 > n : <NEWLINE> <INDENT> print ( ( x - 1 ) ** 2 ) <NEWLINE> <DEDENT> x += 1 <NEWLINE> <DEDENT>
import math <NEWLINE> print ( math . floor ( math . sqrt ( int ( input ( ) ) ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> C = 0 <NEWLINE> for i in range ( 1 , N ) : <NEWLINE> <INDENT> if i ** 2 < N : <NEWLINE> <INDENT> C = i ** 2 <NEWLINE> <DEDENT> elif i ** 2 = N : <NEWLINE> <INDENT> C = i ** 2 <NEWLINE> break <NEWLINE> <DEDENT> elif i ** 2 > N : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> print ( C ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> a = 1 <NEWLINE> <NL> while a <= n : <NEWLINE> <INDENT> b = a <NEWLINE> a **= 2 <NEWLINE> <NL> <DEDENT> print ( b ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> <NL> <NL> while N > i ** 2 : <NEWLINE> <INDENT> i += 1 <NEWLINE> <NL> <DEDENT> print ( ( i - 1 ) ** 2 ) <NEWLINE>
for x in range ( int ( input ( ) ) ) : <NEWLINE> <INDENT> if x ** 2 > n : <NEWLINE> <INDENT> print ( x - 1 ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
import sys <NEWLINE> N = int ( input ( ) ) <NEWLINE> if N = 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif N = 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( N ) : <NEWLINE> <INDENT> if i ** 2 > N : <NEWLINE> <INDENT> print ( ( i - 1 ) ** 2 ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
x = int ( input ( ) ) <NEWLINE> a = [ 0 ] <NEWLINE> for i in range ( 10 ** 5 ) : <NEWLINE> <INDENT> if i ** 2 < x : <NEWLINE> <INDENT> a . add ( i ** 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> print ( max ( a ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> x = int ( sqrt ( n ) ) <NEWLINE> print ( x ** 2 ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> ref = 1 <NEWLINE> <NL> for i in range ( n ) : <NEWLINE> <INDENT> if ref * 2 < ref + k : <NEWLINE> <INDENT> ref *= 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ref += k <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ref ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> while i ** 2 <= a : <NEWLINE> <INDENT> i = i + 1 <NEWLINE> <DEDENT> print ( i ** 2 ) <NEWLINE>
import math <NEWLINE> N = int ( input ( ) ) <NEWLINE> ans = 1 <NEWLINE> for i in range ( 10 ** 5 ) : <NEWLINE> <INDENT> if i ** 2 = < N : <NEWLINE> <INDENT> ans = i ** 2 <NEWLINE> <DEDENT> if i ** 2 > N : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import math <NEWLINE> x = int ( input ( ) ) <NEWLINE> y = math . sqrt ( x ) <NEWLINE> z = y // 1 <NEWLINE> print ( int ( z ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> B = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> C = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> A . sort ( ) <NEWLINE> B . sort ( ) <NEWLINE> C . sort ( ) <NEWLINE> ans = 0 <NEWLINE> for b in B : <NEWLINE> <INDENT> a = bisect_left ( A , b ) <NEWLINE> c = bisect_right ( C , b ) <NEWLINE> ans += a * ( N - c ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
import bisect <NEWLINE> N = int ( input ( ) ) <NEWLINE> top = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> middle = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> bottom = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> top . sort ( ) <NEWLINE> middle . sort ( ) <NEWLINE> bottom . sort ( ) <NEWLINE> <NL> ans = 0 <NEWLINE> for i in middle : <NEWLINE> <INDENT> can_put_upstair = bisect . bisect_left ( top , i ) <NEWLINE> can_put_donwstair = N - bisect . bisect_right ( bottom , i ) <NEWLINE> ans += can_put_upstair * can_put_downstair <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> c = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> <COMMENT> <NL> a = sorted ( a ) <NEWLINE> b = sorted ( b ) <NEWLINE> c = sorted ( c ) <NEWLINE> <NL> <COMMENT> <NL> def lower_bound ( arr , x ) : <NEWLINE> <INDENT> l = 0 <NEWLINE> r = len ( arr ) - 1 <COMMENT> <NEWLINE> while l <= r : <NEWLINE> <INDENT> mid = ( l + r ) // 2 <COMMENT> <NEWLINE> if x == arr [ mid ] : <COMMENT> <NEWLINE> <INDENT> return mid + 1 <NEWLINE> <DEDENT> elif x < arr [ mid ] : <COMMENT> <NEWLINE> <INDENT> r = mid - 1 <NEWLINE> <DEDENT> else : <COMMENT> <NEWLINE> <INDENT> l = mid + 1 <NEWLINE> <COMMENT> <NL> <DEDENT> <DEDENT> if x > arr [ - 1 ] : <NEWLINE> <INDENT> return - 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return r + 1 <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> <DEDENT> def upper_bound ( arr , x ) : <NEWLINE> <INDENT> l = 0 <NEWLINE> r = len ( arr ) - 1 <COMMENT> <NEWLINE> while l <= r : <NEWLINE> <INDENT> mid = ( l + r ) // 2 <COMMENT> <NEWLINE> if x == arr [ mid ] : <COMMENT> <NEWLINE> <INDENT> return mid - 1 <NEWLINE> <DEDENT> elif x < arr [ mid ] : <COMMENT> <NEWLINE> <INDENT> r = mid - 1 <NEWLINE> <DEDENT> else : <COMMENT> <NEWLINE> <INDENT> l = mid + 1 <NEWLINE> <COMMENT> <NL> <DEDENT> <DEDENT> if x < arr [ 0 ] : <NEWLINE> <INDENT> return - 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return r <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> <DEDENT> count = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a_count = upper_bound ( a , b [ i ] ) + 1 <COMMENT> <NEWLINE> c_count = lower_bound ( c , b [ i ] ) + 1 <COMMENT> <NEWLINE> if a_count = - 1 or c_count = - 1 : <NEWLINE> <INDENT> count = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count += a_count * ( len ( c ) - c_count + 1 ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
import bisect <NEWLINE> n = int ( input ( ) ) <NEWLINE> x = sorted ( list ( map ( int , input ( ) . split ( ) ) ) , reverse = True ) <NEWLINE> y = sorted ( list ( map ( int , input ( ) . split ( ) ) ) , reverse = True ) <NEWLINE> z = sorted ( list ( map ( int , input ( ) . split ( ) ) ) , reverse = True ) <NEWLINE> count = 0 <NEWLINE> X = [ ] <NEWLINE> for b in range ( n ) : <NEWLINE> <INDENT> k = bisect . bisect_right ( x , y [ b ] ) <NEWLINE> X [ b ] = ( n - k ) <NEWLINE> <DEDENT> for a in range ( n ) : <NEWLINE> <INDENT> j = bisect . bisect_right ( y , z [ a ] ) <NEWLINE> count += sum ( X [ j : ] ) <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
import sys <NEWLINE> import bisect <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> input = sys . stdin . buffer . readline <NEWLINE> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> A . sort ( ) <NEWLINE> B = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> B . sort ( ) <NEWLINE> C = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> for i in B : <NEWLINE> <INDENT> a = bisect . bisect_left ( A , b ) <NEWLINE> c = bisect . bisect_right ( C , b ) <NEWLINE> ans += a * ( N - c ) <NEWLINE> <DEDENT> print ( sum ( A_count ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
from bisect import bisect_left , bisect_right <NEWLINE> <NL> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> c = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> an . sort ( ) <NEWLINE> bn . sort ( ) <NEWLINE> cn . sort ( ) <NEWLINE> <NL> cnt = 0 <NEWLINE> <NL> for b in bn : <NEWLINE> <INDENT> a = bisect_left ( an , b ) <NEWLINE> c = bisect_right ( cn , b ) <NEWLINE> cnt += a * ( n - c ) <NEWLINE> <DEDENT> print ( cnt ) <NEWLINE>
import sys <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> n = sys . stdin . readline ( ) <NEWLINE> <NL> astr = sys . stdin . readline ( ) <NEWLINE> bstr = sys . stdin . readline ( ) <NEWLINE> cstr = sys . stdin . readline ( ) <NEWLINE> <NL> a = list ( map ( int , astr . strip ( ) . split ( <STRING> ) ) ) <NEWLINE> b = list ( map ( int , bstr . strip ( ) . split ( <STRING> ) ) ) <NEWLINE> c = list ( map ( int , cstr . strip ( ) . split ( <STRING> ) ) ) <NEWLINE> <NL> a . sort ( ) <NEWLINE> b . sort ( ) <NEWLINE> c . sort ( ) <NEWLINE> <NL> cnt = 0 <NEWLINE> <NL> bc = [ ] <NEWLINE> sum = 0 <NEWLINE> for bi in reversed ( b ) : <NEWLINE> <INDENT> ct = c [ binary ( bi , c ) : ] <NEWLINE> sum += len ( ct ) <NEWLINE> bc . append ( sum ) <NEWLINE> <DEDENT> bc . reverse ( ) <NEWLINE> <NL> cnt = 0 <NEWLINE> for ai in a : <NEWLINE> <INDENT> bi = binary ( ai , b ) <NEWLINE> cnt += bc [ bi ] <NEWLINE> <NL> <DEDENT> print ( cnt ) <NEWLINE> <NL> <NL> <DEDENT> def binary ( x , li ) : <NEWLINE> <INDENT> upper = len ( li ) <NEWLINE> lower = - 1 <NEWLINE> index = int ( ( upper + lower ) / 2 ) <NEWLINE> <NL> <NL> while upper - lower > 1 : <NEWLINE> <INDENT> if ( x < li [ index ] ) : <NEWLINE> <INDENT> upper = index <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> lower = index <NEWLINE> <DEDENT> index = int ( ( upper + lower ) / 2 ) <NEWLINE> <NL> <DEDENT> return upper <NEWLINE> <NL> <NL> <DEDENT> main ( ) <NEWLINE>
import sys <NEWLINE> from bisect import bisect <NEWLINE> from itertools import accumulate <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> input = sys . stdin . buffer . readline <NEWLINE> n = int ( input ( ) ) <NEWLINE> a = sorted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = sorted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> c = sorted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <COMMENT> <NL> b_c_cnt = [ len ( c [ bisect ( c , b [ i ] ) : ] ) for i in range ( n ) ] <NEWLINE> <COMMENT> <NL> acc = list ( accumulate ( b_c_cnt [ : : - 1 ] ) ) [ : : - 1 ] <NEWLINE> ans = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> ans += acc [ bisect ( b , a [ i ] ) ] <NEWLINE> <DEDENT> print ( ans ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> abc = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( 3 ) ] <NEWLINE> sum = 0 <NEWLINE> for _ in range ( n ) : <NEWLINE> <INDENT> abc [ 1 ] . append ( abc [ 0 ] [ i ] ) <NEWLINE> abc [ 1 ] . sort ( ) <NEWLINE> abc [ 2 ] . sort ( ) <NEWLINE> p = abc [ 1 ] . index ( abc [ 0 ] [ i ] ) <NEWLINE> for k in range ( p + 1 , n ) : <NEWLINE> <INDENT> abc [ 2 ] . append ( a [ 1 ] [ k ] ) <NEWLINE> q = abc [ 2 ] . index ( abc [ 1 ] [ k ] ) <NEWLINE> sum += n - q - 1 <NEWLINE> abc [ 1 ] . remove ( abc [ 0 ] [ i ] ) <NEWLINE> abc [ 2 ] . remove ( a [ 1 ] [ k ] ) <NEWLINE> <DEDENT> <DEDENT> print ( sum ) <NEWLINE> <NL> <NL>
import sys <NEWLINE> from bisect import bisect_right <NEWLINE> read = sys . stdin . read <NEWLINE> readline = sys . stdin . readline <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> n = int ( readline ( ) ) <NEWLINE> a , b , c = ( list ( map ( int , lst . split ( ) ) ) for lst in read ( ) . splitlines ( ) ) <NEWLINE> a . sort ( ) <NEWLINE> b . sort ( ) <NEWLINE> c = [ - x for x in c ] <NEWLINE> c . sort ( ) <NEWLINE> print ( sum ( bisect_right ( x , a ) * bisect_right ( - x , c ) for x in b ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <NL> <NL> <DEDENT>
from heapq import heappush , heappop <NEWLINE> <NL> <NL> def dijkstra ( graph : list , n : int , v_s : int , INF : int = float ( <STRING> ) ) -> list : <NEWLINE> <COMMENT> <NL> <INDENT> dist = [ INF ] * n <NEWLINE> <NL> dist [ v_s ] = 0 <NEWLINE> heap = [ ( 0 , v_s ) ] <COMMENT> <NEWLINE> while heap : <NEWLINE> <INDENT> dist2v , v_from = heappop ( heap ) <NEWLINE> if dist [ v_from ] < dist2v : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> for cost , v_to in graph [ v_from ] : <NEWLINE> <INDENT> dist_cand = dist2v + cost <NEWLINE> if dist_cand < dist [ v_to ] : <NEWLINE> <INDENT> dist [ v_to ] = dist_cand <NEWLINE> heappush ( heap , ( dist [ v_to ] , v_to ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return dist <NEWLINE> <NL> <NL> <DEDENT> k = int ( input ( ) ) <NEWLINE> <NL> graph = [ [ ] for _ in range ( k ) ] <NEWLINE> for i in range ( 1 , k ) : <NEWLINE> <INDENT> graph [ i ] . append ( ( 1 , i + 1 ) ) <NEWLINE> graph [ i ] . append ( ( 0 , 10 * i % k ) ) <NEWLINE> <NL> <DEDENT> dist = dijkstra ( graph , k , 1 ) <NEWLINE> ans = dist [ 0 ] + 1 <NEWLINE> print ( ans ) <NEWLINE>
import bisect <NEWLINE> from collections import deque <NEWLINE> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> B = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> C = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> A . sort ( ) <NEWLINE> B . sort ( ) <NEWLINE> C . sort ( ) <NEWLINE> <NL> d = deque ( [ ] ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> n = bisect . bisect_right ( C , B [ N - 1 - i ] ) <NEWLINE> if len ( d ) == 0 : <NEWLINE> <INDENT> d . appendleft ( N - n ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> d . appendleft ( N - n + d [ 0 ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> ans = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> n = bisect . bisect_right ( B , A [ i ] ) <NEWLINE> ans += d [ n ] <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> B = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> C = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> A = sorted ( A ) <NEWLINE> B = sorted ( B ) <NEWLINE> C = sorted ( C ) <NEWLINE> <NL> <COMMENT> <NL> import bisect as bis <NEWLINE> <NL> for i in range ( 0 , N ) : <NEWLINE> <INDENT> BSC [ i ] = N - bis . bisect_right ( C , B [ i ] ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> res = 2 * b - A <NEWLINE> print ( res ) <NEWLINE>
r = int ( input ( ) ) <NEWLINE> g = int ( input ( ) ) <NEWLINE> print ( 2 g - r ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( b * 2 - a ) <NEWLINE>
r = int ( input ( ) ) <NEWLINE> g = int ( input ( ) ) <NEWLINE> print ( g * 2 - a ) <NEWLINE>
r , g = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( 2 * g - r ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> print ( 2 b - a ) <NEWLINE>
R , G = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( G * 2 - R ) <NEWLINE>
print ( - input ( ) + input ( ) * 2 ) <NEWLINE>
R = int ( input ( ) ) <NEWLINE> G = int ( input ( ) ) <NEWLINE> <NL> sa = G - B <NEWLINE> print ( G + sa ) <NEWLINE>
R , G = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( 2 * G - R ) <NEWLINE>
R , G = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( 2 * G - R ) <NEWLINE>
R , G = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> ans = 2 * G - R <NEWLINE> print ( ans ) <NEWLINE>
print ( chr ( ord ( input ( ) ) + 1 ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> K = int ( input ( ) ) <NEWLINE> a = 1 <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> a = min ( a * 2 , a + k ) <NEWLINE> <DEDENT> print ( a ) <NEWLINE>
<NL> n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> dis = 1 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if dis * 2 <= dis + k : <NEWLINE> <INDENT> dis *= 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dis += k <NEWLINE> <DEDENT> <DEDENT> print ( dis ) <NEWLINE>
<NL> def main ( ) : <NEWLINE> <NL> <INDENT> S_part = list ( input ( ) ) <NEWLINE> T_hint = list ( input ( ) ) <NEWLINE> <NL> N = len ( S_part ) <NEWLINE> ans = [ ] <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> index_init = i <NEWLINE> <NL> if ( index_init + len ( T_hint ) <= N ) : <NEWLINE> <INDENT> s = S_part [ index_init : index_init + len ( T_hint ) ] <NEWLINE> module = <STRING> . join ( S_part [ index_init + len ( T_hint ) ] ) <NEWLINE> <NL> <NL> if ( <STRING> in s ) : <NEWLINE> <INDENT> FLAG = True <NEWLINE> <NL> for j in range ( len ( s ) ) : <NEWLINE> <INDENT> if ( T_hint [ j ] != s [ j ] and s [ j ] == <STRING> ) : <NEWLINE> <INDENT> s [ j ] = T_hint [ j ] <NEWLINE> <NL> <DEDENT> elif ( T_hint [ j ] != s [ j ] and s [ j ] != <STRING> ) : <NEWLINE> <INDENT> FLAG = False <NEWLINE> break <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if ( FLAG ) : <NEWLINE> <INDENT> ans_left = <STRING> . join ( S_part [ : index_init ] ) <NEWLINE> ans_right = <STRING> . join ( s ) <NEWLINE> <NL> <COMMENT> <NL> tmp_ans = ans_left + ans_right + module <NEWLINE> <NL> <NL> tmp_ans = tmp_ans . replace ( <STRING> , <STRING> ) <NEWLINE> <NL> ans . append ( tmp_ans ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> ans . sort ( ) <NEWLINE> <NL> if ( S_part . count ( <STRING> ) == 0 ) : <NEWLINE> <INDENT> print ( S_part ) <NEWLINE> <DEDENT> elif ( len ( ans ) > 0 ) : <NEWLINE> <INDENT> print ( ans [ 0 ] ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
from copy import deepcopy <NEWLINE> S = list ( input ( ) ) <NEWLINE> T = list ( input ( ) ) <NEWLINE> s_num = len ( S ) <NEWLINE> t_num = len ( T ) <NEWLINE> S_copy = deepcopy ( S ) <NEWLINE> if s < t : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( s_num - t_num , - 1 , - 1 ) : <NEWLINE> <INDENT> s_key = S [ i : i + t_num ] <NEWLINE> judge = 0 <NEWLINE> for s , t in zip ( s_key , T ) : <NEWLINE> <INDENT> if s == <STRING> : <NEWLINE> <INDENT> judge += 1 <NEWLINE> <DEDENT> elif s == t : <NEWLINE> <INDENT> judge += 1 <NEWLINE> <DEDENT> <DEDENT> if judge == t_num : <NEWLINE> <INDENT> S_copy [ i : i + t_num ] = T <NEWLINE> <DEDENT> <DEDENT> if S == S_copy : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for i in S_copy : <NEWLINE> <INDENT> if i == <STRING> : <NEWLINE> <INDENT> print ( <STRING> , end = <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( i , end = <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
s , t = input ( ) , input ( ) ; l , m = len ( s ) , len ( t ) <NEWLINE> for i in range ( l - m + 1 ) : <NEWLINE> <INDENT> if all ( c in <STRING> + d for c , d in zip ( S [ - i - m : ] , t ) ) : s = s . replace ( * <STRING> ) ; exit ( print ( s [ : - i - m ] + t + s [ l - i : ] ) ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE>
S = input ( ) <NEWLINE> T = input ( ) <NEWLINE> n = len ( S ) <NEWLINE> m = len ( T ) <NEWLINE> <NL> for i in range ( n - m + 1 , - 1 , - 1 ) : <NEWLINE> <INDENT> x = S [ i : i + m ] <NEWLINE> for j in range ( m + 1 ) : <NEWLINE> <INDENT> if j == m : <NEWLINE> <INDENT> print ( ( S [ : i ] + T + S [ i + m : ] ) . replace ( <STRING> , <STRING> ) ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if x [ j ] == <STRING> : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> elif x [ j ] != T [ j ] : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> w = [ ] <NEWLINE> for i in range ( len ( s ) - len ( t ) + 1 ) : <NEWLINE> <INDENT> f = True <NEWLINE> sx = s [ i : i + len ( t ) ] <NEWLINE> for si , ti in zip ( sx , t ) : <NEWLINE> <INDENT> if si != ti and si != <STRING> : <NEWLINE> <INDENT> f = False <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT> if f : <NEWLINE> <INDENT> w . append ( ( s [ : i ] + t ) . replace ( <STRING> , <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT> if w == [ ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> w . sort ( ) <NEWLINE> print ( w [ 0 ] ) <NEWLINE>
print ( <STRING> if any ( [ input ( ) [ i : i + 2 ] == <STRING> for i in range ( len ( input ( ) ) - 1 ) ] ) else <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> if s in <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> else : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
S = input ( ) <NEWLINE> if <STRING> in S : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import sys <NEWLINE> <NL> input = sys . stdin . readline <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> ans = 0 <NEWLINE> n = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> allB = exc = 1 <NEWLINE> for i in n : <NEWLINE> <INDENT> allB *= 3 <NEWLINE> if i % 2 == 0 : <NEWLINE> <INDENT> exc *= 2 <NEWLINE> <DEDENT> <DEDENT> ans = allB - exc <NEWLINE> print ( ans ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( c ) <NEWLINE> <DEDENT> elif b == c : <NEWLINE> <INDENT> print ( a ) : <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( b ) <NEWLINE> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> ls = [ ] <NEWLINE> side = [ [ - 1 , - 1 ] , [ - 1 , 0 ] , [ - 1 , 1 ] , [ 0 , - 1 ] , [ 0 , 1 ] , [ 1 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> ls . append ( list ( input ( ) ) ) <NEWLINE> <DEDENT> for i in range ( h ) : <NEWLINE> <INDENT> ans2 = <STRING> <NEWLINE> for j in range ( w ) : <NEWLINE> <INDENT> ans = 0 <NEWLINE> if ls [ i ] [ j ] == <STRING> : <NEWLINE> <INDENT> ans2 += <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for k in range ( 8 ) : <NEWLINE> <INDENT> if i + side [ k ] [ 0 ] < 0 or j + side [ k ] [ 1 ] < 0 or h <= i + side [ k ] [ 0 ] or w <= j + side [ k ] [ 1 ] : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += ( 1 if ls [ i + side [ k ] [ 0 ] ] [ j + side [ k ] [ 1 ] ] == <STRING> else 0 ) <NEWLINE> <DEDENT> <DEDENT> ans2 += str ( ans ) <NEWLINE> <DEDENT> <DEDENT> print ( ans2 ) <NEWLINE> <DEDENT>
if a == b : print ( c ) <NEWLINE> elif a == c : print ( b ) <NEWLINE> else : print ( a ) <NEWLINE>
A , B , C = map ( int , input ( ) . slpit ( ) ) <NEWLINE> <NL> if A == B : <NEWLINE> <INDENT> print ( C ) <NEWLINE> <DEDENT> elif B == C : <NEWLINE> <INDENT> print ( A ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( B ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input . split ( ) ) <NEWLINE> <NL> if a == b : <NEWLINE> <INDENT> print ( c ) <NEWLINE> <DEDENT> elif a == c : <NEWLINE> <INDENT> print ( b ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( a if b = c else b if a = c else c ) <NEWLINE>
a = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for i in a : <NEWLINE> <INDENT> if a . count ( i ) > 1 : <NEWLINE> <INDENT> print ( i ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
l = liet ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> for ll in l : <NEWLINE> <INDENT> if l . count ( ll ) == 1 : <NEWLINE> <INDENT> print ( ll ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( a ^ b ^ c ) <NEWLINE>
import sys <NEWLINE> <NL> read = sys . stdin . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> sys . setrecursionlimit ( 10 ** 8 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> MOD = 10 ** 9 + 7 <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> A , B , C == map ( int , readline ( ) . split ( ) ) <NEWLINE> if A == B : <NEWLINE> <INDENT> print ( C ) <NEWLINE> <DEDENT> elif B == C : <NEWLINE> <INDENT> print ( A ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( B ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( a if b == c else b if a == c else c if a == b ) <NEWLINE>
List = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> res = 0 <NEWLINE> for i in range ( 3 ) : <NEWLINE> <INDENT> for j in range ( i , 3 ) : <NEWLINE> <INDENT> if List [ i ] == List [ j ] : <NEWLINE> <INDENT> res = 6 - i + 1 - j + 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( List [ res ] ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a == b : <NEWLINE> <INDENT> ans = c <NEWLINE> <DEDENT> elif b == c : <NEWLINE> <INDENT> ans = a : <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = b <NEWLINE> <DEDENT> print ( a + b + c - ans ) <NEWLINE>
A , B , C = map ( int , input ( ) . slpit ( ) ) <NEWLINE> <NL> if A == B : <NEWLINE> <INDENT> print ( C ) <NEWLINE> <DEDENT> elif B == C : <NEWLINE> <INDENT> print ( A ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( B ) <NEWLINE> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> l = [ list ( input ( ) ) for i in range ( h ) ] <NEWLINE> ans = [ [ 0 ] * w for i in range ( h ) ] <NEWLINE> <NL> for i in range ( h ) : <NEWLINE> <INDENT> for j in range ( w ) : <NEWLINE> <INDENT> if l [ i ] [ j ] == <STRING> : <NEWLINE> <INDENT> ans [ i ] [ j ] == <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for a in range ( - 1 , 2 ) : <NEWLINE> <INDENT> for b in range ( - 1 , 2 ) : <NEWLINE> <INDENT> if i + a < h and j + b < w ansl [ i + a ] [ j + b ] == <STRING> : <NEWLINE> <INDENT> ans [ i ] [ j ] += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> for i in range ( h ) : <NEWLINE> <INDENT> print ( * ans [ i ] ) <NEWLINE> <DEDENT>
import copy <NEWLINE> H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> List = [ ] <NEWLINE> for i in range ( H ) : <NEWLINE> <INDENT> List . append ( input ( ) ) <NEWLINE> <DEDENT> resList = copy . deepcopy ( List ) <NEWLINE> <NL> def bombCheck ( x , y , ListX ) : <NEWLINE> <INDENT> a = 0 <NEWLINE> b = 0 <NEWLINE> res = 0 <NEWLINE> if ListX [ x ] [ y ] == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> for i in range ( - 1 , 2 , 1 ) : <NEWLINE> <INDENT> a = x + i <NEWLINE> if a < 0 or a >= W : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for j in range ( - 1 , 2 , 1 ) : <NEWLINE> <INDENT> b = y + j <NEWLINE> if b < 0 or b >= H : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if i == 0 and j == 0 : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if List [ a ] [ b ] == <STRING> : <NEWLINE> <INDENT> res += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> return str ( res ) <NEWLINE> <NL> <DEDENT> for i in range ( H ) : <NEWLINE> <INDENT> resList [ i ] = <STRING> <NEWLINE> for j in range ( W ) : <NEWLINE> <INDENT> resList [ i ] += bombCheck ( i , j , List ) <NEWLINE> <DEDENT> <DEDENT> for i in resList : <NEWLINE> <INDENT> print ( i ) <NEWLINE> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> l = [ [ <STRING> ] * ( w + 2 ) ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> l . append ( [ <STRING> ] + [ i for i in input ( ) ] + [ <STRING> ] ) <NEWLINE> <DEDENT> l . append ( [ <STRING> ] * ( w + 2 ) ) <NEWLINE> <NL> def count ( i , j ) : <NEWLINE> <INDENT> if l [ i ] [ j ] == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> c = 0 <NEWLINE> for n in range ( i - 1 , i + 2 ) : <NEWLINE> <INDENT> for m in range ( j - 1 , j + 2 ) : <NEWLINE> <INDENT> if l [ n ] [ m ] == <STRING> : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return str ( c ) <NEWLINE> <NL> <DEDENT> ans = [ <STRING> . join ( [ count ( i , j ) for j in range ( 1 , 1 + w ) ] ) for i in range ( 1 , 1 + h ) ] <NEWLINE> <NL> print ( <STRING> . join ( ans ) ) <NEWLINE> h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> l = [ [ <STRING> ] * ( w + 2 ) ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> l . append ( [ <STRING> ] + [ i for i in input ( ) ] + [ <STRING> ] ) <NEWLINE> <DEDENT> l . append ( [ <STRING> ] * ( w + 2 ) ) <NEWLINE> <NL> def count ( i , j ) : <NEWLINE> <INDENT> if l [ i ] [ j ] == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> c = 0 <NEWLINE> for n in range ( i - 1 , i + 2 ) : <NEWLINE> <INDENT> for m in range ( j - 1 , j + 2 ) : <NEWLINE> <INDENT> if l [ n ] [ m ] == <STRING> : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return str ( c ) <NEWLINE> <NL> <DEDENT> ans = [ <STRING> . join ( [ count ( i , j ) for j in range ( 1 , 1 + w ) ] ) for i in range ( 1 , 1 + h ) ] <NEWLINE> <NL> print ( <STRING> . join ( ans ) ) <NEWLINE> <NL>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> s = [ list ( input ( ) ) for _ in range ( h ) ] <NEWLINE> <NL> ans = [ [ 0 ] * w for _ in range ( h ) ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> for j in range ( w ) : <NEWLINE> <INDENT> if s [ i ] [ j ] == <STRING> : ans [ i ] [ j ] = <STRING> <NEWLINE> <INDENT> for i2 in range ( i - 1 , i + 2 ) : <NEWLINE> <INDENT> if i2 < 0 or h - 1 < i2 : continue <NEWLINE> for j2 in range ( j - 1 , j + 2 ) : <NEWLINE> <INDENT> if ( j2 < 0 or w - 1 < j2 ) : continue <NEWLINE> elif ans [ i2 ] [ j2 ] == <STRING> : continue <NEWLINE> ans [ i2 ] [ j2 ] += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> for i in ans : <NEWLINE> <INDENT> print ( <STRING> . join ( map ( str , i ) ) ) <NEWLINE> <DEDENT>
H , W = map ( int , input ( ) . split ( <STRING> ) ) <NEWLINE> S = [ ] <NEWLINE> for i in range ( H ) : <NEWLINE> <INDENT> S [ i ] = input ( ) <NEWLINE> <DEDENT> for j in range ( H ) : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> for k in range ( W ) : <NEWLINE> <INDENT> if S [ j ] [ k ] == <STRING> <NEWLINE> <INDENT> if S [ j - 1 ] [ k - 1 ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> if S [ j - 1 ] [ k ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> if S [ j - 1 ] [ k + 1 ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> if S [ j ] [ k - 1 ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> if S [ j ] [ k + 1 ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> if S [ j + 1 ] [ k - 1 ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> if S [ j + 1 ] [ k ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> if S [ j ] [ k + 1 ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> S [ j ] [ k ] . replace ( cnt ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> field = [ list ( input ( ) . split ( ) ) for _ in range ( h ) ] <NEWLINE> dx = [ 1 , 0 , - 1 , 0 , 1 , - 1 , - 1 , 1 ] <NEWLINE> dy = [ 0 , 1 , 0 , - 1 , 1 , 1 , - 1 , - 1 ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> for j in range ( w ) : <NEWLINE> <INDENT> if field [ i ] [ j ] != <STRING> : <NEWLINE> <INDENT> num = 0 <NEWLINE> for k in range ( 8 ) : <NEWLINE> <INDENT> ni = i + dy [ k ] <NEWLINE> nj = j + dx [ k ] <NEWLINE> if nj < 0 or h <= nj : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> if ni < 0 or w <= ni : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> if field [ ni ] [ nj ] == <STRING> : <NEWLINE> <INDENT> num += 1 <NEWLINE> <DEDENT> <DEDENT> field [ i ] [ j ] = num <NEWLINE> <DEDENT> <DEDENT> <DEDENT> for out in field : <NEWLINE> <INDENT> print ( <STRING> . join ( out ) ) <NEWLINE> <DEDENT>
H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> S = [ list ( input ( ) ) for i in range ( H ) ] <NEWLINE> <NL> Rmin = 0 <NEWLINE> Rmax = 0 <NEWLINE> Cmin = 0 <NEWLINE> Cmax = 0 <NEWLINE> <NL> <COMMENT> <NL> for r in range ( H ) : <NEWLINE> <COMMENT> <NL> <INDENT> for c in range ( W ) : <NEWLINE> <COMMENT> <NL> <INDENT> if S [ r ] [ c ] == <STRING> : <NEWLINE> <INDENT> S [ r ] [ c ] = 0 <NEWLINE> <DEDENT> elif S [ r ] [ c ] == <STRING> : <NEWLINE> <INDENT> if r == 0 : <NEWLINE> <INDENT> Rmin = r <NEWLINE> Rmax = r + 2 <NEWLINE> <DEDENT> elif r == H - 1 : <NEWLINE> <INDENT> Rmin = r - 1 <NEWLINE> Rmax = r + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> Rmin = r - 1 <NEWLINE> Rmax = r + 2 <NEWLINE> <NL> <DEDENT> if c == 0 : <NEWLINE> <INDENT> Cmin = c <NEWLINE> Cmax = c + 2 <NEWLINE> <DEDENT> elif c == W - 1 : <NEWLINE> <INDENT> Cmin = c - 1 <NEWLINE> Cmax = c + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> Cmin = c - 1 <NEWLINE> Cmax = c + 2 <NEWLINE> <DEDENT> for i in range ( Rmin , Rmax ) : <NEWLINE> <INDENT> for t in range ( Cmin , Cmax ) : <NEWLINE> <INDENT> if S [ i ] [ t ] == <STRING> or S [ i ] [ t ] == 0 : <NEWLINE> <INDENT> S [ i ] [ t ] = 1 <NEWLINE> <DEDENT> elif not S [ i ] [ t ] == <STRING> : <NEWLINE> <INDENT> S [ i ] [ t ] += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> for i in range ( H ) : <NEWLINE> <INDENT> print ( <STRING> . join ( S [ i ] ) ) <NEWLINE> <DEDENT>
Y_DIR [ - 1 , 0 , 1 ] <NEWLINE> X_DIR [ - 1 , 0 , 1 ] <NEWLINE> def count_bomb ( y , x ) : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> for yd in Y_DIR : <NEWLINE> <INDENT> yy = y + yd <NEWLINE> if not ( 0 <= yy < h ) : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> for xd in X_DIR : <NEWLINE> <INDENT> xx = x + xd <NEWLINE> if not ( 0 <= xx < w ) : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> if s [ yy ] [ xx ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return cnt <NEWLINE> <NL> <DEDENT> h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> s = [ ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> s . append ( input ( ) ) <NEWLINE> <DEDENT> for y in range ( h ) : <NEWLINE> <INDENT> for x in range ( w ) <NEWLINE> <INDENT> if s [ y ] [ x ] == <STRING> : <NEWLINE> <INDENT> s [ y ] [ x ] = str ( count_bomb ( y , x ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> . join ( s ) ) <NEWLINE> <NL>
<NL> H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> M = [ ] <NEWLINE> for h in range ( H ) : <NEWLINE> <INDENT> col = [ ] <NEWLINE> s = input ( ) <NEWLINE> for w in range ( W ) : <NEWLINE> <INDENT> if s [ w ] == <STRING> : <NEWLINE> <INDENT> col . append ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> col . append ( np . inf ) <NEWLINE> <DEDENT> <DEDENT> M . append ( col ) <NEWLINE> <NL> <NL> <NL> <DEDENT> for h in range ( H ) : <NEWLINE> <INDENT> for w in range ( W ) : <NEWLINE> <INDENT> flag_h0 = True <NEWLINE> flag_hM = True <NEWLINE> flag_w0 = True <NEWLINE> flag_wM = True <NEWLINE> if M [ h ] [ w ] == np . inf : <NEWLINE> <NL> <INDENT> if h == 0 : <NEWLINE> <INDENT> flag_h0 = False <NEWLINE> <DEDENT> if h == H - 1 : <NEWLINE> <INDENT> flag_hM = False <NEWLINE> <DEDENT> if w == 0 : <NEWLINE> <INDENT> flag_w0 = False <NEWLINE> <DEDENT> if w == W - 1 : <NEWLINE> <INDENT> flag_wM = False <NEWLINE> <NL> <DEDENT> if flag_h0 : <NEWLINE> <INDENT> M [ h - 1 ] [ w ] += 1 <NEWLINE> if flag_w0 : <NEWLINE> <INDENT> M [ h - 1 ] [ w - 1 ] += 1 <NEWLINE> <DEDENT> if flag_wM : <NEWLINE> <INDENT> M [ h - 1 ] [ w + 1 ] += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if flag_w0 : <NEWLINE> <INDENT> M [ h ] [ w - 1 ] += 1 <NEWLINE> <DEDENT> if flag_wM : <NEWLINE> <INDENT> M [ h ] [ w + 1 ] += 1 <NEWLINE> <NL> <DEDENT> if flag_hM : <NEWLINE> <INDENT> M [ h + 1 ] [ w ] += 1 <NEWLINE> <NL> if flag_w0 : <NEWLINE> <INDENT> M [ h + 1 ] [ w - 1 ] += 1 <NEWLINE> <DEDENT> if flag_wM : <NEWLINE> <INDENT> M [ h + 1 ] [ w + 1 ] += 1 <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> for h in range ( H ) : <NEWLINE> <INDENT> tmp_ = <STRING> <NEWLINE> for w in range ( W ) : <NEWLINE> <INDENT> if M [ h ] [ w ] < np . inf : <NEWLINE> <INDENT> tmp_ += str ( M [ h ] [ w ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> tmp_ += <STRING> <NEWLINE> <DEDENT> <DEDENT> print ( tmp_ ) <NEWLINE> <DEDENT>
H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> S = [ list ( input ( ) ) for _ in range ( H ) ] <NEWLINE> dydx = [ ( - 1 , - 1 ) , ( - 1 , 0 ) , ( - 1 , 1 ) , ( 0 , - 1 ) , ( 0 , 1 ) , ( 1 , - 1 ) , ( 1 , 0 ) , ( 1 , 1 ) ] <NEWLINE> <NL> def check ( h , w ) : <NEWLINE> <INDENT> count = 0 <NEWLINE> for dy , dx in dydx : <NEWLINE> <INDENT> if 0 <= h + dy < H and 0 <= w + dx < W and S [ h + dy ] [ w + dx ] == <STRING> : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> return count <NEWLINE> <NL> <NL> <NL> <DEDENT> for h in range ( H ) : <NEWLINE> <INDENT> for w in range ( W ) : <NEWLINE> <INDENT> if S [ h ] [ w ] == <STRING> : <NEWLINE> <INDENT> S [ h ] [ w ] = check ( h , w ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> . join ( S [ h ] ) <NEWLINE> <NL> <DEDENT>
class UnionFind : <NEWLINE> <INDENT> def __init__ ( self , n ) : <NEWLINE> <INDENT> self . nodes = n <NEWLINE> self . parents = [ i for i in range ( n ) ] <NEWLINE> self . sizes = [ 1 ] * n <NEWLINE> self . rank = [ 0 ] * n <NEWLINE> <NL> <DEDENT> def find ( self , i ) : <NEWLINE> <INDENT> if self . parents [ i ] == i : <NEWLINE> <INDENT> return i <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . parents [ i ] = self . find ( self . parents [ i ] ) <COMMENT> <NEWLINE> return self . parents [ i ] <NEWLINE> <NL> <DEDENT> <DEDENT> def unite ( self , i , j ) : <NEWLINE> <INDENT> pi = self . find ( i ) <NEWLINE> pj = self . find ( j ) <NEWLINE> if pi != pj : <NEWLINE> <INDENT> if self . rank [ pi ] < self . rank [ pj ] : <NEWLINE> <INDENT> self . sizes [ pj ] += self . sizes [ pi ] <NEWLINE> self . parents [ pi ] = pj <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . sizes [ pi ] += self . sizes [ pj ] <NEWLINE> self . parents [ pj ] = pi <NEWLINE> if self . rank [ pi ] == self . rank [ pj ] : <NEWLINE> <INDENT> self . rank [ pi ] += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> def same ( self , i , j ) : <NEWLINE> <INDENT> return self . find ( i ) == self . find ( j ) <NEWLINE> <DEDENT> def get_parents ( self ) : <NEWLINE> <INDENT> for n in range ( self . nodes ) : <NEWLINE> <INDENT> selff . find ( n ) <NEWLINE> <DEDENT> return self . parents <NEWLINE> <NL> <DEDENT> <DEDENT> adj = [ ] <NEWLINE> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> uf = UnionFind ( n ) <NEWLINE> for j in range ( m ) : <NEWLINE> <INDENT> if i == j : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> uf . unite ( adj [ j ] ) <NEWLINE> <DEDENT> if len ( set ( uf . get_parents ( ) ) ) != 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
from typing import List , Tuple <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> g = [ ] <NEWLINE> for _ in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> g . append ( ( a , b ) ) <NEWLINE> <DEDENT> print ( b ( n , m , g ) ) <NEWLINE> <NL> <NL> <DEDENT> def b ( n : int , m : int , g : List [ Tuple [ int , int ] ] ) : <NEWLINE> <INDENT> ret = 0 <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> v = set ( ) <NEWLINE> w = [ 1 ] <NEWLINE> while w : <NEWLINE> <INDENT> now = w . pop ( ) <NEWLINE> v . add ( now ) <NEWLINE> for j , node in enumerate ( g ) : <NEWLINE> <INDENT> if j == i : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> if node [ 0 ] == now and node [ 1 ] not in v : <NEWLINE> <INDENT> w . append ( node [ 1 ] ) <NEWLINE> <DEDENT> elif node [ 1 ] == now and node [ 0 ] not in v : <NEWLINE> <INDENT> w . append ( node [ 0 ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> if len ( v ) != n : <NEWLINE> <INDENT> ret += 1 <NEWLINE> <DEDENT> <DEDENT> return ret <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> <NL> print ( s [ : : ( s . len ( ) - 8 ) ] ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s - <STRING> ) <NEWLINE>
<STRING> <NEWLINE> import sys <NEWLINE> sys . setrecursionlimit ( 200000 ) <NEWLINE> n = len ( edges ) <NEWLINE> colors = [ - 1 ] * ( n + 1 ) <NEWLINE> def judgeBiGragh ( edges ) : <NEWLINE> <INDENT> def paint ( v , c ) : <NEWLINE> <INDENT> if colors [ v ] == - 1 : <NEWLINE> <INDENT> colors [ v ] = c <NEWLINE> nxC = ( c + 1 ) % 2 <NEWLINE> for nxV in edges [ v ] : <NEWLINE> <INDENT> result = paint ( nxV , nxC ) <NEWLINE> if result == False : <NEWLINE> <INDENT> return result <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if colors [ v ] != c : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> return True <NEWLINE> <DEDENT> return paint ( 1 , 0 ) <NEWLINE> <NL> <DEDENT> N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> edges = [ [ ] for _ in range ( N + 1 ) ] <NEWLINE> for _ in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> edges [ a ] . append ( b ) <NEWLINE> edges [ b ] . append ( a ) <NEWLINE> <DEDENT> def choose ( n , k ) : <NEWLINE> <INDENT> import math <NEWLINE> return math . factorial ( n ) // ( math . factorial ( n - k ) * math . factorial ( k ) ) <NEWLINE> <DEDENT> if judgeBiGragh ( edges ) : <NEWLINE> <INDENT> cnt0 = colors . count ( 0 ) <NEWLINE> cnt1 = colors . count ( 1 ) <NEWLINE> ans = cnt0 * cnt1 - M <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = choose ( N , 2 ) - M <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> for i in range ( 1 , 3501 ) : <NEWLINE> <INDENT> for j in range ( 1 , 3501 ) : <NEWLINE> <INDENT> t1 = n * i * j <NEWLINE> t2 = 4 * i * j - n * j - n * i <NEWLINE> if t1 % t2 == 0 and 1 <= t1 // t2 < 3500 : <NEWLINE> <INDENT> print ( i , j , t1 // t2 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n = int ( input ( ) ) <NEWLINE> <NL> for h in range ( 3501 ) : <NEWLINE> <INDENT> for w in range ( 3501 ) : <NEWLINE> <INDENT> bns = n * h * w <NEWLINE> bnb = 4 * h * w - n * ( h + w ) <NEWLINE> if bns % bnb == 0 : <NEWLINE> <INDENT> print ( h , w , bns // bnb ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
import bisect , collections , copy , heapq , itertools , math , string , sys <NEWLINE> input = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> sys . setrecursionlimit ( 10 ** 7 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> def I ( ) : return int ( input ( ) ) <NEWLINE> def F ( ) : return float ( input ( ) ) <NEWLINE> def SS ( ) : return input ( ) <NEWLINE> def LI ( ) : return [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> def LI_ ( ) : return [ int ( x ) - 1 for x in input ( ) . split ( ) ] <NEWLINE> def LF ( ) : return [ float ( x ) for x in input ( ) . split ( ) ] <NEWLINE> def LSS ( ) : return input ( ) . split ( ) <NEWLINE> <NL> def resolve ( ) : <NEWLINE> <INDENT> N = I ( ) <NEWLINE> <NL> ans = ( 0 , 0 , 0 ) <NEWLINE> for h in range ( 1 , 3501 ) : <NEWLINE> <INDENT> for n in range ( 1 , 3501 ) : <NEWLINE> <COMMENT> <NL> <INDENT> num = N * n * h <NEWLINE> denom = 4 * h * n - N * ( h + n ) <NEWLINE> if denom > 0 and num % denom == 0 : <NEWLINE> <INDENT> w = num // denom <NEWLINE> ans = ( h , n , w ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( * ans ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
import os <NEWLINE> import sys <NEWLINE> import numpy as np <NEWLINE> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> def bit_sum ( bit , i ) : <COMMENT> <NEWLINE> <COMMENT> <NL> <INDENT> res = 0 <NEWLINE> while i : <NEWLINE> <INDENT> res += bit [ i ] <NEWLINE> i -= i & - i <NEWLINE> <DEDENT> return res <NEWLINE> <NL> <DEDENT> def bit_add ( bit , i , val ) : <COMMENT> <NEWLINE> <INDENT> n = len ( bit ) <NEWLINE> while i < n : <NEWLINE> <INDENT> bit [ i ] += val <NEWLINE> i += i & - i <NEWLINE> <NL> <COMMENT> <NL> <NL> <NL> <DEDENT> <DEDENT> def inversion_number ( arr ) : <COMMENT> <NEWLINE> <COMMENT> <NL> <INDENT> n = len ( arr ) <NEWLINE> arr = np . argsort ( arr ) + 1 <NEWLINE> bit = np . zeros ( n + 1 , dtype = np . int64 ) <NEWLINE> res = n * ( n - 1 ) >> 1 <NEWLINE> for val in arr : <NEWLINE> <INDENT> res -= bit_sum ( bit , val ) <NEWLINE> bit_add ( bit , val , 1 ) <NEWLINE> <DEDENT> return res <NEWLINE> <NL> <NL> <COMMENT> <NL> <NL> <DEDENT> numba_config = [ <NEWLINE> <INDENT> [ <STRING> , <STRING> ] , <NEWLINE> [ <STRING> , <STRING> ] , <NEWLINE> [ <STRING> , <STRING> ] , <NEWLINE> <DEDENT> ] <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <NEWLINE> <INDENT> from numba . pycc import CC <NEWLINE> cc = CC ( <STRING> ) <NEWLINE> for func_name , types in numba_config : <NEWLINE> <INDENT> cc . export ( func_name , types ) ( vars ( ) [ func_name ] ) <NEWLINE> cc . compile ( ) <NEWLINE> <DEDENT> exit ( ) <NEWLINE> <DEDENT> elif os . name == <STRING> : <NEWLINE> <INDENT> exec ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> from numba import njit <NEWLINE> for func_name , types in numba_config : <NEWLINE> <INDENT> vars ( ) [ func_name ] = njit ( types , cache = True ) ( vars ( ) [ func_name ] ) <NEWLINE> <DEDENT> print ( <STRING> , file = sys . stderr ) <NEWLINE> <NL> <COMMENT> <NL> <NL> <NL> <DEDENT> N = int ( input ( ) ) <NEWLINE> ABC = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] <NEWLINE> A , B , C = zip ( * ABC ) <NEWLINE> th = N * ( N - 1 ) // 2 // 2 + 1 <NEWLINE> def solve ( A , B , C ) : <NEWLINE> <COMMENT> <NL> <INDENT> if N < 100 : <NEWLINE> <INDENT> ok = - 1e10 <NEWLINE> ng = 1e10 <NEWLINE> n_iteration = 70 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ok = - 1e4 <NEWLINE> ng = 1e4 <NEWLINE> n_iteration = 46 <NEWLINE> <DEDENT> A , B , C = zip ( * sorted ( zip ( A , B , C ) , key = lambda x : - x [ 0 ] / x [ 1 ] ) ) <NEWLINE> A = np . array ( A ) <NEWLINE> B = np . array ( B ) <NEWLINE> C = np . array ( C ) <NEWLINE> for _ in range ( n_iteration ) : <NEWLINE> <INDENT> x = ( ok + ng ) * 0.5 <NEWLINE> Y = ( - A * x + C ) / B <NEWLINE> inv_num = inversion_number ( Y ) <NEWLINE> if inv_num >= th : <NEWLINE> <INDENT> ok = x <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ng = x <NEWLINE> <DEDENT> <DEDENT> return ok <NEWLINE> <NL> <DEDENT> print ( solve ( A , B , C ) , solve ( B , A , C ) ) <NEWLINE>
import os <NEWLINE> import sys <NEWLINE> <NL> import numpy as np <NEWLINE> <NL> <NL> def solve ( inp ) : <NEWLINE> <INDENT> def bit_add ( arr , n , i , x ) : <NEWLINE> <INDENT> while i <= n : <NEWLINE> <INDENT> arr [ i ] += x <NEWLINE> i += i & - i <NEWLINE> <NL> <DEDENT> <DEDENT> def bit_sum ( arr , i ) : <NEWLINE> <INDENT> result = 0 <NEWLINE> while i > 0 : <NEWLINE> <INDENT> result += arr [ i ] <NEWLINE> i ^= i & - i <NEWLINE> <DEDENT> return result <NEWLINE> <NL> <DEDENT> n = int ( inp [ 0 ] ) <NEWLINE> lim = ( n * ( n - 1 ) // 2 + 1 ) // 2 <NEWLINE> aaa = inp [ 1 : : 3 ] <NEWLINE> bbb = inp [ 2 : : 3 ] <NEWLINE> ccc = inp [ 3 : : 3 ] <NEWLINE> <NL> inclines_x = [ ] <NEWLINE> inclines_y = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> inclines_x . append ( ( aaa [ i ] / bbb [ i ] , i ) ) <NEWLINE> inclines_y . append ( ( bbb [ i ] / aaa [ i ] , i ) ) <NEWLINE> <DEDENT> inclines_x . sort ( ) <NEWLINE> inclines_y . sort ( ) <NEWLINE> incline_rank_x = np . zeros ( n , dtype = np . int64 ) <NEWLINE> incline_rank_y = np . zeros ( n , dtype = np . int64 ) <NEWLINE> for k in range ( n ) : <NEWLINE> <INDENT> incline_rank_x [ inclines_x [ k ] [ 1 ] ] = n - k <NEWLINE> incline_rank_y [ inclines_y [ k ] [ 1 ] ] = n - k <NEWLINE> <NL> <DEDENT> def check_x ( m ) : <NEWLINE> <INDENT> yyy = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> yyy . append ( ( ( ccc [ i ] - aaa [ i ] * m ) / bbb [ i ] , i ) ) <NEWLINE> <DEDENT> yyy . sort ( ) <NEWLINE> <NL> bit = np . zeros ( n + 1 , dtype = np . int64 ) <NEWLINE> intersection_left = 0 <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> i = yyy [ j ] [ 1 ] <NEWLINE> k = incline_rank_x [ i ] <NEWLINE> intersection_left += bit_sum ( bit , k ) <NEWLINE> bit_add ( bit , n + 1 , k , 1 ) <NEWLINE> <NL> <DEDENT> return intersection_left >= lim <NEWLINE> <NL> <DEDENT> def check_y ( m ) : <NEWLINE> <INDENT> xxx = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> xxx . append ( ( ( ccc [ i ] - bbb [ i ] * m ) / aaa [ i ] , i ) ) <NEWLINE> <DEDENT> xxx . sort ( ) <NEWLINE> <NL> bit = np . zeros ( n + 1 , dtype = np . int64 ) <NEWLINE> intersection_left = 0 <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> i = xxx [ j ] [ 1 ] <NEWLINE> k = incline_rank_y [ i ] <NEWLINE> intersection_left += bit_sum ( bit , k ) <NEWLINE> bit_add ( bit , n + 1 , k , 1 ) <NEWLINE> <NL> <DEDENT> return intersection_left >= lim <NEWLINE> <NL> <DEDENT> l = - 2.0 * 10 ** 8 <NEWLINE> r = 2.0 * 10 ** 8 <NEWLINE> while l + 1e-9 < r : <NEWLINE> <INDENT> m = ( l + r ) / 2 <NEWLINE> if check_x ( m ) : <NEWLINE> <INDENT> r = m <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> l = m <NEWLINE> <DEDENT> <DEDENT> x = l <NEWLINE> <NL> l = - 2.0 * 10 ** 8 <NEWLINE> r = 2.0 * 10 ** 8 <NEWLINE> while l + 1e-9 < r : <NEWLINE> <INDENT> m = ( l + r ) / 2 <NEWLINE> if check_y ( m ) : <NEWLINE> <INDENT> r = m <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> l = m <NEWLINE> <DEDENT> <DEDENT> y = l <NEWLINE> <NL> return x , y <NEWLINE> <NL> <NL> <DEDENT> if sys . argv [ - 1 ] == <STRING> : <NEWLINE> <INDENT> from numba . pycc import CC <NEWLINE> <NL> cc = CC ( <STRING> ) <NEWLINE> cc . export ( <STRING> , <STRING> ) ( solve ) <NEWLINE> cc . compile ( ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> if os . name == <STRING> : <NEWLINE> <COMMENT> <NL> <INDENT> from my_module import solve <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> from numba import njit <NEWLINE> <NL> solve = njit ( <STRING> , cache = True ) ( solve ) <NEWLINE> <NL> <DEDENT> inp = np . fromstring ( sys . stdin . buffer . read ( ) , dtype = np . float64 , sep = <STRING> ) <NEWLINE> try : <NEWLINE> <INDENT> x , y = solve ( inp ) <NEWLINE> print ( x , y ) <NEWLINE> <DEDENT> except ZeroDivisionError : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> ans = 0 <NEWLINE> for c in s : <NEWLINE> <INDENT> if c == <STRING> <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
a , s , d , f , g , h = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( a + s + d + f + g + h ) <NEWLINE>
print ( list ( input ( ) ) . count ( <STRING> ) ) ] <NEWLINE>
n = int ( input ( ) ) <NEWLINE> ans = 10 ** 100 <NEWLINE> for i in range ( n ) <NEWLINE> <INDENT> t = sum ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> ans = min ( ans , t ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
<COMMENT> <NL> from collections import deque , Counter <NEWLINE> from heapq import heappop , heappush <NEWLINE> from bisect import bisect_right <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> N = int ( input ( ) ) <NEWLINE> A = [ None ] * N <NEWLINE> B = [ None ] * N <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> A [ i ] , B [ i ] = map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> print ( max ( A [ i ] ) + B . index ( max ( A [ i ] ) ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> A = [ int ( input ( ) ) for i in range ( N ) ] <NEWLINE> <NL> A . sort ( ) <NEWLINE> left = A [ 0 ] <NEWLINE> right = A [ N - 1 ] <NEWLINE> ans = right - left <NEWLINE> for i in range ( ( N - 2 ) // 2 ) : <NEWLINE> <INDENT> if i % 2 == 0 : <NEWLINE> <INDENT> ans += right - A [ 1 + i ] <NEWLINE> ans += A [ N - 2 - i ] - left <NEWLINE> right = A [ 1 + i ] <NEWLINE> left = A [ N - 2 - i ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += left - A [ 1 + i ] <NEWLINE> ans += A [ N - 2 - i ] - right <NEWLINE> left = A [ 1 + i ] <NEWLINE> right = A [ N - 2 - i ] <NEWLINE> <NL> <DEDENT> <DEDENT> if N % 2 == 1 : <NEWLINE> <INDENT> ans += max ( abs ( right - A [ N // 2 ] ) , abs ( left - A [ N // 2 ] ) ) <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
import sys <NEWLINE> readline = sys . stdin . readline <NEWLINE> read = sys . stdin . read <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> n , k = map ( int , readline ( ) . split ( ) ) <NEWLINE> ab = [ list ( map ( int , l . split ( ) ) ) for l in read ( ) . splitlines ( ) ] <NEWLINE> <NL> ek = 0 <NEWLINE> while k >> ek : <NEWLINE> <INDENT> ek += 1 <NEWLINE> <DEDENT> ans = 0 <NEWLINE> for i in range ( ek ) : <NEWLINE> <INDENT> if k >> i & 1 : <NEWLINE> <INDENT> m = ( k >> ( i + 1 ) ) << ( i + 1 ) | ( ( 1 << i ) - 1 ) <NEWLINE> ans = max ( ans , sum ( [ e [ 1 ] for e in ab if e [ 0 ] | m == m ] ) ) <NEWLINE> <DEDENT> <DEDENT> ans = max ( ans , sum ( [ e [ 1 ] for e in ab if e [ 0 ] | k == k ] ) ) <NEWLINE> print ( max ( cand ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> if len ( s ) >= 4 and s [ : 4 ] = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> if len ( s ) >= 4 & & s [ : 4 ] == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) ; <NEWLINE> <DEDENT>
from collections import Counter <NEWLINE> h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> s = <STRING> <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> s += input ( ) <NEWLINE> <DEDENT> sc = Counter ( s ) <NEWLINE> d = [ 0 , 0 , 0 ] <NEWLINE> for v in sc . values ( ) : <NEWLINE> <INDENT> d [ 0 ] += ( v // 4 ) * 4 <NEWLINE> d [ 1 ] += 2 if v % 4 >= 2 else 0 <NEWLINE> d [ 2 ] += v % 2 <NEWLINE> <NL> <DEDENT> if w % 2 == 0 and h % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> if d [ 0 ] == h * w else <STRING> ) <NEWLINE> <DEDENT> elif ( w % 2 ) * ( h % 2 ) == 1 : <NEWLINE> <INDENT> print ( <STRING> if d [ 1 ] <= ( w - 1 ) + ( h - 1 ) and d [ 2 ] == 1 else <STRING> ) <NEWLINE> <DEDENT> elif w % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> if d [ 1 ] <= w and d [ 2 ] == 0 else <STRING> ) <NEWLINE> <DEDENT> elif h % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> if d [ 1 ] <= h and d [ 2 ] == 0 else <STRING> ) <NEWLINE> <NL> <DEDENT> from collections import Counter <NEWLINE> h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> s = <STRING> <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> s += input ( ) <NEWLINE> <DEDENT> sc = Counter ( s ) <NEWLINE> d = [ 0 , 0 , 0 ] <NEWLINE> for v in sc . values ( ) : <NEWLINE> <INDENT> d [ 0 ] += ( v // 4 ) * 4 <NEWLINE> d [ 1 ] += 2 if v % 4 >= 2 else 0 <NEWLINE> d [ 2 ] += v % 2 <NEWLINE> <NL> <DEDENT> if w % 2 == 0 and h % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> if d [ 0 ] == h * w else <STRING> ) <NEWLINE> <DEDENT> elif ( w % 2 ) * ( h % 2 ) == 1 : <NEWLINE> <INDENT> print ( <STRING> if d [ 1 ] <= ( w - 1 ) + ( h - 1 ) and d [ 2 ] == 1 else <STRING> ) <NEWLINE> <DEDENT> elif w % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> if d [ 1 ] <= w and d [ 2 ] == 0 else <STRING> ) <NEWLINE> <DEDENT> elif h % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> if d [ 1 ] <= h and d [ 2 ] == 0 else <STRING> ) <NEWLINE> <NL> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> a , l = [ list ( input ( ) ) for i in range ( h ) ] , [ 0 ] * 26 <NEWLINE> for i in a : <NEWLINE> <INDENT> for j in i : l [ ord ( j ) - 97 ] += 1 <NEWLINE> <DEDENT> o , t , f = ( h // 2 ) * ( w // 2 ) , ( h // 2 ) * ( w % 2 ) + ( w // 2 ) * ( h % 2 ) , ( h % 2 ) * ( w % 2 ) <NEWLINE> for i in l : <NEWLINE> <INDENT> while o and i > 3 : o -= 1 ; i -= 4 <NEWLINE> while t and i > 1 : t -= 1 i -= 2 <NEWLINE> f -= i <NEWLINE> <DEDENT> print ( <STRING> if o == t == f == 0 else <STRING> ) <NEWLINE>
from collections import Counter <NEWLINE> h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> a = [ ] <NEWLINE> flag = True <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> a += list ( input ( ) ) <NEWLINE> <DEDENT> ca = Counter ( a ) <NEWLINE> if h % 2 == 0 and w % 2 == 0 : <NEWLINE> <INDENT> for i in ca : <NEWLINE> <INDENT> if ca [ i ] % 4 != 0 : <NEWLINE> <INDENT> flag = False <NEWLINE> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if flag : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> elif h % 2 != 0 and w % 2 != 0 : <NEWLINE> <INDENT> yon = ( h - 1 ) * ( w - 1 ) <NEWLINE> ni = h * w - yon - 1 <NEWLINE> iti = 1 <NEWLINE> for i in ca : <NEWLINE> <INDENT> while ca [ i ] > 0 <NEWLINE> <INDENT> if ca [ i ] % 4 == 0 and yon > 0 : <NEWLINE> <INDENT> ca [ i ] -= 4 <NEWLINE> yon -= 4 <NEWLINE> <DEDENT> elif ca [ i ] % 2 == 0 and ni > 0 : <NEWLINE> <INDENT> ni -= 2 <NEWLINE> ca [ i ] -= 2 <NEWLINE> <DEDENT> elif iti > 0 : <NEWLINE> <INDENT> iti -= 1 <NEWLINE> ca [ i ] -= 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> if yon == 0 and ni == 0 and iti == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if h % 2 == 0 : <NEWLINE> <INDENT> yon = ( h ) * ( w - 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> yon = ( h - 1 ) * ( w ) <NEWLINE> <DEDENT> ni = h * w - yon <NEWLINE> for i in ca : <NEWLINE> <INDENT> while ca [ i ] > 0 : <NEWLINE> <INDENT> if ca [ i ] % 4 == 0 and yon > 0 : <NEWLINE> <INDENT> ca [ i ] -= 4 <NEWLINE> yon -= 4 <NEWLINE> <DEDENT> elif ca [ i ] % 2 == 0 and ni > 0 : <NEWLINE> <INDENT> ni -= 2 <NEWLINE> ca [ i ] -= 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> if yon == 0 and ni == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT>
from collections import defaultdict <NEWLINE> H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> d = defaultdict ( int ) <NEWLINE> for _ in range ( H ) : <NEWLINE> <INDENT> for c in list ( input ( ) ) : <NEWLINE> <INDENT> d [ c ] += 1 <NEWLINE> <DEDENT> <DEDENT> for i in range ( ( H - 1 ) // 2 + 1 ) : <NEWLINE> <INDENT> for j in range ( ( W - 1 ) // 2 + 1 ) : <NEWLINE> <INDENT> s = set ( [ ( x , y ) for x , y in [ ( i , j ) , ( i , W - 1 - j ) , ( H - 1 - i , j ) , ( H - 1 - i , W - 1 - j ) ] if 0 <= x < H and 0 <= y < W ] ) <NEWLINE> f = True <NEWLINE> for k , _ in sorted ( d . items ( ) , key = lambda x : x [ 1 ] ) : <NEWLINE> <INDENT> if d [ k ] >= len ( s ) : <NEWLINE> <INDENT> d [ k ] -= len ( s ) <NEWLINE> f = False <NEWLINE> for x , y in s : <NEWLINE> <INDENT> test [ x ] [ y ] = k <NEWLINE> <DEDENT> break <NEWLINE> <DEDENT> <DEDENT> if f : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
from collections import Counter <NEWLINE> h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> A = [ ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> A . extend ( list ( input ( ) ) ) <NEWLINE> <DEDENT> cA = Counter ( A ) <NEWLINE> <NL> l1 = h * w % 2 <NEWLINE> l2 = ( h // 2 ) * ( w % 2 ) + ( w // 2 ) * ( h % 2 ) <NEWLINE> l3 = ( h // 2 ) * ( w // 2 ) <NEWLINE> if l1 : <NEWLINE> <INDENT> for key , val in cA . items ( ) : <NEWLINE> <INDENT> if val % 2 == 1 : <NEWLINE> <INDENT> cA [ key ] -= 1 <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> for _ in range ( l2 ) : <NEWLINE> <INDENT> for key , val in cA . items ( ) : <NEWLINE> <INDENT> if val % 4 = - 2 : <NEWLINE> <INDENT> cA [ key ] -= 2 <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> if sum ( val % 4 for val in cA . values ( ) ) == 0 else <STRING> ) <NEWLINE>
x , y = int ( input ( ) ) <NEWLINE> print ( ( x * x ) - y ) <NEWLINE>
int a , b <NEWLINE> a = input ( ) <NEWLINE> b = input ( ) <NEWLINE> print ( a ** 2 - b ) <NEWLINE>
<COMMENT> <NL> N , A = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> print ( N ** 2 - A ) <NEWLINE>
def get_colored_cells ( ) : <NEWLINE> <INDENT> N = input ( ) <NEWLINE> A = input ( ) <NEWLINE> return N ** 2 - A <NEWLINE> <NL> <DEDENT> get_colored_cells ( ) <NEWLINE>
<COMMENT> <NL> n , a = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> answer = n * n - a <NEWLINE> <NL> <COMMENT> <NL> print ( answer ) <NEWLINE>
<COMMENT> <NL> N = input ( ) <NEWLINE> A = input ( ) <NEWLINE> print ( N ** 2 - A ) <NEWLINE>
n , a = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( n * n - a ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a - int ( input ( ) ) <NEWLINE> print ( n ** 2 - a ) <NEWLINE>
N = input ( ) <NEWLINE> A = input ( ) <NEWLINE> print ( N ** 2 - A ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( a * a - b ) <NEWLINE>
N , A = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> ans = N ** 2 - A <NEWLINE> print ( ans ) <NEWLINE>
N , A = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( N ** 2 - A ) <NEWLINE>
a , b = [ int ( input ( ) . split ( ) ) for i in range ( 2 ) ] <NEWLINE> c = ( a * a ) <NEWLINE> print ( c - a ) <NEWLINE>
N , A = int ( input ( ) ) for i in range ( 2 ) <NEWLINE> print ( N * N - A ) <NEWLINE>
<COMMENT> <NL> <NL> N = input ( ) <NEWLINE> <NL> print ( int ( ( N * N ) ) - int ( input ( ) ) ) <NEWLINE>
a , n = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> n = int ( n ) <NEWLINE> print ( n * n - a ) <NEWLINE>
x = int ( input ( ) ) <NEWLINE> y = int ( input ( ) ) <NEWLINE> Print ( x * x - y ) <NEWLINE>
N = int ( input ( N ) ) <NEWLINE> A = int ( input ( A ) ) <NEWLINE> print ( N * N - A ) <NEWLINE>
import sys <NEWLINE> read = sys . stdin . read <NEWLINE> <NL> n , a = map ( int , read ( ) . spliitlines ( ) ) <NEWLINE> <NL> print ( n ** 2 - a ) <NEWLINE>
n , a = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( n * n - a ) <NEWLINE>
n , a = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( n ** n - a ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> total = 0 <NEWLINE> for i in range ( 2 ) : <NEWLINE> <INDENT> d = 2 * c [ i ] <NEWLINE> e = 2 * abs ( 9 - c [ i ] ) <NEWLINE> total += min ( d , e ) <NEWLINE> <DEDENT> print ( total ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> x = list ( map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if abs ( x [ i ] ) > abs ( x [ i ] - k ) : <NEWLINE> <INDENT> ans += abs ( x [ i ] - k ) * 2 <NEWLINE> else : <NEWLINE> <INDENT> ans += x [ i ] * 2 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> nums = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a = [ ] <NEWLINE> for i in n : <NEWLINE> <INDENT> a . append ( 2 * min ( k - nums [ i ] , nums [ i ] ) ) <NEWLINE> <DEDENT> print ( min ( a ) ) <NEWLINE> <NL> <NL>
N = input ( ) <NEWLINE> K = input ( ) <NEWLINE> l = list ( map ( int ( input ( ) . split ( ) ) ) <NEWLINE> <NL> print ( N , K , l ) <NEWLINE> <NL> for i in l : <NEWLINE> <INDENT> ans = 0 <NEWLINE> ans += min ( i , K - i ) <NEWLINE> <NL> <DEDENT> print ( ans * 2 ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> xs = map ( int , input ( ) . split ( <STRING> ) ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> sum = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> deltak = abs ( xs [ i ] - k ) <NEWLINE> if xs [ i ] < deltak : <NEWLINE> <INDENT> sum += 2 * xs [ i ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> sum += deltak * 2 <NEWLINE> <DEDENT> <DEDENT> print ( sum ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> summ = 0 <NEWLINE> for _ in range ( n ) : <NEWLINE> <INDENT> x = int ( input ( ) ) <NEWLINE> summ += min ( 2 * x , 2 * ( k - x ) ) <NEWLINE> print ( summ ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> x = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> <NL> for i in x : <NEWLINE> <INDENT> ans += min ( abs ( x - k ) , x ) <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
A , B , C , D , E , F = map ( int , input ( ) . split ( ) ) <NEWLINE> dens = 0 <NEWLINE> ans_water = 0 <NEWLINE> ans_sugar = 0 <NEWLINE> for i in range ( 31 ) : <NEWLINE> <INDENT> for j in range ( 31 ) : <NEWLINE> <INDENT> for k in range ( 101 ) : <NEWLINE> <INDENT> for l in range ( 101 ) : <NEWLINE> <INDENT> water = 100 * A * i + 100 * B * j <NEWLINE> sugar = C * k + D * l <NEWLINE> if i == j == 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> if water + sugar <= F and sugar <= E * ( A * i + B * j ) : <NEWLINE> <INDENT> if dens < sugar / ( sugar + water ) : <NEWLINE> <INDENT> dens = sugar / ( sugar + water ) <NEWLINE> ans_water = water <NEWLINE> ans_sugar = sugar <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( ans_water + ans_sugar , ans_sugar ) <NEWLINE>
import numpy as np <NEWLINE> <NL> <NL> def solve ( stdin ) : <NEWLINE> <INDENT> A , B , C , D , E , F = stdin <NEWLINE> if A == 1 : <NEWLINE> <INDENT> raise <NEWLINE> <DEDENT> conc = - 1 <NEWLINE> ans = ( 1 , 2 ) <NEWLINE> for na in range ( F // ( 100 * A ) + 1 ) : <NEWLINE> <INDENT> for nb in range ( F // ( 100 * B ) + 1 ) : <NEWLINE> <INDENT> if na == nb == 0 : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> G = F - na * 100 * A - nb * 100 * B <NEWLINE> for nc in range ( G // C + 1 ) : <NEWLINE> <INDENT> for nd in range ( G // D + 1 ) : <NEWLINE> <INDENT> W = na * 100 * A + nb * 100 * B + nc * C + nd * D <NEWLINE> if 0 < W <= F and nc * C + nd * D <= E * ( na * A + nb * B ) : <NEWLINE> <INDENT> conc2 = 100 * ( nc * C + nd * D ) / W <NEWLINE> if conc < conc2 <= 100 * E / ( 100 + E ) : <NEWLINE> <INDENT> ans = ( W , nc * C + nd * D ) <NEWLINE> conc = conc2 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> return ans <NEWLINE> <NL> <NL> <DEDENT> def main ( ) : <NEWLINE> <INDENT> stdin = np . fromstring ( open ( 0 ) . read ( ) , dtype = np . int64 , sep = <STRING> ) <NEWLINE> print ( * solve ( stdin ) ) <NEWLINE> <NL> <NL> <DEDENT> def cc_export ( ) : <NEWLINE> <INDENT> from numba . pycc import CC <NEWLINE> cc = CC ( <STRING> ) <NEWLINE> cc . export ( <STRING> , <STRING> ) ( solve ) <NEWLINE> cc . compile ( ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> import sys <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <NEWLINE> <INDENT> cc_export ( ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> from my_module import solve <NEWLINE> main ( ) <NEWLINE> <DEDENT>
A , B , C , D , E , F = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> list = [ 0 , 0 ] <NEWLINE> <NL> <COMMENT> <NL> ope1 = 100 * A <NEWLINE> ope2 = 100 * B <NEWLINE> ope3 = C <NEWLINE> ope4 = D <NEWLINE> <COMMENT> <NL> w_sum = 0 <NEWLINE> s_sum = 0 <NEWLINE> <COMMENT> <NL> p = 0 <NEWLINE> <COMMENT> <NL> total = w_sum + s_sum <NEWLINE> <COMMENT> <NL> s = 0 <NEWLINE> <NL> for i in range ( 101 ) : <NEWLINE> <INDENT> for j in range ( 101 ) : <NEWLINE> <INDENT> for k in range ( 31 ) : <NEWLINE> <INDENT> for l in range ( 31 ) : <NEWLINE> <INDENT> w_sum = l * ope1 + k * ope2 <NEWLINE> s_sum = j * ope3 + i * ope4 <NEWLINE> if w_sum != 0 and w_sum + s_sum <= F and s_sum <= E * ( l + k ) : <NEWLINE> <INDENT> p_tmp = ( s_sum / ( w_sum + s_sum ) ) * 100 <NEWLINE> if p_tmp >= p : <NEWLINE> <INDENT> p = p_tmp <NEWLINE> list [ 0 ] = w_sum + s_sum <NEWLINE> list [ 1 ] = s_sum <NEWLINE> if s_sum == E * ( l + k ) : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( list [ 0 ] , list [ 1 ] ) <NEWLINE>
import sys <NEWLINE> sys . setrecursionlimit ( 10 ** 6 ) <NEWLINE> read = sys . stdin . read <NEWLINE> readlines = sys . stdin . readlines <NEWLINE> from math import ceil <NEWLINE> def main ( ) : <NEWLINE> <INDENT> a , b , c , d , e , f = map ( int , input ( ) . split ( ) ) <NEWLINE> a *= 100 <NEWLINE> b *= 100 <NEWLINE> <NL> <COMMENT> <NL> if e == 0 or min ( a , b ) == f : <NEWLINE> <INDENT> print ( a , 0 ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> water = [ 0 ] * 6001 <NEWLINE> water [ 0 ] = True <NEWLINE> for i1 in range ( 3001 ) : <NEWLINE> <INDENT> if water [ i1 ] : <NEWLINE> <INDENT> water [ i1 + a ] = True <NEWLINE> water [ i1 + b ] = True <NEWLINE> <DEDENT> <DEDENT> sugar = [ 0 ] * 6001 <NEWLINE> sugar [ 0 ] = True <NEWLINE> for i1 in range ( 3001 ) : <NEWLINE> <INDENT> if sugar [ i1 ] : <NEWLINE> <INDENT> sugar [ i1 + c ] = True <NEWLINE> sugar [ i1 + d ] = True <NEWLINE> <NL> <DEDENT> <DEDENT> noudo = 0 <NEWLINE> r1 = 0 <NEWLINE> r2 = 0 <NEWLINE> for i1 in range ( 1 , f + 1 ) : <NEWLINE> <INDENT> if water [ i1 ] : <NEWLINE> <INDENT> for i2 in range ( f + 1 ) : <NEWLINE> <INDENT> if i1 + i2 > f : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> if sugar [ i2 ] : <NEWLINE> <INDENT> if i1 * e >= i2 * 100 : <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
a , b , c , d , e , f = map ( int , input ( ) . split ( ) ) <NEWLINE> con = list ( ) <NEWLINE> s = list ( ) <NEWLINE> for x in range ( 31 ) : <NEWLINE> <INDENT> for y in range ( 31 ) : <NEWLINE> <INDENT> for v in range ( 1501 ) : <NEWLINE> <INDENT> if x == y == 0 : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> w1 = ( f - ( 100 * a * x + 100 * b * y + c * v ) ) // d <NEWLINE> w2 = ( 100 * a * x + 100 * b * y - c * v ) // d <NEWLINE> w3 = ( ( 100 * a * x + 100 * b * y ) * e - c * v * 100 ) // ( 100 * d ) <NEWLINE> w = min ( w1 , w2 , w3 ) <NEWLINE> con1 = 100 * ( c * v + d * w ) / ( 100 * a * x + 100 * b * y + c * v + d * w ) <NEWLINE> con . append ( con1 ) <NEWLINE> s . append ( [ x , y , v , w ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> conm = max ( con ) <NEWLINE> conin = con . index ( conm ) <NEWLINE> t = s [ conin ] <NEWLINE> <COMMENT> <NL> ans1 = 100 * a * t [ 0 ] + 100 * b * t [ 1 ] + c * t [ 2 ] + d * t [ 3 ] <NEWLINE> ans2 = c * t [ 2 ] + d * t [ 3 ] <NEWLINE> print ( ans1 , ans2 ) <NEWLINE>
import numpy as np <NEWLINE> N = int ( input ( ) ) <NEWLINE> A = np . array ( [ input ( ) . split ( ) for _ in range ( N ) ] , dtype = np . int64 ) <NEWLINE> <NL> fill_diagonal ( A , 10 ** 9 ) <NEWLINE> <NL> ans = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> for j in range ( i + 1 , N ) : <NEWLINE> <INDENT> d = np . min ( A [ i ] + A [ j ] ) <NEWLINE> if A [ i ] [ j ] < d : <NEWLINE> <INDENT> ans += A [ i ] [ j ] <NEWLINE> <DEDENT> elif d < A [ i ] [ j ] : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
from scipy . sparse . csgraph import csgraph_from_dense , floyd_warshall <NEWLINE> import numpy as np <NEWLINE> N = int ( input ( ) ) <NEWLINE> A = np . loadtxt ( open ( 0 ) , dtype = np . int ) <NEWLINE> D = csgraph_from_dense ( A ) <NEWLINE> D = floyd_warshall ( D , directed = False ) <NEWLINE> <NL> <NL> if ( A == D ) . all ( ) : <NEWLINE> <INDENT> ans = 0 <NEWLINE> D += np . identity ( N , int ) * ( 1 << 60 ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> for j in range ( i + 1 , N ) : <NEWLINE> <INDENT> a = np . min ( D [ i ] + D [ j ] ) <NEWLINE> if a > D [ i , j ] : <NEWLINE> <INDENT> ans += D [ i , j ] <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( int ( ans ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> <DEDENT>
N = [ for x in input ( ) ] <NEWLINE> if <STRING> in N : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = input ( ) <NEWLINE> if N in <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else print ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> if s in <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> else : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> if 9 in a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = input ( ) <NEWLINE> if n . count ( 9 ) >= 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
if <STRING> == N [ 0 ] or <STRING> == N [ 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> <NL> if n [ 0 ] != 9 and n [ 1 ] != 9 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> if <STRING> in s : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> print ( [ <STRING> , <STRING> ] [ 9 in [ N % 10 , ( N - N % 10 ) // 10 ] ] <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = a % 10 <NEWLINE> if int ( a / 10 ) == 9 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if b == 9 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n = input ( ) <NEWLINE> if 9 in n : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> kei = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> kei += sum ( r ) - sum ( l ) <NEWLINE> kei += n <NEWLINE> print ( kei ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = [ ] <NEWLINE> for _ in range ( a ) : <NEWLINE> <INDENT> b . append ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <DEDENT> ans = 0 <NEWLINE> for i in range ( a ) : <NEWLINE> <INDENT> ans += n [ i ] [ 1 ] - n [ i ] [ 0 ] + 1 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = [ int ( input ( ) ) for i range ( a ) ] <NEWLINE> c = 0 <NEWLINE> for i range ( a ) : <NEWLINE> <INDENT> c = c + ( b [ i ] [ 1 ] - b [ i ] [ 2 ] ) <NEWLINE> <DEDENT> print ( c + a ) <NEWLINE>
2 <NEWLINE> 6 8 <NEWLINE> 3 3 <NEWLINE>
n = int ( input ( ) ) <NEWLINE> out = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a , m = map ( int , input ( ) . split ( ) ) <NEWLINE> out += m - a + 1 <NEWLINE> <DEDENT> print ( out ) <NEWLINE> n = int ( input ( ) ) <NEWLINE> out = 0 <NEWLINE> for i in ( n ) : <NEWLINE> <INDENT> a , m = map ( int , input ( ) . split ( ) ) <NEWLINE> out += m - a + 1 <NEWLINE> <DEDENT> print ( out ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> lr = [ list ( map ( int , input ( ) ) ) for _ in range ( N ) ] <NEWLINE> print ( sum ( [ e [ 1 ] - e [ 0 ] + 1 for e in lr ] ) ) <NEWLINE>
l = [ 0 ] * n <NEWLINE> r = [ 0 ] * n <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> l [ i ] , r [ i ] = map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> res = 0 <NEWLINE> <NL> for i in range ( n ) : <NEWLINE> <INDENT> res += r [ i ] - l [ i ] + 1 <NEWLINE> <NL> <DEDENT> print ( res ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> p = 0 <NEWLINE> for in in range ( n ) : <NEWLINE> <INDENT> l , r = map ( int , input ( ) . split ( ) ) <NEWLINE> p += r - l + 1 <NEWLINE> <NL> <DEDENT> print ( n ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> lr = [ map ( int , input ( ) . split ( ) ) for l in range ( n ) ] <NEWLINE> ans = 0 <NEWLINE> for i in lr : <NEWLINE> <INDENT> ans += lr [ i ] [ 1 ] - lr [ i ] [ 0 ] + 1 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
<COMMENT> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> numbers = [ ] <NEWLINE> answers = [ ] <NEWLINE> number = 0 <NEWLINE> numbers = [ int ( input ( ) ) for _ in range ( n ) ] <NEWLINE> <NL> for number in numbers : <NEWLINE> <INDENT> if len ( answers ) == 0 : <NEWLINE> <INDENT> answers . append ( number ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if number in answers : <NEWLINE> <INDENT> answers . pop ( number ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> answers . append ( number ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( len ( answers ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = set ( int ( input ( ) ) for i in range ( n ) ) <NEWLINE> kami = [ ] <NEWLINE> a . sort ( ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if i in kami : <NEWLINE> <INDENT> kami . remove ( i ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> kami . add ( i ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( len ( kami ) ) <NEWLINE>
a . sort ( ) <NEWLINE> count = 0 <NEWLINE> temp = a [ 0 ] <NEWLINE> tempcount = 1 <NEWLINE> for i in range ( 1 , n ) : <NEWLINE> <INDENT> if a [ i ] == temp : <NEWLINE> <INDENT> tempcount += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if not tempcount % 2 == 0 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> tempcount = 1 <NEWLINE> <DEDENT> temp = a [ i ] <NEWLINE> <COMMENT> <NL> <DEDENT> if tempcount % 2 == 1 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
from collections import Counter <NEWLINE> n = int ( input ( ) ) <NEWLINE> l = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> l . append ( int ( input ( ) ) ) <NEWLINE> <DEDENT> lcnt = Counter ( l ) <NEWLINE> l_value = list ( lcnt . values ( ) ) <NEWLINE> for i in range ( len ( l_value ) ) : <NEWLINE> <INDENT> if l_value [ i ] % 2 == 0 : <NEWLINE> <INDENT> l_value [ i ] = 0 <NEWLINE> else : <NEWLINE> l_value [ i ] = 1 <NEWLINE> <DEDENT> <DEDENT> print ( sum ( l_value ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ False ] * int ( 1e9 ) <NEWLINE> <NL> cnt = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> ai = int ( input ( ) ) - 1 <NEWLINE> a [ ai ] = not a [ ai ] <NEWLINE> <NL> if a [ ai ] : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cnt -= 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> A = [ 0 ] * ( 10 ** 9 + 5 ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a = int ( input ( ) ) <NEWLINE> A [ a - 1 ] += 1 <NEWLINE> A [ a - 1 ] %= 2 <NEWLINE> <DEDENT> print ( sum ( A ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> ans = [ 0 ] * ( 10 ** 9 ) <NEWLINE> <NL> for _ in range ( N ) : <NEWLINE> <INDENT> a = int ( input ( ) ) <NEWLINE> if ans [ a - 1 ] == 0 : <NEWLINE> <INDENT> ans [ a - 1 ] += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans [ a - 1 ] = 0 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( sum ( ans ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ int ( input ( ) ) for _ in range ( n ) ] <NEWLINE> <NL> a = sorted ( a ) : <NEWLINE> tmp = 0 <NEWLINE> ans = 0 <NEWLINE> for i in a : <NEWLINE> <INDENT> if i == tmp : <NEWLINE> <INDENT> ans -= 1 <NEWLINE> tmp = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += 1 <NEWLINE> tmp = i <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import collections <NEWLINE> n = int ( input ( ) ) <NEWLINE> alist = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> cole = collections . Counters ( alist ) <NEWLINE> count = 0 <NEWLINE> for i in cole . values ( ) : <NEWLINE> <INDENT> if i % 2 == 1 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
x , t = map ( int , input ( ) ) <NEWLINE> <NL> print ( x - t ) if x > t else print ( <STRING> ) <NEWLINE>
x , t = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( max ( x - t , 0 ) <NEWLINE>
x , t = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( x - t if x - t >= 0 , 0 else ) <NEWLINE>
<COMMENT> <NL> X , t = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> Remain = X - t <NEWLINE> if remain > 0 : <NEWLINE> <INDENT> print ( Remain ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , t = map ( int , input ( ) . split ( ) ) <NEWLINE> if x - t >= 0 : <NEWLINE> <INDENT> print ( x - t ) <NEWLINE> else : <NEWLINE> print ( 0 ) <NEWLINE> <DEDENT>
print ( int ( input ( ) ) - int ( input ( ) ) ) <NEWLINE>
a , b = ( ( x ) for x in input ( ) . split ( ) ) <NEWLINE> int ( c ) = int ( a ) - int ( b ) <NEWLINE> if c > <STRING> : <NEWLINE> <INDENT> print ( c ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
X = int ( input ( ) ) <NEWLINE> t = int ( input ( ) ) <NEWLINE> print ( X - t if X >= t else 0 ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a <= b : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a - b ) : <NEWLINE> <DEDENT>
x , t = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> print ( max ( [ 0 , x - t ] ) <NEWLINE>
print ( max ( 0 , int ( input ( ) ) - int ( input ( ) ) ) ) <NEWLINE>
<COMMENT> <NL> x = int ( input ( ) ) <NEWLINE> t = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> answer = x - t <NEWLINE> <NL> <COMMENT> <NL> print ( answer ) <NEWLINE>
tmp = input ( ) . split ( <STRING> ) <NEWLINE> <NL> print ( max ( [ tmp [ 0 ] - tmp [ 1 ] , 0 ] ) ) <NEWLINE>
s = list ( input ( ) ) <NEWLINE> s1 = [ ] <NEWLINE> for i in s : <NEWLINE> <INDENT> if ( s . index ( i ) + 1 ) % 2 != 0 : <NEWLINE> <INDENT> s1 . append ( i ) <NEWLINE> <DEDENT> <DEDENT> print ( i for i in s1 , end = <STRING> ) <NEWLINE>
a = input ( ) <NEWLINE> n = [ ] <NEWLINE> for i in range ( len ( a ) ) : <NEWLINE> <INDENT> if i % 2 == 1 : <NEWLINE> <INDENT> n . append ( i ) <NEWLINE> <DEDENT> <DEDENT> ans = <STRING> <NEWLINE> for i in n : <NEWLINE> <INDENT> ans += i <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
s = list ( input ( ) ) <NEWLINE> <NL> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if i % 2 == 1 : <NEWLINE> <INDENT> s . pop ( i ) <NEWLINE> <NL> <DEDENT> <DEDENT> ss = <STRING> . join ( map ( str , s ) ) <NEWLINE> <NL> print ( ss ) <NEWLINE>
s = input ( ) <NEWLINE> x = <STRING> <NEWLINE> for i in range ( 1 , len ( s ) + 1 ) : <NEWLINE> <INDENT> if i % 2 != 0 : <NEWLINE> <INDENT> x = x + s [ i ] <NEWLINE> <DEDENT> <DEDENT> print ( x ) <NEWLINE>
s = input ( ) <NEWLINE> ans = <STRING> <NEWLINE> for i in range ( 1 : : 2 ) : <NEWLINE> <INDENT> ans += s [ i ] <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
a = input ( ) <NEWLINE> b = <STRING> <NEWLINE> for i in range ( a ) : <NEWLINE> <INDENT> b = b + a [ 2 * i ] <NEWLINE> <DEDENT> print ( b ) <NEWLINE>
S = input ( ) <NEWLINE> res = <STRING> <NEWLINE> for i in range ( 0 , N , 2 ) : <NEWLINE> <INDENT> res += S [ i ] <NEWLINE> <DEDENT> print ( res ) <NEWLINE>
s = input ( ) <NEWLINE> for i in range ( 0 , len ( s ) , 2 ) : <NEWLINE> <INDENT> print ( s [ i ] , end = <STRING> ) <NEWLINE> <DEDENT> s = input ( ) <NEWLINE> for i in range ( 0 , len ( s ) , 2 ) : <NEWLINE> <INDENT> print ( s [ i ] , end = <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> odd_num = list ( ) <NEWLINE> <NL> for i in range ( len ( s ) ) : <NEWLINE> <NL> <INDENT> if i % 2 == 0 : <NEWLINE> <INDENT> odd_num . append ( s [ i ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> answer = <STRING> . join ( odd_num ) <NEWLINE> print ( answer ) <NEWLINE> <NL> <NL> <NL> s = input ( ) <NEWLINE> print ( s [ : : 2 ] ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> l = [ 0 ] * 10 ** 5 + 2 <NEWLINE> <NL> for i in a : <NEWLINE> <INDENT> l [ i ] += 1 <NEWLINE> l [ i + 1 ] += 1 <NEWLINE> l [ i + 2 ] += 1 <NEWLINE> <NL> <DEDENT> print ( max ( l ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> cnt = [ 0 ] * 10 ** 5 + 5 <NEWLINE> for i in a : <NEWLINE> <INDENT> cnt [ i ] += 1 <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> for i in range ( 1 , 10 ** 5 + 3 ) : <NEWLINE> <INDENT> ans = max ( ans , sum ( cnt [ i - 1 : i + 2 ] ) ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <NL> import os <NEWLINE> import sys <NEWLINE> from collections import Counter <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a . sort ( ) <NEWLINE> cnt_list = Counter ( a ) <NEWLINE> <NL> a_max = a [ - 1 ] <NEWLINE> a_min = a [ 0 ] <NEWLINE> cnt_max = 0 <NEWLINE> for center in range ( a_min - 1 , a_max + 2 ) : <NEWLINE> <INDENT> if center in cnt_list . keys ( ) : <NEWLINE> <INDENT> cnt = cnt_list [ center ] <NEWLINE> <DEDENT> if center - 1 in cnt_list . keys ( ) : <NEWLINE> <INDENT> cnt += cnt_list [ center - 1 ] <NEWLINE> <DEDENT> if center + 1 in cnt_list . keys ( ) : <NEWLINE> <INDENT> cnt += cnt_list [ center + 1 ] <NEWLINE> <DEDENT> if cnt > cnt_max : <NEWLINE> <INDENT> cnt_max = cnt <NEWLINE> <DEDENT> <DEDENT> print ( cnt_max ) <NEWLINE> <NL> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) , split ( ) ) ) <NEWLINE> s = [ 0 ] * max ( a ) + 2 <NEWLINE> for i in a : <NEWLINE> <INDENT> i += 1 <NEWLINE> s [ i - 1 ] += 1 <NEWLINE> s [ i ] += 1 <NEWLINE> s [ i + 1 ] += 1 <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> def func ( a ) : <NEWLINE> <INDENT> count = [ 0 ] * ( max ( a ) + 1 ) <NEWLINE> <NL> for i in a : <NEWLINE> <INDENT> count [ i ] += 1 <NEWLINE> <NL> <DEDENT> max_n = 0 <NEWLINE> for j in range ( 1 , len ( count ) - 1 ) : <NEWLINE> <INDENT> max_n = max ( max_n , count [ j ] + count [ j - 1 ] + count [ j + 1 ] ) <NEWLINE> <DEDENT> max_n = max ( max_n , count [ - 1 ] + count [ - 2 ] ) <NEWLINE> <NL> return max_n <NEWLINE> <NL> <DEDENT> ptint ( n if len ( set ( a ) ) == 1 else func ( a ) ) <NEWLINE>
def solve ( ) : <NEWLINE> <NL> <INDENT> N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> lists = [ 0 ] * ( ( 10 ** 5 ) + 2 ) <NEWLINE> <NL> for i in range ( a ) : <NEWLINE> <INDENT> lists [ v ] += 1 <NEWLINE> lists [ v + 1 ] += 1 <NEWLINE> lists [ v - 1 ] += 1 <NEWLINE> <NL> <DEDENT> print ( max ( lists ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> solve ( ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> from fractions import gcd <NEWLINE> from itertools import combinations , permutations , accumulate <COMMENT> <NEWLINE> <COMMENT> <NL> from collections import deque , defaultdict , Counter <NEWLINE> import decimal <NEWLINE> import re <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> import sys <NEWLINE> sys . setrecursionlimit ( 10000000 ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <COMMENT> <NL> def readInts ( ) : <NEWLINE> <INDENT> return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <DEDENT> def I ( ) : <NEWLINE> <INDENT> return int ( input ( ) ) <NEWLINE> <DEDENT> n = I ( ) <NEWLINE> A = readInts ( ) <NEWLINE> maxA = max ( A ) <NEWLINE> minA = min ( A ) <NEWLINE> ans = - 1 <NEWLINE> for i in range ( minA , maxA + 1 ) : <NEWLINE> <INDENT> ans = max ( ans , A . count ( i - 1 ) + A . count ( i ) + A . count ( i + 1 ) ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . strip ( ) . split ( ) ) ) <NEWLINE> <NL> dp = [ 0 for n in range ( max ( a ) + 1 ) ] <NEWLINE> for n in range ( N ) : <NEWLINE> <INDENT> dp [ a [ n ] ] += 1 <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> for n in range ( len ( dp ) ) : <NEWLINE> <INDENT> if n == 0 : <NEWLINE> <INDENT> ans = max ( ans , a [ 0 ] + a [ 1 ] ) <NEWLINE> <DEDENT> elif n == N - 1 : <NEWLINE> <INDENT> ans = max ( ans , a [ N - 2 ] + a [ N - 1 ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = max ( ans , dp [ n - 1 ] + dp [ n ] + dp [ n + 1 ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> l = [ 0 ] * 10 ** 5 + 2 <NEWLINE> <NL> for v in a : <NEWLINE> <INDENT> l [ v ] += 1 <NEWLINE> l [ v + 1 ] += 1 <NEWLINE> l [ v + 2 ] += 1 <NEWLINE> <NL> <DEDENT> print ( max ( l ) ) <NEWLINE>
IN = iter ( Input . split ( <STRING> ) ) . __next__ <NEWLINE> def input ( ) : <NEWLINE> <INDENT> return IN ( ) <NEWLINE> <NL> <DEDENT> N = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> result_list = [ ] <NEWLINE> for a in l : <NEWLINE> <INDENT> result_list . extend ( [ a - 1 , a , a + 1 ] ) <NEWLINE> <NL> <DEDENT> result_list <NEWLINE> <NL> import collections <NEWLINE> <NL> count = collections . Counter ( result_list ) <COMMENT> <NEWLINE> hindo_jun = count . most_common ( ) <NEWLINE> <NL> print ( hindo_jun [ 0 ] [ 1 ] ) <NEWLINE>
def main ( ) : <NEWLINE> <INDENT> N = int ( input ( ) ) <NEWLINE> P = map ( int , input ( ) . split ( ) ) <NEWLINE> cnt = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if P [ i ] == i + 1 : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> ans = ( cnt + 1 ) // 2 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> res = 0 <NEWLINE> for i in range ( 2 , n : <NEWLINE> <INDENT> if a [ i - 1 ] == i : <NEWLINE> <INDENT> res += 1 <NEWLINE> <DEDENT> <DEDENT> print ( res ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if a [ i ] == i + 1 : <NEWLINE> <INDENT> a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ] <NEWLINE> ans += 1 <NEWLINE> <DEDENT> if a [ n ] == n + 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> * P , = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> i = c = 0 <NEWLINE> while i < L : <NEWLINE> <INDENT> if P [ i ] == i + 1 : <NEWLINE> <INDENT> c += 1 <NEWLINE> i += 1 <NEWLINE> <DEDENT> i += 1 <NEWLINE> <DEDENT> print ( c ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> P = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if i == N - 1 : <NEWLINE> <INDENT> if P [ i ] == i + 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> a , b = P [ i ] , P [ i + 1 ] <NEWLINE> if a == i + 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> P [ i ] = b <NEWLINE> P [ i + 1 ] = a <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> P = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> Cnt = [ ] <NEWLINE> for idx , p in enumerate ( P , 1 ) : <NEWLINE> <INDENT> if idx == p : <NEWLINE> <INDENT> Cnt . append ( idx ) <NEWLINE> <COMMENT> <NL> <DEDENT> <DEDENT> if len ( Cnt ) == 0 : <NEWLINE> <INDENT> ans = 0 <NEWLINE> <NL> <DEDENT> elif len ( Cnt ) == 2 : <NEWLINE> <INDENT> ans += Cnt [ 1 ] - Cnt [ 0 ] <NEWLINE> <NL> <DEDENT> elif len ( Cnt ) % 2 : <NEWLINE> <INDENT> for i in range ( 1 , len ( Cnt ) , 2 ) : <NEWLINE> <INDENT> if i == 0 : <NEWLINE> <INDENT> ans += Cnt [ i + 1 ] - Cnt [ i ] <NEWLINE> <DEDENT> elif i == len ( Cnt ) - 1 : <NEWLINE> <INDENT> ans += Cnt [ i ] - Cnt [ i - 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += min ( Cnt [ i ] - Cnt [ i - 1 ] , Cnt [ i + 1 ] - Cnt [ i ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( 0 , len ( Cnt ) , 2 ) : <NEWLINE> <INDENT> if i == 0 : <NEWLINE> <INDENT> ans += Cnt [ i + 1 ] - Cnt [ i ] <NEWLINE> <DEDENT> elif i == len ( Cnt ) - 1 : <NEWLINE> <INDENT> ans += Cnt [ i ] - Cnt [ i - 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += min ( Cnt [ i ] - Cnt [ i - 1 ] , Cnt [ i + 1 ] - Cnt [ i ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <NL> <COMMENT> <NL> <NL> n = int ( input ( ) ) <NEWLINE> P = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> Cnt = [ ] <NEWLINE> cnt = 0 <NEWLINE> ans = 0 <NEWLINE> for idx , p in enumerate ( P , 1 ) : <NEWLINE> <INDENT> if idx == p : <NEWLINE> <INDENT> Cnt . append ( idx ) <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> <DEDENT> if cnt == 2 : <NEWLINE> <INDENT> ans -= 1 <NEWLINE> cnt = 0 <NEWLINE> <NL> <DEDENT> <DEDENT> ans += len ( Cnt ) <NEWLINE> print ( ans ) <NEWLINE>
a , b , c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> n = int ( input ( ) ) <NEWLINE> <NL> b = min ( a + a , b ) <NEWLINE> c = min ( b + b , c ) <NEWLINE> d = min ( c + c , d ) <NEWLINE> <NL> q , r = divmod ( N , 2 ) <NEWLINE> x = q * d + r * c <NEWLINE> print ( x ) <NEWLINE>
q , h , s , d = map ( int , input ( ) . split ( ) ) <NEWLINE> n = int ( input ( ) ) <NEWLINE> <NL> ans = n // 2 * min ( 8 * q , 4 * h , 2 * s , d ) + min ( 4 * q , 2 * h , s ) * ( n % 2 != = 0 ) <NEWLINE> print ( ans ) <NEWLINE>
q , h , s , d = map ( int , input ( ) . split ( ) ) <NEWLINE> n = int ( input ( ) ) <NEWLINE> ans = 0 <NEWLINE> q_per = q / 0.25 <NEWLINE> h_per = h / 0.5 <NEWLINE> s_per = s <NEWLINE> d_per = d / 2 <NEWLINE> list = [ q_per , h_per , s_per , d_per ] <NEWLINE> elif min ( list ) == d_per : <NEWLINE> <INDENT> if n % 2 == 0 : <NEWLINE> <INDENT> ans += d * ( n // 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += n // 2 * d <NEWLINE> n -= n // 2 <NEWLINE> list . remove ( d_per ) <NEWLINE> if min ( list ) == s_per : <NEWLINE> <INDENT> ans += s_per <NEWLINE> <DEDENT> elif min ( list ) == h_per : <NEWLINE> <INDENT> ans += h * 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += q * 4 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> elif min ( list ) == s_per : <NEWLINE> <INDENT> ans += n * s <NEWLINE> <DEDENT> elif min ( list ) == h_per : <NEWLINE> <INDENT> ans += n * 2 * h <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += n * 4 * q <NEWLINE> <NL> <DEDENT> print ( int ( ans ) ) <NEWLINE>
price = [ int ( x ) for x in input ( ) . split ( ) ] ; <NEWLINE> N = int ( input ( ) ) ; <NEWLINE> price_d = price [ 3 ] ; <NEWLINE> price_s = 2 * price [ 2 ] ; <NEWLINE> price_h = 4 * price [ 1 ] ; <NEWLINE> price_q = 8 * price [ 0 ] ; <NEWLINE> p = min ( [ price_q , price_h , price_s ] ) ; <NEWLINE> if price_d < p : <NEWLINE> <INDENT> if N % 2 == 1 : <NEWLINE> <INDENT> ans = ( N - 1 ) // 2 * price_d + p // 2 ; <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = N // 2 * price_d ; <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> ans = N * p // 2 ; <NEWLINE> <NL> <DEDENT> print ( ans ) ) ; <NEWLINE> <NL>
<COMMENT> <NL> Q , H , S , D = map ( int , input ( ) . split ( ) ) <NEWLINE> N = int ( input ( ) ) <NEWLINE> <NL> Q1 , H1 = 4 * Q , 2 * H <NEWLINE> S = min ( Q1 , H1 , S ) <NEWLINE> <NL> if 2 * S > D : <NEWLINE> <INDENT> cnt_2 = N // 2 <NEWLINE> cnt_1 = N % 2 <NEWLINE> pay = a * cnt_2 + S * cnt_1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pay = N * S <NEWLINE> <DEDENT> print ( pay ) <NEWLINE>
q , h , re , d = map ( int , input ( ) . split ( ) ) <NEWLINE> n = int ( input ( ) ) <NEWLINE> re = min ( q * 4 , h * 2 , result ) <NEWLINE> print ( min ( result * n , n // 2 * d + ( n % 2 ) * re ) ) <NEWLINE>
Q , H , S , D = map ( int , input ( ) . split ( ) ) <NEWLINE> N = int ( input ( ) ) <NEWLINE> arr = [ 4 * Q * N , 2 * H * N , S * N ] <NEWLINE> if N % 2 == 0 : <NEWLINE> <INDENT> arr . append ( int ( 0.5 * D * N ) ) <NEWLINE> <DEDENT> elif : <NEWLINE> <INDENT> if N >= 3 : <NEWLINE> <INDENT> arr . append ( int ( 0.5 * D * ( N - 1 ) + min ( S , 2 * H , 4 * Q ) ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( min ( arr ) ) <NEWLINE>
a = list ( input ( ) ) <NEWLINE> <NL> unko = [ 0 ] * ( ord ( <STRING> ) + 1 - ord ( <STRING> ) ) <NEWLINE> <NL> for aa in a : <NEWLINE> <INDENT> unko [ ord ( aa ) - ord ( <STRING> ) ] += 1 <NEWLINE> <DEDENT> tmp = 0 <NEWLINE> for u in unko : <NEWLINE> <INDENT> tmp += ( u * ( u - 1 ) ) // 2 <NEWLINE> <NL> <DEDENT> print ( ( n * ( n - 1 ) ) // 2 - tmp ) <NEWLINE>
def getN ( ) : <NEWLINE> <INDENT> return int ( input ( ) ) <NEWLINE> <DEDENT> def getNM ( ) : <NEWLINE> <INDENT> return map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> def getList ( ) : <NEWLINE> <INDENT> return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <DEDENT> def getArray ( intn ) : <NEWLINE> <INDENT> return [ int ( input ( ) ) for i in range ( intn ) ] <NEWLINE> <DEDENT> def input ( ) : <NEWLINE> <INDENT> return sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> <DEDENT> def rand_N ( ran1 , ran2 ) : <NEWLINE> <INDENT> return random . randint ( ran1 , ran2 ) <NEWLINE> <DEDENT> def rand_List ( ran1 , ran2 , rantime ) : <NEWLINE> <INDENT> return [ random . randint ( ran1 , ran2 ) for i in range ( rantime ) ] <NEWLINE> <DEDENT> def rand_ints_nodup ( ran1 , ran2 , rantime ) : <NEWLINE> <INDENT> ns = [ ] <NEWLINE> while len ( ns ) < rantime : <NEWLINE> <INDENT> n = random . randint ( ran1 , ran2 ) <NEWLINE> if not n in ns : <NEWLINE> <INDENT> ns . append ( n ) <NEWLINE> <DEDENT> <DEDENT> return sorted ( ns ) <NEWLINE> <NL> <DEDENT> def rand_query ( ran1 , ran2 , rantime ) : <NEWLINE> <INDENT> r_query = [ ] <NEWLINE> while len ( r_query ) < rantime : <NEWLINE> <INDENT> n_q = rand_ints_nodup ( ran1 , ran2 , 2 ) <NEWLINE> if not n_q in r_query : <NEWLINE> <INDENT> r_query . append ( n_q ) <NEWLINE> <DEDENT> <DEDENT> return sorted ( r_query ) <NEWLINE> <NL> <DEDENT> from collections import defaultdict , deque , Counter <NEWLINE> from sys import exit <NEWLINE> from decimal import * <NEWLINE> import heapq <NEWLINE> from math import sqrt <NEWLINE> from fractions import gcd <NEWLINE> import random <NEWLINE> import string <NEWLINE> import copy <NEWLINE> from itertools import combinations , permutations , product <NEWLINE> from operator import mul , itemgetter <NEWLINE> from functools import reduce <NEWLINE> from bisect import bisect_left , bisect_right <NEWLINE> <NL> import sys <NEWLINE> sys . setrecursionlimit ( 1000000000 ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> A = input ( ) <NEWLINE> Ac = collections . Counter ( A ) <NEWLINE> cnt = 0 <NEWLINE> for val in Ac . values ( ) : <NEWLINE> <INDENT> cnt += val * ( val - 1 ) // 2 <NEWLINE> <DEDENT> print ( len ( A ) * ( len ( A ) - 1 ) // 2 - cnt + 1 ) <NEWLINE>
M = 8 ** 7 <NEWLINE> m , f , g , i = M * 476 + 1 , [ j : = 1 ] , [ k : = 1 ] * M , 0 <NEWLINE> while i < M : i += 1 ; f += f [ - 1 ] * i % m , <NEWLINE> g += pow ( f [ - 1 ] , m - 2 , m ) , <NEWLINE> while i : g [ i - 1 ] = g [ i ] * i % m ; i -= 1 <NEWLINE> A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> if A < B : A , B = B , A <NEWLINE> while j <= B : i += k * f [ A + B - j ] * g [ B - j ] ; k = k * 2 % m ; j += 1 <NEWLINE> print ( ( i * f [ B ] * g [ A + B ] + A ) % m ) ) <NEWLINE>
x , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if abs ( a - x ) > abs ( b - x ) : <NEWLINE> <INDENT> print ( B ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( A ) <NEWLINE> <DEDENT>
x , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if abs ( a - x ) > abc ( b - x ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> y = abs ( x - a ) <NEWLINE> z = abs ( b - x ) <NEWLINE> <INDENT> if y < z : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
x , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( min ( abs ( x - a ) , abs ( x - b ) ) <NEWLINE>
x , a , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if abs ( x - a ) <= abs ( x - b ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( min ( abs ( x - a ) , abs ( x - b ) ) <NEWLINE>
x , a , b = map ( int , input . split ( ) ) <NEWLINE> print ( <STRING> if max ( x , a ) - min ( x , a ) < max ( x , b ) - min ( x , b ) else <STRING> ) <NEWLINE>
a , b , c = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> if a < b < c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a < c < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b < a < c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b < c < a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif c < a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif c < b < a <NEWLINE>
import sys <NEWLINE> input = sys . stdin . readline <NEWLINE> <NL> int ( input ( ) ) <NEWLINE> list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> input ( ) . rstrip ( ) <NEWLINE>
x , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> ) if abs ( x - a ) < abs ( s - b ) else print ( <STRING> ) <NEWLINE>
X , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( min ( abs ( X - A ) , abs ( B - X ) ) <NEWLINE>
s = input ( ) <NEWLINE> alh = <STRING> <NEWLINE> exist = False <NEWLINE> ans = <STRING> <NEWLINE> for i in alf : <NEWLINE> <INDENT> if i in s : <NEWLINE> <INDENT> exist = True <NEWLINE> <DEDENT> if not exist : <NEWLINE> <INDENT> ans = i <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
s = input ( ) <NEWLINE> <NL> import string <NEWLINE> a = list ( string . ascii_lowercase ) <NEWLINE> <NL> for item in a : <NEWLINE> <INDENT> if item not in s : <NEWLINE> <INDENT> print ( a [ i ] ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> for i in range ( 97 , 113 + 1 ) : <NEWLINE> <INDENT> if s . find ( chr ( i ) ) == - 1 : <NEWLINE> <INDENT> print ( c ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
def i ( ) : <NEWLINE> <INDENT> return int ( input ( ) ) <NEWLINE> <DEDENT> def i2 ( ) : <NEWLINE> <INDENT> return map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> def s ( ) : <NEWLINE> <INDENT> return str ( input ( ) ) <NEWLINE> <DEDENT> def l ( ) : <NEWLINE> <INDENT> return list ( input ( ) ) <NEWLINE> <DEDENT> def intl ( ) : <NEWLINE> <INDENT> return list ( int ( k ) for k in input ( ) . split ( ) ) <NEWLINE> <NL> <DEDENT> s = l ( ) <NEWLINE> alf = <STRING> <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> alf = alf . trplace ( s [ i ] , <STRING> ) <NEWLINE> <DEDENT> print ( alf ) <NEWLINE> if alf == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( alf [ 0 ] ) <NEWLINE> <DEDENT>
S = input ( ) <NEWLINE> List = list ( S ) <NEWLINE> s_l = set ( List ) <NEWLINE> n = 10 <NEWLINE> res = <STRING> <NEWLINE> for i in range ( 97 , 113 ) : <NEWLINE> <INDENT> n = s_l . count ( chr ( i ) ) <NEWLINE> if n == 0 : <NEWLINE> <INDENT> res = chr ( i ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( res ) <NEWLINE>
S = list ( input ( ) ) <NEWLINE> lst = [ chr ( i ) for i in range ( 97 , 97 + 26 ) ] <NEWLINE> res = sorted ( list ( set ( lst ) - set ( S ) ) ) <NEWLINE> <NL> if res = [ ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( res [ 0 ] ) <NEWLINE> <DEDENT>
s = sorted ( input ( ) ) <NEWLINE> for i in range ( len ( s ) - 1 ) : <NEWLINE> <INDENT> if ord ( s [ i + 1 ] ) - ord ( s [ i ] ) >= 2 : <NEWLINE> <INDENT> print ( chr ( ord ( s [ i ] + 1 ) ) ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
import sys <NEWLINE> s = list ( input ( ) ) <NEWLINE> for i in range ( 0 , 26 ) : <NEWLINE> <INDENT> if not chr ( 97 + i ) in s : <NEWLINE> <INDENT> print ( chr + i ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
s_list = list ( input ( ) ) <NEWLINE> <NL> result = None <NEWLINE> <NL> for s_uni in range ( ord ( <STRING> ) , ord ( <STRING> ) + 1 ) : <NEWLINE> <INDENT> if not chr ( s_uni ) in s_list : <NEWLINE> <INDENT> result = chr ( s_uni ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> if result : <NEWLINE> <INDENT> print ( result ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = list ( input ( ) ) <NEWLINE> t = [ chr ( i ) for i in range ( ord ( <STRING> ) , ord ( <STRING> ) + 1 ) ] <NEWLINE> for i in s : <NEWLINE> <INDENT> t . remove ( i ) <NEWLINE> <DEDENT> if t : <NEWLINE> <INDENT> print ( t [ 0 ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import sys <NEWLINE> from string import ascii_lowercase as aplhabets <NEWLINE> from collections import defaultdict <NEWLINE> <NL> readline = sys . stdin . readline <NEWLINE> <NL> s = readline ( ) . split ( ) <NEWLINE> d = defautdict ( int ) <NEWLINE> for x in s : <NEWLINE> <INDENT> d [ x ] = 1 <NEWLINE> <DEDENT> for a in alphabets : <NEWLINE> <INDENT> if d [ a ] == 0 : <NEWLINE> <INDENT> print ( a ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> print ( chr ( i ) ) for i in range ( ord ( <STRING> ) , ord ( <STRING> ) + 1 ) if chr ( i ) not in s <NEWLINE>
import sys <NEWLINE> from collections import Counter <NEWLINE> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> box , box2 = [ ] , [ ] <NEWLINE> acnt = dict ( Counter ( a ) ) <NEWLINE> acnt = sorted ( acnt . items ( ) , key = lambda x : x [ 0 ] , reverse = True ) <NEWLINE> a_val = [ acnt [ x ] [ 1 ] for x in range ( len ( acnt ) ) ] <NEWLINE> a_key = [ acnt [ y ] [ 0 ] for y in range ( len ( acnt ) ) ] <NEWLINE> for i in range ( len ( a_val ) ) : <NEWLINE> <INDENT> if a_val [ i ] >= 4 : <NEWLINE> <INDENT> box2 . append ( a_key [ i ] ** 2 ) <NEWLINE> <DEDENT> if 2 <= a_val [ i ] : <NEWLINE> <INDENT> box . append ( a_key [ i ] ) <NEWLINE> <DEDENT> <DEDENT> box . sort ( reverse = True ) <NEWLINE> if len ( box2 ) >= 2 : <NEWLINE> <INDENT> ans = max ( box2 ) <NEWLINE> <DEDENT> if len ( box ) >= 2 : <NEWLINE> <INDENT> print ( max ( ans , ( box [ 0 ] * box [ 1 ] ) ) ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> print ( 0 ) <NEWLINE>
from collections import defaultdict <NEWLINE> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = [ ] <NEWLINE> c = [ ] <NEWLINE> d = defaultdict ( int ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> d [ a [ i ] ] += 1 <NEWLINE> <NL> <DEDENT> for i , j in d . items ( ) : <NEWLINE> <INDENT> if j >= 2 : <NEWLINE> <INDENT> b . append ( i ) <NEWLINE> <DEDENT> if j >= 4 : <NEWLINE> <INDENT> c . append ( i ) <NEWLINE> <NL> <DEDENT> <DEDENT> if len ( b ) < 2 and len ( c ) < 1 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> elif len ( c ) == 1 and len ( b ) < 2 : <NEWLINE> <INDENT> print ( c [ 0 ] ** 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> b . sort ( reverse = True ) <NEWLINE> rec = b [ 0 ] * b [ 1 ] <NEWLINE> if len ( c ) >= 1 : <NEWLINE> <INDENT> c . sort ( reverse = True ) <NEWLINE> cube = c [ 0 ] ** 2 <NEWLINE> <DEDENT> print ( max ( rec , cube ) ) <NEWLINE> <DEDENT>
Flag = False <NEWLINE> LS = 0 <NEWLINE> SS = 0 <NEWLINE> for T in range ( 0 , len ( A ) ) : <NEWLINE> <INDENT> if LS == 0 and A [ T ] [ 1 ] >= 4 : <NEWLINE> <INDENT> Sq = A [ T ] [ 0 ] ** 2 <NEWLINE> Flag = True <NEWLINE> break <NEWLINE> <DEDENT> if A [ T ] [ 1 ] >= 2 : <NEWLINE> <INDENT> if LS == 0 : <NEWLINE> <INDENT> LS = A [ T ] [ 0 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> SS = A [ T ] [ 0 ] <NEWLINE> Sq = LS * SS <NEWLINE> Flag = True <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> if Flag : <NEWLINE> <INDENT> print ( Sq ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> A = A . sort ( ) <NEWLINE> b = set ( A ) <NEWLINE> b = list ( b ) <NEWLINE> a = [ i for i in b if A . count ( i ) >= 2 ] <NEWLINE> <NL> if len ( a ) <= 1 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a = set ( a ) <NEWLINE> a = list ( a ) <NEWLINE> a . reverse ( ) <NEWLINE> print ( a [ 0 ] * a [ 1 ] ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> import sys <NEWLINE> from io import StringIO <NEWLINE> import unittest <NEWLINE> <NL> <NL> class TestClass ( unittest . TestCase ) : <NEWLINE> <INDENT> def assertIO ( self , input , output ) : <NEWLINE> <INDENT> stdout , stdin = sys . stdout , sys . stdin <NEWLINE> sys . stdout , sys . stdin = StringIO ( ) , StringIO ( input ) <NEWLINE> resolve ( ) <NEWLINE> sys . stdout . seek ( 0 ) <NEWLINE> out = sys . stdout . read ( ) [ : - 1 ] <NEWLINE> sys . stdout , sys . stdin = stdout , stdin <NEWLINE> self . assertEqual ( out , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_1 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_2 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_3 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> def resolve ( ) : <NEWLINE> <INDENT> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> Num = [ 0 ] * 10 ** 9 <NEWLINE> for a in A : <NEWLINE> <INDENT> Num [ a - 1 ] += 1 <NEWLINE> <NL> <DEDENT> l1 = l2 = 0 <NEWLINE> for i in range ( N - 1 , - 1 , - 1 ) : <NEWLINE> <INDENT> if l1 == 0 : <NEWLINE> <INDENT> if Num [ i ] >= 2 : <NEWLINE> <INDENT> l1 = i + 1 <NEWLINE> if Num [ i ] >= 4 : <NEWLINE> <INDENT> l2 = i + 1 <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if Num [ i ] >= 2 : <NEWLINE> <INDENT> l2 = i + 1 <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( l1 * l2 ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <COMMENT> <NL> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) a = list ( map ( int , input ( ) . split ( <STRING> ) ) ) x = 0 y = 0 a . sort ( ) a . reverse ( ) for i in range ( len ( a ) - 1 ) : if a [ i ] == a [ i + 1 ] : x = a [ i ] p = i + 1 break if x != 0 : for i in range ( ( p + 1 ) , len ( a ) - 1 ) : if a [ i ] == a [ i + 1 ] : y = a [ i ] break print ( x * y ) <NEWLINE>
import sys <NEWLINE> <NL> n , * a = map ( int , sys . stdin . read ( ) ) <NEWLINE> <NL> a . sort ( reverse = True ) <NEWLINE> c = 0 <NEWLINE> f = 0 <NEWLINE> ans = [ ] <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if a [ i ] == a [ i + 1 ] : <NEWLINE> <INDENT> c += 1 <NEWLINE> f += 1 <NEWLINE> ans . append ( a [ i ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> f = 0 <NEWLINE> <DEDENT> if ( c == 2 and f == 1 ) or ( c == 3 and f == 2 ) : <NEWLINE> <INDENT> print ( ans [ 0 ] * ans [ 1 ] ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( 0 ) <NEWLINE> <NL>
from collections import Counter <NEWLINE> n = int ( input ( ) ) <NEWLINE> a = Counter ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> a = [ list ( x ) for x in a . items ( ) if x [ 1 ] >= 2 ] <NEWLINE> a . sort ( reverse = True , key = lambda x : ( x [ 0 ] , x [ 1 ] ) ) <NEWLINE> count = 0 <NEWLINE> base = 4 <NEWLINE> for i in len ( a ) : <NEWLINE> <INDENT> if count == 1 : <NEWLINE> <INDENT> print ( l * a [ i ] [ 0 ] ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> l = a [ 0 ] <NEWLINE> count += 1 <NEWLINE> <NL> <DEDENT> if a [ 1 ] >= 4 : <NEWLINE> <INDENT> print ( a [ i ] [ 0 ] * a [ i ] [ 0 ] ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( 0 ) <NEWLINE>
from collections import defaultdict <NEWLINE> from collections import deque <NEWLINE> import itertools <NEWLINE> import math <NEWLINE> <NL> def readInt ( ) : <NEWLINE> <INDENT> return int ( input ( ) ) <NEWLINE> <DEDENT> def readInts ( ) : <NEWLINE> <INDENT> return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <DEDENT> def readChar ( ) : <NEWLINE> <INDENT> return input ( ) <NEWLINE> <DEDENT> def readChars ( ) : <NEWLINE> <INDENT> return input ( ) . split ( ) <NEWLINE> <NL> <DEDENT> d = defaultdict ( int ) <NEWLINE> n = readInt ( ) <NEWLINE> for i in readChars ( ) : <NEWLINE> <INDENT> d [ i ] += 1 <NEWLINE> <NL> <DEDENT> d = [ i for i in sorted ( d . items ( ) , reverse = True ) if i [ 1 ] >= 2 ] <NEWLINE> <NL> if len ( d ) == 0 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> elif len ( d ) == 1 : <NEWLINE> <INDENT> if d [ 0 ] [ 1 ] >= 4 : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> if d [ 0 ] [ 1 ] >= 4 : <NEWLINE> <INDENT> print ( int ( d [ 0 ] [ 0 ] ) ** 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( d [ 0 ] [ 0 ] ) * int ( d [ 1 ] [ 0 ] ) ) <NEWLINE> raise Exception <NEWLINE> <DEDENT>
import collections <NEWLINE> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> c = sorted ( collections . Counter ( a ) . items ( ) , reverse = True ) <NEWLINE> <NL> num2 = [ ] <NEWLINE> num4 = [ ] <NEWLINE> <NL> for k in c : <NEWLINE> <INDENT> if k [ 1 ] >= 4 : <NEWLINE> <INDENT> num4 . append ( k [ 0 ] ) <NEWLINE> <DEDENT> if k [ 1 ] >= 2 : <NEWLINE> <INDENT> num2 . append ( k [ 0 ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> if len ( num2 ) >= 2 or len ( num4 ) >= 1 : <NEWLINE> <INDENT> print ( max ( num2 [ 0 ] * num2 [ 1 ] , num4 [ 0 ] ** 2 ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
import collections <NEWLINE> n = int ( input ( ) ) <NEWLINE> alist = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> adic = collections . Counter ( alist ) <NEWLINE> A = [ 0 , 0 ] <NEWLINE> for i in adic : <NEWLINE> <INDENT> if adic [ i ] > 1 : <NEWLINE> <INDENT> A . append ( i ) <NEWLINE> <DEDENT> if adic [ i ] > 3 : <NEWLINE> <INDENT> A . append ( i ) <NEWLINE> <DEDENT> <DEDENT> sortedA = sorted ( A ) <NEWLINE> print ( sorted [ - 1 ] * sorted [ - 2 ] ) <NEWLINE>
A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> if A == C : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x = int ( input ( ) ) <NEWLINE> if x [ 0 ] == x [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
print ( <STRING> [ s : = input ( ) == s [ : : - 1 ] ] : : 2 ) <NEWLINE>
s - input ( ) <NEWLINE> if s [ 0 ] == s [ - 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
print ( <STRING> if input ( ) == reversed ( ( input ( ) ) else <STRING> ) <NEWLINE>
s = rr ( ) <NEWLINE> print ( <STRING> [ s [ 0 ] != s [ 2 ] : : 2 ] ) <NEWLINE>
<COMMENT> <NL> n = input ( ) . split ( ) <NEWLINE> print ( <STRING> if ( a [ - 1 ] == a [ 0 ] ) else <STRING> ) <NEWLINE>
tmp = input ( ) . split ( <STRING> ) <NEWLINE> print ( <STRING> ) if tmp [ 0 ] == tmp [ 2 ] else print ( <STRING> ) <NEWLINE>
N = list ( int ( input ( ) ) ) <NEWLINE> if N [ 0 ] == N [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
array = list ( map ( str , input ( ) . split ( ) ) ) <NEWLINE> if array [ 0 ] == array [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> b = <STRING> <NEWLINE> for i in range ( len ( a ) , 0 , - 1 ) : <NEWLINE> <INDENT> b += a [ i ] <NEWLINE> <DEDENT> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = input ( ) <NEWLINE> if n % 100 == n / 100 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> if n [ 0 ] == n [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> if a == a [ : : - 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = list ( int , input ( ) ) <NEWLINE> m = n . sort ( reverse = True ) <NEWLINE> if n == m : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if b <= c or d <= a : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( min ( d , b ) - max ( a - c ) ) <NEWLINE> <DEDENT>
A , B , C , D = map ( int , input ( ) . split ( ) ) <NEWLINE> X = set ( [ for i in range ( A , B + 1 ) ] ) <NEWLINE> print ( sum ( [ 1 for i in range ( C , D + 1 ) if i in X ] ) ) <NEWLINE>
l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> if l [ 1 ] < l [ 2 ] : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> elif l [ 0 ] > l [ 4 ] : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> l . sort ( ) <NEWLINE> print ( l [ 2 ] - l [ 1 ] ) <NEWLINE> <DEDENT>
a , b , c , d = map ( int ( input ( ) . split ( ) ) ) <NEWLINE> <NL> if b > c : <NEWLINE> <INDENT> print ( b - c ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
<INDENT> a , b , c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> print ( max ( min ( b , d ) - max ( a , c ) , 0 ) ) <NEWLINE>
a , b , c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> if b > c : <NEWLINE> <INDENT> print ( b - c - a ) <NEWLINE> <DEDENT> elif : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
a , b , c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( max ( min ( b , d ) - max ( a , c ) , 0 ) <NEWLINE>
import math <NEWLINE> from functools import reduce <NEWLINE> n = int ( input ( ) ) <NEWLINE> lis = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> lis . append ( int ( input ( ) ) ) <NEWLINE> <DEDENT> def lcm_base ( x , y ) : <NEWLINE> <INDENT> return ( x * y ) // math . gcd ( x , y ) <NEWLINE> <NL> <DEDENT> def lcm ( * numbers ) : <NEWLINE> <INDENT> return reduce ( lcm_base , numbers , 1 ) <NEWLINE> <NL> <DEDENT> def lcm_list ( numbers ) : <NEWLINE> <INDENT> return reduce ( lcm_base , numbers , 1 ) <NEWLINE> <DEDENT> print ( lcm ( lis ) ) <NEWLINE>
import math <NEWLINE> <NL> n = int ( input ( ) ) <NEWLINE> a = [ ] <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> a . append ( int ( input ( ) ) ) <NEWLINE> <DEDENT> <DEDENT> if n == 1 : <NEWLINE> <INDENT> print ( a [ 0 ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> lcm = ( a [ 0 ] * a [ 1 ] ) // math . gcd ( a [ 0 ] , a [ 1 ] ) <NEWLINE> for i in range ( 2 , n ) : <NEWLINE> <INDENT> lcm = ( lcm * a [ i ] ) // math . gcd ( lcm , a [ i ] ) <NEWLINE> <DEDENT> print ( lcm ) <NEWLINE> <DEDENT>
import math <NEWLINE> N = int ( input ( ) ) <NEWLINE> T = [ ] <NEWLINE> <NL> def lcm ( x , y ) : <NEWLINE> <INDENT> gc = math . gcd ( x , y ) <NEWLINE> ans = ( x * y ) // gc <NEWLINE> return ans <NEWLINE> <NL> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> T . append ( int ( input ( ) ) ) <NEWLINE> <NL> <NL> <NL> <DEDENT> if len ( T ) > 2 : <NEWLINE> <INDENT> g = lcm ( T [ 0 ] , T [ 1 ] ) <NEWLINE> for i in range ( 3 , N - 1 ) : <NEWLINE> <INDENT> g = lcm ( g , T [ i + 1 ] ) <NEWLINE> <DEDENT> print ( g ) <NEWLINE> <DEDENT> elif len ( T ) == 2 : <NEWLINE> <INDENT> print ( g ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( T [ 0 ] ) <NEWLINE> <DEDENT>
from heapq import heappush , heappop <NEWLINE> from collections import defaultdict <NEWLINE> <NL> n = int ( input ( ) ) <NEWLINE> graph = defaultdict ( list ) <NEWLINE> <NL> <COMMENT> <NL> for _ in range ( n - 1 ) : <NEWLINE> <INDENT> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> graph [ a ] . append ( ( b , c ) ) <NEWLINE> graph [ b ] . append ( ( a , c ) ) <NEWLINE> <NL> <DEDENT> q , k = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <NL> <COMMENT> <NL> INF = 1 << 60 <NEWLINE> dist = [ INF ] * ( n + 1 ) <NEWLINE> dist [ k ] = 0 <NEWLINE> <NL> <COMMENT> <NL> q = [ ( 0 , k ) ] <NEWLINE> <NL> <COMMENT> <NL> while q : <NEWLINE> <INDENT> cost , curr = heappop ( q ) <NEWLINE> if cost > dist [ curr ] : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> for after , nc in graph [ curr ] : <NEWLINE> <INDENT> if cost + nc < dist [ after ] : <NEWLINE> <INDENT> dist [ after ] = cost + nc <NEWLINE> heappush ( q , ( cost + nc , after ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> . join ( map ( str , ( dist [ x ] + dist [ y ] <NEWLINE> <INDENT> for x , y in ( map ( int , input ( ) . split ( ) ) for _ in range ( q ) ) ) ) ) ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> m = int ( input ( ) ) <NEWLINE> print ( ( n - 1 ) * ( m - 1 ) ) <NEWLINE>
n , n = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( ( n - 1 ) * ( m - 1 ) ) <NEWLINE>
aaa <NEWLINE>
<COMMENT> <NL> N = int ( input ( ) ) <NEWLINE> N_List = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> Four_List = [ i for i in N_List if i % 4 == 0 ] <NEWLINE> Two_List = [ i for i in N_List if i % 2 == 0 ] <NEWLINE> if len ( Two_List ) - len ( Four_List ) > 0 : <NEWLINE> <INDENT> N = N - ( len ( Two_List ) - len ( Four_List ) ) + 1 <NEWLINE> <NL> <DEDENT> if N // 2 <= len ( Four_List ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n , m = [ map ( int , input ( ) . split ( ) ) for i in range ( 2 ) ] <NEWLINE> print ( ( n - 1 ) * ( m - 1 ) ) <NEWLINE>
n , m = map ( intput ( ) . split ( ) ) <NEWLINE> print ( ( n - 1 ) * ( m - 1 ) ) <NEWLINE>
print ( ( int ( input ( ) ) - 1 ) * ( int ( input ( ) ) - 1 ) ) <NEWLINE>
n , m = int ( input ( ) . split ( ) ) <NEWLINE> k = ( n - 1 ) * ( m - 1 ) <NEWLINE> print ( k ) <NEWLINE>
n , m = map ( int , input . split ( ) ) <NEWLINE> print ( ( n - 1 ) * ( m - 1 ) ) <NEWLINE>
n , m = map ( int , input ( ) ) <NEWLINE> ans = ( n - 1 ) * ( m - 1 ) <NEWLINE> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> print ( 2 * n , end = <STRING> ) <NEWLINE>
x , y = int ( input ( ) . split ( ) ) <NEWLINE> print ( ( x - 1 ) * ( y - 1 ) ) <NEWLINE>
n , m = map ( int , input . split ( ) ) <NEWLINE> print ( ( n - 1 ) * ( m - 1 ) ) <NEWLINE>
from sys import stdin , stdout <NEWLINE> def main ( ) : <NEWLINE> <INDENT> line = stdin . readLine ( ) <NEWLINE> parts = line . split ( ) <NEWLINE> a = int ( parts [ 1 ] ) <NEWLINE> b = int ( parts [ 2 ] ) <NEWLINE> stdout . write ( ( a - 1 ) * ( b - 1 ) ) <NEWLINE> <DEDENT> main ( ) <NEWLINE>
x , y = input ( ) . split ( ) <NEWLINE> a = x - 1 <NEWLINE> b = y - 1 <NEWLINE> print ( a * b ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> m = int ( input ( ) ) <NEWLINE> print ( ( n - 1 ) * ( m - 1 ) ) <NEWLINE>
n , m = map ( int , imput ( ) . split ( ) ) <NEWLINE> print ( ( n - 1 ) * ( m - 1 ) ) <NEWLINE>
a , b = list ( map ( int , input ( ) ) ) <NEWLINE> <NL> print ( ( a - 1 ) * ( b - 1 ) ) <NEWLINE>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( n * m - 2 ( n + m ) + 4 ) <NEWLINE>
print ( ( int ( input ( ) ) - 1 ) * ( int ( input ( ) ) - 1 ) ) <NEWLINE>
import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import collections <NEWLINE> import heapq <NEWLINE> import re <NEWLINE> import numpy as np <NEWLINE> from functools import reduce <NEWLINE> <NL> rr = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> rs = lambda : sys . stdin . readline ( ) . split ( ) <NEWLINE> ri = lambda : int ( sys . stdin . readline ( ) ) <NEWLINE> rm = lambda : map ( int , sys . stdin . readline ( ) . split ( ) ) <NEWLINE> rl = lambda : list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) <NEWLINE> inf = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> s = rr ( ) <NEWLINE> print ( s [ 0 ] + str ( len ( s - 2 ) ) + s [ - 1 ] ) <NEWLINE> <NL> <NL> <NL> <NL> <NL> <NL> <NL>
a = input ( ) <NEWLINE> print ( s [ 0 ] + str ( len ( s ) - 2 ) + s [ - 1 ] ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ 0 ] + int ( len ( s ) - 2 ) + s [ - 1 ] ) <NEWLINE>
a = input ( ) <NEWLINE> print ( a [ 0 ] + str ( len ( a - 2 ) ) + a [ - 1 ] ) <NEWLINE>
<INDENT> s = input ( ) <NEWLINE> <DEDENT> print ( <STRING> . format ( s [ 0 ] , len ( s ) - 2 , s [ - 1 ] ) ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ 0 ] + str ( len ( s - 2 ) ) + s [ - 1 ] ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ 0 ] + ( len ( s ) - 2 ) + s [ - 1 ] ) <NEWLINE>
s = input ( ) <NEWLINE> N = len ( s ) <NEWLINE> print ( s [ 0 ] + len ( N - 2 ) + s [ N - 1 ] ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ 0 ] + ( len ( s ) - 1 ) + s [ - 1 ] ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ : 1 ] + str ( len ( s - 2 ) ) + s [ - 1 : ] ) <NEWLINE>
a = list ( input ( ) ) <NEWLINE> n = len ( a ) - 2 <NEWLINE> print ( a [ 0 ] , n , a [ - 1 ] , sep = ( <STRING> ) <NEWLINE>
import sys <NEWLINE> <NL> line = sys . stdin <NEWLINE> line = line . strip ( ) <NEWLINE> start = line [ 0 ] <NEWLINE> end = line [ - 1 ] <NEWLINE> print ( <STRING> % ( start , len ( line ) - 2 , end ) ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ 0 ] + int ( len ( s ) - 2 ) + s [ - 1 ] ) <NEWLINE>
s = input ( ) <NEWLINE> t = len ( s ) <NEWLINE> print ( s [ 0 ] + t + s [ - 1 ] ) <NEWLINE>
s = intput ( ) <NEWLINE> <NL> print ( s [ 0 ] + str ( ( len ( s ) - 2 ) ) + s [ - 1 ] ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ 0 ] + ( len ( s ) - 2 ) + s [ len ( s ) - 1 ] ) <NEWLINE>
S = input ( ) <NEWLINE> print ( S [ 0 ] + len ( S [ 1 : - 1 ] ) + S [ - 1 ] ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> from fractions import gcd <NEWLINE> from itertools import combinations , permutations , accumulate , product <COMMENT> <NEWLINE> <COMMENT> <NL> from collections import deque , defaultdict , Counter <NEWLINE> import decimal <NEWLINE> import re <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> import sys <NEWLINE> sys . setrecursionlimit ( 10000000 ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <COMMENT> <NL> def readInts ( ) : <NEWLINE> <INDENT> return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <DEDENT> def I ( ) : <NEWLINE> <INDENT> return int ( input ( ) ) <NEWLINE> <DEDENT> n = I ( ) <NEWLINE> A = readInts ( ) <NEWLINE> four = 0 <NEWLINE> two = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if A [ i ] % 4 == 0 : <NEWLINE> <INDENT> four += 1 <NEWLINE> <DEDENT> elif A [ i ] % 2 == 0 : <NEWLINE> <INDENT> two += 1 <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> if a + b // 2 >= n // 2 else <STRING> ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a , b , c = 0 , 0 , 0 <NEWLINE> ans = <STRING> <NEWLINE> for i in a : <NEWLINE> <INDENT> if a % 4 == 0 : <NEWLINE> <INDENT> a += 1 <NEWLINE> <DEDENT> elif a % 2 == 0 : <NEWLINE> <INDENT> b += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> <DEDENT> if n % 2 == 1 : <NEWLINE> <INDENT> if c - a == 1 : <NEWLINE> <INDENT> if b == 0 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> <DEDENT> elif a >= c : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if a >= c : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> li = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> lis = [ ] <NEWLINE> x = 0 <NEWLINE> y = 0 <NEWLINE> z = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if li [ i ] % 4 == 0 : <NEWLINE> <INDENT> x += 1 <NEWLINE> <DEDENT> elif li [ i ] % 2 == 0 : <NEWLINE> <INDENT> y = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> z += 1 <NEWLINE> <DEDENT> <DEDENT> if y = 0 : <NEWLINE> <INDENT> if x >= y + 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if x >= y : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> even4 , even , odd = 0 , 0 , 0 <NEWLINE> for i in a : <NEWLINE> <INDENT> if i % 4 == 0 : <NEWLINE> <INDENT> even4 += 1 <NEWLINE> <DEDENT> elif i % 2 == 0 : <NEWLINE> <INDENT> even += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> odd += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if n % 2 == 0 : <NEWLINE> <INDENT> if even4 >= odd : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if even4 >= odd + 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
N = int ( input ( ) ) <NEWLINE> a = [ int ( i ) for i input ( ) . split ( ) ] <NEWLINE> <NL> ki = 0 <NEWLINE> gu_2 = 0 <NEWLINE> gu_4 = 0 <NEWLINE> <NL> for i in a : <NEWLINE> <INDENT> if i % 4 == 0 : <NEWLINE> <INDENT> gu_4 += 1 <NEWLINE> <DEDENT> elif i % 2 == 0 : <NEWLINE> <INDENT> gu_2 += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ki += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if ki <= gu_4 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a = 0 <NEWLINE> b = 0 <NEWLINE> for num in A : <NEWLINE> <INDENT> if num % 2 == 1 : <NEWLINE> <INDENT> a += 1 <NEWLINE> <DEDENT> elif num % 4 == 0 : <NEWLINE> <INDENT> b += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if N == 3 : <NEWLINE> <INDENT> if a == 3 or ( a >= 1 and b == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if a = < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
import math <NEWLINE> <NL> n = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> c_4 = 0 <NEWLINE> c_2 = 0 <NEWLINE> <NL> for i in l : <NEWLINE> <INDENT> if i % 4 == 0 : <NEWLINE> <INDENT> c_4 += 1 <NEWLINE> <DEDENT> elif i % 2 == 0 : <NEWLINE> <INDENT> c_2 += 1 <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if c_2 == 1 : <NEWLINE> <INDENT> num = n <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> num = n - c_2 <NEWLINE> <NL> <DEDENT> if matj . ceil ( num / 2 ) <= c_4 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> elif c_2 == n : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> zero , one , two = 0 , 0 , 0 <NEWLINE> for i in a : <NEWLINE> <INDENT> if i % 4 == 0 : <NEWLINE> <INDENT> two += 1 <NEWLINE> <DEDENT> elif i % 2 == 0 : <NEWLINE> <INDENT> one += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> zero += 1 <NEWLINE> <DEDENT> <DEDENT> if one = N : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> print ( <STRING> if two + int ( two > 0 ) >= zero + int ( one > 0 ) else <STRING> ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <NL> N = int ( input ( ) ) <NEWLINE> alist = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> oddcount = 0 <NEWLINE> mod40 = 0 <NEWLINE> other = 0 <NEWLINE> <NL> for a in alist : <NEWLINE> <INDENT> if a % 2 == 1 : <NEWLINE> <INDENT> oddcount += 1 <NEWLINE> <DEDENT> elif a % 4 == 0 : <NEWLINE> <INDENT> mod40 += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> other += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if N == 1 : <NEWLINE> <INDENT> if mod40 == N : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> if N == 2 or N == 3 : <NEWLINE> <INDENT> if mod40 > 0 or other == N : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <COMMENT> <NL> <NL> <DEDENT> <DEDENT> if ( N - ( ( other // 2 ) * 2 ) ) // 2 <= mod40 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> else : <NEWLINE> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT>
h , w , n , * A = map ( int , open ( x : = 0 ) . read ( ) . split ( ) ) ; c = [ ] <NEWLINE> for i in range ( n ) : c += [ i + 1 ] * A [ i ] <NEWLINE> for i in range ( h ) : print ( * ( c [ i * w : - ~ i * w ] ) [ : : x ] ) ; x ^= 1 <NEWLINE>
n = input ( ) . split ( ) <NEWLINE> print ( <STRING> + n ) <NEWLINE>
print ( ABC + input ( ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> print ( <STRING> + int ( n ) ) <NEWLINE>
<INDENT> if 2 ** i <= n : <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> for i in range ( 8 ) : <NEWLINE> <INDENT> if 2 ** i > n : <NEWLINE> <INDENT> print ( 2 ** ( i - 1 ) ) <NEWLINE> return <NEWLINE> <DEDENT> <DEDENT>
n = int ( input ( ) ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if i = 2 ** a and 2 ** a < n and n < 2 ** ( a + 1 ) : <NEWLINE> <INDENT> print ( i ) <NEWLINE> <DEDENT> <DEDENT>
n = int ( input ( ) ) <NEWLINE> <NL> ans = [ ] <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> x = i <NEWLINE> for j in range ( 100 ) : <NEWLINE> <INDENT> if x % 2 == 0 : <NEWLINE> <INDENT> x = int ( x // 2 ) <NEWLINE> <COMMENT> <NL> <DEDENT> else : <NEWLINE> <COMMENT> <NL> <INDENT> break <NEWLINE> <COMMENT> <NL> <NL> <COMMENT> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans . index ( max ( ans ) ) + 1 ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> print ( max ( i if 2 ** i <= N else 0 for i in range ( 10 ) ) <NEWLINE>
def resolve ( N ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> N = int ( input ( ) ) <NEWLINE> res = 0 <NEWLINE> <NL> def div2 ( num ) : <NEWLINE> <INDENT> if num == 1 : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> while True : <NEWLINE> <INDENT> if num % 2 == 0 : <NEWLINE> <INDENT> num //= 2 <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return cnt <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> res_max_cnt = 0 <NEWLINE> res = 1 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> tepm_cnt = div2 ( i + 1 ) <NEWLINE> if res_max_cnt < tepm_cnt : <NEWLINE> <INDENT> res_max_cnt = tepm_cnt <NEWLINE> res = i + 1 <NEWLINE> <DEDENT> <DEDENT> print ( res ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> b = m . bit_length ( ) - 1 <NEWLINE> ans = int ( <STRING> + <STRING> * m , 2 ) <NEWLINE> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ ] <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> while True : <NEWLINE> <INDENT> if i % 2 != 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> i = i // 2 <NEWLINE> c += 1 <NEWLINE> <DEDENT> a . append ( c ) <NEWLINE> <DEDENT> print ( a . index ( max ( a ) ) + 1 ) <NEWLINE>
n = int ( intput ( ) ) <NEWLINE> res = [ ] <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> while i % 2 == 0 : <NEWLINE> <INDENT> i /= 2 <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> res . append ( cnt ) <NEWLINE> <DEDENT> print ( res . index ( max ( res ) ) + 1 ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> <NL> while a * 2 <= N : <NEWLINE> <INDENT> a = a * 2 <NEWLINE> <NL> <DEDENT> print ( a ) <NEWLINE>
for i in range ( 7 ) : <NEWLINE> <INDENT> if 2 ** i > n : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> print ( 2 ** ( i - 1 ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> cnt = 0 <NEWLINE> while True : <NEWLINE> <INDENT> odd_flag = False <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if A [ i ] % 2 == 1 : <NEWLINE> <INDENT> odd_flag = True <NEWLINE> <DEDENT> <DEDENT> if odd_flag : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> A [ i ] = A [ i ] // 2 <NEWLINE> <DEDENT> cnt += 1 <NEWLINE> <NL> <DEDENT> print ( cnt ) <NEWLINE>
import typing <NEWLINE> from typing import Deque , Set , Dict <NEWLINE> <NL> class Island : <NEWLINE> <INDENT> def __init__ ( self , id : int ) -> None : <NEWLINE> <INDENT> self . id : int = id <NEWLINE> self . connection : List [ <STRING> ] = [ ] <NEWLINE> self . rank : int = 0 <NEWLINE> <NL> <DEDENT> def addConnection ( self , other : <STRING> ) -> None : <NEWLINE> <INDENT> self . connection . append ( other ) <NEWLINE> other . connection . append ( self ) <NEWLINE> <NL> <DEDENT> def setParent ( self , other : <STRING> ) -> None : <NEWLINE> <INDENT> self . rank = other . rank + 1 <NEWLINE> <NL> <DEDENT> <DEDENT> class Islands ( Dict [ int , Island ] ) : <NEWLINE> <INDENT> def __init__ ( self , num : int ) : <NEWLINE> <INDENT> for id in range ( 1 , num + 1 ) : <NEWLINE> <INDENT> self [ id ] = Island ( id ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> def bfs ( root : Island , max_depth : int ) -> None : <NEWLINE> <INDENT> root . setAsRoot ( ) <NEWLINE> reserved : Deque [ Island ] = Deque ( [ root ] ) <NEWLINE> seen : Set [ int ] = { root . id } <NEWLINE> while len ( reserved ) != 0 : <NEWLINE> <INDENT> current : Island = reserved . popleft ( ) <NEWLINE> if current . rank > max_depth : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> for connected in current . connection : <NEWLINE> <INDENT> if connected . id in seen : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> connected . setParent ( current ) <NEWLINE> seen . add ( connected . id ) <NEWLINE> reserved . append ( connected ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> def main ( ) -> None : <NEWLINE> <INDENT> with open ( 0 ) as f : <NEWLINE> <INDENT> N , M = map ( int , f . readline ( ) . split ( ) ) <NEWLINE> ab = [ map ( int , line . split ( ) ) for line in f . readlines ( ) ] <NEWLINE> <COMMENT> <NL> <DEDENT> islands : Islands = Islands ( N ) <NEWLINE> <COMMENT> <NL> for a , b in ab : <NEWLINE> <INDENT> islands [ a ] . addConnection ( islands [ b ] ) <NEWLINE> <COMMENT> <NL> <DEDENT> bfs ( islands [ 1 ] , 2 ) <NEWLINE> <COMMENT> <NL> print ( <STRING> if islands [ N ] . rank in ( 1 , 2 ) else <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
N , M = map ( int , input ( ) ) <NEWLINE> From = set ( ) <NEWLINE> To = set ( ) <NEWLINE> for _ in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) ) <NEWLINE> if a == 1 : <NEWLINE> <INDENT> From . add ( b ) <NEWLINE> <DEDENT> if b == N : <NEWLINE> <INDENT> To . add ( a ) <NEWLINE> <DEDENT> <DEDENT> if From . isdisjoint ( To ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> fromOne = set ( ) <NEWLINE> toM = set ( ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == 1 : <NEWLINE> <INDENT> fromOne . add ( b ) <NEWLINE> <DEDENT> elif b == M : <NEWLINE> <INDENT> toM . add ( a ) <NEWLINE> <DEDENT> <DEDENT> return <STRING> if fromOne & toM else <STRING> <NEWLINE> <DEDENT> print ( main ( ) ) <NEWLINE>
a_list = [ ] <NEWLINE> b_list = [ ] <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> if X [ i ] [ 0 ] == 1 : <NEWLINE> <INDENT> a_list . append ( X [ i ] [ 1 ] ) <NEWLINE> <DEDENT> elif X [ i ] [ 1 ] == 1 : <NEWLINE> <INDENT> a_list . append ( X [ i ] [ 0 ] ) <NEWLINE> <DEDENT> elif X [ i ] [ 0 ] == n : <NEWLINE> <INDENT> b_list . append ( X [ i ] [ 1 ] ) <NEWLINE> <DEDENT> elif X [ i ] [ 1 ] == n : <NEWLINE> <INDENT> b_list . append ( X [ i ] [ 0 ] ) <NEWLINE> <DEDENT> <DEDENT> c_set = set ( a_list ) & set ( b_list ) <NEWLINE> if len ( c_set ) == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> c = [ [ ] for _ in range ( m + 1 ) ] <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> c [ a ] . append ( b ) <NEWLINE> c [ b ] . append ( a ) <NEWLINE> <NL> <DEDENT> for i in c [ 1 ] : <NEWLINE> <INDENT> if n in c [ i ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
N , * A = [ int ( _ ) for _ in open ( 0 ) . read ( ) . split ( ) ] <NEWLINE> sumB = max ( 0 , sum ( A ) - N * ( N - 1 ) ) <NEWLINE> while True : <NEWLINE> <INDENT> B = [ 0 - ( - ( a + x + 1 - N ) ) // ( N + 1 ) for a in A ] <NEWLINE> if sumB == sum ( B ) : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> sumB += 1 <NEWLINE> <DEDENT> print ( sumB ) <NEWLINE>
def main ( ) : <NEWLINE> <INDENT> import sys <NEWLINE> <NL> def input ( ) : return sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> <NL> def gcd ( x , y ) : <NEWLINE> r = x % y <NEWLINE> if r == 0 : <NEWLINE> <INDENT> return y <NEWLINE> <DEDENT> return gcd ( y , r ) <NEWLINE> <NL> n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a . sort ( reverse = True ) <NEWLINE> c = a [ 0 ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> c = gcd ( a [ i ] , c ) <NEWLINE> <DEDENT> if k % c == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a . sort ( ) <NEWLINE> a . reverse ( ) <NEWLINE> x = a [ 0 ] <NEWLINE> for i in range ( 1 , N ) : <NEWLINE> <INDENT> while a [ i ] != 0 : <NEWLINE> <INDENT> x , a [ i ] = a [ i ] , x % a [ i ] <NEWLINE> <DEDENT> <DEDENT> if K > a [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> if K % x == 0 else <STRING> ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( n ) ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a [ i ] . reverse ( ) <NEWLINE> <NL> <DEDENT> ans = n <NEWLINE> used = set ( ) <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> count = [ 0 ] * ( m + 1 ) <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> count [ a [ j ] [ - 1 ] ] += 1 <NEWLINE> <NL> <DEDENT> ans = min ( max ( count ) , ans ) <NEWLINE> num = count . index ( max ( count ) ) <NEWLINE> used . add ( num ) <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> while True : <NEWLINE> <INDENT> if a [ j ] [ - 1 ] in used : <NEWLINE> <INDENT> a [ j ] . pop ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
a , b = int ( input ( ) . split ( ) ) <NEWLINE> <NL> if ( a + b ) % 3 == 0 : <NEWLINE> <INDENT> print ( Possible ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( Impossible ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( a % 3 == 0 ) | | ( b % 3 == 0 ) | | ( ( a + b ) % 3 == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if a % 3 == 0 or b % 3 == 0 or ( a + b ) % == 0 else <STRING> ) <NEWLINE>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = sum ( a ) <NEWLINE> <NL> if ( b % 3 or a [ 0 ] % 3 or a [ 1 ] ) != 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a % 3 == 0 or b % 3 == 0 : or ( a + b ) % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if A % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif B % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( A + B ) % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
print ( <STRING> [ notA % 3 == 0 orB % 3 == 0 or ( A + B ) % 3 == 0 : : 2 ] ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in ( a , b , a + b ) : <NEWLINE> <INDENT> i % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
<NL> <COMMENT> <NL> <COMMENT> <NL> a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> if a / 3 >= 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b / 3 >= 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( a + b ) / 3 >= 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 10 ** 100 <NEWLINE> x = sum ( a ) <NEWLINE> b = 0 <NEWLINE> for i in a [ : - 1 ] : <NEWLINE> <INDENT> b += i <NEWLINE> x -= i <NEWLINE> ans = min ( ans , abs ( x - b ) ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
li = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> li . append ( a + b ) <NEWLINE> for i in range ( 3 ) : <NEWLINE> <INDENT> if li [ i ] % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import collections <NEWLINE> import heapq <NEWLINE> import re <NEWLINE> import numpy as np <NEWLINE> <NL> rr = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> rs = lambda : sys . stdin . readline ( ) . split ( ) <NEWLINE> ri = lambda : int ( sys . stdin . readline ( ) ) <NEWLINE> rm = lambda : map ( int , sys . stdin . readline ( ) . split ( ) ) <NEWLINE> rl = lambda : list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) <NEWLINE> inf = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> a , b , c = rm ( ) <NEWLINE> if a % 3 == 0 or b % 3 == 0 or ( a + b ) % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <DEDENT>
A , B = map ( int . input ( ) . split ( ) ) <NEWLINE> if A % 3 == 0 or B % 3 == 0 or ( A + B ) % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> x = a + b <NEWLINE> if x % 3 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else ( <STRING> ) <NEWLINE>
a , b = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> c = ( a + b ) % 3 <NEWLINE> if ( str ( a ) % <STRING> == <STRING> or str ( b ) % <STRING> == <STRING> or ( c ) == <STRING> ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int ( input ( ) ) . split ( ) ) <NEWLINE> print ( [ <STRING> , <STRING> ] [ a % 3 == b % 3 and ( a % 3 == 1 or a % 3 == 2 ) ] <NEWLINE>
A , B = int ( input ( ) ) <NEWLINE> if A % 3 * B % 3 * ( A + B ) % 3 == 0 : print ( <STRING> ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
a , b = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> if ( ( a + b ) % 3 ) == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if ( a % 3 ) == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if ( b % 3 ) == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
N , K = map ( int , input ( ) ) <NEWLINE> L = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> L . sort ( reverse = True ) <NEWLINE> print ( sum ( L [ : K ] ) ) <NEWLINE>
n , k = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> l . sort ( reverse = True ) <NEWLINE> length = 0 <NEWLINE> for i in range ( k ) : <NEWLINE> <INDENT> length += l [ i ] <NEWLINE> <DEDENT> print ( length ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> K = int ( input ( ) ) <NEWLINE> ls = sorted ( [ int ( i ) for i in input ( ) . split ( <STRING> ) ] , reverse = True ) <NEWLINE> <NL> l_sum = 0 <NEWLINE> for k in range ( K ) : <NEWLINE> <INDENT> l = ls [ k ] <NEWLINE> l_sum += l <NEWLINE> <NL> <DEDENT> print ( l_sum ) <NEWLINE>
int main ( ) { <NEWLINE> <INDENT> int N ; <NEWLINE> int K ; <NEWLINE> int a [ 55 ] ; <NEWLINE> cin >> N >> K ; <NEWLINE> <NL> for ( int i = 0 ; i < N ; + + i ) { <NEWLINE> <INDENT> cin >> a [ i ] ; <NEWLINE> <DEDENT> } <NEWLINE> sort ( a , a + N , greater < int > ( ) ) ; <NEWLINE> int ans = 0 ; <NEWLINE> for ( int i = 0 ; i <= K ; + + i ) { <NEWLINE> <INDENT> ans += a [ i ] ; <NEWLINE> <DEDENT> } <NEWLINE> cout << ans << endl ; <NEWLINE> <DEDENT> } <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> s = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> s . sort ( ) <NEWLINE> print ( sum ( s [ len ( n ) - k : ] ) ) <NEWLINE>
15 14 <NEWLINE> 50 26 27 21 41 7 42 35 7 5 5 36 39 1 45 <NEWLINE>
def solve ( ) : <NEWLINE> <INDENT> N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> L = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> L . sort ( reversed = True ) <NEWLINE> print ( sum ( L [ : K ] ) ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> solve ( ) <NEWLINE> <DEDENT>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> l . sort ( reverse = True ) <NEWLINE> print ( sum [ : K ] ) <NEWLINE>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> x = <NEWLINE>
l , k = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( sum ( sorted ( map ( int , input ( ) . split ( ) ) [ : k ] ) ) <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> l . sort ( reversed = True ) <NEWLINE> print ( sum ( l [ : k ] ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = [ 0 ] + list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> A [ i ] = A [ i ] + A [ i - 1 ] <NEWLINE> <DEDENT> ans = float ( <STRING> ) <NEWLINE> for i in range ( 1 , N ) : <NEWLINE> <INDENT> ans = min ( ans , ans ( A [ N ] - 2 * A [ i ] ) ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> sum_a = sum ( a ) <NEWLINE> b = [ ] <NEWLINE> c = 0 <NEWLINE> for i in range ( N - 1 ) : <NEWLINE> <INDENT> c += a [ i ] <NEWLINE> b . append ( abs ( 2 * b - sum_a ) ) <NEWLINE> <DEDENT> print ( min ( b ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> b = list ( accumulate ( a ) ) <NEWLINE> ma = b [ - 1 ] <NEWLINE> mi = 10 ** 10 <NEWLINE> for sunuke in b : <NEWLINE> <INDENT> arai = ma - sunuke <NEWLINE> if abs ( sunuke - arai ) < mi : <NEWLINE> <INDENT> mi = abs ( sunuke - arai ) <NEWLINE> <DEDENT> <DEDENT> print ( mi ) <NEWLINE>
import sys <NEWLINE> import re <NEWLINE> from collections import deque , defaultdict , Counter <NEWLINE> from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians <NEWLINE> from itertools import accumulate , permutations , combinations , product <NEWLINE> from operator import itemgetter , mul <NEWLINE> from copy import deepcopy <NEWLINE> from string import ascii_lowercase , ascii_uppercase , digits <NEWLINE> from bisect import bisect , bisect_left <NEWLINE> from fractions import gcd <NEWLINE> from heapq import heappush , heappop <NEWLINE> from functools import reduce <NEWLINE> def input ( ) : return sys . stdin . readline ( ) . strip ( ) <NEWLINE> def INT ( ) : return int ( input ( ) ) <NEWLINE> def MAP ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> N = INT ( ) <NEWLINE> A = LIST ( ) <NEWLINE> <NL> ans = INF <NEWLINE> for i in range ( N - 1 ) : <NEWLINE> <INDENT> x = sum ( A [ : i + 1 ] ) <NEWLINE> y = sum ( A [ i + 1 : ] ) <NEWLINE> <NL> tmp = abs ( x - y ) <NEWLINE> if tmp < ans : <NEWLINE> <INDENT> ans = tmp <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> total = sum ( a ) <NEWLINE> s = 0 <NEWLINE> i = 0 <NEWLINE> ans = total + 1 <NEWLINE> while True : <NEWLINE> <INDENT> s += a [ i ] <NEWLINE> total -= a [ i ] <NEWLINE> ans = min ( ans , abs ( s - total ) ) <NEWLINE> i += 1 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
from collections import deque , defaultdict <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> edges = [ tuple ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n - 1 ) ] <NEWLINE> d = defaultdict ( list ) <NEWLINE> for e in edges : <NEWLINE> <INDENT> d [ e [ 0 ] ] . append ( e [ 1 ] ) <NEWLINE> d [ e [ 1 ] ] . append ( e [ 0 ] ) <NEWLINE> <DEDENT> def dist ( m ) : <NEWLINE> <INDENT> dl = [ - 1 ] * ( n + 1 ) <NEWLINE> cv = deque ( [ m ] ) <NEWLINE> nv = deque ( [ 1 ] ) <NEWLINE> while nv : <NEWLINE> <INDENT> c += 1 <NEWLINE> cv . extend ( nv ) <NEWLINE> nv . clear ( ) <NEWLINE> for e in cv : <NEWLINE> <INDENT> dl [ e ] = c <NEWLINE> for x in d [ e ] : <NEWLINE> <INDENT> if dl [ x ] < 0 : <NEWLINE> <INDENT> nv . append ( x ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> cv . clear ( ) <NEWLINE> <DEDENT> return dl [ 1 : ] <NEWLINE> <DEDENT> fnc = dist ( 1 ) <NEWLINE> snk = dist ( n ) <NEWLINE> j = sum ( [ ( fnc [ i ] <= snk [ i ] ) - ( fnc [ i ] > snk [ i ] ) for i in range ( n ) ] ) <NEWLINE> if j > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
import collections <NEWLINE> <NL> N = int ( input ( ) ) <NEWLINE> tree = [ [ ] for _ in range ( N ) ] <COMMENT> <NEWLINE> for _ in range ( N - 1 ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> tree [ a - 1 ] . append ( b - 1 ) <NEWLINE> tree [ b - 1 ] . append ( a - 1 ) <NEWLINE> <NL> <DEDENT> color = [ 0 ] * N <COMMENT> <NEWLINE> color [ 0 ] = 1 <NEWLINE> color [ N - 1 ] = - 1 <NEWLINE> que = collections . depue ( ) <COMMENT> <NEWLINE> que . append ( 0 ) <NEWLINE> que . append ( N - 1 ) <NEWLINE> while que : <COMMENT> <NEWLINE> <INDENT> i = que . popleft ( ) <COMMENT> <NEWLINE> for x in tree [ i ] : <NEWLINE> <INDENT> if color [ x ] == 0 : <NEWLINE> <INDENT> color [ x ] = color [ i ] <NEWLINE> que . append ( x ) <COMMENT> <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> if sum ( color ) > 0 : <COMMENT> <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <COMMENT> <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
from collections import deque <NEWLINE> def f ( x , q ) : <NEWLINE> <INDENT> for i in route [ x ] : <NEWLINE> <INDENT> if not visit [ i ] : <NEWLINE> <INDENT> visit [ i ] = True <NEWLINE> f ( i , q + [ i ] ) <NEWLINE> visit [ i ] = False <NEWLINE> if i == n - 1 : <NEWLINE> <INDENT> p = q + [ i - 1 ] <NEWLINE> flag = True <NEWLINE> return p <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> n = int ( input ( ) ) <NEWLINE> route = [ [ ] for i in range ( n ) ] <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> a , b = map ( lambda x : int ( x ) - 1 , input ( ) . split ( ) ) <NEWLINE> route [ a ] . append ( b ) <NEWLINE> route [ b ] . append ( a ) <NEWLINE> <DEDENT> visit = [ False for i in range ( n ) ] <NEWLINE> p = f ( 0 , [ 0 ] ) <NEWLINE> t = p [ - ( - len ( p ) // 2 ) - 1 ] <NEWLINE> <NL> d = deque ( ) <NEWLINE> d . append ( n - 1 ) <NEWLINE> visit = [ False for i in range ( n ) ] <NEWLINE> siro = 1 <NEWLINE> while d : <NEWLINE> <INDENT> now = d . popleft ( ) <NEWLINE> for i in route [ now ] : <NEWLINE> <INDENT> if not visit [ i ] and i != t : <NEWLINE> <INDENT> visit [ i ] = True <NEWLINE> d . append ( i ) <NEWLINE> siro += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> kuro = n - siro <NEWLINE> if kuro <= siro : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif kuro > siro : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
from networkx import * <NEWLINE> N , * t = map ( str . split , open ( 0 ) ) <NEWLINE> s = shortest_path_length <NEWLINE> x = s ( G : = Graph ( t ) , <STRING> ) <NEWLINE> y = s ( G , N ) <NEWLINE> print ( <STRING> [ sum ( x [ k ] > y [ k ] for k in x ) * 2 >= int ( * N ) : : 2 ] ) <NEWLINE>
import sys <NEWLINE> n = int ( input ( ) ) <NEWLINE> sys . setrecursionlimit ( n ) <NEWLINE> T = [ [ ] for _ in <STRING> * ( n + 1 ) ] <NEWLINE> for _ in range ( n - 1 ) : a , b = map ( int , input ( ) . split ( ) ) ; T [ a ] += b , ; T [ b ] += a , <NEWLINE> def d ( v , p ) : <NEWLINE> <INDENT> r = 0 <NEWLINE> for s in T [ v ] : <NEWLINE> <INDENT> if s != p : r ^= d ( s , v ) + 1 <NEWLINE> <DEDENT> return r <NEWLINE> <DEDENT> print ( <STRING> [ d ( 1 , 1 ) < 1 : : 2 ] ) <NEWLINE>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a . sort ( ) <NEWLINE> print ( a [ 0 ] + [ 1 ] ) <NEWLINE>
a , b , c = sroted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> print ( a + b ) <NEWLINE>
p = sorted ( [ map ( int , input ( ) . split ( ) ) ] ) <NEWLINE> print ( p [ 0 ] + p [ 1 ] ) <NEWLINE> <NL>
lst = input ( ) . split ( ) <NEWLINE> <NL> for i in range ( 3 ) : <NEWLINE> <INDENT> lst [ i ] = int ( lst [ i ] ) <NEWLINE> lst . sort ( ) <NEWLINE> <NL> <DEDENT> print ( lst [ 0 ] + lst [ 1 ] ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( total ( a , b , c ) - max ( a , b , c ) ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> def answer ( a : int , b : int , c : int ) -> int : <NEWLINE> <INDENT> return min ( a + b , a + c , b + c ) <NEWLINE> <NL> <DEDENT> print ( answer ( a , b , c ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( sum ( [ a , b , c ] - max ( a , b , c ) ) ) <NEWLINE>
