ary = list ( map ( lambda n : int ( n ) , input ( ) . split ( <STRING> ) ) ) . sort ( ) <NEWLINE> print ( ary [ 0 ] + ary [ 1 ] ) <NEWLINE>
a , b , c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( max ( a * b , a * c , c * b ) ) <NEWLINE>
a , b , c = map ( int , input ( ) . pslit ( <STRING> ) ) <NEWLINE> print ( a + b + c - max ( a , max ( b , c ) ) ) <NEWLINE>
a , b , c = sorted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> print ( a + b0 <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> min = min { a + b , b + c , c + a } <NEWLINE> print ( min ) <NEWLINE>
print ( sum ( sorted ( list ( map ( int , intput ( ) . split ( ) ) ) ) [ 0 : 2 ] ) ) <NEWLINE>
s = input ( ) <NEWLINE> for i in range ( 1 , len ( s ) // 2 ) : <NEWLINE> <INDENT> if s [ : ( n - 2 * i ) // 2 ] == s [ ( n - 2 * i ) // 2 : n - 2 * i ] : <NEWLINE> <INDENT> print ( n - 2 * i ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
n = input ( ) <NEWLINE> num = len ( n ) - 2 <NEWLINE> for i in range ( num , 0 , - 2 ) : <NEWLINE> <INDENT> f = int ( i / 2 ) <NEWLINE> if s [ : f ] == s [ f : i ] : <NEWLINE> <INDENT> print ( i ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
s = str ( input ( ) ) <NEWLINE> sl = list ( s ) <NEWLINE> ans = 0 <NEWLINE> del s [ - 1 ] <NEWLINE> for i in range ( 1 , len ( s ) ) : <NEWLINE> <INDENT> if ( len ( s ) % 2 == 0 ) : <NEWLINE> <INDENT> if ( s [ : len ( s2 // 2 ) ] == s [ len ( s ) // 2 : ] ) : <NEWLINE> <INDENT> ans = len ( s ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = input ( ) [ : - 1 ] <NEWLINE> while n [ : len ( n ) // 2 ] != [ len ( n ) // 2 : ] : <NEWLINE> <INDENT> n = n [ : - 1 ] <NEWLINE> <DEDENT> print ( len ( n ) ) <NEWLINE>
s = str ( input ( ) ) <NEWLINE> flag = 0 <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> s = s [ : len ( s ) - 2 * i ] <NEWLINE> for j in range ( len ( s ) // 2 ) : <NEWLINE> <INDENT> if s [ j ] != s [ len ( s ) - j ] : <NEWLINE> <INDENT> flag = 1 <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if flag == 0 : <NEWLINE> <INDENT> print ( len ( s ) ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> flag = 0 <NEWLINE> continue <NEWLINE> <DEDENT> <DEDENT>
S = input ( ) [ : - 2 ] <NEWLINE> while len ( S ) >= 0 : <NEWLINE> <INDENT> if S [ : len ( S ) // 2 ] == S [ len ( S ) // 2 : ] : <NEWLINE> <INDENT> print ( len ( S ) ) <NEWLINE> <DEDENT> S = S [ : - 2 ] <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> n = len ( s ) // 2 <NEWLINE> <NL> for x in range ( 1 , n ) : <NEWLINE> <INDENT> if s [ : n - i ] == s [ n - i : 2 * n - 2 * i ] : <NEWLINE> <INDENT> print ( 2 * n - 2 * i ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
s = input ( ) <NEWLINE> for i in range ( int ( len ( s ) + 1 ) / 2 ) : <NEWLINE> <INDENT> if s [ i ] != s [ int ( len ( s ) + 1 ) / 2 ] : <NEWLINE> <INDENT> del [ len ( s ) - 1 ] <NEWLINE> <DEDENT> <DEDENT> print ( len ( s ) + 1 ) <NEWLINE>
s = list ( input ( ) ) <NEWLINE> from copy import copy <NEWLINE> t = s . copy ( ) <NEWLINE> <NL> for i in range ( len ( t ) ) : <NEWLINE> <INDENT> if len ( s ) % 2 == 0 and s [ : len ( s ) / 2 ] == s [ len ( s ) / 2 : ] : <NEWLINE> <INDENT> print ( len ( s ) ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> s . pop ( - 1 ) <NEWLINE> <DEDENT> <DEDENT>
from collections import deque <NEWLINE> from typing import List <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> v = input ( ) . split ( <STRING> ) <NEWLINE> print ( pp ( n , v ) ) <NEWLINE> <NL> <NL> <DEDENT> def pp ( n : int , v : List [ str ] ) -> List [ str ] : <NEWLINE> <INDENT> x = [ ] <NEWLINE> y = deque ( [ ] ) <NEWLINE> <NL> if n % 2 == 0 : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> if i % 2 == 0 : <NEWLINE> <INDENT> y . append ( v [ i ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> x . append ( v [ i ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> if i % 2 == 0 : <NEWLINE> <INDENT> x . append ( v [ i ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> y . append ( v [ i ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> ret = [ ] <NEWLINE> for i in range ( len ( x ) ) : <NEWLINE> <INDENT> ret . append ( x . pop ( ) ) <NEWLINE> <NL> <DEDENT> for i in range ( len ( y ) ) : <NEWLINE> <INDENT> ret . append ( y . popleft ( ) ) <NEWLINE> <NL> <DEDENT> return ret <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> b . append ( 0 ) <NEWLINE> <DEDENT> k = 0 <NEWLINE> if ( n % 2 == 1 ) : <NEWLINE> <INDENT> k = ( n - 1 ) // 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> k = n // 2 <NEWLINE> <DEDENT> for i in range ( n ) : <NEWLINE> <INDENT> if ( i % 2 == 0 ) : <NEWLINE> <INDENT> print ( a [ i ] ) <NEWLINE> print ( k + i // 2 ) <NEWLINE> b [ k + i // 2 ] = a [ i ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a [ i ] ) <NEWLINE> b [ k - ( i + 1 ) // 2 ] = a [ i ] <NEWLINE> <DEDENT> <DEDENT> print ( b ) <NEWLINE> <NL> <NL> <NL>
n = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a = [ l [ 0 ] ] <NEWLINE> if n % 2 == 1 : <NEWLINE> <INDENT> for i in range ( 1 , n ) : <NEWLINE> <INDENT> if i % 2 == 1 : <NEWLINE> <INDENT> a . insert ( 0 , l [ i ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a . append ( l [ i ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( 1 , n ) : <NEWLINE> <INDENT> if i % 2 == 1 : <NEWLINE> <INDENT> a . appen ( l [ i ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a . insert ( 0 , l [ i ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( a ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = [ ] <NEWLINE> for i in a : <NEWLINE> <INDENT> b . append ( i ) <NEWLINE> b . reverse ( ) <NEWLINE> <DEDENT> print ( <STRING> . join ( b ) ) <NEWLINE>
4 3 6 <NEWLINE>
x , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if b - a < 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b - a = 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x >= b - a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , a , b = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> if a < b : <NEWLINE> <INDENT> if b - a > c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , a , b = map ( int , input ( ) ) <NEWLINE> n = a - b <NEWLINE> if n >= 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x + n >= 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
if b - a <= 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b - a <= x : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import re <NEWLINE> import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import bisect <NEWLINE> from copy import copy <NEWLINE> from collections import deque , Counter <NEWLINE> from decimal import Decimal <NEWLINE> import functools <NEWLINE> def v ( ) : return input ( ) <NEWLINE> def k ( ) : return int ( input ( ) ) <NEWLINE> def S ( ) : return input ( ) . split ( ) <NEWLINE> def I ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> def X ( ) : return list ( input ( ) ) <NEWLINE> def L ( ) : return list ( input ( ) . split ( ) ) <NEWLINE> def l ( ) : return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> def lcm ( a , b ) : return a * b // math . gcd ( a , b ) <NEWLINE> sys . setrecursionlimit ( 10 ** 6 ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> cnt = 0 <NEWLINE> ans = 0 <NEWLINE> inf = float ( <STRING> ) <NEWLINE> al = <STRING> <NEWLINE> AL = al . upper ( ) <NEWLINE> <NL> a , b , c = I ( ) <NEWLINE> ans = min ( a + b , b + c ) <NEWLINE> print ( min ( ans , a + c ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ ] <NEWLINE> t = [ ] <NEWLINE> t . append ( 1 ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a . append ( input ( ) ) <NEWLINE> <NL> <DEDENT> x = a [ 0 ] <NEWLINE> while True : <NEWLINE> <INDENT> if x == 2 : <NEWLINE> <INDENT> print ( len ( t ) ) <NEWLINE> break <NEWLINE> <DEDENT> elif x in t : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t . append ( x ) <NEWLINE> y = x <NEWLINE> x = a [ y - 1 ] <NEWLINE> <DEDENT> <DEDENT>
<COMMENT> <NL> N = int ( input ( ) ) <NEWLINE> A = [ int ( input ( ) ) for _ in range ( N ) ] <NEWLINE> next = A [ 0 ] <NEWLINE> ans = - 1 <NEWLINE> cnt = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> next = A [ next ] <NEWLINE> cnt += 1 <NEWLINE> if next == 2 : <NEWLINE> <INDENT> ans = cnt <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> l = [ int ( input ( ) ) for i in range ( N ) ] <NEWLINE> index = 0 <NEWLINE> count = 0 <NEWLINE> for j in range ( N ) : <NEWLINE> <INDENT> index = l [ index ] <NEWLINE> count += 1 <NEWLINE> if index == 2 : <NEWLINE> <INDENT> print ( count ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( - 1 ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ input ( ) for i in range ( n ) ] <NEWLINE> bu = 0 <NEWLINE> end = - 1 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if bu == 1 : <NEWLINE> <INDENT> end = i - 1 <NEWLINE> break <NEWLINE> bu = a [ bu ] - 1 <NEWLINE> <DEDENT> <DEDENT> print ( end ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> <NL> <COMMENT> <NL> index = 1 <NEWLINE> <COMMENT> <NL> count = 0 <NEWLINE> <NL> while count < N : <NEWLINE> <NL> <INDENT> if a [ index - 1 ] == 2 : <NEWLINE> <INDENT> count += 1 <NEWLINE> print ( count ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> count += 1 <NEWLINE> <COMMENT> <NL> index = a [ index - 1 ] <NEWLINE> <NL> <DEDENT> <DEDENT> print ( - 1 ) <NEWLINE>
cnt = 1 <NEWLINE> l = a [ 0 ] <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> if l in a : <NEWLINE> <INDENT> l = a [ l - 1 ] <NEWLINE> cnt += 1 <NEWLINE> if l == 2 : <NEWLINE> <INDENT> print ( cnt ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> A = [ 0 * N ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> A [ i ] = int ( input ( ) ) - 1 <COMMENT> <NEWLINE> <DEDENT> index = 0 <NEWLINE> trials = - 1 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> index = A [ index ] <NEWLINE> if index == 1 : <NEWLINE> <INDENT> trials = i + 1 <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( trials ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ 0 , int ( input ( ) ) for i in range ( n ) ] <NEWLINE> cnt = 1 <NEWLINE> next_a = a [ 1 ] <NEWLINE> while cnt <= 10 ** 5 : <NEWLINE> <INDENT> next_a = a [ next_a ] <NEWLINE> cnt += 1 <NEWLINE> if next_a == 2 : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> if cnt < 10 ** 5 : <NEWLINE> <INDENT> print ( cnt ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = [ ] <NEWLINE> s = [ 1 ] <NEWLINE> t = 1 <NEWLINE> ans = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a . append ( int ( input ( ) ) <NEWLINE> <DEDENT> while t != 2 : <NEWLINE> <INDENT> t = a [ t - 1 ] <NEWLINE> s . append ( t ) <NEWLINE> if s . count ( t ) == 2 : <NEWLINE> <INDENT> ans = - 1 <NEWLINE> break <NEWLINE> <DEDENT> ans += 1 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> al = [ int ( input ( ) ) for _ in range ( n ) ] <NEWLINE> <NL> pos = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> pos = A [ pos ] - 1 <NEWLINE> if ( pos == 1 ) : <NEWLINE> <INDENT> print ( i + 1 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( - 1 ) <NEWLINE>
from math import factorial as f <NEWLINE> <NL> n , m = map ( int ( ) , input ( ) . split ( ) ) <NEWLINE> <NL> if n == m : <NEWLINE> <INDENT> print ( ( f ( n ) ** 2 * 2 ) % ( 10 ** 9 + 7 ) ) <NEWLINE> <DEDENT> elif abs ( n - m ) == 1 : <NEWLINE> <INDENT> print ( ( f ( n ) * f ( m ) ) % ( 10 ** 9 + 7 ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
ans = 1 <NEWLINE> if abs ( N - M ) >= 2 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> elif abs ( N - M ) == 1 : <NEWLINE> <INDENT> for i in range ( 1 , min ( N , M ) + 1 ) : <NEWLINE> <INDENT> ans *= i <NEWLINE> ans = ans % ( 10 ** 9 + 7 ) <NEWLINE> <DEDENT> ans = ans ** 2 * max ( N , M ) <NEWLINE> ans = ans % ( 10 ** 9 + 7 ) <NEWLINE> print ( ans ) <NEWLINE> <DEDENT> elif abs ( N - M ) == 0 : <NEWLINE> <INDENT> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> ans *= i <NEWLINE> ans = ans % ( 10 ** 9 + 7 ) <NEWLINE> <DEDENT> ans = ans ** 2 <NEWLINE> ans *= 2 <NEWLINE> ans = ans % ( 10 ** 9 + 7 ) <NEWLINE> print ( ans ) <NEWLINE> <DEDENT>
import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import collections <NEWLINE> import heapq <NEWLINE> import re <NEWLINE> import numpy as np <NEWLINE> from functools import reduce <NEWLINE> <NL> rr = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> rs = lambda : sys . stdin . readline ( ) . split ( ) <NEWLINE> ri = lambda : int ( sys . stdin . readline ( ) ) <NEWLINE> rm = lambda : map ( int , sys . stdin . readline ( ) . split ( ) ) <NEWLINE> rl = lambda : list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) <NEWLINE> inf = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> n , m = rm ( ) <NEWLINE> if n == m : <NEWLINE> <INDENT> print ( ( math . factorial ( n ) * math . factorial ( m ) * 2 ) % mod ) <NEWLINE> <DEDENT> elif abs ( n - m ) == 1 : <NEWLINE> <INDENT> print ( ( math . factorial ( n ) * math . factorial ( m ) % mod ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <NL> <DEDENT>
<NL> def main ( ) : <NEWLINE> <INDENT> p = 10 ** 9 + 7 <NEWLINE> def modpfac ( n ) : <NEWLINE> <INDENT> ret = 1 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> ret *= i % p <NEWLINE> <DEDENT> return ret <NEWLINE> <DEDENT> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> if abs ( m - n ) > 1 : <NEWLINE> <INDENT> return print ( 0 ) <NEWLINE> <DEDENT> elif abs ( m - n ) = 1 : <NEWLINE> <INDENT> return print ( modpfac ( n ) * modpfac ( m ) % p ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return print ( 2 * modpfac ( n ) * modpfac ( m ) % p ) <NEWLINE> <NL> <DEDENT> <DEDENT> main ( ) <NEWLINE> <NL>
from copy import deepcopy as copy <NEWLINE> from operator import itemgetter <NEWLINE> <NL> class UnionFind : <NEWLINE> <INDENT> def __init__ ( self , n ) : <NEWLINE> <INDENT> self . n = n <NEWLINE> self . par = [ - 1 ] * ( n + 1 ) <COMMENT> <NEWLINE> <NL> <DEDENT> def find ( self , x ) : <NEWLINE> <INDENT> if self . par [ x ] < 0 : <NEWLINE> <INDENT> return x <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . par [ x ] = self . find ( self . par [ x ] ) <NEWLINE> return self . par [ x ] <COMMENT> <NEWLINE> <NL> <DEDENT> <DEDENT> def union ( self , x , y ) : <NEWLINE> <INDENT> x = self . find ( x ) <NEWLINE> y = self . find ( y ) <NEWLINE> if x == y : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> if self . par [ x ] > self . par [ y ] : <NEWLINE> <INDENT> x , y = y , x <NEWLINE> <NL> <DEDENT> self . par [ x ] += self . par [ y ] <NEWLINE> self . par [ y ] = x <NEWLINE> <NL> <DEDENT> def same ( self , x , y ) : <NEWLINE> <INDENT> return self . find ( x ) == self . find ( y ) <COMMENT> <NEWLINE> <NL> <DEDENT> def size ( self , x ) : <NEWLINE> <INDENT> return - self . par [ self . find ( x ) ] <NEWLINE> <NL> <DEDENT> def members ( self , x ) : <NEWLINE> <INDENT> root = self . find ( x ) <NEWLINE> return [ i for i in range ( self . n ) if root == self . find ( i ) ] <NEWLINE> <NL> <DEDENT> <DEDENT> def main ( ) : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> bridge = [ None ] * n <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> bridge [ i ] = [ int ( x ) for x in input ( ) . split ( ) ] + [ i ] <NEWLINE> <NL> <DEDENT> judge = [ ] <NEWLINE> <NL> bridge . sort ( ) <NEWLINE> heapq . heapify ( judge ) <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> judge . append ( ( bridge [ i + 1 ] [ 0 ] - bridge [ i ] [ 0 ] , bridge [ i ] [ 2 ] , bridge [ i + 1 ] [ 2 ] ) ) <NEWLINE> <NL> <DEDENT> bridge . sort ( key = itemgetter ( 1 ) ) <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> judge . append ( ( bridge [ i + 1 ] [ 1 ] - bridge [ i ] [ 1 ] , bridge [ i ] [ 2 ] , bridge [ i + 1 ] [ 2 ] ) ) <NEWLINE> <NL> <DEDENT> judge . sort ( ) <NEWLINE> union = UnionFind ( n ) <NEWLINE> count = 0 <NEWLINE> cost = 0 <NEWLINE> while True : <NEWLINE> <INDENT> c , i , j = heapq . heappop ( judge ) <NEWLINE> if union . same ( i , j ) : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> union . union ( i , j ) <NEWLINE> cost += c <NEWLINE> count += 1 <NEWLINE> if count == n - 1 : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> print ( cost ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> def C ( n , r , mod = 10 ** 9 + 7 ) : <NEWLINE> <INDENT> if n - r < r : r = n - r <NEWLINE> if r == 0 : return 1 <NEWLINE> if r == 1 : return n <NEWLINE> <NL> numerator = [ n - r + k + 1 for k in range ( r ) ] <NEWLINE> denominator = [ k + 1 for k in range ( r ) ] <NEWLINE> <NL> for p in range ( 2 , r + 1 ) : <NEWLINE> <INDENT> pivot = denominator [ p - 1 ] <NEWLINE> if pivot > 1 : <NEWLINE> <INDENT> offset = ( n - r ) % p <NEWLINE> for k in range ( p - 1 , r , p ) : <NEWLINE> <INDENT> numerator [ k - offset ] /= pivot <NEWLINE> denominator [ k ] /= pivot <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> result = 1 <NEWLINE> for k in range ( r ) : <NEWLINE> <INDENT> if numerator [ k ] > 1 : <NEWLINE> <INDENT> result *= int ( numerator [ k ] ) % mod <NEWLINE> <NL> <DEDENT> <DEDENT> return result % mod <NEWLINE> <DEDENT> print ( C ( a + 1 , b ) ) <NEWLINE>
a , b , c = map ( input ( ) . split ( ) ) <NEWLINE> int ( x ) = a + b + c <NEWLINE> if x % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
r g b = map ( int , input ( ) . split ( ) ) <NEWLINE> x = r * 100 + g * 10 + b <NEWLINE> if x % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> r , g , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> if ( 100 r + 10 g + b ) // 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
r , g , b = input ( ) . split ( ) <NEWLINE> if int ( t + g + b ) % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
r , g , b = map ( int , input ( ) ) . split ( ) <NEWLINE> <NL> a = r * 100 + g * 10 + b <NEWLINE> if a % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
r = int ( input ( ) ) <NEWLINE> g = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> <NL> s = 100 * r + 10 * b + g <NEWLINE> <NL> if s % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
rgb = int ( <STRING> . join ( input ( ) ) ) <NEWLINE> if rgb % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> r = input ( ) <NEWLINE> g = input ( ) <NEWLINE> b = input ( ) <NEWLINE> <NL> <NL> <COMMENT> <NL> number = int ( r + g + b ) <NEWLINE> if number % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
r , g , b = map ( str , input ( ) . split ( ) ) <NEWLINE> list_C = [ r , g , b ] <NEWLINE> num = int ( <STRING> . join ( list_c ) ) <NEWLINE> if num % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
r , g , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if ( 10 * g + b ) % 4 == 0 else <STRING> <NEWLINE>
a , b , c = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> c = int ( c ) <NEWLINE> if ( ( 100 * a + 10 * b + c ) % 4 ) = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) . replace ( <STRING> , <STRING> ) ) <NEWLINE> if a % 4 == 0 : print ( <STRING> ) else : print ( <STRING> ) <NEWLINE>
r , g , b = input ( ) . split ( ) <NEWLINE> n = int ( <STRING> ) <NEWLINE> if n % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
r , g , b = map ( int , input ( ) . split ( ) ) <NEWLINE> num = 10 * y + z <NEWLINE> if num % 4 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> N = int ( input ( ) ) <NEWLINE> A = [ list ( map ( int , input ( ) . split ( ) ) ) ] <NEWLINE> print ( max ( A ) - min ( A ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = sorted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> A [ 0 ] = 0 <NEWLINE> d = 0 <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> d += A [ i ] - A [ i - 1 ] <NEWLINE> <DEDENT> print ( d ) <NEWLINE>
import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import collections <NEWLINE> import heapq <NEWLINE> import re <NEWLINE> import numpy as np <NEWLINE> from functools import reduce <NEWLINE> <NL> rr = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> rs = lambda : sys . stdin . readline ( ) . split ( ) <NEWLINE> ri = lambda : int ( sys . stdin . readline ( ) ) <NEWLINE> rm = lambda : map ( int , sys . stdin . readline ( ) . split ( ) ) <NEWLINE> rl = lambda : list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) <NEWLINE> inf = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> n = ri ( ) <NEWLINE> li = rl ( ) <NEWLINE> print ( max ( li ) - min ( li ) <NEWLINE> <NL> <NL> <NL> <NL> <NL> <NL> <NL>
n = int ( input ( ) ) <NEWLINE> A = list ( input ( ) . split ( ) ) <NEWLINE> print ( max ( A ) - min ( A ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ int ( input ( ) ) for _ in range ( n ) ] <NEWLINE> print ( max ( a ) - min ( a ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> print ( max ( a ) - min ( b ) ) <NEWLINE>
a = input ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b . sort ( ) <NEWLINE> print ( b [ a ] - b [ 0 ] ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( max ( a ) - min ( a ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a . sort ( ) <NEWLINE> print ( a [ n - 1 ] a [ 0 ] ) <NEWLINE>
def actual ( N , A ) : <NEWLINE> <INDENT> return max ( A ) - min ( A ) <NEWLINE> <NL> <DEDENT> N = int ( input ( ) ) <NEWLINE> A = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( actual ( N , A ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <DEDENT> a . sort ( ) <NEWLINE> print ( a [ n - 1 ] - a [ 0 ] ) <NEWLINE>
_ , * aa = map ( int , open ( 1 ) . read ( ) . split ( ) ) <NEWLINE> <NL> print ( max ( aa ) - min ( aa ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> print ( max ( a ) - min ( a ) ) <NEWLINE>
<NL> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> color = [ ] <NEWLINE> free = 0 <NEWLINE> count = 0 <NEWLINE> for i in a : <NEWLINE> <INDENT> if i // 400 < 8 and i // 400 not in color : <NEWLINE> <INDENT> color . append ( i // 400 ) <NEWLINE> Sans += 1 <NEWLINE> <DEDENT> elif i >= 3200 : <NEWLINE> <INDENT> free += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> Mans = Sans <NEWLINE> if free + count > 8 : <NEWLINE> <INDENT> Mans = 8 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> Mans = count + free <NEWLINE> <NL> <DEDENT> print ( Sans , Mans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> c = [ 0 ] * 9 <NEWLINE> for i in a : <NEWLINE> <INDENT> t = i // 400 <NEWLINE> if t < 8 : <NEWLINE> <INDENT> c [ t ] = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> c [ 8 ] += 1 <NEWLINE> <DEDENT> <DEDENT> cmin = max ( sum ( c [ : - 1 ] ) , min ( c [ 8 ] , 1 ) ) <NEWLINE> cmax = min ( sum ( c ) ) <NEWLINE> print ( cmin , cmax ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> hai = 0 <NEWLINE> tya = 0 <NEWLINE> mizu = 0 <NEWLINE> ao = 0 <NEWLINE> ki = 0 <NEWLINE> dai = 0 <NEWLINE> aka = 0 <NEWLINE> mu = 0 <NEWLINE> <NL> for a in A : <NEWLINE> <INDENT> if a <= 399 : <NEWLINE> <INDENT> hai = 1 <NEWLINE> <DEDENT> elif a <= 799 : <NEWLINE> <INDENT> tya = 1 <NEWLINE> <DEDENT> elif a <= 1199 : <NEWLINE> <INDENT> mizu = 1 <NEWLINE> <DEDENT> elif a <= 1599 : <NEWLINE> <INDENT> ao = 1 <NEWLINE> <DEDENT> elif a <= 1999 : <NEWLINE> <INDENT> ki = 1 <NEWLINE> <DEDENT> elif a <= 2399 : <NEWLINE> <INDENT> dai = 1 <NEWLINE> <DEDENT> elif a <= 3199 : <NEWLINE> <INDENT> aka = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> mu += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> max_num = min ( 8 , hai + tya + mizu + ao + ki + dai + aka + mu ) <NEWLINE> min_num = max ( hai + tya + mizu + ao + ki + dai + aka ) <NEWLINE> <NL> print ( min_num , max_num ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> color = [ 0 ] * 8 <NEWLINE> any = 0 <NEWLINE> for i in a : <NEWLINE> <INDENT> if 1 <= i <= 399 : <NEWLINE> <INDENT> color [ 0 ] = 1 <NEWLINE> <DEDENT> elif 400 <= i <= 799 : <NEWLINE> <INDENT> color [ 1 ] = 1 <NEWLINE> <DEDENT> elif 800 <= i <= 1199 : <NEWLINE> <INDENT> color [ 2 ] = 1 <NEWLINE> <DEDENT> elif 1200 <= i <= 1599 : <NEWLINE> <INDENT> color [ 3 ] = 1 <NEWLINE> <DEDENT> elif 1600 <= i <= 1999 : <NEWLINE> <INDENT> color [ 4 ] = 1 <NEWLINE> <DEDENT> elif 2000 <= i <= 2399 : <NEWLINE> <INDENT> color [ 5 ] = 1 <NEWLINE> <DEDENT> elif 2400 <= i <= 2799 : <NEWLINE> <INDENT> color [ 6 ] = 1 <NEWLINE> <DEDENT> elif 2800 <= i <= 3199 : <NEWLINE> <INDENT> color [ 7 ] = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> any += 1 <NEWLINE> <DEDENT> <DEDENT> m = max ( sum ( color ) , 1 ) <NEWLINE> M = min ( sum ( color ) + any ) <NEWLINE> print ( m , M ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> Colors = [ ] <NEWLINE> High_scorer = [ ] <NEWLINE> for a in A : <NEWLINE> <INDENT> if a < 400 : <NEWLINE> <INDENT> Colors . append ( <STRING> ) <NEWLINE> <DEDENT> if 400 <= a and a < 800 : <NEWLINE> <INDENT> Colors . append ( <STRING> ) <NEWLINE> <DEDENT> if 800 <= a and a < 1200 : <NEWLINE> <INDENT> Colors . append ( <STRING> ) <NEWLINE> <DEDENT> if 1200 <= a and a < 1600 : <NEWLINE> <INDENT> Colors . append ( <STRING> ) <NEWLINE> <DEDENT> if 1600 <= a and a < 2000 : <NEWLINE> <INDENT> Colors . append ( <STRING> ) <NEWLINE> <DEDENT> if 2000 <= a and a < 2400 : <NEWLINE> <INDENT> Colors . append ( <STRING> ) <NEWLINE> <DEDENT> if 2400 <= a and a < 2800 : <NEWLINE> <INDENT> Colors . append ( <STRING> ) <NEWLINE> <DEDENT> if 2800 <= a and a < 3200 : <NEWLINE> <INDENT> Colors . append ( <STRING> ) <NEWLINE> <DEDENT> if 3200 <= a : <NEWLINE> <INDENT> High_scorer . append ( a ) <NEWLINE> <NL> <DEDENT> <DEDENT> MIN = len ( set ( Colors ) ) <NEWLINE> H = len ( High_scorer ) <NEWLINE> <NL> MIN >= 1 : <NEWLINE> <INDENT> print ( MIN , ( MIN + H ) ) <NEWLINE> <DEDENT> MIN = 0 : <NEWLINE> <INDENT> print ( 1 , H ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> color = set ( ) <NEWLINE> rainbow = 0 <NEWLINE> <NL> for n in range ( N ) : <NEWLINE> <INDENT> if 1 <= a [ n ] < 400 : <NEWLINE> <INDENT> color . add ( <STRING> ) <NEWLINE> <DEDENT> elif 400 <= a [ n ] < 800 : <NEWLINE> <INDENT> color . add ( <STRING> ) <NEWLINE> <DEDENT> elif 800 <= a [ n ] < 1200 : <NEWLINE> <INDENT> color . add ( <STRING> ) <NEWLINE> <DEDENT> elif 1200 <= a [ n ] < 1600 : <NEWLINE> <INDENT> color . add ( <STRING> ) <NEWLINE> <DEDENT> elif 1600 <= a [ n ] < 2000 : <NEWLINE> <INDENT> color . add ( <STRING> ) <NEWLINE> <DEDENT> elif 2000 <= a [ n ] < 2400 : <NEWLINE> <INDENT> color . add ( <STRING> ) <NEWLINE> <DEDENT> elif 2400 <= a [ n ] < 2800 : <NEWLINE> <INDENT> color . add ( <STRING> ) <NEWLINE> <DEDENT> elif 2800 <= a [ n ] < 3200 : <NEWLINE> <INDENT> color . add ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> rainbow += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if color_min > rainbow : <NEWLINE> <INDENT> color_min = len ( color ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> color_min = rainbow <NEWLINE> <NL> <DEDENT> color_max = color_min + rainbow <NEWLINE> <NL> <NL> print ( <STRING> ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> rate = [ 0 ] * 9 <NEWLINE> over = 0 <NEWLINE> <NL> for i in a : <NEWLINE> <INDENT> for j in range ( 1 , 9 ) : <NEWLINE> <INDENT> if 400 * ( j - 1 ) <= i < 400 * j : <NEWLINE> <INDENT> rate [ j ] = 1 <NEWLINE> break <NEWLINE> <DEDENT> elif i >= 3200 : <NEWLINE> <INDENT> over += 1 <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> ansmin = rate . counta ( 1 ) <NEWLINE> ansmax = rate . count ( 1 ) <NEWLINE> if ansmin == 0 : <NEWLINE> <INDENT> ansmin = 1 <NEWLINE> <NL> <DEDENT> if over > 0 : <NEWLINE> <INDENT> ansmax = ansmax + over <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> print ( ansmin , ansmax ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> list = { } <NEWLINE> <NL> <NL> for i in a : <NEWLINE> <INDENT> if 1 <= i <= 399 : <NEWLINE> <INDENT> list [ 0 ] = 1 <NEWLINE> <DEDENT> elif 400 <= i <= 799 : <NEWLINE> <INDENT> list [ 1 ] = 1 <NEWLINE> <DEDENT> elif 800 <= i <= 1199 : <NEWLINE> <INDENT> list [ 2 ] = 1 <NEWLINE> <DEDENT> elif 1200 <= i <= 1599 : <NEWLINE> <INDENT> list [ 3 ] = 1 <NEWLINE> <DEDENT> elif 1600 <= i <= 1999 : <NEWLINE> <INDENT> list [ 4 ] = 1 <NEWLINE> <DEDENT> elif 2000 <= i <= 2399 : <NEWLINE> <INDENT> list [ 5 ] = 1 <NEWLINE> <DEDENT> elif 2400 <= i <= 2799 : <NEWLINE> <INDENT> list [ 6 ] = 1 <NEWLINE> <DEDENT> elif 2800 <= i <= 3199 : <NEWLINE> <INDENT> list [ 7 ] = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> list [ 8 ] += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> min = len ( list ) <NEWLINE> <NL> <NL> if list [ 8 ] > 0 : <NEWLINE> <INDENT> max = len ( list ) + chin <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> max = len ( list ) <NEWLINE> <NL> <DEDENT> print ( min , max ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> rate = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ratecolor = 0 <NEWLINE> free = 0 <NEWLINE> ratecolor = 0 <NEWLINE> color = [ 0 ] * 9 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if ( rate [ i ] >= 3200 ) : <NEWLINE> <INDENT> free += 1 <NEWLINE> break <NEWLINE> for j in range ( 9 ) : <NEWLINE> <DEDENT> if ( rate [ i ] < j * 400 + 400 ) : <NEWLINE> <INDENT> if ( color [ j ] == 0 ) : <NEWLINE> <INDENT> color [ j ] += 1 <NEWLINE> ratecolor += 1 <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ratecolor if ratecolor != 0 else 1 , ratecolor + free ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> import sys <NEWLINE> from io import StringIO <NEWLINE> import unittest <NEWLINE> <NL> <NL> class TestClass ( unittest . TestCase ) : <NEWLINE> <INDENT> def assertIO ( self , input , output ) : <NEWLINE> <INDENT> stdout , stdin = sys . stdout , sys . stdin <NEWLINE> sys . stdout , sys . stdin = StringIO ( ) , StringIO ( input ) <NEWLINE> resolve ( ) <NEWLINE> sys . stdout . seek ( 0 ) <NEWLINE> out = sys . stdout . read ( ) [ : - 1 ] <NEWLINE> sys . stdout , sys . stdin = stdout , stdin <NEWLINE> self . assertEqual ( out , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_1 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_2 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_3 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> def resolve ( ) : <NEWLINE> <INDENT> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> C = [ 0 ] * 9 <NEWLINE> for a in A : <NEWLINE> <INDENT> for i in range ( 8 ) : <NEWLINE> <INDENT> if 400 * i <= a <= 400 * i + 399 : <NEWLINE> <INDENT> C [ i ] = 1 <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> C [ 8 ] += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <COMMENT> <NL> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> r = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> rlist = [ ] <NEWLINE> def color ( n ) : <NEWLINE> <INDENT> if n < 400 : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> elif n < 800 : <NEWLINE> <INDENT> return 2 <NEWLINE> <DEDENT> elif n < 1200 : <NEWLINE> <INDENT> return 3 <NEWLINE> <DEDENT> elif n < 1600 : <NEWLINE> <INDENT> return 4 <NEWLINE> <DEDENT> elif n < 2000 : <NEWLINE> <INDENT> return 5 <NEWLINE> <DEDENT> elif n < 2400 : <NEWLINE> <INDENT> return 6 <NEWLINE> <DEDENT> elif n < 2800 : <NEWLINE> <INDENT> return 7 <NEWLINE> <DEDENT> elif n < 3200 : <NEWLINE> <INDENT> return 8 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return 9 <NEWLINE> <NL> <DEDENT> <DEDENT> for _ in range ( n ) : <NEWLINE> <INDENT> co = color ( r [ _ ] ) <NEWLINE> rlist . append ( co ) <NEWLINE> <NL> <DEDENT> ans1 = len ( set ( rlist ) ) <NEWLINE> if rlist . count ( 9 ) == 0 : <NEWLINE> <INDENT> print ( ans1 , ans1 , sep = <STRING> ) <NEWLINE> <NL> <DEDENT> elif ans1 == 1 : <NEWLINE> <INDENT> print ( 1 , min ( 8 , rlist . count ( 9 ) , sep = <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( min ( 8 , ans1 - 1 ) , min ( 8 , ans1 - 1 + rlist . count ( 9 ) ) , sep = <STRING> ) <NEWLINE> <DEDENT>
from collections import defaultdict <NEWLINE> N = int ( input ( ) ) <NEWLINE> al = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> cnt = 0 <NEWLINE> dic = defaultdict ( int ) <NEWLINE> for i in al : <NEWLINE> <INDENT> if 1 <= i <= 399 : <NEWLINE> <INDENT> dic [ <STRING> ] += 1 <NEWLINE> <DEDENT> elif 400 <= i <= 799 : <NEWLINE> <INDENT> dic [ <STRING> ] += 1 <NEWLINE> <DEDENT> elif 800 <= i <= 1199 : <NEWLINE> <INDENT> dic [ <STRING> ] += 1 <NEWLINE> <DEDENT> elif 1200 <= i <= 1599 : <NEWLINE> <INDENT> dic [ <STRING> ] += 1 <NEWLINE> <DEDENT> elif 1600 <= i <= 1999 : <NEWLINE> <INDENT> dic [ <STRING> ] += 1 <NEWLINE> <DEDENT> elif 2000 <= i <= 2399 : <NEWLINE> <INDENT> dic [ <STRING> ] += 1 <NEWLINE> <DEDENT> elif 2400 <= i <= 2799 : <NEWLINE> <INDENT> dic [ <STRING> ] += 1 <NEWLINE> <DEDENT> elif 2800 <= i <= 3199 : <NEWLINE> <INDENT> dic [ <STRING> ] += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> ansmax = len ( dic . keys ( ) ) + cnt <NEWLINE> if ansmax > n : <NEWLINE> <INDENT> ansmax = n <NEWLINE> <NL> <NL> <DEDENT> ansmin = len ( dic . keys ( ) ) <NEWLINE> if ansmin == 0 and cnt >= 1 : <NEWLINE> <INDENT> ansmin = 1 <NEWLINE> <NL> <DEDENT> print ( ansmin , ansmax ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> nums = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> num_free = 0 <NEWLINE> num_color = [ False ] * 8 <NEWLINE> for rate in nums : <NEWLINE> <INDENT> if rate < 3200 : <NEWLINE> <INDENT> num_color ( rate // 400 ) = True <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> num_free += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> ans = sum ( num_color ) <NEWLINE> print ( <STRING> . format ( ans , ans + num_free ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> N_List = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> NR_List = [ i // 400 for i in N_List ] <NEWLINE> Number_NRD = len ( set ( [ i for i in NR_List if i < 8 ] ) ) <NEWLINE> Number_NRU = len ( [ i for i in NR_List if i >= 8 ] ) <NEWLINE> max_p = ( Number_NRD + Number_NRU , 8 ) [ Number_NRD + Number_NRU >= 8 ] <NEWLINE> min_P = ( Number_NRD , 1 ) [ Number_NRD == 0 ] <NEWLINE> print ( str ( min_p ) + <STRING> + str ( max_p ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> color = [ False ] * 8 <NEWLINE> over_human = 0 <NEWLINE> for i in a : <NEWLINE> <INDENT> if ( i <= 399 ) : <NEWLINE> <INDENT> color [ 0 ] = True <NEWLINE> <DEDENT> elif ( i <= 799 ) : <NEWLINE> <INDENT> color [ 1 ] = True <NEWLINE> <DEDENT> elif ( i <= 1199 ) : <NEWLINE> <INDENT> color [ 2 ] = True <NEWLINE> <DEDENT> elif ( i <= 1599 ) : <NEWLINE> <INDENT> color [ 3 ] = True <NEWLINE> <DEDENT> elif ( i <= 1999 ) : <NEWLINE> <INDENT> color [ 4 ] = True <NEWLINE> <DEDENT> elif ( i <= 2399 ) : <NEWLINE> <INDENT> color [ 5 ] = True <NEWLINE> <DEDENT> elif ( i <= 2799 ) : <NEWLINE> <INDENT> color [ 6 ] = True <NEWLINE> <DEDENT> elif ( i <= 3199 ) : <NEWLINE> <INDENT> color [ 7 ] = True <NEWLINE> <DEDENT> elif ( i >= 3200 ) : <NEWLINE> <INDENT> over_human += 1 <NEWLINE> <DEDENT> <DEDENT> if ( color . count ( True ) == 0 ) : <NEWLINE> <INDENT> print ( 1 , color . count ( True ) + over_human ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( color . count ( True ) , color . count ( True ) + over_human ) ) <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> R = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> X = [ 0 ] * 8 <NEWLINE> p = 0 <NEWLINE> for r in R : <NEWLINE> <INDENT> if r >= 3200 : <NEWLINE> <INDENT> p += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> X [ r // 400 ] = 1 <NEWLINE> <NL> <DEDENT> <DEDENT> s = sum ( X ) <NEWLINE> if s == 0 : <NEWLINE> <INDENT> print ( str ( 1 ) + <STRING> + str ( cnt ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( str ( s ) + <STRING> + str ( s + cnt ) ) <NEWLINE> <DEDENT>
w = [ ] <NEWLINE> num = 0 <NEWLINE> for i in a : <NEWLINE> <INDENT> if 1 <= i <= 399 : <NEWLINE> <INDENT> if 1 not in w : <NEWLINE> <INDENT> w . append ( 1 ) <NEWLINE> <DEDENT> <DEDENT> elif 400 <= i <= 799 : <NEWLINE> <INDENT> if 400 not in w : <NEWLINE> <INDENT> w . append ( 400 ) <NEWLINE> <DEDENT> <DEDENT> elif 800 <= i <= 1199 : <NEWLINE> <INDENT> if 800 not in w : <NEWLINE> <INDENT> w . append ( 800 ) <NEWLINE> <DEDENT> <DEDENT> elif 1200 <= i <= 1599 : <NEWLINE> <INDENT> if 1200 not in w : <NEWLINE> <INDENT> w . append ( 1200 ) <NEWLINE> <DEDENT> <DEDENT> elif 1600 <= i <= 1999 : <NEWLINE> <INDENT> if 1600 not in w : <NEWLINE> <INDENT> w . append ( 1600 ) <NEWLINE> <DEDENT> <DEDENT> elif 2000 <= i <= 2399 : <NEWLINE> <INDENT> if 2000 not in w : <NEWLINE> <INDENT> w . append ( 2000 ) <NEWLINE> <DEDENT> <DEDENT> elif 2400 <= i <= 2799 : <NEWLINE> <INDENT> if 2400 not in w : <NEWLINE> <INDENT> w . append ( 2400 ) <NEWLINE> <DEDENT> <DEDENT> elif 2800 <= i <= 3199 : <NEWLINE> <INDENT> if 2800 not in w : <NEWLINE> <INDENT> w . append ( 2800 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> num += 1 <NEWLINE> <DEDENT> <DEDENT> if 0 < len ( w ) : <NEWLINE> <INDENT> print ( len ( w ) , len ( w ) + num ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 1 , len ( w ) + num ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a1 = 0 <NEWLINE> b = 0 <NEWLINE> c = 0 <NEWLINE> d = 0 <NEWLINE> e = 0 <NEWLINE> f = 0 <NEWLINE> g = 0 <NEWLINE> h = 0 <NEWLINE> ans = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if 1 <= a [ i ] <= 399 : <NEWLINE> <INDENT> a1 = 1 <NEWLINE> <DEDENT> elif 400 <= a [ i ] <= 799 : <NEWLINE> <INDENT> b = 1 <NEWLINE> <DEDENT> elif 800 <= a [ i ] <= 1199 : <NEWLINE> <INDENT> c = 1 <NEWLINE> <DEDENT> elif 1200 <= a [ i ] <= 1599 : <NEWLINE> <INDENT> d = 1 <NEWLINE> <DEDENT> elif 1600 <= a [ i ] <= 1999 : <NEWLINE> <INDENT> e = 1 <NEWLINE> <DEDENT> elif 2000 <= a [ i ] <= 2399 : <NEWLINE> <INDENT> f = 1 <NEWLINE> <DEDENT> elif 2400 <= a [ i ] <= 2799 : <NEWLINE> <INDENT> g = 1 <NEWLINE> <DEDENT> elif 2800 <= a [ i ] <= 3199 : <NEWLINE> <INDENT> h = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> x = a1 + b + c + d + e + f + g + h <NEWLINE> if a1 = b = c = d = e = f = g = h = 0 : <NEWLINE> <INDENT> print ( 1 , ans ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( x , x + ans ) <NEWLINE> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> As = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> nums = [ ] <NEWLINE> rainbow = 0 <NEWLINE> for A in As : <NEWLINE> <INDENT> num = A // 400 <NEWLINE> if num < 8 : <NEWLINE> <INDENT> if num not in nums : <NEWLINE> <INDENT> nums . append ( num ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> rainbow += 1 <NEWLINE> <DEDENT> <DEDENT> ans_max = len ( nums ) + rainbow <NEWLINE> ans_min = max ( len ( 1 , nums ) ) <NEWLINE> print ( ans_min , ans_max ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> b = [ 0 ] * 9 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if a [ i ] < 400 : <NEWLINE> <INDENT> b [ 0 ] += 1 <NEWLINE> <DEDENT> elif a [ i ] < 800 : <NEWLINE> <INDENT> b [ 1 ] += 1 <NEWLINE> <DEDENT> elif a [ i ] < 1200 : <NEWLINE> <INDENT> b [ 2 ] += 1 <NEWLINE> <DEDENT> elif a [ i ] < 1600 : <NEWLINE> <INDENT> b [ 3 ] += 1 <NEWLINE> <DEDENT> elif a [ i ] < 2000 : <NEWLINE> <INDENT> b [ 4 ] += 1 <NEWLINE> <DEDENT> elif a [ i ] < 2400 : <NEWLINE> <INDENT> b [ 5 ] += 1 <NEWLINE> <DEDENT> elif a [ i ] < 2800 : <NEWLINE> <INDENT> b [ 6 ] += 1 <NEWLINE> <DEDENT> elif a [ i ] < 3200 : <NEWLINE> <INDENT> b [ 7 ] += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> b [ 8 ] += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> min = 8 - b [ : 8 ] . count ( 0 ) <NEWLINE> max = min + b [ 8 ] <NEWLINE> <NL> if min = 0 : <NEWLINE> <INDENT> min = 1 <NEWLINE> <DEDENT> print ( min , max ) <NEWLINE>
n = input ( ) <NEWLINE> a = [ int ( x ) for x in input ( ) . split ( ) if x < 3200 ] <NEWLINE> c = len ( set ( [ x // 400 for x in a ] ) ) <NEWLINE> print ( max ( c , 1 ) , c + n - len ( a ) ) <NEWLINE>
<COMMENT> <NL> <NL> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> n = 399 <NEWLINE> a , b , c , d , e , f , g , h , z = 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 <NEWLINE> <NL> for i in A : <NEWLINE> <INDENT> if i >= 1 and i <= n : <NEWLINE> <INDENT> a = 1 <NEWLINE> <DEDENT> elif i >= 400 and i <= n + 400 : <NEWLINE> <INDENT> b = 1 <NEWLINE> <DEDENT> elif i >= 2 * 400 and i <= 2 * 400 + n : <NEWLINE> <INDENT> c = 1 <NEWLINE> <DEDENT> elif i >= 3 * 400 and i <= 3 * 400 + n : <NEWLINE> <INDENT> d = 1 <NEWLINE> <DEDENT> elif i >= 4 * 400 and i <= 4 * 400 + n : <NEWLINE> <INDENT> e = 1 <NEWLINE> <DEDENT> elif i >= 5 * 400 and i <= 5 * 400 + n : <NEWLINE> <INDENT> f = 1 <NEWLINE> <DEDENT> elif i >= 6 * 400 and i <= 6 * 400 + n : <NEWLINE> <INDENT> g = 1 <NEWLINE> <DEDENT> elif i >= 7 * 400 and i <= 7 * 400 + n : <NEWLINE> <INDENT> h = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> z += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> min_num , max_num = 0 , 0 <NEWLINE> <NL> min_num = a + b + c + d + e + f + g + h <NEWLINE> <NL> max_num = min ( min_num + z ) <NEWLINE> min_num = max ( 1 , min_num ) <NEWLINE> <NL> print ( min_num , max_num ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> s = input ( ) <NEWLINE> while True : <NEWLINE> <INDENT> c = 0 <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> c -= 1 <NEWLINE> <DEDENT> if c < 0 : <NEWLINE> <INDENT> s = <STRING> + s <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if c > 0 : <NEWLINE> <INDENT> s = s + <STRING> <NEWLINE> <DEDENT> if c == 0 : <NEWLINE> <INDENT> print ( s ) <NEWLINE> <NL> <DEDENT> <DEDENT>
_ = input ( ) <NEWLINE> S = input ( ) <NEWLINE> <NL> needs_right = 0 , needs_left = 0 <NEWLINE> for c in S : <NEWLINE> <INDENT> if c == <STRING> : <NEWLINE> <INDENT> needs_right += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if needs_right == 0 : <NEWLINE> <INDENT> needs_left += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> needs_right -= 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> * needs_left + S + <STRING> * needs_right ) <NEWLINE> <NL>
<COMMENT> <NL> <NL> a , b = map ( int , input ( ) ) <NEWLINE> <NL> if a + b >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a + b ) <NEWLINE> <DEDENT>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if A + B < 10 : print ( str ( C ) ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
A , B = map ( int , input ( ) , split ( ) ) <NEWLINE> if A + B >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = [ int ( input ( ) ) for _ in range ( n ) ] <NEWLINE> a . sort ( ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if sum ( a ) % 10 == 0 : <NEWLINE> <INDENT> if a [ i ] % 10 == 0 : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a [ i ] = 0 <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( sum ( a ) ) <NEWLINE> exit ( 0 ) <NEWLINE> <DEDENT> <DEDENT> print ( 0 ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> s = <STRING> <NEWLINE> <NL> if a + b < 10 : <NEWLINE> <INDENT> s = a + b <NEWLINE> <NL> <DEDENT> print ( s ) <NEWLINE>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> if A + b >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT>
A = map ( int , input ( ) . split ( ) ) <NEWLINE> total = A [ 0 ] + A [ 1 ] <NEWLINE> if total >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( total ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) ) <NEWLINE> print ( a + b if a + b < 10 else <STRING> ) <NEWLINE>
a , b = int ( input ( ) . split ( ) ) <NEWLINE> <NL> sum = a + b <NEWLINE> if ( sum >= 10 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( sum ) <NEWLINE> <DEDENT>
A , B = map ( in , input ( ) . split ( ) ) ; print ( A + B if A + B < 10 else <STRING> ) <NEWLINE>
A , B = map ( int , input ( ) ) <NEWLINE> if A + B >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT>
A , B = int ( input ( ) . split ( ) ) <NEWLINE> if A + B < 10 : <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B = list ( map ( str , input ( ) . split ( ) ) ) <NEWLINE> <NL> if ( A + B ) < 10 : <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> print ( a + b ) if a + b <= 10 else print ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> s = sort . s <NEWLINE> <NL> for i in range ( 1 , len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] == s [ i - 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> w = set ( ) <NEWLINE> for i in ( len ( s ) ) : <NEWLINE> <INDENT> w . add ( s [ i ] ) <NEWLINE> <DEDENT> if len ( s ) == len ( w ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = input ( ) <NEWLINE> dic = defaultdict ( int ) <NEWLINE> <NL> for s in N : <NEWLINE> <INDENT> dic [ s ] += 1 <NEWLINE> <NL> if dic [ s ] > 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
a = input ( ) <NEWLINE> b = [ ] <NEWLINE> c = 0 <NEWLINE> for i in range ( len ( a ) ) : <NEWLINE> <INDENT> b . append ( a [ i ] ) <NEWLINE> <DEDENT> b . sort ( ) <NEWLINE> for i in range ( len ( a - 1 ) ) : <NEWLINE> <INDENT> if b [ i ] == b [ i + 1 ] : <NEWLINE> <INDENT> c = c + 1 <NEWLINE> <DEDENT> <DEDENT> if c == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
def check ( s ) : <NEWLINE> <INDENT> for i in range ( 1 , len ( s ) ) : <NEWLINE> <INDENT> if i - 1 in s [ i : ] : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> <DEDENT> return <STRING> <NEWLINE> <NL> <DEDENT> s = input ( ) <NEWLINE> print ( check ( s ) ) <NEWLINE>
S = input <NEWLINE> print ( <STRING> if len ( S ) == len ( set ( S ) ) else <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> print ( <STRING> if len ( s ) == len ( set ( s ) else <STRING> ) <NEWLINE>
s = list ( innput ( ) ) <NEWLINE> <NL> if len ( s ) == len ( set ( s ) ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a + b >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a + b ) <NEWLINE> <DEDENT>
import sys <NEWLINE> N = int ( input ( ) ) <NEWLINE> S = [ int ( input ( ) ) for _ in range ( N ) ] <NEWLINE> S . sort ( ) <NEWLINE> t = sum ( S ) <NEWLINE> if t % 10 != 0 : <NEWLINE> <INDENT> print ( t ) <NEWLINE> sys . exit ( ) <NEWLINE> <NL> <DEDENT> for s in range ( S ) : <NEWLINE> <INDENT> if ( t - s ) % 10 != 0 : <NEWLINE> <INDENT> print ( t - s ) <NEWLINE> sys . exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( 0 ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> x = 0 <NEWLINE> mn = 101 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> s = int ( input ( ) ) <NEWLINE> x += s <NEWLINE> if x % 10 != 0 <NEWLINE> <INDENT> if s < mn : <NEWLINE> <INDENT> mn = s <NEWLINE> <DEDENT> <DEDENT> <DEDENT> if x % 10 != 0 : <NEWLINE> <INDENT> print ( x ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> x -= mn <NEWLINE> if x % 10 == 0 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if x < 0 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> print ( x ) <NEWLINE> <DEDENT> <DEDENT>
n = int ( input ( ) ) <NEWLINE> s = list ( int ( input ( ) ) for i in range ( n ) ) <NEWLINE> <NL> ans = sum ( S ) <NEWLINE> sort_S = sorted ( S ) <NEWLINE> <NL> if ans % 10 != 0 : <NEWLINE> <INDENT> print ( ans ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for s in sort_S : <NEWLINE> <INDENT> if s % 10 != 0 : <NEWLINE> <INDENT> ans -= s <NEWLINE> print ( ans ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( 0 ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = [ int ( input ( ) ) for i in range ( a ) ] <NEWLINE> b . sort ( ) <NEWLINE> c = sum ( b ) <NEWLINE> d = 0 <NEWLINE> if c % 10 != 0 : <NEWLINE> <INDENT> print ( c ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( a ) : <NEWLINE> <INDENT> if b [ i ] % != 0 : <NEWLINE> <INDENT> d = c - b [ i ] <NEWLINE> print ( d ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if d == c : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> <DEDENT>
N = int ( input ( ) ) <NEWLINE> S = [ ] <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> S . append ( int ( input ( ) ) ) <NEWLINE> <NL> <DEDENT> S . sort ( ) <NEWLINE> ans = sum ( S ) <NEWLINE> <NL> if ans % 10 != 0 : <NEWLINE> <INDENT> print ( ans ) <NEWLINE> <NL> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> if A [ i ] % 10 != 0 : <NEWLINE> <INDENT> ans -= a [ i ] <NEWLINE> print ( ans ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( 0 ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> maxs = 0 <NEWLINE> s = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> cin = int ( input ( ) ) <NEWLINE> s . append ( cin ) <NEWLINE> maxs = max ( maxs , cin ) <NEWLINE> <DEDENT> M = maxs * N + 1 <NEWLINE> <NL> dp = [ False * M ] <NEWLINE> dp [ 0 ] = True <NEWLINE> <NL> for x in s : <NEWLINE> <INDENT> for i in range ( M ) : <NEWLINE> <INDENT> if i < x : continue <NEWLINE> if dp [ i - x ] : dp [ i ] = True <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( M ) : <NEWLINE> <INDENT> if ( M - i ) % 10 != 0 and dp [ M - i ] : <NEWLINE> <INDENT> print ( M - i ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> s = [ int ( input ( ) ) for _ in range ( n ) ] <NEWLINE> <NL> sumNum = sum ( s ) <NEWLINE> if sumNum % 10 != 0 : <NEWLINE> <INDENT> print ( sumNum ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> t = 0 <NEWLINE> for i in s : <NEWLINE> <INDENT> if ( sumNum - i ) % 10 != 0 : <NEWLINE> <INDENT> t = max ( t , sum - i ) <NEWLINE> <DEDENT> <DEDENT> print ( t ) <NEWLINE>
import sys , re <NEWLINE> from collections import deque , defaultdict , Counter <NEWLINE> from math import ceil , sqrt , hypot , factorial , pi , sin , cos , tan , asin , acos , atan , radians , degrees , log2 , log <NEWLINE> from itertools import accumulate , permutations , combinations , combinations_with_replacement , product , groupby <NEWLINE> from operator import itemgetter , mul <NEWLINE> from copy import deepcopy <NEWLINE> from string import ascii_lowercase , ascii_uppercase , digits <NEWLINE> from bisect import bisect , bisect_left , insort , insort_left <NEWLINE> from fractions import gcd <NEWLINE> from heapq import heappush , heappop <NEWLINE> from functools import reduce <NEWLINE> from decimal import Decimal <NEWLINE> def input ( ) : return sys . stdin . readline ( ) . strip ( ) <NEWLINE> def INT ( ) : return int ( input ( ) ) <NEWLINE> def MAP ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> def ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) ) <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> from decimal import * <NEWLINE> <NL> N , A , B = MAP ( ) <NEWLINE> h = [ INT ( ) for _ in range ( N ) ] <NEWLINE> h . sort ( reverse = True ) <NEWLINE> <NL> def is_ok ( x ) : <NEWLINE> <INDENT> h_copy = h [ : ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> h_copy [ i ] -= B * x <NEWLINE> <DEDENT> cnt = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> cnt += max ( 0 , ceil ( h_copy [ i ] / ( A - B ) ) ) <NEWLINE> <DEDENT> return cnt <= x <NEWLINE> <NL> <DEDENT> while l + 1 != r : <NEWLINE> <INDENT> p = - ( - l - r ) // 2 <NEWLINE> if is_OK ( p ) : <NEWLINE> <INDENT> r = p <NEWLINE> <DEDENT> elif is_OK ( p ) == 0 : <NEWLINE> <INDENT> l = p <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if is_OK ( p ) : <NEWLINE> <INDENT> print ( p ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( p + 1 ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> using namespace std ; <NEWLINE> <NL> int main ( ) { <NEWLINE> <INDENT> long N , A , B ; <NEWLINE> cin >> N >> A >> B ; <NEWLINE> vector < long > h ; <NEWLINE> for ( int i = 0 ; i < N ; i + + ) { <NEWLINE> <INDENT> long input ; <NEWLINE> cin >> input ; <NEWLINE> h . push_back ( input ) ; <NEWLINE> <DEDENT> } <NEWLINE> <NL> <NL> long ans = 0 ; <NEWLINE> vector < long > temp ; <NEWLINE> while ( h . size ( ) != 0 ) { <NEWLINE> <INDENT> bool first = true ; <NEWLINE> make_heap ( h . begin ( ) , h . end ( ) ) ; <NEWLINE> for ( auto x : h ) { <NEWLINE> <INDENT> if ( first ) { x -= A ; first = false ; } <NEWLINE> else { x -= B ; } <NEWLINE> if ( x > 0 ) temp . push_back ( x ) ; <NEWLINE> <DEDENT> } <NEWLINE> h . clear ( ) ; <NEWLINE> for ( auto x : temp ) h . push_back ( x ) ; <NEWLINE> temp . clear ( ) ; <NEWLINE> ans + + ; <NEWLINE> <DEDENT> } <NEWLINE> cout << ans << endl ; <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> if A > B : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> elif A == B : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> elif B - A >= N : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( ( B - A ) * X + 1 ) <NEWLINE> <DEDENT>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( a > b ) : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if ( n = 1 ) : <NEWLINE> <INDENT> if ( a != b ) : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( b * ( n - 1 ) + a - ( a * ( n - 1 ) + b ) + 1 ) <NEWLINE> <DEDENT> <DEDENT>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( n == 1 and a == b ) : <NEWLINE> <INDENT> ans = 1 <NEWLINE> <DEDENT> elif ( n == 1 ) : <NEWLINE> <INDENT> ans = 0 <NEWLINE> <DEDENT> elif A > B : <NEWLINE> <INDENT> ans = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = ( b - a ) * ( n - 2 ) + 1 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if x > y : <NEWLINE> <INDENT> x , y = y , x <NEWLINE> <NL> <DEDENT> A = [ 1 , 3 , 5 , , 7 , 8 , 10 , 12 ] <NEWLINE> B = [ 4 , 6 , 9 , 11 ] <NEWLINE> <NL> if x == 2 or y == 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( x in A and y in B ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if x in gp1 and y in gp1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x in gp2 and y in gp2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x == y == 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] <NEWLINE> b = [ 4 , 6 , 9 , 11 ] <NEWLINE> c = [ 2 ] <NEWLINE> if ( x in a and y in a ) : <NEWLINE> <INDENT> ptint ( <STRING> ) <NEWLINE> <DEDENT> elif ( x in b and y in b ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( x in c and y in c ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
l1 = [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] <NEWLINE> l2 = [ 4 , 6 , 9 , 11 ] <NEWLINE> l3 = [ 2 ] <NEWLINE> n = 0 <NEWLINE> if x in l1 : <NEWLINE> <INDENT> if y in l1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> n = 1 <NEWLINE> <DEDENT> <DEDENT> elif x in l2 : <NEWLINE> <INDENT> if y in l2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> n = 1 <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if y in l3 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> n = 1 <NEWLINE> <DEDENT> <DEDENT> if n == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] <NEWLINE> b = [ 4 , 6 , 9 , 11 ] <NEWLINE> c = [ 2 ] <NEWLINE> x , y = input ( ) . split ( ) <NEWLINE> if x , y is in a or x , y is in b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> group_A = [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] <NEWLINE> group_B = [ 4 , 6 , 9 , 11 ] <NEWLINE> if x in group_A = True and y in group_A = True : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x in group_B = True and y in group_B = True : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
G = [ set ( [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] ) , set ( [ 4 , 6 , 9 , 11 ] ) , set ( [ 2 ] ) ] <NEWLINE> def check ( x , y ) : <NEWLINE> <INDENT> for g in G : <NEWLINE> <INDENT> if x in g and y in g : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> <DEDENT> return False <NEWLINE> <DEDENT> print ( <STRING> if check ( x , y ) else <STRING> ) <NEWLINE>
a = [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] <NEWLINE> b = [ 4 , 6 , 9 , 11 ] <NEWLINE> c = map ( int , input ( ) . split ( <STRING> ) ) <NEWLINE> print ( <STRING> ) if ( c [ 0 ] in a and c [ 1 ] in a ) or ( c [ 0 ] in b and c [ 1 ] in b ) else print ( <STRING> ) <NEWLINE>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> S1 = [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] <NEWLINE> S2 = [ 4 , 6 , 9 , 11 ] <NEWLINE> for i in range ( len ( S1 ) ) : <NEWLINE> <INDENT> for j in range ( len ( S1 ) ) : <NEWLINE> <INDENT> if ( S1 [ i ] == x and s1 [ j ] == y ) or ( S2 [ i ] == x adn S2 [ j ] == y ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
x , y = map ( iint , input ( ) . split ( ) ) <NEWLINE> A = [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] <NEWLINE> B = [ 4 , 6 , 9 , 11 ] <NEWLINE> C = [ 2 ] <NEWLINE> if x in A and y in A : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x in B and y in B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> s0 = 1 << ( x - 1 ) | 1 << ( y - 1 ) <NEWLINE> s1 = sum ( list ( map ( lambda x : 1 << ( x - 1 ) , [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] ) ) ) & s0 <NEWLINE> s2 = sum ( list ( map ( lambda x : 1 << ( x - 1 ) , [ 4 , 6 , 9 , 11 ] ) ) ) & s0 <NEWLINE> s3 == sum ( list ( map ( lambda x : 1 << ( x - 1 ) , [ 2 ] ) ) ) & s0 <NEWLINE> <NL> if s1 == s0 or s2 == s0 or s3 == s0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> G = 121313113131 <NEWLINE> print ( [ <STRING> , <STRING> ] [ G [ x - 1 ] == G [ y - 1 ] ] ) <NEWLINE>
n1 = set ( [ 1 , 3 , 5 , 7 , 8 , 10 , 12 ] ) <NEWLINE> n2 = set ( [ 4 , 6 , 9 , 11 ] ) <NEWLINE> n3 = set ( [ 2 ] ) <NEWLINE> nums = set ( map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if nums <= n1 or nums <= n2 or nums <= n3 else <STRING> ) <NEWLINE>
<COMMENT> <NL> H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ ] <NEWLINE> for i in range ( H ) : <NEWLINE> <INDENT> a . append ( input ( ) ) <NEWLINE> <NL> <NL> <DEDENT> for i in range ( W + 2 ) : <NEWLINE> <INDENT> print ( <STRING> , end = <STRING> ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE> for i in a : <NEWLINE> <INDENT> print ( <STRING> , l , <STRING> , sep = <STRING> ) <NEWLINE> <DEDENT> for i in range ( W + 2 ) : <NEWLINE> <INDENT> print ( <STRING> , end = <STRING> ) <NEWLINE> <DEDENT>
print ( <STRING> * ( w + 2 ) ) <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> print ( <STRING> + input ( ) + <STRING> ) <NEWLINE> <DEDENT> print ( <STRING> * ( w + 2 ) ) <NEWLINE>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( x + 1 ) : <NEWLINE> <INDENT> print ( <STRING> , end = <STRING> ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE> for i in range ( y ) : <NEWLINE> <INDENT> print ( <STRING> + input ( ) + <STRING> ) <NEWLINE> <DEDENT> for i in range ( x + 1 ) : <NEWLINE> <INDENT> print ( <STRING> , end = <STRING> ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE>
H , W = int ( input ( ) . split ( ) ) <NEWLINE> a = [ ] <NEWLINE> a . append ( <STRING> * ( W + 2 ) ) <NEWLINE> for i in range ( 1 , H + 1 ) : <NEWLINE> <INDENT> a . append ( <STRING> + input ( ) + <STRING> ) <NEWLINE> <DEDENT> a . append ( <STRING> * ( W + 2 ) ) <NEWLINE> for i in range ( H + 2 ) : <NEWLINE> <INDENT> print ( a [ i ] ) <NEWLINE> <DEDENT>
def answer ( H , W , ans ) : <NEWLINE> <INDENT> for x in range ( 1 , W ) : <NEWLINE> <INDENT> y1 = H // 2 <NEWLINE> Sa1 = H * x <NEWLINE> Sb1 = ( W - x ) * y1 <NEWLINE> Sc1 = ( W - x ) * ( H - y1 ) <NEWLINE> M = max ( Sa1 , Sb1 , Sc1 ) <NEWLINE> m = min ( Sa1 , Sb1 , Sc1 ) <NEWLINE> <NL> y2 = ( W - x ) // 2 <NEWLINE> Sa2 = H * x <NEWLINE> Sb2 = H * y2 <NEWLINE> Sc2 = H * ( W - x - y2 ) <NEWLINE> M2 = max ( Sa2 , Sb2 , Sc2 ) <NEWLINE> m2 = min ( Sa2 , Sb2 , Sc2 ) <NEWLINE> <NL> if ans > min ( M - m , M2 - m2 ) : <NEWLINE> <INDENT> ans = min ( M - m , M2 - m2 ) <NEWLINE> <NL> <DEDENT> return ans <NEWLINE> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> H , W = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> ans = H * W <NEWLINE> ans = answer ( H , W ) <NEWLINE> <NL> H , W = W , H <NEWLINE> <NL> if answer ( H , W ) < ans : <NEWLINE> <INDENT> ans = answer ( H , W ) <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE> <DEDENT>
H , W = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> ans = 0 <NEWLINE> <NL> for x in range ( 1 , W ) : <NEWLINE> <INDENT> y = H // 2 <NEWLINE> Sa1 = H * x <NEWLINE> Sb1 = ( W - x ) * y <NEWLINE> Sc1 = ( W - x ) * ( H - y ) <NEWLINE> M = max ( Sa1 , Sb1 , Sc1 ) <NEWLINE> m = min ( Sa1 , Sb1 , Sc1 ) <NEWLINE> <NL> Sa2 = H * x <NEWLINE> Sb2 = H * y <NEWLINE> Sb2 = H * ( W - x - y ) <NEWLINE> M2 = max ( Sa2 , Sb2 , Sc2 ) <NEWLINE> m2 = min ( Sa2 , Sb2 , Sc2 ) <NEWLINE> <NL> if ans > min ( M - m , M2 - m2 ) : <NEWLINE> <INDENT> ans = min ( M - m , M2 - m2 ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if c >= a and c <= B else <STRING> ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> , if a <= c <= b else <STRING> ) <NEWLINE>
A , B , C = main ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if ( C >= A and C <= B ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a + b >= 10 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a + b ) <NEWLINE> <DEDENT>
if C >= A : <NEWLINE> <INDENT> if C <= B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int ( input ( ) . split ( ) ) ) <NEWLINE> <COMMENT> <NL> print ( <STRING> if a <= c <= b else <STRING> ) <NEWLINE>
A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if a <= c <= b else <STRING> ) <NEWLINE>
<INDENT> N , M = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <DEDENT> lis = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> lis . append ( [ i + 1 ] ) <NEWLINE> <DEDENT> for i in range ( M ) : <NEWLINE> <INDENT> a , b = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> lis [ a - 1 ] . append ( b ) <NEWLINE> lis [ b - 1 ] . append ( a ) <NEWLINE> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> print ( len ( lis [ i ] ) - 1 ) <NEWLINE> <DEDENT>
from collections import defaultdict <NEWLINE> <NL> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> r = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] <NEWLINE> d = defaultdict ( int ) <NEWLINE> for x in r : <NEWLINE> <INDENT> d [ x [ 0 ] ] += 1 <NEWLINE> d [ x [ 1 ] ] += 1 <NEWLINE> <NL> <DEDENT> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> print ( d [ i ] ) <NEWLINE> <DEDENT>
N , M = list ( map ( int , input ( ) . split ( ) ) <NEWLINE> A = [ 0 for _ in range ( N ) ] <NEWLINE> for i in range ( M ) : <NEWLINE> <INDENT> a , b = list ( map ( int , input ( ) . split ( ) ) <NEWLINE> A [ a - 1 ] += 1 <NEWLINE> A [ b - 1 ] += 1 <NEWLINE> <NL> <DEDENT> for i range ( N ) : <NEWLINE> <INDENT> print ( str ( A [ i ] ) ) <NEWLINE> <DEDENT>
M , N = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = [ 0 for _ in range ( N ) ] <NEWLINE> for _ in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> ans [ a - 1 ] += 1 <NEWLINE> ans [ b - 1 ] += 1 <NEWLINE> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> print ( ans [ i ] ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> a = [ ] <NEWLINE> <NL> for i in m : <NEWLINE> <INDENT> a1 , a2 = map ( int , input ( ) . split ( ) ) <NEWLINE> a . append ( a1 ) <NEWLINE> a . append ( a2 ) <NEWLINE> <NL> <DEDENT> for s in n : <NEWLINE> <INDENT> print ( a . count ( s ) ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> g = [ [ ] for _ in range ( n ) ] <NEWLINE> <NL> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> g [ a - 1 ] = b - 1 <NEWLINE> g [ b - 1 ] = a - 1 <NEWLINE> <NL> <DEDENT> for nd in g : <NEWLINE> <INDENT> print ( len ( nd ) ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> road_num = [ 0 ] * n <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> road_num [ a ] += 1 <NEWLINE> road_num [ b ] += 1 <NEWLINE> <DEDENT> for i in range ( n ) : <NEWLINE> <INDENT> print ( road_num [ i ] ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> x = [ 0 ] * n <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> x [ a - 1 ] += 1 <NEWLINE> x [ b - 1 ] += 1 <NEWLINE> <DEDENT> for i in range ( n ) : <NEWLINE> <INDENT> print ( x [ i ] <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> AB = [ [ ] for _ in range ( n ) ] <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> a -= 1 <NEWLINE> b -= 1 <NEWLINE> AB [ a ] . append ( b ) <NEWLINE> AB [ b ] . append ( a ) <NEWLINE> <NL> <DEDENT> for i in range ( n ) <NEWLINE> <INDENT> print ( len ( AB [ i ] ) ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ ] <NEWLINE> b = [ ] <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a . append ( input ( ) ) <NEWLINE> b . append ( input ( ) ) <NEWLINE> <DEDENT> for j in range ( n ) : <NEWLINE> <INDENT> print ( a . count ( j + 1 ) + b . count ( j + 1 ) ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = [ 0 for _ in range ( n ) ] <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> ans [ a - 1 ] += 1 <NEWLINE> ans [ b - 1 ] += 1 <NEWLINE> <DEDENT> for i in range ( n ) : <NEWLINE> <INDENT> print ( a [ i ] ) <NEWLINE> <DEDENT>
N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> R = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] <NEWLINE> <NL> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> print ( R . count ( i ) ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> a_s = [ ] <NEWLINE> b_s = [ ] <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> a_s . append ( a ) <NEWLINE> b_s . append ( b ) <NEWLINE> <NL> <DEDENT> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> print ( a_s . count ( i ) + b_s . count ( i ) ) <NEWLINE> <DEDENT>
mycode = <STRING> <NEWLINE> <NL> import sys <NEWLINE> import os <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <COMMENT> <NEWLINE> <INDENT> with open ( <STRING> , <STRING> ) as f : <NEWLINE> <INDENT> f . write ( mycode ) <NEWLINE> <DEDENT> os . system ( <STRING> ) <NEWLINE> <NL> <DEDENT> import mycode <NEWLINE>
N , M = open ( 0 ) . readline ( ) . split ( ) <NEWLINE> from collections import Counter <NEWLINE> cnt = Counter ( open ( 0 ) . read ( ) . split ( ) ) <NEWLINE> for i in range ( 1 , int ( N ) + 1 ) : <NEWLINE> <INDENT> print ( cnt [ str ( i ) ] ) <NEWLINE> <DEDENT>
4 3 <NEWLINE> 1 2 <NEWLINE> 2 3 <NEWLINE> 1 4 <NEWLINE>
N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> A = [ 0 ] * ( N * 1 ) <NEWLINE> <NL> for _ in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> A [ a ] += 1 <NEWLINE> A [ b ] += 1 <NEWLINE> <NL> <DEDENT> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> print ( A [ i ] ) <NEWLINE> <DEDENT>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> cnt = 0 <NEWLINE> P = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> P . append ( ( a , b ) ) <NEWLINE> <NL> <DEDENT> P = sorted ( P ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> cnt += P [ 1 ] <NEWLINE> if cnt >= K : <NEWLINE> <INDENT> print ( P [ 0 ] ) <NEWLINE> <DEDENT> <DEDENT>
N , K = [ int ( x ) for x in input ( ) . split ( <STRING> ) ] <NEWLINE> <NL> placed = 0 <NEWLINE> elm = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> a , b = input ( ) . split ( <STRING> ) <NEWLINE> elm . append ( { <NEWLINE> <INDENT> <STRING> : i + 1 , <NEWLINE> <STRING> : int ( a ) , <NEWLINE> <STRING> : int ( b ) <NEWLINE> <DEDENT> } ) <NEWLINE> <NL> <DEDENT> elm . sort ( key = lambda e : ( e [ <STRING> ] , e [ <STRING> ] ) ) <NEWLINE> for i in range ( len ( elm ) ) : <NEWLINE> <INDENT> placed = e [ <STRING> ] <NEWLINE> if placed >= K : <NEWLINE> <INDENT> print ( e [ <STRING> ] ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> l = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> l . append ( ( a , b ) ) <NEWLINE> <DEDENT> l = sorted ( l ) <NEWLINE> c = 0 <NEWLINE> i = 0 <NEWLINE> while c < k : <NEWLINE> <INDENT> c += l [ i ] [ 1 ] <NEWLINE> i += 1 <NEWLINE> <NL> <DEDENT> print ( l [ i ] [ 1 ] ) <NEWLINE>
from sys <NEWLINE> rl = sys . stdin . readline <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> n , k = map ( int , rl . strip ( ) . split ( ) ) <NEWLINE> ints = [ list ( map ( int , rl . strip ( ) . split ( ) ) ) for _ in range ( n ) ] <NEWLINE> ints . sort ( key = lambda e : e [ 0 ] ) <NEWLINE> s = 0 <NEWLINE> for e in ints : <NEWLINE> <INDENT> s += e [ 1 ] <NEWLINE> if s <= k : <NEWLINE> <INDENT> print ( e [ 0 ] ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ab = [ [ 0 , 0 ] ] * N <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> _a , _b = map ( int , input ( ) . split ( ) ) <NEWLINE> ab [ i ] = [ _a , _b ] <NEWLINE> <DEDENT> ab . sort ( key = lambda x : x [ 0 ] ) <NEWLINE> <NL> j = 0 <NEWLINE> index = 0 <NEWLINE> while j < K : <NEWLINE> <INDENT> j += ab [ index ] [ 1 ] <NEWLINE> if j < K : <NEWLINE> <INDENT> index += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ab [ index ] [ 0 ] <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> s [ 0 ] * 10 ** 5 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s [ a - 1 ] += b <NEWLINE> <DEDENT> i = 0 <NEWLINE> while k > 0 : <NEWLINE> <INDENT> k -= s [ i ] <NEWLINE> i += 1 <NEWLINE> <DEDENT> print ( i ) <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = [ 0 ] * ( 10 ** 5 + 1 ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> ans [ a ] += b <NEWLINE> <NL> <DEDENT> for i in range ( len ( ba ) ) : <NEWLINE> <INDENT> k -= ans [ i ] <NEWLINE> if k <= 0 : <NEWLINE> <INDENT> print ( i ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> cnt = 0 <NEWLINE> <NL> if a == b and a == c and a % 2 == 0 : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> while acnt % 2 == 0 and bcnt % 2 == 0 and ccnt % 2 == 0 : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> i = a <NEWLINE> j = b <NEWLINE> a = ( b + c ) // 2 <NEWLINE> b = ( i + c ) // 2 <NEWLINE> c = ( i + j ) // 2 <NEWLINE> <NL> <DEDENT> print ( cnt ) <NEWLINE>
if a % 2 == 1 or b % 2 == 1 or c % 2 == 1 : <NEWLINE> <INDENT> print ( f ) <NEWLINE> <DEDENT> elif a == b and b == c : <NEWLINE> <INDENT> f = - 1 <NEWLINE> print ( f ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> while a % 2 == 0 and b % 2 == 0 and c % 2 == 0 : <NEWLINE> <INDENT> A = a <NEWLINE> B = b <NEWLINE> C = c <NEWLINE> a = B // 2 + C // 2 <NEWLINE> b = A // 2 + C // 2 <NEWLINE> c = A // 2 + B // 2 <NEWLINE> f = f + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( f ) <NEWLINE> <DEDENT> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == b == c and a % 2 == 0 : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> <DEDENT> d = 0 <NEWLINE> else : <NEWLINE> <INDENT> while a % 2 == 0 and b % 2 == 0 and c % 2 == 0 : <NEWLINE> <INDENT> a , b , c = ( b + c ) , ( a + c ) , ( a + b ) <NEWLINE> d += 1 <NEWLINE> <DEDENT> <DEDENT> print ( d ) <NEWLINE>
import sys <NEWLINE> import numpy as np <NEWLINE> import numba <NEWLINE> from numba import jit <NEWLINE> <NL> read = sys . stdin . buffer . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> <NL> @ jit <NEWLINE> def main ( p ) : <NEWLINE> <INDENT> count = 0 <NEWLINE> if np . any ( p % 2 == 1 ) : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> if np . unique ( p ) . size == 1 : <NEWLINE> <INDENT> return - 1 <NEWLINE> <DEDENT> while True : <NEWLINE> <INDENT> if np . any ( p % 2 == 1 ) : <NEWLINE> <INDENT> return count <NEWLINE> <DEDENT> p [ 0 ] , p [ 1 ] , p [ 2 ] = p [ 1 ] / 2 + p [ 2 ] / 2 , p [ 0 ] / 2 + p [ 2 ] / 2 , p [ 0 ] / 2 + p [ 1 ] / 2 <NEWLINE> count += 1 <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> p = np . array ( readline ( ) . split ( ) , np . int64 ) <NEWLINE> <NL> print ( main ( p ) ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == b == c : <NEWLINE> <INDENT> if a % 2 == = b % 2 == c % 2 == 0 : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> exit ( ) <NEWLINE> <DEDENT> cnt = 0 <NEWLINE> while a % 2 == b % 2 == c % 2 : <NEWLINE> <INDENT> A = a // 2 <NEWLINE> B = b // 2 <NEWLINE> C = c // 2 <NEWLINE> a , b , c = B + C , A + C , A + B <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> print ( cnt ) <NEWLINE>
A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> con = 0 <NEWLINE> if A % 2 == 1 or B % 2 == 1 or C % 1 == 1 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A == B and B == C : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> while A % 2 == 0 and B % 2 == 0 and C % 2 == 0 : <NEWLINE> <INDENT> con += 1 <NEWLINE> D = A / 2 <NEWLINE> E = B / 2 <NEWLINE> F = C / 2 <NEWLINE> A = E + F <NEWLINE> B = D + F <NEWLINE> C = D + E <NEWLINE> <NL> <DEDENT> print ( con ) <NEWLINE> A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> con = 0 <NEWLINE> if A % 2 == 1 or B % 2 == 1 or C % 1 == 0 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if A == B and B == C : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> while A % 2 == 0 and B % 2 == 0 and C % 2 == 0 : <NEWLINE> <INDENT> con += 1 <NEWLINE> D = A / 2 <NEWLINE> E = B / 2 <NEWLINE> F = C / 2 <NEWLINE> A = E + F <NEWLINE> B = D + F <NEWLINE> C = D + E <NEWLINE> <NL> <DEDENT> print ( con ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> a_tmp = a ; b_tmp = b ; c_tmp = c <NEWLINE> count = 0 <NEWLINE> while True : <NEWLINE> <INDENT> count += 1 <NEWLINE> a = b_tmp / 2 + c_tmp / 2 <NEWLINE> b = a_tmp / 2 + c_tmp / 2 <NEWLINE> c = a_tmp / 2 + b_tmp / 2 <NEWLINE> if a == a_tmp and b == b_tmp and c = c_tmp : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> a_tmp = a ; b_tmp = b ; c_tmp = c <NEWLINE> if a % 2 == 1 or b % 2 == 1 or c % 2 == 1 : <NEWLINE> <INDENT> print ( count ) <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> <DEDENT>
def ( a , b , c ) : <NEWLINE> <INDENT> if a % 2 + b % 2 + c % 2 > 0 : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> if a == b == c : <NEWLINE> <INDENT> return - 1 <NEWLINE> <DEDENT> return f ( ( b + c ) // 2 , ( c + a ) // 2 , ( a + b ) // 2 ) + 1 <NEWLINE> <NL> <DEDENT> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( f ( a , b , c ) ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a == b == c : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> if a % 2 != 0 or b % 2 != 0 or c % 2 != 0 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> N = ( a + b + c ) // 3 <NEWLINE> cnt = 1 <NEWLINE> while N : <NEWLINE> <INDENT> if N % 2 != 0 : break <NEWLINE> N //= 2 <NEWLINE> cnt += 1 <NEWLINE> <NL> <DEDENT> print ( cnt ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == b == c : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> <DEDENT> total = 0 <NEWLINE> else : <NEWLINE> <INDENT> while True : <NEWLINE> <INDENT> x = a / 2 <NEWLINE> y = b / 2 <NEWLINE> z = c / 2 <NEWLINE> a = y + z <NEWLINE> b = x + z <NEWLINE> c = x + y <NEWLINE> total += 1 <NEWLINE> if a % 2 != 0 or b % 2 != 0 or c % 2 != 0 : <NEWLINE> <INDENT> print ( total ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
a , b , c = map ( int , open ( 0 ) . read ( ) . split ( ) ) <NEWLINE> <NL> if a == b == c and a % 2 == 0 : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> num = 0 <NEWLINE> while true : <NEWLINE> <INDENT> if a % 2 == 1 or b % 2 == 1 or c % 2 == 1 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> l = [ ( b + c ) / 2 , ( c + a ) / 2 , ( a + b ) / 2 ] <NEWLINE> num += 1 <NEWLINE> l = [ ( l [ 1 ] + l [ 2 ] ) / 2 , ( l [ 2 ] + l [ 0 ] ) / 2 , ( l [ 0 ] + l [ 2 ] ) / 2 ] <NEWLINE> a = l [ 0 ] <NEWLINE> b = l [ 1 ] <NEWLINE> c = l [ 2 ] <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( num ) <NEWLINE> <DEDENT> <DEDENT>
a , b , c = map ( string , input ( ) . split ( ) ) <NEWLINE> if a [ - 1 ] == b [ 0 ] and b [ - 1 ] == c [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a [ - 1 ] == b [ 0 ] and b [ - 1 ] == c [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B , C = input ( ) . split ( ) <NEWLINE> if A [ - 1 ] == B [ 0 ] and B [ - 1 ] == C [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) : <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> if a [ - 1 ] == b [ 0 ] and b [ - 1 ] == c [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a [ - 1 ] == b [ 0 ] and b [ - 1 ] == c [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A = input ( ) <NEWLINE> B = input ( ) <NEWLINE> C = input ( ) <NEWLINE> if A [ - 1 ] == B [ 0 ] and B [ - 1 ] == C [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
<COMMENT> <NL> A , B , C = input ( ) . split ( ) <NEWLINE> <NL> if ( 1 <= len ( A ) and len ( A ) <= 10 and A . islower ( ) ) and ( 1 <= len ( B ) and len ( B ) <= 10 and B . islower ( ) ) and ( 1 <= len ( C ) and len ( C ) <= 10 and C . islower ( ) ) : <NEWLINE> <INDENT> if ( A [ len ( A ) - 1 ] == B [ 0 ] ) and ( B [ 0 ] == C [ len ( B ) - 1 ] ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> if A [ - 1 ] == B [ 0 ] and B [ - 1 ] == C [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( str , input ( ) . split ( ) ) <NEWLINE> Flag = 1 <NEWLINE> if a [ len ( a ) - 1 ] != b [ 0 ] : <NEWLINE> <INDENT> Flag = 0 <NEWLINE> <DEDENT> if b [ len ( b ) - 1 ] != c [ 0 ] : <NEWLINE> <INDENT> Flag = 0 <NEWLINE> <DEDENT> if Flag = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = input ( ) . split ( ) <NEWLINE> if a [ - 1 ] == b [ 0 ] and b [ - 1 ] == c [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> <NEWLINE> <DEDENT>
a , b , c = input ( ) . split ( ) <NEWLINE> <NL> if a [ len ( a ) - 1 ] == b [ 0 ] and b [ ( b ) - 1 ] == c [ 0 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B , C = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> Flag = False <NEWLINE> <NL> for i in range ( 1 , B + 1 ) : <NEWLINE> <INDENT> D = i * A % B <NEWLINE> if D = C : <NEWLINE> <INDENT> Flag = True <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> if Flag == True : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( 1 , b + 1 ) : <NEWLINE> <INDENT> a % b * i % b == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
, b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> s = { } <NEWLINE> while True : <NEWLINE> <INDENT> if a % b == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> elif ( a % b ) in s : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> s . add ( ( a % b ) ) <NEWLINE> a += a <NEWLINE> <DEDENT> <DEDENT>
<COMMENT> <NL> <NL> A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for i in range ( 1 , B + 1 ) <NEWLINE> <INDENT> if ( A * i ) % B == C : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( 1 , b + 1 ) : <NEWLINE> <INDENT> if ( i * a ) % b == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> break <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( b ) : <NEWLINE> <INDENT> if ( i * a ) % b == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( <STRING> if C % gcd ( A , B ) == 0 else <STRING> ) <NEWLINE>
<COMMENT> <NL> <NL> A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ans = <STRING> <NEWLINE> for i in range ( B + 1 ) ) : <NEWLINE> <INDENT> res = A * i % B <NEWLINE> if res == C : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> num = a <NEWLINE> if ( a % 2 == 1 and c % 2 == 0 ) or ( a % 2 == 0 and c % 2 == 1 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pritn ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ans = <STRING> <NEWLINE> for i in range ( 1 , b + 1 ) : <NEWLINE> <INDENT> for j in range ( 1 , a + 1 ) : <NEWLINE> <INDENT> if a * i = b * j + c : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
<INDENT> N , T = map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> t = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = T <NEWLINE> for i in range ( N - 1 ) : <NEWLINE> <INDENT> now = t [ i + 1 ] - t [ i ] <NEWLINE> ans += min ( now , T ) <NEWLINE> <NL> <NL> <DEDENT> print ( ans ) <NEWLINE>
n , t = map ( int , input ( ) . split ( ) ) <NEWLINE> arr = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> summ = t <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> summ += min ( t , arr [ i + 1 ] - arr [ i ] ) <NEWLINE> <DEDENT> return summ <NEWLINE>
a , b = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> c = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> m = a * b <NEWLINE> for i in range ( a ) : <NEWLINE> <INDENT> if c [ i + 1 ] - c [ i ] < b : <NEWLINE> <INDENT> m = m - ( b - ( c [ i + 1 ] - c [ i ] ) ) <NEWLINE> <DEDENT> <DEDENT> print ( m ) <NEWLINE>
from sys import stdin <NEWLINE> from itertools import accumulate <NEWLINE> readline = stdin . readline <NEWLINE> <NL> N , W = map ( int , input ( ) . split ( ) ) <NEWLINE> vs = [ [ ] for _ in range ( 4 ) ] <NEWLINE> w , v = map ( int , input ( ) . split ( ) ) <NEWLINE> w1 = w <NEWLINE> vs [ 0 ] . append ( v ) <NEWLINE> for _ in range ( N - 1 ) : <NEWLINE> <INDENT> w , v = map ( int , input ( ) . split ( ) ) <NEWLINE> vs [ w - w1 ] . append ( v ) <NEWLINE> <NL> <DEDENT> for i in range ( 4 ) : <NEWLINE> <INDENT> vs [ i ] . sort ( reverse = True ) <NEWLINE> vs [ i ] = [ 0 ] + list ( accumulate ( vs [ i ] ) ) <NEWLINE> <NL> <DEDENT> result = 0 <NEWLINE> for i in range ( len ( vs [ 0 ] ) + 1 ) : <NEWLINE> <INDENT> a = W - w1 * i <NEWLINE> if a < 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> for j in range ( len ( vs [ 1 ] ) + 1 ) : <NEWLINE> <INDENT> b = a - ( w1 + 1 ) * j <NEWLINE> if b < 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> for k in range ( len ( vs [ 2 ] ) + 1 ) : <NEWLINE> <INDENT> c = b - ( w1 + 2 ) * k <NEWLINE> if c < 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> t = vs [ 0 ] [ i ] + vs [ 1 ] [ j ] + vs [ 2 ] [ k ] <NEWLINE> for l in range ( len ( vs [ 3 ] ) + 1 ) : <NEWLINE> <INDENT> d = c - ( w1 + 3 ) * l <NEWLINE> if d < 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> result = max ( result , t + vs [ 3 ] [ l ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( result ) <NEWLINE>
N , T = map ( int , input ( ) . split ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> LST = [ ] <NEWLINE> <NL> for a in A : <NEWLINE> <INDENT> LST . append ( ( a , 1 ) ) <NEWLINE> LST . append ( ( a + T , - 1 ) ) <NEWLINE> <NL> <DEDENT> LST . sort ( ) <NEWLINE> <NL> prev = - 1 <NEWLINE> s = 0 <NEWLINE> ans = 0 <NEWLINE> for x , y in A : <NEWLINE> <INDENT> if y == 1 : <NEWLINE> <INDENT> if s == 0 : <NEWLINE> <INDENT> prev = x <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> s += 1 <NEWLINE> <DEDENT> <DEDENT> elif y == - 1 : <NEWLINE> <INDENT> s -= 1 <NEWLINE> if s == 0 : <NEWLINE> <INDENT> ans += ( x - prev ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <NL>
N , T = map ( int , input ( ) . split ( ) ) ; <NEWLINE> t = [ int ( x ) for x in input ( ) . split ( ) ] ; <NEWLINE> <NL> end = 0 ; <NEWLINE> ans = 0 ; <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if end > t [ i ] : <NEWLINE> <INDENT> ans += t [ i ] + T - end ; <NEWLINE> else : <NEWLINE> ans += T ; <NEWLINE> <DEDENT> end += t [ i ] + T ; <NEWLINE> <COMMENT> <NL> <NL> <DEDENT> print ( ans ) ; <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> acnt = 0 <NEWLINE> bcnt = 0 <NEWLINE> ccnt = 0 <NEWLINE> cnt = 0 <NEWLINE> if a == b and a == c and a % 2 == 0 : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> while a % 2 == 0 and b % 2 == 0 and c % 2 == 0 : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> acnt = ( b + c ) // 2 <NEWLINE> bcnt = ( a + c ) // 2 <NEWLINE> ccnt = ( a + b ) // 2 <NEWLINE> a = acnt <NEWLINE> b = bcnt <NEWLINE> c = ccnt <NEWLINE> <DEDENT> print ( cnt ) <NEWLINE>
print ( [ * zip ( * input ( ) . split ( ) ) ] [ 0 ] . upper ( ) ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( upper ( a [ 0 ] + b [ 0 ] + c [ 0 ] ) ) <NEWLINE>
s1 , s2 , s3 = map ( input ( ) . split ( ) ) <NEWLINE> <NL> s1 = s1 [ 0 ] . str . upper ( ) <NEWLINE> s2 = s2 [ 0 ] . str . upper ( ) <NEWLINE> s3 = s3 [ 0 ] . str . upper ( ) <NEWLINE> <NL> print ( s1 , s2 , s3 ) <NEWLINE>
a , b , c = input ( ) . split ( ) <NEWLINE> print ( ( s1 [ 0 ] + s2 [ 0 ] + s3 [ 0 ] ) . upper ( ) ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = a [ 0 ] + b [ 0 ] + c [ 0 ] <NEWLINE> print ( ans . upper ( ) ) <NEWLINE>
a , b , c = map ( input ( ) . split ( ) ) <NEWLINE> print ( a [ 0 ] . isupper ( ) , b [ 0 ] . isupper ( ) , c [ 0 ] . isupper ( ) , sep = <STRING> ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> import sys , re <NEWLINE> from collections import deque , defaultdict , Counter <NEWLINE> from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians <NEWLINE> from itertools import accumulate , permutations , combinations , product <NEWLINE> from operator import itemgetter , mul <NEWLINE> from copy import deepcopy <NEWLINE> from string import ascii_lowercase , ascii_uppercase , digits <NEWLINE> from bisect import bisect , bisect_left <NEWLINE> from fractions import gcd <NEWLINE> from heapq import heappush , heappop <NEWLINE> from functools import reduce <NEWLINE> import numpy as np <NEWLINE> def input ( ) : return sys . stdin . readline ( ) . strip ( ) <NEWLINE> def INT ( ) : return int ( input ( ) ) <NEWLINE> def MAP ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> def ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) ) <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> s1 , s2 , s3 = input ( ) . split ( ) <NEWLINE> print ( upper ( s1 [ 0 ] ) + upper ( s2 [ 0 ] ) + upper ( s3 [ 0 ] ) ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> print ( <STRING> if a > b else <STRING> if a < b else <STRING> ) <NEWLINE>
a , b , c = map ( str , input ( ) . split ( ) ) <NEWLINE> print ( upper ( a [ 0 ] + b [ 0 ] + c [ 0 ] ) ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a > b : print ( <STRING> ) <NEWLINE> elif a < b : print ( <STRING> ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> if A > B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if A < B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if A == B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> <NL> if a < b : <NEWLINE> <INDENT> print ( <STRING> ) : <NEWLINE> <DEDENT> elif a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> import math <NEWLINE> if math . sqrt ( a ) == math . sqrt ( b ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif math . sqrt ( a ) > math . sqrt ( b ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> math . sqrt ( a ) < math . sqrt ( b ) : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
A = int ( input ( ) ) <NEWLINE> B = int ( input ( ) ) <NEWLINE> print ( <STRING> if A > B else <STRING> if A = B else <STRING> ) <NEWLINE>
a = input ( ) <NEWLINE> b = input ( ) <NEWLINE> if len ( a ) == len ( b ) : <NEWLINE> <INDENT> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> elif len ( a ) < len ( b ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = ri ( ) , ri ( ) <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a = b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> if A > B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif A == B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> if a > b else <STRING> if a < b else <STRING> ) <NEWLINE>
a = int ( input ( ) . split ( ) ) <NEWLINE> b = int ( input ( ) . split ( ) ) <NEWLINE> <NL> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B = input ( ) . split ( ) <NEWLINE> N = max ( len ( A ) , len ( B ) ) <NEWLINE> A , B = A . zfill ( N ) , B . zfill ( N ) <NEWLINE> if A == B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if A > B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if A < B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
def i ( ) : <NEWLINE> <INDENT> return int ( input ( ) ) <NEWLINE> <DEDENT> def i2 ( ) : <NEWLINE> <INDENT> return map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> def s ( ) : <NEWLINE> <INDENT> return str ( input ( ) ) <NEWLINE> <DEDENT> def l ( ) : <NEWLINE> <INDENT> return list ( input ( ) ) <NEWLINE> <DEDENT> def intl ( ) : <NEWLINE> <INDENT> return list ( int ( k ) for k in input ( ) . split ( ) ) <NEWLINE> <NL> <DEDENT> a = i ( ) <NEWLINE> b = i ( ) <NEWLINE> <NL> if len ( a ) > len ( b ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
def chk ( a , t ) : <COMMENT> <NEWLINE> <INDENT> cnt = 0 <COMMENT> <NEWLINE> x = 0 <COMMENT> <NEWLINE> for i in a : <NEWLINE> <INDENT> x += i <NEWLINE> if t == True and x <= 0 : <COMMENT> <NEWLINE> <INDENT> cnt += 1 - x <NEWLINE> x = x + ( 1 - x ) <COMMENT> <NEWLINE> <DEDENT> elif t == False and x >= 0 : <COMMENT> <NEWLINE> <INDENT> cnt += 1 + x <NEWLINE> x = x - ( 1 + x ) <COMMENT> <NEWLINE> <DEDENT> t = not t <COMMENT> <NEWLINE> <DEDENT> return cnt <NEWLINE> <DEDENT> print ( min ( chk ( a , True ) , chk ( a , False ) ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> <NL> def odd_positive ( List , n ) : <NEWLINE> <INDENT> sum_a = 0 <NEWLINE> cost = 0 <NEWLINE> for a in List : <NEWLINE> <INDENT> nextsum = sum_a + a <NEWLINE> if i & 1 and nextsum <= 0 : <NEWLINE> <INDENT> cost = - nextsum + 1 <NEWLINE> sum_a = 1 <NEWLINE> <DEDENT> elif ( not i & 1 ) and nextsum >= 0 : <NEWLINE> <INDENT> cost = nextsum + 1 <NEWLINE> sum_a = - 1 <NEWLINE> <DEDENT> <DEDENT> return cost <NEWLINE> <NL> <NL> <DEDENT> def odd_negative ( List , n ) : <NEWLINE> <INDENT> sum_a = 0 <NEWLINE> cost = 0 <NEWLINE> for a in List : <NEWLINE> <INDENT> nextsum = sum_a + a <NEWLINE> if i & 1 and nextsum >= 0 : <NEWLINE> <INDENT> cost = nextsum + 1 <NEWLINE> sum_a = - 1 <NEWLINE> <DEDENT> elif ( not i & 1 ) and nextsum <= 0 : <NEWLINE> <INDENT> cost = - nextsum + 1 <NEWLINE> sum_a = 1 <NEWLINE> <DEDENT> <DEDENT> return cost <NEWLINE> <NL> <DEDENT> ans = min ( odd_positive ( a , n ) , odd_negative ( a , n ) ) <NEWLINE> print ( ans ) <NEWLINE>
n , m = map ( int ( input ( ) . split ( ) ) ) <NEWLINE> if abs ( n - m ) < 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x , y = = map ( int , input ( ) . split ( ) ) <NEWLINE> if abs ( x - y ) < 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> if n = < 2 : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> cnt = 0 <NEWLINE> <NL> if l [ 0 ] > l [ 1 ] : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> elif l [ 0 ] < l [ 1 ] : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <NL> <DEDENT> for i in range ( 2 , n ) : <NEWLINE> <INDENT> if l [ i - 1 ] > l [ i ] and ( ans == <STRING> or ans == <STRING> ) : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> elif l [ i - 1 ] < l [ i ] and ( ans == <STRING> or ans == <STRING> ) : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> elif l [ i - 1 ] == l [ i ] : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> ans = <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> print ( cnt + 1 ) <NEWLINE>
def solve ( ) : <NEWLINE> <NL> <INDENT> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> i = 0 <NEWLINE> result = 0 <NEWLINE> <NL> while i < N : <NEWLINE> <INDENT> while i + 1 < n and A [ i ] == A [ i + 1 ] : <NEWLINE> <INDENT> i += 1 <NEWLINE> <DEDENT> if i + 1 < N and A [ i ] < A [ i + 1 ] : <NEWLINE> <INDENT> while i + 1 < n and A [ i ] <= A [ i + 1 ] : <NEWLINE> <INDENT> i += 1 <NEWLINE> <DEDENT> <DEDENT> elif i + 1 < N and A [ i ] > A [ i + 1 ] : <NEWLINE> <INDENT> while i + 1 < n and A [ i ] >= A [ i + 1 ] : <NEWLINE> <INDENT> i += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> result += 1 <NEWLINE> i += 1 <NEWLINE> <NL> <DEDENT> print ( result ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> solve ( ) <NEWLINE> <DEDENT>
def main ( ) : <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <NL> <INDENT> f = open ( <STRING> , <STRING> ) <NEWLINE> N = int ( f . readline ( ) ) <NEWLINE> A = [ int ( a ) for a in f . readline ( ) . split ( ) ] <NEWLINE> <NL> idx = 0 <NEWLINE> ans = 0 <NEWLINE> for i in range ( len ( A ) ) : <NEWLINE> <INDENT> if idx + 1 > len ( A ) - 1 : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> m = <STRING> <NEWLINE> if A [ idx ] < A [ idx + 1 ] : <NEWLINE> <INDENT> m = <STRING> <NEWLINE> <DEDENT> elif A [ idx ] > A [ idx + 1 ] : <NEWLINE> <INDENT> m = <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> find = False <NEWLINE> for j in range ( idx , len ( A ) - 1 ) : <NEWLINE> <INDENT> if A [ j ] < A [ j + 1 ] : <NEWLINE> <INDENT> m = <STRING> <NEWLINE> find = True <NEWLINE> idx = j <NEWLINE> break <NEWLINE> <DEDENT> elif A [ j ] > A [ j + 1 ] : <NEWLINE> <INDENT> m = <STRING> <NEWLINE> find = True <NEWLINE> idx = j <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if find == False : <NEWLINE> <INDENT> print ( ans + 1 ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> for j in range ( idx , len ( A ) - 1 ) : <NEWLINE> <INDENT> if m == <STRING> : <NEWLINE> <INDENT> if A [ j ] <= A [ j + 1 ] : <NEWLINE> <INDENT> idx = j + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> idx = j + 1 <NEWLINE> ans += 1 <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> elif m == <STRING> : <NEWLINE> <INDENT> if A [ j ] >= A [ j + 1 ] : <NEWLINE> <INDENT> idx = j + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> idx = j + 1 <NEWLINE> ans += 1 <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( ans + 1 ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
p = - 1 <NEWLINE> xp = - 1 <NEWLINE> ans = 0 <NEWLINE> input ( ) <NEWLINE> for i in range ( input ( ) . split ( <STRING> ) ) : <NEWLINE> <INDENT> i = int ( i ) <NEWLINE> if i == p : continue <NEWLINE> if p != - 1 : <NEWLINE> <INDENT> x = p < i <NEWLINE> if xp != - 1 <NEWLINE> <INDENT> ans += x != xp <NEWLINE> <DEDENT> xp = x <NEWLINE> <DEDENT> p = i <NEWLINE> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = 10 ** 9 <NEWLINE> for i in range ( 1 , 2 ** n , 2 ) : <NEWLINE> <INDENT> if not i & 1 or k != sum ( [ i >> j & 1 for j in range ( n ) ] ) : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> pre = a [ 0 ] <NEWLINE> cost = 0 <NEWLINE> for j in range ( 1 , n ) : <NEWLINE> <INDENT> if i >> j & 1 : <NEWLINE> <INDENT> tmp = max ( pre - a [ j ] + 1 , 0 ) <NEWLINE> pre = a [ j ] + tmp <NEWLINE> cost += tmp <NEWLINE> <DEDENT> <DEDENT> ans = min ( ans , cost ) <NEWLINE> <DEDENT> print ( ans + <STRING> ) <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = float ( <STRING> ) <NEWLINE> for bit in range ( 1 << ( n - 1 ) ) : <NEWLINE> <INDENT> cand = [ 0 ] * ( n - 1 ) <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if bit & 1 << i : cand [ i ] = 1 <NEWLINE> <DEDENT> if cand . count ( 1 ) != k - 1 : continue <NEWLINE> cost = 0 <NEWLINE> mx = a [ 0 ] <NEWLINE> for i in range ( 1 , n ) : <NEWLINE> <INDENT> if cand [ i - 1 ] : <NEWLINE> <INDENT> if a [ i ] <= mx : <NEWLINE> <INDENT> cost += mx - a [ i ] + 1 <NEWLINE> mx += 1 <NEWLINE> <DEDENT> <DEDENT> mx = max ( mx , a [ j ] ) <NEWLINE> <DEDENT> ans = min ( ans , cost ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
a , b , c = map ( int , input ( ) split ( ) ) <NEWLINE> if b - a == c - b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> d = [ dict ( ) for _ in range ( n ) ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> for c in input ( ) : <NEWLINE> <INDENT> if c not in d [ i ] : <NEWLINE> <INDENT> d [ i ] [ c ] = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> d [ i ] [ c ] += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> ans = <STRING> <NEWLINE> for i in range ( 26 ) : <NEWLINE> <INDENT> mini = 10 ** 18 <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> if chr ( 97 + i ) not in d [ j ] : <NEWLINE> <INDENT> mini = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> mini = min ( mini , d [ j ] [ chr ( 97 + i ) ] ) <NEWLINE> <DEDENT> <DEDENT> ans += mini * chr ( 97 + i ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> print ( <STRING> if b - a == c - b else <STRING> ) <NEWLINE>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> if a [ 0 ] + a [ 2 ] = 2 * a [ 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> print ( <STRING> if ( a == <STRING> ) ^ ( b == <STRING> ) else <STRING> ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) ; print ( [ <STRING> , <STRING> ] [ b - a == c - b ] ) A <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if b - a = c - b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a - b = b - c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> ) if a == b == c else print ( <STRING> ) <NEWLINE>
<COMMENT> <NL> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if b - a = c - b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = int ( input ( ) . split ( ) ) <NEWLINE> if ( b - a ) == ( c - b ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> ba = b - a <NEWLINE> cb = c - b <NEWLINE> <NL> if ba == cb : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> a = input ( ) <NEWLINE> b = input ( ) + [ <STRING> ] <NEWLINE> for i in range ( len ( a ) ) : <NEWLINE> <INDENT> print ( a [ i ] , end = <STRING> ) <NEWLINE> print ( b [ i ] , end = <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
from collections import deque <NEWLINE> <NL> O = input ( ) <NEWLINE> E = input ( ) <NEWLINE> <NL> o = deque ( O ) <NEWLINE> e = deque ( E ) <NEWLINE> <NL> s = <STRING> <NEWLINE> While True : <NEWLINE> <INDENT> if not e a and not o : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> elif o : <NEWLINE> <INDENT> s += o . pop ( ) <NEWLINE> <DEDENT> elif e : <NEWLINE> <INDENT> s += e . pop ( ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> print ( s ) <NEWLINE>
atcoderbeginnercontest <NEWLINE> atcoderregularcontest <NEWLINE>
o = input ( ) <NEWLINE> e = input ( ) <NEWLINE> <NL> n = len ( e ) <NEWLINE> ans = <STRING> <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> ans += o [ i ] <NEWLINE> <INDENT> ans += e [ i ] <NEWLINE> <NL> <DEDENT> <DEDENT> if len ( o ) % 2 == 1 : <NEWLINE> <INDENT> ans += o [ - 1 ] <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
a = input ( ) <NEWLINE> b = input ( ) <NEWLINE> c = len ( a ) <NEWLINE> d = len ( b ) <NEWLINE> x = <STRING> <NEWLINE> if c <= d : <NEWLINE> <INDENT> for i in range ( c ) : <NEWLINE> <INDENT> x = x + c [ i ] <NEWLINE> x = x + d [ i ] <NEWLINE> <DEDENT> print ( x ) <NEWLINE> <DEDENT> if c > d : <NEWLINE> <INDENT> for i in range ( d ) : <NEWLINE> <INDENT> x = x + c [ i ] <NEWLINE> x = x + d [ i ] <NEWLINE> <DEDENT> x = x + c [ len ( a ) - 1 ] <NEWLINE> print ( x ) <NEWLINE> <DEDENT>
from itertools import zip_longest <NEWLINE> <NL> o = input ( ) <NEWLINE> e = input ( ) <NEWLINE> <NL> print ( <STRING> . join ( [ x + y for x , y in zip_longetst ( o , e , fillvalue = <STRING> ) ] ) ) <NEWLINE>
O = input ( ) <NEWLINE> E = inpu ( ) <NEWLINE> ans = <STRING> <NEWLINE> for i in range ( len ( E ) ) : <NEWLINE> <INDENT> ans += O [ i ] <NEWLINE> ans += E [ i ] <NEWLINE> <NL> <DEDENT> if len ( O ) != len ( E ) : <NEWLINE> <INDENT> ans += O [ - 1 ] <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
o = input ( ) <NEWLINE> e = input ( ) <NEWLINE> n = [ ] <NEWLINE> e . append ( <STRING> ) <NEWLINE> for i in range ( o ) : <NEWLINE> <INDENT> n . append ( o [ i ] ) <NEWLINE> n . append ( e [ i ] ) <NEWLINE> <DEDENT> print ( <STRING> . join ( n ) . strip ( ) ) <NEWLINE>
<COMMENT> <NL> <NL> odd = raw_input ( ) <NEWLINE> even = raw_input ( ) <NEWLINE> <NL> res = <STRING> <NEWLINE> for ( o , e ) in zip ( odd , even ) : <NEWLINE> <INDENT> res = res + o + e <NEWLINE> <NL> <DEDENT> print res if len ( odd ) - len ( even ) == 0 else res + odd [ - 1 ] <NEWLINE>
import sys <NEWLINE> import math <NEWLINE> import itertools <NEWLINE> import collections <NEWLINE> import heapq <NEWLINE> import re <NEWLINE> import numpy as np <NEWLINE> from functools import reduce <NEWLINE> <NL> rr = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> rs = lambda : sys . stdin . readline ( ) . split ( ) <NEWLINE> ri = lambda : int ( sys . stdin . readline ( ) ) <NEWLINE> rm = lambda : map ( int , sys . stdin . readline ( ) . split ( ) ) <NEWLINE> rl = lambda : list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) <NEWLINE> inf = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> o = rr ( ) <NEWLINE> e = rr ( ) <NEWLINE> s = <STRING> <NEWLINE> for a , b in itertools . zip_longest ( o , e , fillvalu = <STRING> ) : <NEWLINE> <INDENT> s += a + b <NEWLINE> <DEDENT> print ( s ) <NEWLINE> <NL> <NL> <NL> <NL> <NL> <NL>
o = str ( input ( ) ) <NEWLINE> s = str ( input ( ) ) <NEWLINE> n = <STRING> <NEWLINE> <NL> if not len ( o ) == len ( s ) : <NEWLINE> <INDENT> for i in range ( min ( len ( o ) , len ( s ) ) ) : <NEWLINE> <INDENT> n += o [ i ] <NEWLINE> n += s [ i ] <NEWLINE> <NL> <DEDENT> if len ( o ) > len ( s ) : <NEWLINE> <INDENT> n += o [ len ( o ) - 1 ] <NEWLINE> <NL> <DEDENT> if len ( s ) > len ( o ) : <NEWLINE> <INDENT> n += s [ len ( s ) - 1 ] <NEWLINE> <NL> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for i in rage ( len ( o ) ) : <NEWLINE> <INDENT> n += o [ i ] <NEWLINE> n += s [ i ] <NEWLINE> <NL> <DEDENT> <DEDENT> print ( n ) <NEWLINE>
<COMMENT> <NL> A = input ( ) <NEWLINE> B = input ( ) <NEWLINE> import ita <NEWLINE> pasw = ita . array . make1d ( len ( A ) + len ( B ) + 1 ) <NEWLINE> for i in range ( 0 , len ( A ) ) : <NEWLINE> <INDENT> pasw [ 2 * i ] = A [ i ] <NEWLINE> <DEDENT> for j in range ( 0 , len ( B ) ) : <NEWLINE> <INDENT> pasw [ 2 * j + 1 ] = B [ j ] <NEWLINE> <DEDENT> print ( pasw ) <NEWLINE> <NL> <NL>
a = list ( input ( ) ) <NEWLINE> b = list ( input ( ) ) <NEWLINE> for x , y zip ( a , b ) : <NEWLINE> <INDENT> print ( x + y , end = <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> <COMMENT> <NL> from collections import Counter <NEWLINE> <COMMENT> <NL> <NL> <COMMENT> <NL> def solve ( n , a ) : <NEWLINE> <INDENT> alphabetLst = { } <NEWLINE> for i in range ( n ) : <NEWLINE> <DEDENT> ... ( 17 lines ) ... <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> N = int ( input ( ) ) <NEWLINE> a = [ input ( ) for _ in range ( N ) ] <NEWLINE> print ( solve ( N , a ) ) <NEWLINE> return <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> d = { } <NEWLINE> for i in range ( 26 ) : <NEWLINE> <INDENT> d [ chr ( ord ( <STRING> ) + i ) ] = 10 ** 9 <NEWLINE> <DEDENT> for i in range ( n ) : <NEWLINE> <INDENT> s = input ( ) <NEWLINE> for j in range ( 26 ) : <NEWLINE> <INDENT> d [ chr ( ord ( <STRING> ) + i ) ] = min ( d [ chr ( ord ( <STRING> ) + i ) ] , s . count ( chr ( ord ( <STRING> ) + i ) ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> ans = <STRING> <NEWLINE> for e in d . items ( ) : <NEWLINE> <INDENT> ans += e [ 0 ] * e [ 1 ] <NEWLINE> <DEDENT> print ( ans ) <NEWLINE> <NL>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> x = [ x for x in map ( int , input ( ) . split ( ) ) ] <NEWLINE> y = [ y for y in map ( int , input ( ) . split ( ) ) ] <NEWLINE> sum_x = 0 <NEWLINE> sum_y = 0 <NEWLINE> ans = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> sum_x += ( 2 * i - n + 1 ) * x [ i + 1 ] <NEWLINE> <DEDENT> for j in range ( m ) : <NEWLINE> <INDENT> sum_y += ( 2 * j - m + 1 ) * y [ j + 1 ] <NEWLINE> <DEDENT> ans = sum_x * sum_y <NEWLINE> print ( ans % 1000000007 ) <NEWLINE>
N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> X = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> Y = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> xs = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> xs += i * X [ i ] <NEWLINE> xs -= ( N - i - 1 ) * X [ i ] <NEWLINE> xs %= MOD <NEWLINE> <DEDENT> ys = 0 <NEWLINE> for i in range ( M ) : <NEWLINE> <INDENT> ys += i * Y [ i ] <NEWLINE> ys -= ( M - i - 1 ) * Y [ i ] <NEWLINE> ys %= MOD <NEWLINE> <DEDENT> print ( xs * ys % MOD ) <NEWLINE>
def main ( ) : <NEWLINE> <INDENT> N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> h = [ ] <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> h . append ( int ( input ( ) ) ) <NEWLINE> <DEDENT> h . sort ( ) <NEWLINE> ans = pow ( 10 , 10 ) <NEWLINE> for k in range ( N - K + 1 ) : <NEWLINE> <INDENT> ans = min ( ans , abs ( h [ k ] - h [ K - 1 + k ] ) ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> import sys <NEWLINE> from io import StringIO <NEWLINE> import unittest <NEWLINE> <NL> <NL> class TestClass ( unittest . TestCase ) : <NEWLINE> <INDENT> def assertIO ( self , input , output ) : <NEWLINE> <INDENT> stdout , stdin = sys . stdout , sys . stdin <NEWLINE> sys . stdout , sys . stdin = StringIO ( ) , StringIO ( input ) <NEWLINE> resolve ( ) <NEWLINE> sys . stdout . seek ( 0 ) <NEWLINE> out = sys . stdout . read ( ) [ : - 1 ] <NEWLINE> sys . stdout , sys . stdin = stdout , stdin <NEWLINE> self . assertEqual ( out , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_1 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_2 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> def resolve ( ) : <NEWLINE> <INDENT> N = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a . sort ( ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( N / 3 ) : <NEWLINE> <INDENT> a . pop ( ) <NEWLINE> a . pop ( 0 ) <NEWLINE> ans += a . pop ( ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> unittest . main ( ) <NEWLINE> <COMMENT> <NL> <DEDENT>
import sys <NEWLINE> import numpy as np <NEWLINE> <NL> read = sys . stdin . buffer . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> <NL> def graph_input ( N , M ) : <NEWLINE> <INDENT> G = [ [ ] for _ in range ( N + 1 ) ] <NEWLINE> for _ in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , readline ( ) . split ( ) ) <NEWLINE> G [ a ] . append ( b ) <NEWLINE> G [ b ] . append ( a ) <NEWLINE> <DEDENT> ind = np . cumsum ( list ( map ( len , G ) ) ) <NEWLINE> G = np . concatenate ( G ) . astype ( np . int32 ) <NEWLINE> return G , ind <NEWLINE> <NL> <DEDENT> def main ( N , G , ind , V , D , C ) : <NEWLINE> <COMMENT> <NL> <INDENT> dp = np . full ( ( N + 1 , 11 ) , - 1 , np . int32 ) <NEWLINE> for t in range ( len ( V ) ) : <NEWLINE> <INDENT> v , d = V [ t ] , D [ t ] <NEWLINE> dp [ v , d ] = t <NEWLINE> <DEDENT> for n in range ( 10 , 0 , - 1 ) : <NEWLINE> <INDENT> for v in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> dp [ v , n - 1 ] = max ( dp [ v , n - 1 ] , dp [ v , n ] ) <NEWLINE> for i in range ( ind [ v - 1 ] , ind [ v ] ) : <NEWLINE> <INDENT> w = G [ i ] <NEWLINE> dp [ w , n - 1 ] = max ( dp [ w , n - 1 ] , dp [ v , n ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> dp = dp [ : , 0 ] <NEWLINE> for v in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> t = dp [ v ] <NEWLINE> c = C [ t ] if t != - 1 else 0 <NEWLINE> print ( c ) <NEWLINE> <NL> <DEDENT> <DEDENT> signature = <STRING> <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <NEWLINE> <INDENT> from numba . pycc import CC <NEWLINE> cc = CC ( <STRING> ) <NEWLINE> cc . export ( <STRING> , signature ) ( main ) <NEWLINE> cc . compile ( ) <NEWLINE> <NL> <DEDENT> from my_module import main <NEWLINE> <NL> N , M = map ( int , readline ( ) . split ( ) ) <NEWLINE> G , ind = graph_input ( N , M ) <NEWLINE> Q = int ( readline ( ) ) <NEWLINE> nums = np . array ( read ( ) . split ( ) , np . int32 ) <NEWLINE> V = nums [ : : 3 ] <NEWLINE> D = nums [ 1 : : 3 ] <NEWLINE> C = nums [ 2 : : 3 ] <NEWLINE> <NL> main ( N , G , ind , V , D , C ) <NEWLINE>
a , b = map ( int , input ( ) ) <NEWLINE> <NL> print ( ( a + b ) % 24 ) <NEWLINE>
A , B = map ( int , iput ( ) . split ( ) ) <NEWLINE> <NL> if A + B >= 24 : <NEWLINE> <INDENT> print ( A + B - 24 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT>
import bisect <NEWLINE> <NL> N = int ( input ( ) ) <NEWLINE> A = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> B = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> C = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <NL> count = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> a_cand = bisect . bisect_right ( A , B [ i ] - 1 ) <NEWLINE> c_cand = N - bisect . bisect_right ( C , B [ i ] ) <NEWLINE> count += a_cand * c_cand <NEWLINE> <DEDENT> print ( count ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( max ( a + b , a + b - 24 ) <NEWLINE>
a , b = int ( input ( ) . split ( ) ) <NEWLINE> print ( ( a + b ) % 24 ) <NEWLINE>
A , B = map ( int , input ( ) ) <NEWLINE> print ( ( A + B ) % 24 ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( a + b ) if a + b >= 24 print ( a + b - 24 ) <NEWLINE>
A , B = input ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( ( A + B ) % 24 ) <NEWLINE>
x = sum ( list ( map ( int , input . split ( ) ) ) ) <NEWLINE> if x >= 24 : <NEWLINE> <INDENT> x -= 24 <NEWLINE> <DEDENT> print ( x ) <NEWLINE>
a . b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ( a + b ) % 24 ) <NEWLINE>
a , b = map ( int , input ( ) . splilt ( ) ) <NEWLINE> print ( ( a + b ) % 24 ) <NEWLINE>
A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> return A + B % 24 <NEWLINE>
a , b = map ( int , input ( ) . split ) <NEWLINE> print ( ( a + b ) % 24 ) <NEWLINE>
a , b , c , d = [ 0 ] * n , [ 0 ] * n , [ 0 ] * m , [ 0 ] * m <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a [ i ] , b [ i ] = map ( int , input ( ) . split ( ) ) <NEWLINE> <DEDENT> for i in range ( m ) : <NEWLINE> <INDENT> c [ i ] , d [ i ] = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <DEDENT> for i in range ( n ) : <NEWLINE> <INDENT> min_dist , min_c = abs ( a [ 0 ] - c [ 0 ] ) + abs ( b [ 0 ] - d [ 0 ] ) , 0 <NEWLINE> for j in range ( m ) : <NEWLINE> <INDENT> dist = abs ( a [ i ] - c [ j ] ) + abs ( b [ i ] - d [ j ] ) <NEWLINE> if dist < min_dist : <NEWLINE> <INDENT> min_dist = dist <NEWLINE> min_c = j <NEWLINE> <DEDENT> <DEDENT> print ( min_c + 1 ) <NEWLINE> <DEDENT>
N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> x = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] <NEWLINE> y = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( M ) ] <NEWLINE> for a , b in ab : <NEWLINE> <INDENT> z = [ abs ( a - c ) + abs ( b - d ) for c , d in cd ] <NEWLINE> print ( z . index ( min ( z ) ) + 1 ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> a_list = [ ] <NEWLINE> b_list = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> a_list . append ( a ) <NEWLINE> b_list . append ( b ) <NEWLINE> <DEDENT> c_list = [ ] <NEWLINE> d_list = [ ] <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> c_list . append ( c ) <NEWLINE> d_list . append ( d ) <NEWLINE> <DEDENT> for i in range ( n ) : <NEWLINE> <INDENT> min = 0 <NEWLINE> min_number = 0 <NEWLINE> for j in range ( m ) : <NEWLINE> <INDENT> d = abs ( a [ i ] - c [ j ] ) + abs ( b [ i ] - d [ j ] ) <NEWLINE> if d < min : <NEWLINE> <INDENT> min = d <NEWLINE> min_number = j <NEWLINE> <DEDENT> <DEDENT> print ( min_number ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ input ( ) . split ( ) for i in range ( n ) ] <NEWLINE> c = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> for j in range ( m ) : <NEWLINE> <INDENT> b = input ( ) . split ( ) <NEWLINE> c . append ( abs ( a [ i ] [ 0 ] - b [ 0 ] ) + abs ( a [ i ] [ 1 ] - b [ 1 ] ) ) <NEWLINE> <DEDENT> print ( c . index ( min ( c ) ) ) <NEWLINE> <NL> <NL> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> a_lis = [ list ( map ( int , input ( ) ) ) for i in range ( n ) ] <NEWLINE> c_lis = [ list ( map ( int , input ( ) ) ) for i in range ( m ) ] <NEWLINE> <NL> for i in range ( n ) : <NEWLINE> <INDENT> num = 0 <NEWLINE> ans = 10 ** 10 <NEWLINE> for j in reversed ( range ( m ) ) : <NEWLINE> <INDENT> a = a_lis [ i ] <NEWLINE> c = c_lis [ j ] <NEWLINE> num = abs ( a [ 0 ] - c [ 0 ] ) + abs ( a [ 1 ] - c [ 1 ] ) <NEWLINE> ans = min ( ans , num ) <NEWLINE> if num == ans : <NEWLINE> <INDENT> cnt = j + 1 <NEWLINE> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE> <DEDENT>
n , m = int ( input ( ) ) , 0 <NEWLINE> for i in range ( 1 , n ** .5 + 1 ) : <NEWLINE> <INDENT> if n % i == 0 : <NEWLINE> <INDENT> m = max ( m , i ) <NEWLINE> <DEDENT> <DEDENT> print ( len ( str ( n // m ) ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> ans = float ( <STRING> ) <NEWLINE> <NL> for i in range ( 1 , N ** 0.5 + 1 ) : <NEWLINE> <INDENT> if N % i == 0 : <NEWLINE> <INDENT> ans = min ( ans , len ( str ( N // i ) ) ) <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> for i in range ( int ( n ** 0.5 ) , 0 , - 1 ) : <NEWLINE> <INDENT> if n % i == 0 : <NEWLINE> <INDENT> a = max ( i , n // i ) <NEWLINE> print ( int ( math . log10 ( a ) ) + 1 ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
n = int ( input ( ) ) <NEWLINE> ans = 10 <NEWLINE> for i in range ( 1 , n / 2 + 1 ) : <NEWLINE> <INDENT> if n % i == 0 : <NEWLINE> <INDENT> if len ( str ( max ( i , n / i ) ) ) <= ans : <NEWLINE> <INDENT> ans = len ( str ( max ( i , n / i ) ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> ans = 100000 <NEWLINE> for i in range ( 1 , 2 * 10 ** 7 ) : <NEWLINE> <INDENT> if N % i == 0 : <NEWLINE> <INDENT> ans = min ( ans , max ( len ( str ( i ) ) , len ( str ( N // i ) ) ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import math <NEWLINE> <NL> N = int ( input ( ) ) <NEWLINE> <NL> def f ( a , b ) : <NEWLINE> <INDENT> if len ( str ( a ) ) < len ( str ( b ) ) : <NEWLINE> <INDENT> return len ( str ( b ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return len ( str ( a ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> ans = 100000000000 <NEWLINE> for i in range ( 1 , math . sqrt ( N ) + 1 ) : <NEWLINE> <INDENT> if N % i == 0 : <NEWLINE> <INDENT> ans = min ( ans , f ( i , N // i ) ) <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <NL>
n = int ( input ( ) ) <NEWLINE> <NL> for a in range ( 1 , n ** 0.5 + 1 ) : <NEWLINE> <INDENT> if n % a == 0 : <NEWLINE> <INDENT> b = n // a <NEWLINE> sa = str ( a ) <NEWLINE> sb = str ( b ) <NEWLINE> if a <= b : <NEWLINE> <INDENT> ans = len ( sb ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> ans = 111111111110 <NEWLINE> for i in range ( int ( N ** 0.5 + 2 ) ) : <NEWLINE> <INDENT> if N % i == 0 : <NEWLINE> <INDENT> use = N // i <NEWLINE> s = str ( use ) <NEWLINE> t = str ( i ) <NEWLINE> ans = min ( ans , max ( len ( s ) , len ( t ) ) ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> V = sorted ( [ int ( x ) for x in input ( ) . split ( ) ] , reverse = True ) <NEWLINE> from statistics import mean <NEWLINE> from math import comb <NEWLINE> maxmean = mean ( V [ : A ] ) <NEWLINE> way = 1 <NEWLINE> for i in range ( 1 , B + 1 - A ) : <NEWLINE> <INDENT> v = V . pop ( 0 ) <NEWLINE> if v != maxmean : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> if i > 0 : <NEWLINE> <INDENT> same = A + i <NEWLINE> for j in range ( A , same ) : <NEWLINE> <INDENT> way += comb ( same , j ) <NEWLINE> <DEDENT> <DEDENT> print ( maxmean ) <NEWLINE> print ( way ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == b == <STRING> or a == b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> <NL> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) : <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> print ( <STRING> if a = b = <STRING> or a = b = <STRING> else <STRING> ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == <STRING> : <NEWLINE> <INDENT> print ( b ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> <NL> d = { <STRING> : 0 , <STRING> : 1 } <NEWLINE> print ( [ <STRING> , <STRING> ] [ d [ a ] ^ d [ b ] ] <NEWLINE>
a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> if a == <STRING> and b == <STRING> or A == <STRING> and b = = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , _ , b = input ( ) . split ( ) <NEWLINE> print ( <STRING> [ a == b ] ) <NEWLINE>
a , b = input ( ) . split ( ) <NEWLINE> x = ( a == <STRING> ) <NEWLINE> y = ( b == <STRING> ) <NEWLINE> if x and y or not x and not y <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( input ( ) . split ( ) ) <NEWLINE> if ( a == <STRING> and b == <STRING> ) or ( a == <STRING> and b == <STRING> ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> <NL> print ( <STRING> if ( a == <STRING> ^ b == <STRING> ) else <STRING> ) <NEWLINE>
<COMMENT> <NL> a , b = input ( ) . split ( ) <NEWLINE> <COMMENT> <NL> if a = <STRING> : <NEWLINE> <INDENT> if b = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <COMMENT> <NL> <DEDENT> <DEDENT> elif a = <STRING> : <NEWLINE> <INDENT> if b = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <COMMENT> <NL> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> if a == H : <NEWLINE> <INDENT> if b == H : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> if a == D : <NEWLINE> <INDENT> if b == H : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
<COMMENT> <NL> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> if a == <STRING> and b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == <STRING> and b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == <STRING> and b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == <STRING> and b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> if a = b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> if a == <STRING> : <NEWLINE> <INDENT> if b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> elif a == <STRING> : <NEWLINE> <INDENT> if b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> <NL> if a == <STRING> <NEWLINE> <INDENT> if b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if b == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
a , b = map ( str , input ( ) . split ( ) ) <NEWLINE> if a = <STRING> : <NEWLINE> <INDENT> print ( b ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if b = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
W , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if b > a : <NEWLINE> <INDENT> if b - ( a + W ) == 0 : <NEWLINE> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> print ( b - ( a + W ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if a - ( b + W ) == 0 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> print ( a - ( b + W ) ) <NEWLINE> <DEDENT>
w , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if b + w < a : <NEWLINE> <INDENT> print ( a - ( b + w ) ) <NEWLINE> <DEDENT> elif a <= b + w <= a + w : <NEWLINE> <INDENT> print ( 0 ) : <NEWLINE> <DEDENT> elif a <= b <= a + w : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> elif a + w < b : <NEWLINE> <INDENT> print ( b - ( a + w ) ) <NEWLINE> <DEDENT>
w , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a + w < b : <NEWLINE> <INDENT> print ( b - a - w ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if a <= b + w and a + w >= b : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( a - b - w ) <NEWLINE> <DEDENT>
W , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a + W < b : <NEWLINE> <INDENT> print ( b - ( W + a ) ) : <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
W , a , b = map ( int , input ( ) ) <NEWLINE> print ( max ( max ( a , b ) - W - min ( a , b ) , 0 ) ) <NEWLINE>
W , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if ( a <= b <= a + W ) or ( a <= b + W <= a + W ) or : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if a + W < b : <NEWLINE> <INDENT> print ( abs ( b - ( a + W ) ) ) <NEWLINE> <DEDENT> elif b + W < a : <NEWLINE> <INDENT> print ( abs ( a - ( b + W ) ) ) <NEWLINE> <DEDENT> <DEDENT>
import sys <NEWLINE> import re <NEWLINE> from collections import deque , defaultdict , Counter <NEWLINE> from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians <NEWLINE> from itertools import accumulate , permutations , combinations , product <NEWLINE> from operator import itemgetter , mul <NEWLINE> from copy import deepcopy <NEWLINE> from string import ascii_lowercase , ascii_uppercase , digits <NEWLINE> from bisect import bisect , bisect_left <NEWLINE> from fractions import gcd <NEWLINE> from heapq import heappush , heappop <NEWLINE> from functools import reduce <NEWLINE> def input ( ) : return sys . stdin . readline ( ) . strip ( ) <NEWLINE> def INT ( ) : return int ( input ( ) ) <NEWLINE> def MAP ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> def LIST ( ) : return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> X = INT ( ) <NEWLINE> <NL> A = [ ] <NEWLINE> tmp = 0 <NEWLINE> for i in range ( 1 , X ) : <NEWLINE> <INDENT> tmp += i <NEWLINE> A . append ( tmp ) <NEWLINE> if tmp > X : <NEWLINE> <INDENT> break <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( 1 , len ( A ) + 1 ) : <NEWLINE> <INDENT> tmp += i <NEWLINE> if X <= A [ i ] : <NEWLINE> <INDENT> print ( i + 1 ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
x = int ( input ( ) ) <NEWLINE> s = 0 <NEWLINE> j = 0 <NEWLINE> for i in range ( 1. . x + 1 ) : <NEWLINE> <INDENT> s += i <NEWLINE> j += 1 <NEWLINE> if s >= x : <NEWLINE> <INDENT> print ( j ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
d = int ( input ( ) ) <NEWLINE> t = 0 <NEWLINE> while True : <NEWLINE> <INDENT> if t * ( t + 1 ) // 2 >= d : <NEWLINE> <INDENT> print ( t ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
import math <NEWLINE> n , c , k = map ( int , input ( ) . split ( ) ) <NEWLINE> t = [ 0 ] * n <NEWLINE> s = 0 <NEWLINE> a = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> t [ i ] = int ( input ( ) ) <NEWLINE> <INDENT> if i > 0 and a > 0 : <NEWLINE> <INDENT> if t [ i ] - t [ i - 1 ] <= k : <NEWLINE> <INDENT> s += ( a + n ) // c <NEWLINE> a = ( a + n ) % c <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> s += math . ceil ( ( a + n ) / c ) <NEWLINE> a = 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( s ) <NEWLINE>
N , C , K = map ( int , input ( ) . split ( ) ) <NEWLINE> T = list ( int ( input ( ) ) for i in range ( N ) ) <NEWLINE> T . sort ( ) <NEWLINE> bus = 1 <NEWLINE> passenger = 0 <NEWLINE> limit = T [ 0 ] + K <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if T [ i ] <= limit and passenger < c : <NEWLINE> <INDENT> passenger += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> bus += 1 <NEWLINE> limit = T [ i ] + K <NEWLINE> passenger = 1 <NEWLINE> <DEDENT> <DEDENT> print ( bus ) <NEWLINE>
import sys <NEWLINE> N , C , K = map ( int , input ( ) . split ( ) ) <NEWLINE> A = list ( map ( int , sys . stdin . readlines ( ) ) ) + [ 10 ** 10 ] <NEWLINE> A . sort ( ) <NEWLINE> a , c , t = 0 , 1 , a [ 0 ] + k <NEWLINE> for i in A [ 1 : ] : <NEWLINE> <INDENT> if i <= t and c < C : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t , c = i + K , 1 <NEWLINE> a += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( a ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <NL> ans = - 1 <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if a [ i ] * 2 < a [ i + 1 ] : <NEWLINE> <INDENT> ans = i <NEWLINE> <DEDENT> a [ i + 1 ] += a [ i ] <NEWLINE> <DEDENT> print ( n - ans - 1 ) <NEWLINE>
test <NEWLINE>
if n >= 15 : <NEWLINE> <INDENT> x = n * 800 <NEWLINE> y = ( n // 15 ) * 200 <NEWLINE> print ( x - y ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( n * 800 ) <NEWLINE> <DEDENT>
n = int , input ( ) <NEWLINE> k = int ( n / 15 ) <NEWLINE> x = 800 * n - 200 * k <NEWLINE> print ( x ) <NEWLINE>
<COMMENT> <NL> <NL> int main ( void ) { <NEWLINE> <INDENT> int N ; <NEWLINE> scanf ( <STRING> , & N ) ; <NEWLINE> int x = 800 * N ; <NEWLINE> int y = N / 15 * 200 ; <NEWLINE> int ans = x - y ; <NEWLINE> printf ( <STRING> , ans ) ; <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE>
n = int ( input ( ) ) <NEWLINE> print ( 800 * n - 200 * ( n // 15 ) <NEWLINE>
N = map ( int , input ( ) ) <NEWLINE> n = N // 15 <NEWLINE> x = 800 * N <NEWLINE> y = 200 * n <NEWLINE> <NL> print ( x - y ) <NEWLINE>
x = N * 800 <NEWLINE> y = ( N // 15 ) * 200 <NEWLINE> print ( x - y ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> meal_price = n * 15 <NEWLINE> meal_discount_count = n // 15 <NEWLINE> <NL> return meal_price - ( meal_discount_count * 200 ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> input ( x - 200 * ( x // 15 ) ) <NEWLINE>
<COMMENT> <NL> <NL> n = int ( N ) <NEWLINE> <NL> power = 1 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> power *= i <NEWLINE> power = power % ( 10 ** 9 + 7 ) <NEWLINE> <NL> <DEDENT> print ( power ) <NEWLINE>
import math <NEWLINE> x = int ( input ( ) ) <NEWLINE> a = 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 + 7 <NEWLINE> print ( math . fanctional ( x ) % a ) <NEWLINE>
print ( math . factorial ( int ( input ( ) ) ) ) <NEWLINE>
s = int ( input ( ) ) <NEWLINE> ans = 1 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> ans = ans % ( 10 ** 9 + 7 ) * i <NEWLINE> <NL> <NL> <DEDENT> print ( ans % ( 10 ** 9 + 7 ) ) <NEWLINE>
mycode = <STRING> <NEWLINE> import sys <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <COMMENT> <NEWLINE> <INDENT> with open ( <STRING> , <STRING> ) as f : <NEWLINE> <INDENT> f . write ( mycode ) <NEWLINE> <DEDENT> import os <NEWLINE> os . system ( <STRING> ) <NEWLINE> <NL> <DEDENT> import mycode <NEWLINE>
import math <NEWLINE> N = int ( input ( ) ) <NEWLINE> print ( factorial . ( N ) % ( 10 ** 9 + 7 ) ) <NEWLINE>
import math <NEWLINE> N = int ( input ( ) ) <NEWLINE> print ( math . factrial ( N ) % ( 10 ** 9 + 7 ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> power = 1 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> power *= i <NEWLINE> power = power % ( 10 ** 9 + 7 ) ) <NEWLINE> <NL> <DEDENT> print ( power % ( 10 ** 9 + 7 ) ) <NEWLINE>
print ( math . factorial ( int ( input ( ) ) ) % ( 10 ** 9 + 7 ) ) <NEWLINE>
import math <NEWLINE> n = int ( input ( ) ) <NEWLINE> print ( math . factrial ( n ) % ( 10 ** 9 + 7 ) ) <NEWLINE>
n , m = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> <NL> if n >= 2 * m : <NEWLINE> <INDENT> print ( m // 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( n + ( m - 2 * n ) // 2 ) <NEWLINE> <DEDENT> n , m = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> <NL> if n >= 2 * m : <NEWLINE> <INDENT> print ( m // 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( n + ( m - 2 * n ) // 4 ) <NEWLINE> <DEDENT>
import sys <NEWLINE> from collections import deque <NEWLINE> <NL> dic = { <STRING> : lambda s : 1 - ( s [ 1 ] ^ s [ 0 ] ) , <STRING> : lambda s : s [ 1 ] ^ s [ 0 ] } <NEWLINE> def mknseq ( ox , ld ) : <NEWLINE> <INDENT> for x in ld : <NEWLINE> <INDENT> x . append ( dic [ ox ] ( ( x [ - 2 ] , x [ - 1 ] ) ) ) <NEWLINE> <DEDENT> <DEDENT> def main ( ) : <NEWLINE> <INDENT> N = int ( sys . stdin . readline ( ) . strip ( ) ) <NEWLINE> s = list ( sys . stdin . readline ( ) . strip ( ) ) <NEWLINE> ans = [ deque ( [ x , y ] ) for x in range ( 2 ) for y in range ( 2 ) ] <NEWLINE> for x in range ( N ) : <NEWLINE> <INDENT> mknseq ( s [ x ] , ans ) <NEWLINE> <COMMENT> <NL> <DEDENT> for x in ans : <NEWLINE> <INDENT> if x [ : 2 ] == x [ - 2 : ] : <NEWLINE> <INDENT> return print ( <STRING> . join ( [ [ <STRING> , <STRING> ] [ i ] for i in x ] ) [ 1 : - 1 ] ) <NEWLINE> <DEDENT> <DEDENT> print ( - 1 ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> n1 = min ( N , M // 2 ) <NEWLINE> print ( ans + ( M - 2 * n1 ) // 4 ) <NEWLINE>
a = ( int ( input ( ) ) - 2 ) % 13 <NEWLINE> b = ( int ( input ( ) ) - 2 ) % 13 <NEWLINE> print ( [ <STRING> , <STRING> , <STRING> ] [ ( ( a == b ) + 1 ) * ( ( a < b ) - ( b < a ) ) ] ) <NEWLINE>
a , b = map ( int , input ( ) ) <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a > b and b != 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
Alice , Bob = map ( int , input ( ) . split ( ) ) <NEWLINE> if Alice = 1 : <NEWLINE> <INDENT> ALice = 14 <NEWLINE> <DEDENT> if Bob = 1 : <NEWLINE> <INDENT> Bob = 14 <NEWLINE> <DEDENT> if Alice > Bob : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif Alice == Bob : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) <NEWLINE> if a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == 1 or a > b >= 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b == 1 or b > a >= 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a < b : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> elif a == b : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a > b : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a = b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
lst = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if lst [ 0 ] > lst [ 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif lst [ 0 ] < lst [ 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
<NL> def main ( ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a - 2 < 0 : <NEWLINE> <INDENT> a = 14 <NEWLINE> <NL> <DEDENT> if b - 2 < 0 : <NEWLINE> <INDENT> b = 14 i <NEWLINE> <NL> <DEDENT> if a - 2 > b - 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a - 2 < b - 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <NL> <DEDENT>
tmp = input ( ) . split ( <STRING> ) <NEWLINE> a = ( int ( tmp [ 0 ] ) - 2 ) % 13 <NEWLINE> b = ( int ( tmp [ 1 ] ) - 2 ) % 13 <NEWLINE> print ( <STRING> ) if a > b else print ( <STRING> ) if a = b else print ( <STRING> ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a > b and b != 1 or a == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import sys <NEWLINE> A , B = map ( int , input . split ( ) ) <NEWLINE> if A < 0 or A > 13 or B < 0 or B > 13 : <NEWLINE> <INDENT> sys . exit ( ) <NEWLINE> <NL> <DEDENT> if A == 1 or B == 1 : <NEWLINE> <INDENT> if A == B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif A == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif B == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> sys . exit ( ) <NEWLINE> <NL> <DEDENT> if A > B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif B > A : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> if a == 1 : <NEWLINE> <INDENT> a = 14 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> if b == 1 : <NEWLINE> <INDENT> b = 14 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
import itertools <NEWLINE> N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> L = [ ] <NEWLINE> for i in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> L . append ( [ a , b ] ) <NEWLINE> <NL> <DEDENT> number = [ ] <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> number . append ( i ) <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> <NL> for v in itertools . permutations ( number , N ) : <NEWLINE> <INDENT> a = 0 <NEWLINE> v = list ( v ) <NEWLINE> for j in range ( N - 1 ) : <NEWLINE> <INDENT> if ( [ v [ j ] , v [ j + 1 ] ] not in L ) and ( [ v [ j + 1 ] , v [ j ] ] not in L ) : <NEWLINE> <INDENT> a = 1 <NEWLINE> <DEDENT> <DEDENT> if a == 0 and v [ 0 ] == 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if a > b or a = 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b > a or b = 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B = map ( int , input ( ) ) <NEWLINE> <NL> func = lambda x : ( x , x + 13 ) [ x == 1 ] <NEWLINE> <NL> if func ( A ) == func ( B ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif func ( A ) < func ( B ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == 1 and b != 1 or a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b == 1 and a != 1 or b > a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> if A == B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif A == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif B == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif A > B : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE>
a , b = map ( int ( input ( ) . split ( ) ) ) <NEWLINE> <NL> a = 14 if a == 1 else a <NEWLINE> b = 14 if b == 1 else b <NEWLINE> <NL> if a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> ab = [ [ ] for _ in range ( N ) ] <NEWLINE> <NL> for _ in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> ab [ a - 1 ] . append ( b - 1 ) <NEWLINE> ab [ b - 1 ] . append ( a - 1 ) <NEWLINE> <NL> <DEDENT> count = 0 <NEWLINE> <NL> def dfs ( i , now , done ) : <NEWLINE> <INDENT> global count <NEWLINE> if i == N - 1 : <NEWLINE> <INDENT> count += 1 <NEWLINE> return <NEWLINE> <NL> <DEDENT> for j in ab [ now ] : <NEWLINE> <INDENT> if j not in done : <NEWLINE> <INDENT> dfs ( i + 1 , j , done + [ j ] ) <NEWLINE> <DEDENT> <DEDENT> return <NEWLINE> <NL> <DEDENT> dfs ( 0 , 0 , [ 0 ] ) <NEWLINE> print ( count ) <NEWLINE>
from collections import defaultdict <NEWLINE> n , m = map ( lambda x : int ( x ) , input ( ) . split ( ) ) <NEWLINE> <NL> links = defaultdict ( set ) <NEWLINE> <NL> for _ in range ( m ) : <NEWLINE> <INDENT> a , b = map ( lambda x : int ( x ) , input ( ) . split ( ) ) <NEWLINE> links [ a ] . add ( b ) <NEWLINE> links [ b ] . add ( a ) <NEWLINE> <NL> <DEDENT> path_counter = 0 <NEWLINE> <NL> def path_patterns_number ( current_node , remaining_nodes ) : <COMMENT> <NEWLINE> <COMMENT> <NL> <INDENT> if len ( remaining_nodes ) == 0 : <NEWLINE> <INDENT> return 1 <NEWLINE> <NL> <DEDENT> patterns = 0 <NEWLINE> <NL> for next_node in ( links [ current_node ] & remaining_nodes ) : <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <INDENT> patterns += path_patterns_number ( <NEWLINE> <INDENT> next_node , <NEWLINE> remaining_nodes . copy ( ) - { next_node } <NEWLINE> <COMMENT> <NL> <DEDENT> ) <NEWLINE> <NL> <DEDENT> return patterns <NEWLINE> <NL> <DEDENT> print ( path_patterns_number ( 1 , set ( range ( 2 , n + 1 ) ) ) <COMMENT> <NEWLINE>
<COMMENT> <NL> import numpy as np <NEWLINE> <NL> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> graph = [ [ ] for j in range ( n ) ] <NEWLINE> graph = np . array ( graph ) <NEWLINE> <NL> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> graph [ a - 1 ] . append ( b - 1 ) <NEWLINE> graph [ b - 1 ] . append ( a - 1 ) <NEWLINE> <NL> <DEDENT> used = [ False ] * n <NEWLINE> used [ 0 ] = True <NEWLINE> <NL> def DFS ( v , used ) : <NEWLINE> <INDENT> if all ( used ) : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> ans = 0 <NEWLINE> for i in graph ( v ) : <NEWLINE> <INDENT> if used [ i ] : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> used [ i ] = True <NEWLINE> ans += DFS ( i , used ) <NEWLINE> used [ i ] = False <NEWLINE> <DEDENT> return ans <NEWLINE> <NL> <DEDENT> print ( DFS ( 0 , used ) ) <NEWLINE>
N , M = map ( int , input . split ( ) ) <NEWLINE> <NL> <NL> <COMMENT> <NL> edges = { i : [ ] for i in range ( 1 , N + 1 ) } <NEWLINE> for i in range ( M ) : <NEWLINE> <INDENT> a , b = [ int ( a ) for a in input ( ) . split ( ) ] <NEWLINE> edges [ a ] . append ( b ) <NEWLINE> edges [ b ] . append ( a ) <NEWLINE> <NL> <NL> <COMMENT> <NL> <DEDENT> def dfs ( list ) : <NEWLINE> <COMMENT> <NL> <INDENT> if len ( list ) == N : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a = list [ - 1 ] <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> next = [ n for n in edges [ a ] if n not in list ] <NEWLINE> <COMMENT> <NL> if len ( next ) == 0 : <NEWLINE> <INDENT> return 0 <NEWLINE> <NL> <DEDENT> total = 0 <NEWLINE> <COMMENT> <NL> for n in next : <NEWLINE> <INDENT> total += dfs ( list + [ n ] ) <NEWLINE> <NL> <DEDENT> return total <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> ans = dfs ( [ 1 ] ) <NEWLINE> <NL> print ( ans ) <NEWLINE>
<NL> <COMMENT> <NL> <NL> N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> graph = [ ] <NEWLINE> for _ in range ( N + 1 ) : <NEWLINE> <INDENT> graph . append ( [ ] ) <NEWLINE> <NL> <DEDENT> for _ in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> graph [ a ] . append ( b ) <NEWLINE> graph [ b ] . append ( a ) <NEWLINE> <NL> <DEDENT> visited = [ ] <NEWLINE> for _ in range ( N + 1 ) : <NEWLINE> <INDENT> visited . append ( False ) <NEWLINE> <NL> <NL> <DEDENT> def dfs ( dep , cur ) : <NEWLINE> <INDENT> global N , visited , graph <NEWLINE> <NL> if dep == N : <NEWLINE> <INDENT> ans += 1 <NEWLINE> return 1 <NEWLINE> <NL> ans = 0 <NEWLINE> <NL> <DEDENT> for dist in graph [ cur ] : <NEWLINE> <INDENT> if visited [ dist ] == False : <NEWLINE> <INDENT> visited [ dist ] = True <NEWLINE> ans += dfs ( dep + 1 , dist ) <NEWLINE> visited [ dist ] = False <NEWLINE> <DEDENT> <DEDENT> return ans <NEWLINE> <NL> visited [ 1 ] = True <NEWLINE> dfs ( 1 , 1 ) <NEWLINE> print ( ans ) <NEWLINE> <DEDENT>
import itertools <NEWLINE> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> path = [ [ False ] * n for i in range ( n ) ] <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> a -= 1 <NEWLINE> b -= 1 <NEWLINE> path [ a ] [ b ] = True <NEWLINE> path [ b ] [ a ] = True <NEWLINE> <DEDENT> ans = 0 <NEWLINE> for i itertools . permutations ( range ( n ) , n ) : <NEWLINE> <INDENT> if i [ 0 ] == 0 : <NEWLINE> <INDENT> for j in range ( n ) : <NEWLINE> <INDENT> if j == n - 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> break <NEWLINE> <DEDENT> if not path [ i [ j ] ] [ i [ j + 1 ] ] : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import itertools <NEWLINE> from math import factorial as fa <NEWLINE> P = itertools . permutations ( list ( range ( n ) ) ) <NEWLINE> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> G = [ set ( ) for _ in range ( n ) ] <NEWLINE> for _ in range ( m ) : <NEWLINE> <INDENT> a , b = map ( lambda x : int ( x ) - 1 , input ( ) . split ( ) ) <NEWLINE> G [ a ] . add ( b ) <NEWLINE> G [ b ] . add ( a ) <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> for _ in range ( fa ( n ) ) : <NEWLINE> <INDENT> p = next ( P ) <NEWLINE> if p [ 0 ] != 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> f = True <NEWLINE> for pnw , pnx in zip ( p , p [ 1 : ] ) : <NEWLINE> <INDENT> if not pnx in G [ pnw ] : <NEWLINE> <INDENT> f = False <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if f : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import itertools as it <NEWLINE> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> path = { [ ] for _ in range ( m ) } <NEWLINE> for i in range ( m ) : path [ i ] = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ls = list ( it . permutations ( range ( 1 , n + 1 ) ) ) <NEWLINE> cnt = 0 <NEWLINE> for l in ls : <NEWLINE> <INDENT> if l [ 0 ] == 1 : break <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if [ i , i + 1 ] in path : cnt += 1 <NEWLINE> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( m ) ] <NEWLINE> <NL> c = [ i for i in range ( 2 , n + 1 ) ] <NEWLINE> b = [ ] <NEWLINE> for x in itertools . permutations ( c ) : <NEWLINE> <INDENT> b . append ( [ 1 ] + list ( x ) ) <NEWLINE> <NL> <DEDENT> cnt = 0 <NEWLINE> for x in b : <NEWLINE> <INDENT> exist = True <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> if not sorted ( x [ i : i + 2 ] ) in a : <NEWLINE> <INDENT> exist = False <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> if exist : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE>
import itertools <NEWLINE> N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> edges = { tuplec ( sorted ( map ( int , input ( ) . split ( ) ) ) ) for i in range ( M ) } <NEWLINE> ans = 0 <NEWLINE> for i in itertools . permutations ( range ( 2 , N + 1 ) , N - 1 ) : <NEWLINE> <INDENT> l = [ 1 ] + list ( i ) <NEWLINE> ans += sum ( 1 for edge in zip ( l , l [ 1 : ] ) if tuple ( sorted ( edge ) ) in edges ) == N - 1 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
from sys import setrecursionlimit <NEWLINE> setrecursionlimit ( 10 ** 10 ) <NEWLINE> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> P = [ [ ] for i in range ( m ) ] <COMMENT> <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> a , b = a - 1 , b - 1 <NEWLINE> P [ a ] . append ( b ) <NEWLINE> P [ b ] . append ( a ) <NEWLINE> <COMMENT> <NL> <NL> <DEDENT> c = 0 <COMMENT> <NEWLINE> R = [ 0 for i in range ( m ) ] <COMMENT> <NEWLINE> tm = 1 <COMMENT> <NEWLINE> <NL> def all_search_dfs ( c : int , tm : int , R : list ) : <NEWLINE> <INDENT> if R [ c ] == 0 : <NEWLINE> <INDENT> R [ c ] = 1 <NEWLINE> if tm < n : <NEWLINE> <INDENT> return point_calculate ( c , tm , R ) <NEWLINE> <DEDENT> elif tm == n : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> return 0 <NEWLINE> <NL> <DEDENT> <DEDENT> def point_calculate ( c : int , tm : int , R : list ) : <NEWLINE> <COMMENT> <NL> <INDENT> p = 0 <NEWLINE> <COMMENT> <NL> for i in range ( len ( P [ c ] ) ) : <NEWLINE> <INDENT> R2 = R [ : ] <NEWLINE> <COMMENT> <NL> tmp = all_search_dfs ( P [ c ] [ i ] , tm + 1 , R2 ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> p += tmp <NEWLINE> <COMMENT> <NL> <DEDENT> return p <NEWLINE> <NL> <DEDENT> print ( all_search_dfs ( c , tm , R ) ) <NEWLINE>
N , M = map ( int , input ( ) , aplit ( ) ) <NEWLINE> <NL> path = [ [ ] for i in range ( N ) ] <NEWLINE> <NL> for _ in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) , split ( ) ) <NEWLINE> path [ a - 1 ] , append ( b - 1 ) <NEWLINE> <INDENT> path [ b - 1 ] , append ( a - 1 ) <NEWLINE> <DEDENT> <DEDENT> vis = [ 0 for i in range ( N ) ] <NEWLINE> cnt = 0 <NEWLINE> <NL> def dfs ( now , path ) : <NEWLINE> <INDENT> global cnt <NEWLINE> <INDENT> if depth == N : cnt += 1 <NEWLINE> <DEDENT> for new in path [ now ] : <NEWLINE> <INDENT> if vis [ new ] == 0 : <NEWLINE> vis [ new ] = 1 <NEWLINE> <INDENT> dfs ( new , depth + 1 ) <NEWLINE> <INDENT> vis [ new ] = 0 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> vis [ 0 ] = 1 <NEWLINE> dfs ( 0 , 1 ) <NEWLINE> print ( cnt ) <NEWLINE>
import itertools <NEWLINE> N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> L = [ ] <NEWLINE> for i in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> L . append ( [ a , b ] ) <NEWLINE> <NL> <DEDENT> number = [ ] <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> number . append ( i ) <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> <NL> for v in itertools . permutations ( number , N ) : <NEWLINE> <INDENT> a = 0 <NEWLINE> v = list ( v ) <NEWLINE> for j in range ( N - 1 ) : <NEWLINE> <INDENT> if ( [ v [ j ] , v [ j + 1 ] ] not in L ) and ( [ v [ j + 1 ] , v [ j ] ] not in L ) : <NEWLINE> <INDENT> a = 1 <NEWLINE> <DEDENT> <DEDENT> if a == 0 and v [ 0 ] == 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> import itertools <NEWLINE> N , M = map ( int , input ( ) . split ( ) ) <NEWLINE> L = [ ] <NEWLINE> for i in range ( M ) : <NEWLINE> <INDENT> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> L . append ( [ a , b ] ) <NEWLINE> <NL> <DEDENT> number = [ ] <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> number . append ( i ) <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> <NL> for v in itertools . permutations ( number , N ) : <NEWLINE> <INDENT> a = 0 <NEWLINE> v = list ( v ) <NEWLINE> for j in range ( N - 1 ) : <NEWLINE> <INDENT> if ( [ v [ j ] , v [ j + 1 ] ] not in L ) and ( [ v [ j + 1 ] , v [ j ] ] not in L ) : <NEWLINE> <INDENT> a = 1 <NEWLINE> <DEDENT> <DEDENT> if a == 0 and v [ 0 ] == 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a = [ i if i % 2 == 1 else None for i in a ] <NEWLINE> if a . count ( ) % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> import sys <NEWLINE> from io import StringIO <NEWLINE> import unittest <NEWLINE> <NL> <NL> class TestClass ( unittest . TestCase ) : <NEWLINE> <INDENT> def assertIO ( self , input , output ) : <NEWLINE> <INDENT> stdout , stdin = sys . stdout , sys . stdin <NEWLINE> sys . stdout , sys . stdin = StringIO ( ) , StringIO ( input ) <NEWLINE> resolve ( ) <NEWLINE> sys . stdout . seek ( 0 ) <NEWLINE> out = sys . stdout . read ( ) [ : - 1 ] <NEWLINE> sys . stdout , sys . stdin = stdout , stdin <NEWLINE> self . assertEqual ( out , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_1 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_2 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> def resolve ( ) : <NEWLINE> <INDENT> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> e = 0 <NEWLINE> o = 0 <NEWLINE> for a in A : <NEWLINE> <INDENT> if a % 2 == 0 : <NEWLINE> <INDENT> e += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> o += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if o % 2 == 0 : <NEWLINE> <INDENT> if ( o // 2 + e ) % 2 == 0 : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <COMMENT> <NL> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
X = ( int ( x ) for x in input ( ) . split ( ) ) <NEWLINE> if X > 1200 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ) <NEWLINE> if n < 1200 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
input_line = int ( input ( ) ) <NEWLINE> <NL> if input_line >= 1200 <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x = int , input ( ) <NEWLINE> if x < 1200 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x = int ( inptu ( ) ) <NEWLINE> <NL> if x < 1200 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
print ( <STRING> if x = int ( input ( ) ) < 1200 else <STRING> ) <NEWLINE>
x = input ( ) <NEWLINE> if x < 1200 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
print ( <STRING> if input ( ) < 1200 else <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> a = 0 <NEWLINE> b = 0 <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> a = i <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> for i in range ( len ( s ) , - 1 , - 1 ) : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> b = i <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> print ( b - a + 1 ) <NEWLINE>
sample = input ( ) <NEWLINE> new = [ ] <NEWLINE> for i in sample : <NEWLINE> <INDENT> new . append ( i ) <NEWLINE> <DEDENT> if <STRING> in new : <NEWLINE> <INDENT> a_pos = list . index ( new ) <NEWLINE> <DEDENT> if <STRING> in new : <NEWLINE> <INDENT> z_pos = list . index ( new ) <NEWLINE> <DEDENT> if a_post < z_pos : <NEWLINE> <INDENT> out = new [ a_pos : ( z_pos + 1 ) ] <NEWLINE> <NL> <DEDENT> new_string = <STRING> <NEWLINE> for j in out : <NEWLINE> <INDENT> new_string += j <NEWLINE> <DEDENT> print ( len ( new_string ) ) <NEWLINE>
s = input ( ) <NEWLINE> <NL> ds = list ( s ) <NEWLINE> <NL> <NL> c1 = 0 <NEWLINE> while ds [ c1 ] != <STRING> <NEWLINE> <INDENT> c1 += 1 <NEWLINE> <NL> <DEDENT> c2 = - 1 <NEWLINE> while ds [ c2 ] != <STRING> : <NEWLINE> <INDENT> c2 -= 1 <NEWLINE> <NL> <DEDENT> print ( len ( s [ c1 : c2 ] ) ) <NEWLINE>
n = input ( ) <NEWLINE> a = n . index ( <STRING> ) <NEWLINE> n = len ( n ) - n [ : : - 1 ] . index ( <STRING> ) - 1 <NEWLINE> print ( len ( n [ a : n + 1 ] ) ) <NEWLINE>
ZABCZ <NEWLINE>
s = input ( ) <NEWLINE> a_min = 0 <NEWLINE> z_max = 0 <NEWLINE> for i in s : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> a_min = i <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> for i in s : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> z_max = i <NEWLINE> <DEDENT> <DEDENT> print ( z_max - a_min + 1 ) <NEWLINE>
s = input <NEWLINE> <NL> a = s . find ( <STRING> ) <NEWLINE> z = s . rfind ( <STRING> ) <NEWLINE> <NL> print ( z - a ) <NEWLINE>
<COMMENT> <NL> // Begin Header { { { <NEWLINE> using namespace std ; <NEWLINE> using ll = long long ; <NEWLINE> using P = pair < ll , ll > ; <NEWLINE> using Graph = vector < vector < ll >> ; <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> constexpr int INF = 0x3f3f3f3f ; <NEWLINE> const long long mod = 1e9 + 7 ; <NEWLINE> const long double PI = acos ( - 1 ) ; <NEWLINE> // } } } End Header <NEWLINE> int main ( ) { <NEWLINE> <INDENT> string s ; <NEWLINE> cin >> s ; <NEWLINE> int f1 , f2 ; <NEWLINE> rep ( i , s . length ( ) ) { <NEWLINE> <INDENT> if ( s [ i ] == <STRING> ) { <NEWLINE> <INDENT> f1 = i ; <NEWLINE> break ; <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE> rep ( i , s . length ( ) ) { <NEWLINE> <INDENT> if ( s [ i ] == <STRING> ) f2 = i ; <NEWLINE> <DEDENT> } <NEWLINE> cout << f2 - f1 + 1 << endl ; <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE>
s = input ( ) <NEWLINE> <NL> posA = 0 <NEWLINE> posZ = 0 <NEWLINE> <NL> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> posA = i <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> for j in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ - j - 1 ] == <STRING> : <NEWLINE> <INDENT> posZ = N - 1 - j <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> print ( posZ - posA + 1 ) <NEWLINE>
<COMMENT> <NL> <NL> x = int ( input ( ) ) <NEWLINE> q = x // 11 <NEWLINE> r = x % 11 <NEWLINE> if r == 0 : <NEWLINE> <INDENT> ans = q * 2 <NEWLINE> <DEDENT> elif 1 <= r <= 5 : <NEWLINE> <INDENT> ans = q * 2 + 1 <NEWLINE> <DEDENT> elif 6 <= ans <= 10 : <NEWLINE> <INDENT> ans = q * 2 + 2 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
x = int ( input ( ) ) <NEWLINE> <NL> p = x // 11 <NEWLINE> q = x % 11 <NEWLINE> q2 = q - 6 <NEWLINE> <NL> if q == 0 <NEWLINE> <INDENT> print ( 2 * p ) <NEWLINE> <DEDENT> elif q2 < 0 : <NEWLINE> <INDENT> print ( 2 * p + 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 2 * p + 2 ) <NEWLINE> <DEDENT>
print ( ( 2 * input ( ) - 2 ) // 11 + 1 ) <NEWLINE>
from collections import Counter <NEWLINE> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> <COMMENT> <NL> l_a = len ( a ) <NEWLINE> if ( l_a % 2 == 0 ) : <NEWLINE> <INDENT> print ( l_a - 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( l_a ) <NEWLINE> <DEDENT>
import sys <NEWLINE> import math <NEWLINE> N = int ( input ( ) ) <NEWLINE> array = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> set_array = set ( array ) <NEWLINE> <NL> if not ( 3 <= N <= 10 ** 5 and N % 2 == 1 ) : sys . exit ( ) <NEWLINE> if len ( array ) == len ( list ( set_array ) ) : print ( 0 ) ; sys . exit ( ) <NEWLINE> <NL> print ( len ( list ( set_array ) ) ) if len ( list ( set_array ) ) % 2 == 1 else print ( len ( list ( set_array ) - 1 ) ) <NEWLINE>
x = input ( ) <NEWLINE> y = x % 11 <NEWLINE> if y > 0 : <NEWLINE> <INDENT> cnt = 1 <NEWLINE> if y > 6 : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> <NL> <DEDENT> print ( x // 11 + cnt ) <NEWLINE>
import collections as col <NEWLINE> <NL> N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> m = col . Counter ( A ) <NEWLINE> ans = len ( m ) if m % 2 == 1 else len ( m ) - 1 <NEWLINE> print ( ans ) <NEWLINE> <NL>
import sys <NEWLINE> import numpy as np <NEWLINE> import numba <NEWLINE> from numba import njit , b1 , i4 , i8 <NEWLINE> from numba . types import Omitted <NEWLINE> <NL> read = sys . stdin . buffer . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> <NL> MOD = 1_000_000_007 <NEWLINE> <NL> @ njit ( ( i8 , i8 ) , cache = True ) <NEWLINE> def main ( N , K ) : <NEWLINE> <INDENT> K -= 1 <NEWLINE> U = 5000 <NEWLINE> C = np . zeros ( ( U , U ) , np . int64 ) <NEWLINE> C [ 0 , 0 ] = 1 <NEWLINE> for n in range ( 1 , U ) : <NEWLINE> <INDENT> C [ n ] += C [ n - 1 ] <NEWLINE> C [ n , 1 : ] += C [ n - 1 , : - 1 ] <NEWLINE> C [ n ] %= MOD <NEWLINE> <NL> <DEDENT> dp = np . zeros ( ( N + 10 , N + 10 ) , np . int64 ) <NEWLINE> dp [ 0 , 0 ] = 1 <NEWLINE> for n in range ( 1 , N + 10 ) : <NEWLINE> <INDENT> dp [ n , n ] = ( dp [ n - 1 , n - 1 ] + dp [ n - 1 , n ] ) % MOD <NEWLINE> for m in range ( n + 1 , N + 10 ) : <NEWLINE> <INDENT> dp [ n , m ] = ( dp [ n - 1 , m ] + dp [ n , m - 1 ] ) % MOD <NEWLINE> <DEDENT> <DEDENT> for n in range ( N + 9 , 0 , - 1 ) : <NEWLINE> <INDENT> dp [ n ] -= dp [ n - 1 ] <NEWLINE> dp [ n ] %= MOD <NEWLINE> <DEDENT> ans = 0 <NEWLINE> if K == N - 1 : <NEWLINE> <INDENT> return dp [ : N , N - 1 ] . sum ( ) % MOD <NEWLINE> <DEDENT> for r in range ( N - K , N + 1 ) : <NEWLINE> <INDENT> x = C [ r - 2 , N - K - 2 ] <NEWLINE> a = N - r <NEWLINE> b = K - a <NEWLINE> if b == 0 : <NEWLINE> <INDENT> x = x * ( dp [ : a + 1 , a ] . sum ( ) % MOD ) % MOD <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> x *= ( dp [ 1 : a + 2 , a + 1 ] * C [ b - 1 : a + b , b - 1 ] [ : : - 1 ] % <NEWLINE> <INDENT> MOD ) . sum ( ) % MOD <NEWLINE> <DEDENT> x %= MOD <NEWLINE> <DEDENT> ans += x <NEWLINE> <DEDENT> ans %= MOD <NEWLINE> for i in range ( N - K - 2 ) : <NEWLINE> <INDENT> ans = ans * 2 % MOD <NEWLINE> <DEDENT> return ans % MOD <NEWLINE> <NL> <DEDENT> N , K = map ( int , read ( ) . split ( ) ) <NEWLINE> print ( main ( N , K ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = [ map ( int , input ( ) . split ( ) ) for _ in range ( N ) ] <NEWLINE> <NL> r = 0 <NEWLINE> for i in range ( N - 1 , - 1 , - 1 ) : <NEWLINE> <INDENT> a , b = A [ i ] <NEWLINE> a += r <NEWLINE> r += - ( - a // b ) * A [ i ] [ 1 ] - a <NEWLINE> <DEDENT> print ( r ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> Array = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> Array . append ( tuple ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <NL> <DEDENT> res = 0 <NEWLINE> for i in reversed ( range ( N ) ) : <NEWLINE> <INDENT> a , b = Array [ i ] <NEWLINE> a += res <NEWLINE> res + = b - a % b <NEWLINE> <DEDENT> print ( res ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = [ ] <NEWLINE> b = [ ] <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a . append ( l [ 0 ] ) <NEWLINE> b . append ( l [ 1 ] ) <NEWLINE> c = 0 <NEWLINE> <DEDENT> for i in range ( n - 1 , - 1 , - 1 ) : <NEWLINE> <INDENT> if ( a [ i ] + c ) % b [ i ] != 0 : <NEWLINE> <INDENT> c += ( b [ i ] - ( a [ i ] + c ) % b [ i ] ) <NEWLINE> <DEDENT> <DEDENT> print ( c ) <NEWLINE>
import sys <NEWLINE> import numpy as np <NEWLINE> <NL> read = sys . stdin . buffer . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> <NL> MOD = 10 ** 9 + 7 <NEWLINE> <NL> def main ( N , A , B , S ) : <NEWLINE> <INDENT> if A > B : <NEWLINE> <INDENT> A , B = B , A <NEWLINE> <DEDENT> if np . max ( S [ 2 : ] - S [ : - 2 ] ) < A : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> INF = 1 << 62 <NEWLINE> S = np . append ( S , INF ) <NEWLINE> <COMMENT> <NL> X = np . zeros_like ( S ) <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> if S [ i ] - S [ i - 1 ] >= A : <NEWLINE> <INDENT> X [ i ] = X [ i - 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> X [ i ] = i <NEWLINE> <COMMENT> <NL> <DEDENT> <DEDENT> Y = np . searchsorted ( S , S - B , side = <STRING> ) - 1 <NEWLINE> dp = np . zeros_like ( S ) <NEWLINE> dp_cum = np . zeros_like ( S ) <NEWLINE> <NL> dp [ 0 ] = 1 <NEWLINE> dp_cum [ 0 ] = 1 <NEWLINE> for n in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> if X [ n - 1 ] == 0 : <NEWLINE> <COMMENT> <NL> <INDENT> dp [ n ] = 1 <NEWLINE> <COMMENT> <NL> <DEDENT> l , r = max ( 0 , X [ n - 1 ] - 1 ) , min ( n - 1 , Y [ n ] ) <NEWLINE> if l <= r : <NEWLINE> <INDENT> dp [ n ] += dp_cum [ r ] - dp_cum [ l ] + dp [ l ] <NEWLINE> <DEDENT> dp [ n ] %= MOD <NEWLINE> dp_cum [ n ] = ( dp_cum [ n - 1 ] + dp [ n ] ) % MOD <NEWLINE> <DEDENT> return dp [ - 1 ] <NEWLINE> <NL> <DEDENT> signature = <STRING> <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <NEWLINE> <INDENT> from numba . pycc import CC <NEWLINE> cc = CC ( <STRING> ) <NEWLINE> cc . export ( <STRING> , signature ) ( main ) <NEWLINE> cc . compile ( ) <NEWLINE> <NL> <DEDENT> from my_module import main <NEWLINE> <NL> N , A , B = map ( int , readline ( ) . split ( ) ) <NEWLINE> S = np . array ( read ( ) . split ( ) , np . int64 ) <NEWLINE> <NL> print ( main ( N , A , B , S ) ) <NEWLINE>
a = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> b = a [ 0 ] * a [ 1 ] <NEWLINE> c = a [ 2 ] * a [ 3 ] <NEWLINE> A = [ b , c ] <NEWLINE> print ( max ( A ) ) <NEWLINE>
<NL> def main ( ) : <NEWLINE> <INDENT> a , b , c , d = map ( int , input ( ) ) <NEWLINE> if a * b >= c * d : <NEWLINE> <INDENT> print ( a * b ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( c * d ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
a , b , c , b = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( max ( a * b , c * d ) ) <NEWLINE>
a , b , c , d = int ( input ( ) . split ( ) ) <NEWLINE> x = a * b <NEWLINE> y = c * d <NEWLINE> if x == y : <NEWLINE> <INDENT> print ( x ) <NEWLINE> <DEDENT> elif x > y : <NEWLINE> <INDENT> print ( x ) <NEWLINE> <DEDENT> elif y > x : <NEWLINE> <INDENT> print ( y ) <NEWLINE> <DEDENT>
a , , b , c , d = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( max ( a * b , c * d ) ) <NEWLINE>
<COMMENT> <NL> <NL> <COMMENT> <NL> A = int ( input ( ) ) <NEWLINE> B = int ( input ( ) ) <NEWLINE> C = int ( input ( ) ) <NEWLINE> D = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> <NL> menseki1 = A * B <NEWLINE> print ( menseki1 ) <NEWLINE> menseki2 = C * D <NEWLINE> print ( menseki2 ) <NEWLINE> <NL> if menseki1 > menseki2 : <NEWLINE> <INDENT> print ( menseki1 ) <NEWLINE> <NL> <DEDENT> elif menseki1 < menseki2 : <NEWLINE> <INDENT> print ( menseki2 ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( menseki1 ) <NEWLINE> <DEDENT>
S1 = int ( input ( ) ) <NEWLINE> S2 = int ( input ( ) ) <NEWLINE> <NL> if S1 > S2 : <NEWLINE> <INDENT> print ( S1 ) <NEWLINE> <DEDENT> elif S1 == S2 : <NEWLINE> <INDENT> print ( S1 * S2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( S2 ) <NEWLINE> <DEDENT>
<COMMENT> <NL> A = int ( input ( ) ) <NEWLINE> B = int ( input ( ) ) <NEWLINE> C = int ( input ( ) ) <NEWLINE> D = int ( input ( ) ) <NEWLINE> if A * B > c * D : <NEWLINE> <INDENT> print ( A * B ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( C * D ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> s = input ( ) <NEWLINE> x = 0 <NEWLINE> for i in s : <NEWLINE> <INDENT> if i = <STRING> : <NEWLINE> <INDENT> x = max ( x , x + 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> x = max ( x , x - 1 ) <NEWLINE> <DEDENT> <DEDENT> print ( x ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> S = input ( ) . split ( ) <NEWLINE> x = 0 <NEWLINE> <NL> for N in S : <NEWLINE> <INDENT> if S [ N ] == <STRING> : <NEWLINE> <INDENT> x += 1 <NEWLINE> <DEDENT> elif S [ N ] == <STRING> : <NEWLINE> <INDENT> x -= 1 <NEWLINE> <DEDENT> <DEDENT> print ( x ) <NEWLINE>
s = input ( ) <NEWLINE> <NL> for c in s : <NEWLINE> <INDENT> x += 1 if c == <STRING> else - 1 <NEWLINE> <NL> <DEDENT> print ( max ( x ) ) <NEWLINE>
num = int ( input ( ) ) <NEWLINE> given = input ( ) <NEWLINE> new = given . split ( ) <NEWLINE> x = 0 <NEWLINE> max = 0 <NEWLINE> for i in range ( num ) : <NEWLINE> <INDENT> if new [ i ] == <STRING> : <NEWLINE> <INDENT> x -= 1 <NEWLINE> <DEDENT> if new [ i ] == <STRING> : <NEWLINE> <INDENT> x += 1 <NEWLINE> <DEDENT> if max < x : <NEWLINE> <INDENT> max = x <NEWLINE> <DEDENT> <DEDENT> print ( max ) <NEWLINE>
<INDENT> = int ( input ( ) ) <NEWLINE> <DEDENT> s = input ( ) <NEWLINE> x = 0 <NEWLINE> l = [ 0 ] <NEWLINE> for a in s : <NEWLINE> <INDENT> if a == <STRING> : <NEWLINE> <INDENT> x = x + 1 <NEWLINE> l . append ( x ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> x = x - 1 <NEWLINE> l . append ( x ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( max ( l ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> S = input ( ) <NEWLINE> a = 0 <NEWLINE> sum_a = 0 <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> if S [ i ] == <STRING> : <NEWLINE> <INDENT> sum_a += 1 <NEWLINE> a = max ( a , sum_a ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> sum_a - = 1 <NEWLINE> <DEDENT> <DEDENT> print ( a ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> s = input ( ) <NEWLINE> count = 0 <NEWLINE> count_list = [ ] <NEWLINE> <NL> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> count += 1 <NEWLINE> count_list . append ( count ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count -= 1 <NEWLINE> count_list . append ( count ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( max ( count_list , 0 ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> S = input ( ) <NEWLINE> x = 0 <NEWLINE> length = len ( S ) <NEWLINE> List = [ 0 ] <NEWLINE> for i in range ( length ) : <NEWLINE> <INDENT> if ( S [ i ] == I ) : <NEWLINE> <INDENT> x += 1 <NEWLINE> List . append ( x ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> x -= 1 <NEWLINE> List . append ( x ) <NEWLINE> <DEDENT> <DEDENT> print ( max ( List ) ) <NEWLINE>
import collections <NEWLINE> n = int ( input ( ) ) <NEWLINE> <NL> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> t *= i <NEWLINE> <DEDENT> def prime_factorize ( n ) : <NEWLINE> <INDENT> a = [ ] <NEWLINE> while n % 2 == 0 : <NEWLINE> <INDENT> a . append ( 2 ) <NEWLINE> n //= 2 <NEWLINE> <DEDENT> f = 3 <NEWLINE> while f * f <= n : <NEWLINE> <INDENT> if n % f == 0 : <NEWLINE> <INDENT> a . append ( f ) <NEWLINE> n //= f <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> f += 2 <NEWLINE> <DEDENT> <DEDENT> if n != 1 : <NEWLINE> <INDENT> a . append ( n ) <NEWLINE> <DEDENT> return a <NEWLINE> <NL> <DEDENT> c = collections . Counter ( prime_factorize ( t ) ) <NEWLINE> ans = 1 <NEWLINE> for _ , v in c . items ( ) : <NEWLINE> <INDENT> ans *= ( v + 1 ) <NEWLINE> <DEDENT> print ( ans % ( 10 ** 9 + 7 ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> p = 10 ** 9 + 7 <NEWLINE> <NL> def primeryNum ( n ) : <NEWLINE> <INDENT> n_ = int ( n ** 0.5 ) <NEWLINE> ary = list ( range ( n + 1 ) ) <NEWLINE> ary [ 1 ] = 0 <NEWLINE> for a in ary : <NEWLINE> <INDENT> if a > n_ : break <NEWLINE> elif a == 0 : continue <NEWLINE> <NL> for i in range ( a * 2 , n + 1 , a ) : <NEWLINE> <INDENT> ary [ i ] = 0 <NEWLINE> <DEDENT> <DEDENT> return ary <NEWLINE> <NL> <DEDENT> primeryN = primeryNum ( N ) <NEWLINE> divN = [ 0 ] * N <NEWLINE> for pn in primeryN : <NEWLINE> <INDENT> if pn == 0 : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> i = 1 <NEWLINE> cnt = 0 <NEWLINE> while ( pn ** i < N ) : <NEWLINE> <INDENT> cnt += ( N // pn ** i ) <NEWLINE> i += 1 <NEWLINE> <DEDENT> divN [ pn ] = cnt <NEWLINE> <NL> <DEDENT> ans = 1 <NEWLINE> for d in divN : <NEWLINE> <INDENT> if d == 0 : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> ans = ( ans * ( d + 1 ) ) % p <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> p = [ 1 for i in range ( 10000 ) ] <NEWLINE> p [ 0 ] = 0 <NEWLINE> p [ 1 ] = 0 <NEWLINE> for i in range ( 2 , n + 1 ) : <NEWLINE> <INDENT> if p [ i ] == 1 : <NEWLINE> <INDENT> for j in range ( i * i , n + 1 , i ) : <NEWLINE> <INDENT> p [ j ] = 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> ans = 1 <NEWLINE> for i in range ( 2 , n + 1 ) : <NEWLINE> <INDENT> if p [ i ] : <NEWLINE> <INDENT> c = 0 <NEWLINE> k = i <NEWLINE> while n // k > 0 : <NEWLINE> <INDENT> c = c + ( n // k ) % m <NEWLINE> k = k * k <NEWLINE> <DEDENT> ans = ( ans * ( ( c + 1 ) % m ) ) % m <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <NL> <NL> <NL> <NL>
MOD = 10 ** 9 + 7 <NEWLINE> memo = [ 0 ] * 10000 <NEWLINE> <NL> N = int ( input ( ) ) <NEWLINE> <NL> def primeLst ( k ) : <NEWLINE> <INDENT> acc = [ ] <NEWLINE> if k == 1 : <NEWLINE> <INDENT> return acc <NEWLINE> <DEDENT> f = 2 <NEWLINE> while f * f <= k : <NEWLINE> <INDENT> if k % f == 0 : <NEWLINE> <INDENT> acc . append ( f ) <NEWLINE> k //= f <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> f += 1 <NEWLINE> <DEDENT> <DEDENT> if k != 1 : <NEWLINE> <INDENT> acc . append ( k ) <NEWLINE> <DEDENT> return acc <NEWLINE> <NL> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> l = primeLst ( i + 1 ) <NEWLINE> for x in l : <NEWLINE> <INDENT> memo [ x ] += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> res = 1 <NEWLINE> for i in range ( 1 , N ) : <NEWLINE> <INDENT> res *= memo [ i + 1 ] + 1 <NEWLINE> res %= MOD <NEWLINE> <NL> <DEDENT> print ( acc ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> ls = [ 0 ] + [ 0 ] * N <NEWLINE> couterls = collections . Counter ( ls ) <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> for j in range ( 2 , N + 1 ) : <NEWLINE> <INDENT> if i % j == 0 : <NEWLINE> <INDENT> while i % j == 0 : <NEWLINE> <INDENT> couterls [ j ] += 1 <NEWLINE> i = i // j <NEWLINE> <DEDENT> <DEDENT> elif i == 1 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT> <DEDENT> ans = 1 <NEWLINE> couterls . pop ( 0 ) <NEWLINE> for i in couterls . values ( ) : <NEWLINE> <INDENT> ans = ( ans * ( i + 1 ) ) % ( 10 ** 9 + 7 ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> X = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> for i in range ( 1 , N ) : <NEWLINE> <INDENT> d = X [ i ] - X [ i - 1 ] <NEWLINE> if d * A > B : <NEWLINE> <INDENT> ans += B <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += d * A <NEWLINE> <DEDENT> <DEDENT> print ( ans <NEWLINE>
l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> dx = a * ( l [ i + 1 ] - l [ i ] ) <NEWLINE> if b < dx : <NEWLINE> <INDENT> ans += b <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += dx <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import sys <NEWLINE> input = sys . stdin . readline <NEWLINE> <COMMENT> <NL> <NL> <NL> def get_prime ( N , prime ) : <NEWLINE> <INDENT> if N < 2 : <NEWLINE> <INDENT> return { 1 : 1 } <NEWLINE> <NL> <DEDENT> i = 2 <NEWLINE> while i * i <= N : <NEWLINE> <INDENT> while N % i == 0 : <NEWLINE> <INDENT> if i in prime . keys ( ) : <NEWLINE> <INDENT> prime [ i ] += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> prime [ i ] = 1 <NEWLINE> <DEDENT> N = N // i <NEWLINE> <DEDENT> i += 1 <NEWLINE> <DEDENT> if N != 1 : <NEWLINE> <INDENT> prime [ N ] = 1 <NEWLINE> <DEDENT> return prime <NEWLINE> <NL> <NL> <DEDENT> def main ( ) : <NEWLINE> <INDENT> N = int ( input ( ) . strip ( ) ) <NEWLINE> div_table = [ 1 ] * ( N + 1 ) <NEWLINE> MOD = 10 ** 9 + 7 <NEWLINE> ans = 0 <NEWLINE> for i in range ( 2 , N + 1 ) : <NEWLINE> <INDENT> for j in range ( i , N + 1 , i ) : <NEWLINE> <INDENT> div_table [ j ] += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> prime = dict ( ) <NEWLINE> prime [ 1 ] = 1 <NEWLINE> <NL> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> if div_table [ i ] == 2 : <NEWLINE> <INDENT> prime = get_prime ( i , prime ) <NEWLINE> <DEDENT> <DEDENT> ans = 1 <NEWLINE> for k , v in prime : <NEWLINE> <INDENT> ans *= v <NEWLINE> ans %= MOD <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> x = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( 1 , n ) : ans += min ( ( x [ i + 1 ] - x [ i ] ) * a , b ) <NEWLINE> print ( ans ) <NEWLINE>
a <NEWLINE>
print ( * list [ input ( ) . split ( <STRING> ) ] ) <NEWLINE>
<COMMENT> <NL> input = input ( ) <NEWLINE> <NL> <COMMENT> <NL> exec ( <STRING> + input + <STRING> ) <NEWLINE> <NL> <COMMENT> <NL> print ( lst [ 0 ] , lst [ 1 ] , lst [ 2 ] , sep = <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s . replace ( <STRING> , <STRING> ) <NEWLINE>
print ( input ( ) . replace ( <STRING> , <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> <NL> s [ 5 ] = <STRING> <NEWLINE> s [ 13 ] = <STRING> <NEWLINE> <NL> print ( s ) <NEWLINE>
A , B , C = input ( ) . split ( ) <NEWLINE> print ( A , B , C ) <NEWLINE>
x , y , z = input . split ( <STRING> ) <NEWLINE> <NL> print ( x , y , z ) <NEWLINE>
a , b , c = input ( ) , split ( <STRING> ) <NEWLINE> print ( a , b , c ) <NEWLINE>
s = input ( ) <NEWLINE> print ( s . split ( , ) ) <NEWLINE>
x , y , z = map ( input ( ) . split ( , ) ) <NEWLINE> print ( x y z ) <NEWLINE>
print ( * input ( ) . sep ( <STRING> ) ) <NEWLINE>
x , y , z = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( z , x , y ) <NEWLINE>
pritn ( input ( ) . replace ( <STRING> , <STRING> ) ) <NEWLINE>
x , y , z = input ( ) . split <NEWLINE> print ( x , y , z ) <NEWLINE>
x , y , z = int ( ) . split ( <STRING> ) <NEWLINE> print ( x , y , z ) <NEWLINE>
s = input ( ) <NEWLINE> return <STRING> . join ( s . split ( <STRING> ) ) <NEWLINE>
a , b , c = input ( ) . split ( , ) <NEWLINE> print ( a , b , c ) <NEWLINE>
import sys <NEWLINE> <NL> k , s = map ( int , sys . stdin . buffer . readline ( ) . split ( <STRING> ) ) <NEWLINE> <NL> result = 0 <NEWLINE> <NL> for x in range ( k + 1 ) : <NEWLINE> <INDENT> for y in range ( min ( s - x + 1 , k + 1 ) ) : <NEWLINE> <INDENT> z = s - x - y <NEWLINE> if z < 0 : continue <NEWLINE> if z <= k : <NEWLINE> <INDENT> result += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( result ) <NEWLINE>
K , S = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> count = 0 <NEWLINE> for i in range ( K + 1 ) : <NEWLINE> <INDENT> for j in range ( K + 1 ) : <NEWLINE> <INDENT> if 0 <= S - ( i + j ) <= K <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
k , s = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> asn = o <NEWLINE> <NL> for i in range ( k + 1 ) : <NEWLINE> <INDENT> for j in range ( k + 1 ) : <NEWLINE> <INDENT> if 0 <= s - i - j <= k : ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
K , S = map ( int , input ( ) . split ( ) ) <NEWLINE> count = 0 <NEWLINE> for x in range ( K + 1 ) : <NEWLINE> <INDENT> for y in range ( K + 1 ) : <NEWLINE> <INDENT> if S - x - y <= K : <NEWLINE> <INDENT> conut += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
k , s = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( len ( [ z for x in range ( k + 1 ) for y in range ( k + 1 ) if 0 <= s - x - y <= k ] ) ) <NEWLINE>
x = y = S // 3 + 1 <NEWLINE> z = S - x - y <NEWLINE> if z < y : <NEWLINE> <INDENT> x = z <NEWLINE> z = y <NEWLINE> <DEDENT> while 0 <= x <= y and 0 <= y <= K and y <= z <= K : <NEWLINE> <INDENT> while 0 <= x and z <= K : <NEWLINE> <INDENT> if x == y == z : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> elif x == y or y == z : <NEWLINE> <INDENT> ans += 3 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += 6 <NEWLINE> <DEDENT> x -= 1 <NEWLINE> z += 1 <NEWLINE> <DEDENT> y += 1 <NEWLINE> x = y <NEWLINE> z = S - x - y <NEWLINE> if z < y : <NEWLINE> <INDENT> x = z <NEWLINE> z = y <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
K , S = map ( int , input ( ) split ( ) ) <NEWLINE> <NL> c = 0 <NEWLINE> for i in range ( K + 1 ) : <NEWLINE> <INDENT> for j in range ( K + 1 ) : <NEWLINE> <INDENT> z = S - i - j <NEWLINE> if 0 <= z and z <= K : <NEWLINE> <INDENT> c += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( c ) <NEWLINE>
K , S = map ( int , input ( ) . split ( ) ) <NEWLINE> count = 0 <NEWLINE> <NL> for i in range ( K + 1 ) : <NEWLINE> <INDENT> for j in range ( K + 1 ) : <NEWLINE> <INDENT> if 0 <= S - i - j <= K : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( count <NEWLINE>
K , S = [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> ans = 0 <NEWLINE> for x in range ( K + 1 ) : <NEWLINE> <INDENT> for y in range ( K + 1 ) : <NEWLINE> <INDENT> if S - x - y = < K : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
s , k = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( len ( [ z for x in range ( 0 , k + 1 ) for y in range ( 0 , k + 1 ) if 0 <= s - x - y <= k ] ) ) <NEWLINE>
import sys <NEWLINE> sys . setrecursionlimit ( 10 ** 5 ) <NEWLINE> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> def process ( ) : <NEWLINE> <INDENT> k , s = map ( int , readline ( ) . rstrip ( ) . split ( ) ) <NEWLINE> cnt = 0 <NEWLINE> <NL> for i in range ( 0 , k + 1 ) : <NEWLINE> <INDENT> for j in range ( 0 , k + 1 ) : <NEWLINE> <INDENT> z = s - ( i + j ) <NEWLINE> if z >= 0 and z <= k : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> return cnt <NEWLINE> <NL> <NL> <NL> <COMMENT> <NL> <DEDENT> print ( process ( ) ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> A_test = sorted ( list ( set ( A ) ) ) <NEWLINE> <NL> if N % 2 == 1 : <NEWLINE> <INDENT> judge = [ i for i in range ( 0 , N , 2 ) ] <NEWLINE> if ( A_test == judge ) and ( A . count ( 0 ) == 1 ) : <NEWLINE> <INDENT> ans = 2 ** ( N // 2 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> judge = [ i for i in range ( 1 , N , 2 ) ] <NEWLINE> if A_test == judge : <NEWLINE> <INDENT> ans = 2 ** ( N // 2 ) <NEWLINE> <NL> <DEDENT> <DEDENT> ans = ans % ( 10 ** 9 + 7 ) <NEWLINE> print ( ans ) <NEWLINE>
d = { 0 : <STRING> , 1 : <STRING> , 2 : <STRING> , 3 : <STRING> } <NEWLINE> dirc = [ dx , dy , dx , dy ] <NEWLINE> <NL> def path ( sign , x , y , z , w ) : <NEWLINE> <INDENT> return d [ sign + 1 ] * abs ( z - x ) + d [ sign + 2 ] * abs ( y - w ) <NEWLINE> <NL> <DEDENT> s = <STRING> <NEWLINE> s += <STRING> <NEWLINE> s += path ( - 1 , sx + 1 , sy , tx , ty - 1 ) <NEWLINE> s += <STRING> <NEWLINE> s += path ( 1 , tx , ty + 1 , sx - 1 , sy ) <NEWLINE> s += <STRING> <NEWLINE> s += path ( - 1 , sx , sy - 1 , tx + 1 , ty ) <NEWLINE> s += <STRING> <NEWLINE> s += path ( 1 , tx - 1 , ty , sx , sy + 1 ) <NEWLINE> s += <STRING> <NEWLINE> print ( s ) <NEWLINE>
sx , sy , tx , ty = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ans = <STRING> <NEWLINE> <NL> ans += <STRING> * ( ty - sy ) + <STRING> * ( tx - sx ) <NEWLINE> ans += <STRING> * ( ty - sy ) + <STRING> * ( tx - sx ) <NEWLINE> ans += <STRING> + <STRING> * ( ty - sy + 1 ) + <STRING> * ( tx - sx + 1 ) + <STRING> <NEWLINE> ans += <STRING> + <STRING> * ( ty - sy + 1 ) + <STRING> * ( tx - sx + 1 ) + <STRING> <NEWLINE> print ( ans ) sx , sy , tx , ty = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> ans = <STRING> <NEWLINE> <NL> ans += <STRING> * ( ty - sy ) + <STRING> * ( tx - sx ) <NEWLINE> ans += <STRING> * ( ty - sy ) + <STRING> * ( tx - sx ) <NEWLINE> ans += <STRING> + <STRING> * ( ty - sy + 1 ) + <STRING> * ( tx - sx + 1 ) + <STRING> <NEWLINE> ans += <STRING> + <STRING> * ( ty - sy + 1 ) + <STRING> * ( tx - sx + 1 ) + <STRING> <NEWLINE> print ( ans ) <NEWLINE>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> INF = 10 ** 18 <NEWLINE> d = [ [ INF ] * n for _ in range ( n ) ] <NEWLINE> for i in range ( n ) : d [ i ] [ i ] = 0 <NEWLINE> a = [ 0 ] * m <NEWLINE> b = [ 0 ] * m <NEWLINE> c = [ 0 ] * m <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> a -= 1 <NEWLINE> b -= 1 <NEWLINE> a [ i ] = a <NEWLINE> b [ i ] = b <NEWLINE> c [ i ] = c <NEWLINE> d [ a ] [ b ] = c <NEWLINE> d [ b ] [ a ] = c <NEWLINE> <NL> <DEDENT> for k in range ( n ) : <NEWLINE> <INDENT> for i in range ( n ) : <NEWLINE> <INDENT> for j in range ( n ) : <NEWLINE> <INDENT> d [ i ] [ j ] = min ( d [ i ] [ j ] , d [ i ] [ k ] + d [ k ] [ j ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> ans = 0 <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> if d [ a [ i ] ] [ b [ i ] ] < c [ i ] : ans += 1 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
<COMMENT> <NL> import sys <NEWLINE> <NL> def solve ( N : int , M : int , a : <STRING> , b : <STRING> , c : <STRING> ) : <NEWLINE> <INDENT> import numpy as np <NEWLINE> from scipy . sparse import csr_matrix <NEWLINE> from scipy . sparse . csgraph import floyd_warshall <NEWLINE> omat = csr_matrix ( ( c , ( a , b ) ) , shape = ( N + 1 , N + 1 ) , dtype = np . int32 , directed = False ) <NEWLINE> smat = floyd_warshall ( omat ) <NEWLINE> return ( ( omat - smat ) > 0 ) . sum ( ) // 2 <NEWLINE> <NL> <NL> <COMMENT> <NL> <DEDENT> def main ( ) : <NEWLINE> <INDENT> def iterate_tokens ( ) : <NEWLINE> <INDENT> for line in sys . stdin : <NEWLINE> <INDENT> for word in line . split ( ) : <NEWLINE> <INDENT> yield word <NEWLINE> <DEDENT> <DEDENT> <DEDENT> tokens = iterate_tokens ( ) <NEWLINE> N = int ( next ( tokens ) ) <COMMENT> <NEWLINE> M = int ( next ( tokens ) ) <COMMENT> <NEWLINE> a = [ int ( ) ] * ( M ) <COMMENT> <NEWLINE> b = [ int ( ) ] * ( M ) <COMMENT> <NEWLINE> c = [ int ( ) ] * ( M ) <COMMENT> <NEWLINE> for i in range ( M ) : <NEWLINE> <INDENT> a [ i ] = int ( next ( tokens ) ) <NEWLINE> b [ i ] = int ( next ( tokens ) ) <NEWLINE> c [ i ] = int ( next ( tokens ) ) <NEWLINE> <DEDENT> print ( solve ( N , M , a , b , c ) ) <NEWLINE> <NL> <DEDENT> def test ( ) : <NEWLINE> <INDENT> import doctest <NEWLINE> doctest . testmod ( ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <COMMENT> <NL> <INDENT> main ( ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if abs ( x ) , abs ( y ) > pow ( 10 , 9 ) : <NEWLINE> <INDENT> exit ( ) <NEWLINE> <DEDENT> s = abs ( y ) - abs ( x ) <NEWLINE> buttona = s <NEWLINE> buttonb = 0 <NEWLINE> if y < 0 : <NEWLINE> <INDENT> buttonb += 1 <NEWLINE> <DEDENT> if x < 0 : <NEWLINE> <INDENT> buttonb += 1 <NEWLINE> <DEDENT> print ( buttona + buttonb ) <NEWLINE>
<COMMENT> <NL> <NL> def func ( x , y ) : <NEWLINE> <INDENT> if y >= x : <NEWLINE> <INDENT> if x >= 0 : <NEWLINE> <INDENT> return y - x <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if y > 0 : <NEWLINE> <INDENT> if abs ( x ) > abs ( y ) : <NEWLINE> <INDENT> return 1 - x - y <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return 1 + x + y <NEWLINE> <DEDENT> <DEDENT> elif y <= 0 : <NEWLINE> <INDENT> return y - x <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if x >= 0 : <NEWLINE> <INDENT> if y < 0 : <NEWLINE> <INDENT> if abs ( x ) > abs ( y ) : <NEWLINE> <INDENT> return 1 + x + y <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return 1 - x - y <NEWLINE> <DEDENT> <DEDENT> elif y == 0 or y == 1 : <NEWLINE> <INDENT> return x + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if abs ( x ) > abs ( y ) : <NEWLINE> <INDENT> return 1 + x + y <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return 1 + y - x <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> return 2 + x - y <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( f ( x , y ) ) <NEWLINE>
def main2 ( ) : <NEWLINE> <INDENT> x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> delta = abs ( abs ( x ) - abs ( y ) ) <NEWLINE> <NL> c1 = delta + 0 + 0 <NEWLINE> c2 = delta + 0 + 1 <NEWLINE> c3 = delta + 1 + 0 <NEWLINE> c4 = delta + 1 + 1 <NEWLINE> <NL> print ( min ( c1 , c2 , c3 , c4 ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( min ( max ( y - x , x - y + 2 ) , abs ( x + y ) + 1 ) <NEWLINE> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> ax = abs ( x ) <NEWLINE> ay = abs ( y ) <NEWLINE> if ax == ay and x != y : <NEWLINE> <INDENT> a = 1 <NEWLINE> <DEDENT> elif x > y and 0 < y : <NEWLINE> <INDENT> a = ax - ay + 2 <NEWLINE> <DEDENT> elif x > y and y = 0 : <NEWLINE> <INDENT> a = ax - ay + 1 <NEWLINE> <DEDENT> elif x > y and 0 > y : <NEWLINE> <INDENT> if ay > ax and x >= 0 : <NEWLINE> <INDENT> a = ay - ax + 1 <NEWLINE> <DEDENT> elif ay > ax and x < 0 : <NEWLINE> <INDENT> a = ay - ax + 2 <NEWLINE> <DEDENT> elif ax > ay : <NEWLINE> <INDENT> a = ax - ay + 1 <NEWLINE> <DEDENT> <DEDENT> elif y > x and x < 0 and ay > ax : <NEWLINE> <INDENT> a = ay - ax + 1 <NEWLINE> <DEDENT> elif y > x and x < 0 and y > 0 and ax > ay : <NEWLINE> <INDENT> a = ax - ay + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a = y - x <NEWLINE> <DEDENT> print ( a ) <NEWLINE>
x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> d = abs ( abs ( x ) - abs ( y ) ) <NEWLINE> if 0 <= x < y or x < y <= 0 : <NEWLINE> <INDENT> print ( d ) <NEWLINE> <DEDENT> elif y <= 0 <= x or x < 0 < y : <NEWLINE> <INDENT> print ( d + 1 ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( d + 2 ) <NEWLINE> <DEDENT>
import sys <NEWLINE> import numpy as np <NEWLINE> <NL> read = sys . stdin . buffer . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> <NL> @ njit ( <STRING> , cache = True ) <NEWLINE> def main ( N , K , A ) : <NEWLINE> <INDENT> B = np . maximum ( A , 0 ) <NEWLINE> Acum = np . zeros ( len ( A ) + 1 , np . int64 ) <NEWLINE> Bcum = np . zeros ( len ( A ) + 1 , np . int64 ) <NEWLINE> Acum [ 1 : ] = np . cumsum ( A ) <NEWLINE> Bcum [ 1 : ] = np . cumsum ( B ) <NEWLINE> ret = - ( 10 ** 18 ) <NEWLINE> for l in range ( N - K + 1 ) : <NEWLINE> <INDENT> r = l + K <NEWLINE> sum1 = Bcum [ l ] <NEWLINE> sum2 = Bcum [ - 1 ] - Bcum [ r ] <NEWLINE> sum3 = Acum [ r ] - Acum [ l ] <NEWLINE> x = sum1 + sum2 + max ( sum3 , 0 ) <NEWLINE> ret = max ( ret , x ) <NEWLINE> <DEDENT> return ret <NEWLINE> <NL> <DEDENT> N , K = map ( int , readline ( ) . split ( ) ) <NEWLINE> A = np . array ( read ( ) . split ( ) , np . int64 ) <NEWLINE> <NL> print ( main ( N , K , A ) ) <NEWLINE>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> tmp = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if i < K : <NEWLINE> <INDENT> tmp += a [ i ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if a [ i ] > 0 : <NEWLINE> <INDENT> ans += a [ i ] <NEWLINE> <DEDENT> <DEDENT> <DEDENT> ans += max ( 0 , tmp ) <NEWLINE> <NL> ans2 = 0 <NEWLINE> tmp = 0 <NEWLINE> for i in range ( N - 1 , - 1 , - 1 ) : <NEWLINE> <INDENT> if ans < N - K : <NEWLINE> <INDENT> if a [ i ] > 0 : <NEWLINE> <INDENT> ans2 += a [ i ] <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> tmp += a [ i ] <NEWLINE> <DEDENT> <DEDENT> ans2 += max ( 0 , tmp ) <NEWLINE> print ( max ( ams2 , ans ) ) <NEWLINE>
a = input ( ) <NEWLINE> if a [ 1 ] == <STRING> : <NEWLINE> <INDENT> print ( int ( a [ 0 ] ) + int ( a [ 2 ] ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( a [ 0 ] ) - int ( a [ 2 ] ) ) <NEWLINE> <DEDENT>
A , c , B = input ( ) . split ( ) <NEWLINE> if c == <STRING> : <NEWLINE> <INDENT> print ( int ( A ) + int ( B ) ) : <NEWLINE> <DEDENT> elif c == <STRING> : <NEWLINE> <INDENT> print ( int ( A ) - int ( B ) ) <NEWLINE> <DEDENT>
a , o , b = input ( ) . split ( ) <NEWLINE> if o = <STRING> : <NEWLINE> <INDENT> print ( int ( a ) + int ( b ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( a ) - int ( b ) ) <NEWLINE> <DEDENT>
a , op , b = map ( str , input ( ) . split ( ) ) <NEWLINE> if op = <STRING> : <NEWLINE> <INDENT> print ( int ( a ) + int ( b ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( a ) - int ( b ) ) <NEWLINE> <DEDENT>
a , op , b = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> if op = <STRING> : <NEWLINE> <INDENT> print ( a + b ) <NEWLINE> <DEDENT> if op = <STRING> : <NEWLINE> <INDENT> print ( a - b ) <NEWLINE> <DEDENT>
a , op , b = imput ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> if op == <STRING> : <NEWLINE> <INDENT> print ( a + b ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a - b ) <NEWLINE> <DEDENT>
A , op , B = map ( input ( ) . split ( ) ) <NEWLINE> A = int ( A ) <NEWLINE> B = int ( B ) <NEWLINE> <NL> if op == <STRING> : <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT> if op == <STRING> : <NEWLINE> <INDENT> print ( A - B ) <NEWLINE> <DEDENT>
a , op , b = map ( str , input ( ) , split ( ) ) <NEWLINE> if op == <STRING> : <NEWLINE> <INDENT> print ( int ( a ) + int ( b ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( a ) - int ( b ) ) <NEWLINE> <DEDENT>
a , b , c = map ( str , input ( ) . split ( ) ) <NEWLINE> if b == <STRING> : <NEWLINE> <INDENT> print ( int ( a ) + int ( b ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( a ) - int ( b ) ) <NEWLINE> <DEDENT>
a , b , c = input ( ) . split ( ) <NEWLINE> a , b = int ( a , b ) <NEWLINE> if b == <STRING> : <NEWLINE> <INDENT> print ( a + b ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a - b ) <NEWLINE> <DEDENT>
<COMMENT> <NL> A = int ( input ( ) ) <NEWLINE> op = input ( ) <NEWLINE> B = int ( input ( ) ) <NEWLINE> <NL> if op == <STRING> : <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT> elif op == <STRING> : <NEWLINE> <INDENT> print ( A - B ) <NEWLINE> <NL> <DEDENT>
s = map ( str , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> if s [ 1 ] == <STRING> : <NEWLINE> <INDENT> ans = int ( s [ 0 ] ) + int ( s [ 2 ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = int ( s [ 0 ] ) - int ( s [ 2 ] ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
a , op , b = input ( ) . split ( ) ) <NEWLINE> if op == <STRING> : <NEWLINE> <INDENT> print ( int ( a ) + int ( b ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( a ) - int ( b ) ) <NEWLINE> <DEDENT>
a , b , c = map ( str , input ( ) . split ( ) ) <NEWLINE> if b == <STRING> : <NEWLINE> <INDENT> print ( int ( a ) + int ( b ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( a ) - int ( b ) ) <NEWLINE> <DEDENT>
print ( eval ( input ( ) ) <NEWLINE>
<COMMENT> <NL> A , op , B = map ( str , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> calc = eval ( A & op & B ) <NEWLINE> print ( calc ) <NEWLINE>
a , b , c = map ( input ( ) . split ( ) ) <NEWLINE> if b == <STRING> : <NEWLINE> <INDENT> print ( a + b ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a - b ) <NEWLINE> <DEDENT>
a , op , b = map ( int , input ( ) . split ( ) ) <NEWLINE> op = str ( op ) <NEWLINE> <NL> if p == <STRING> : <NEWLINE> <INDENT> print ( a + b ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a - b ) <NEWLINE> <DEDENT>
a , b , c = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> c = int ( c ) <NEWLINE> if b = <STRING> : <NEWLINE> <INDENT> print ( a + c ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a - c ) <NEWLINE> <DEDENT>
A , op , B = input ( ) . split ( ) <NEWLINE> if op == <STRING> : <NEWLINE> <INDENT> print ( int ( A ) - int ( B ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( A ) + ( B ) ) <NEWLINE> <DEDENT>
A , op , B = input ( ) . split ( ) <NEWLINE> A , B = int ( A ) , int ( B ) <NEWLINE> if op == <STRING> <NEWLINE> <INDENT> print ( A + B ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( A - B ) <NEWLINE> <DEDENT>
<COMMENT> <NL> a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> op = str ( input ( ) ) <NEWLINE> <NL> <NL> <COMMENT> <NL> if op == <STRING> : <NEWLINE> <INDENT> answer = a + b <NEWLINE> <DEDENT> elif op == <STRING> : <NEWLINE> <INDENT> answer = a - b <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> print ( answer ) <NEWLINE>
a , b , c = map ( input ( ) . split ( ) ) <NEWLINE> a = int ( a ) <NEWLINE> c = int ( c ) <NEWLINE> if b == <STRING> : <NEWLINE> <INDENT> print ( a + c ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( a - c ) <NEWLINE> <DEDENT>
print ( eval ( input ( ) ) <NEWLINE>
<NL> def main ( ) : <NEWLINE> <INDENT> n = input ( ) . split ( ) <NEWLINE> if n [ 1 ] == <STRING> : <NEWLINE> <INDENT> print ( int ( n [ 0 ] ) + int ( n [ 1 ] ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( int ( n [ 0 ] ) - int ( n [ 1 ] ) ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
a , o , b = map ( str , input . split ( ) ) <NEWLINE> <NL> print ( int ( a ) int ( o ) int ( b ) ) <NEWLINE>
<INDENT> a , op , b = map ( str , input ( ) . split ( ) ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> <NL> if op == <STRING> : <NEWLINE> <INDENT> result = a + b <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> result = a - b <NEWLINE> <NL> <DEDENT> print ( result ) <NEWLINE> <DEDENT>
def main ( a , op , b ) : <NEWLINE> <INDENT> if op == <STRING> : <NEWLINE> <INDENT> return int ( a ) + int ( b ) <NEWLINE> <DEDENT> elif op == <STRING> : <NEWLINE> <INDENT> return int ( a ) - int ( b ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __init__ == <STRING> : <NEWLINE> <INDENT> a , op , b = input ( ) . split ( ) <NEWLINE> print ( main ( a , op , b ) ) <NEWLINE> <DEDENT>
a , op , b = input ( ) . split ( ) <NEWLINE> if op = <STRING> : <NEWLINE> <INDENT> ans = int ( a ) + int ( b ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = int ( a ) - int ( b ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> T = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> M = int ( input ( ) ) <NEWLINE> ans = sum ( T ) <NEWLINE> for i in range ( len ( M ) ) : <NEWLINE> <INDENT> P , X = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ans - T [ P - 1 ] + X ) <NEWLINE> <DEDENT>
num_problems = int ( input ( ) ) <NEWLINE> a = input ( ) <NEWLINE> seconds_per = a . split ( ) <NEWLINE> for i in seconds_per : <NEWLINE> <INDENT> total += int ( i ) <NEWLINE> <DEDENT> drinks = int ( input ( ) ) <NEWLINE> for i in range ( drinks ) : <NEWLINE> <INDENT> b = input ( ) <NEWLINE> c = b . split ( ) <NEWLINE> question = int ( c [ 0 ] ) <NEWLINE> change = int ( c [ 1 ] ) <NEWLINE> new = total - int ( seconds_per [ question - 1 ] ) + change <NEWLINE> print ( new ) <NEWLINE> <NL> <NL> <DEDENT>
n = int ( input ( ) ) <NEWLINE> t = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> m = int ( input ( ) ) <NEWLINE> for i in range ( m ) : <NEWLINE> <INDENT> p , x = map ( int , input ( ) . split ( ) ) <NEWLINE> y = t [ p - 1 ] <NEWLINE> t [ p - 1 ] = x : <NEWLINE> print ( sum ( t ) ) <NEWLINE> t [ p - 1 ] = y <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> l = [ 0 ] + l <NEWLINE> s = sum ( l ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> for _ in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> m , n = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( s - l [ m ] + n ) <NEWLINE> <NL> <DEDENT>
n = int ( input ( ) ) <NEWLINE> l = [ 0 ] + list ( map ( int , input ( ) . split ( ) ) ) ans = sum ( l ) <NEWLINE> for i in range ( int ( input ( ) ) ) : <NEWLINE> <INDENT> a , s = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ans - l [ a ] + s ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> m = int ( input ( ) ) <NEWLINE> <NL> sum_l = sum ( l ) <NEWLINE> <NL> for i in range ( m ) : <NEWLINE> <INDENT> p , x = map ( int , input ( ) . split ( ) ) <NEWLINE> ams = sum_l - l [ p - 1 ] + x <NEWLINE> print ( ans ) <NEWLINE> <DEDENT>
print ( a ) <NEWLINE> n = int ( input ( ) ) <NEWLINE> t = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> m = int ( input ( ) ) <NEWLINE> <NL> for i in range ( m ) : <NEWLINE> <INDENT> lst = list ( t ) <NEWLINE> p , x = map ( int , input ( ) . split ( ) ) <NEWLINE> lst [ p - 1 ] = x <NEWLINE> print ( sum ( lst ) ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <NL> using namespace std ; <NEWLINE> <NL> int main ( ) { <NEWLINE> <INDENT> int N , M , k , val , sum = 0 , ans ; <NEWLINE> <NL> array < int , 100 > p ; <NEWLINE> cin >> N ; <NEWLINE> for ( int i = 0 ; i < N ; i + + ) { <NEWLINE> <INDENT> cin >> p [ i ] ; <NEWLINE> sum += p [ i ] ; <NEWLINE> <DEDENT> } <NEWLINE> <NL> cin >> M ; <NEWLINE> for ( int i = 0 ; i < M ; i + + ) { <NEWLINE> <INDENT> cin >> k >> val ; <NEWLINE> cout << sum + val - p [ k - 1 ] << <STRING> ; <NEWLINE> <DEDENT> } <NEWLINE> <NL> <DEDENT> } <NEWLINE>
num_prob = int ( input ( ) ) <NEWLINE> prob = input ( ) <NEWLINE> new = prob . split ( ) <NEWLINE> sum = 0 <NEWLINE> num_drinks = int ( input ( ) ) <NEWLINE> for j in new : <NEWLINE> <INDENT> sum += int ( j ) <NEWLINE> <NL> <DEDENT> for i in range ( num_drinks ) : <NEWLINE> <INDENT> line = input ( ) <NEWLINE> new_line = line . split ( ) <NEWLINE> if new_line [ 1 ] != new [ new_line [ 0 ] ] : <NEWLINE> <INDENT> sum -= new [ new_line [ 0 ] ] <NEWLINE> sum += new_line [ 1 ] <NEWLINE> <DEDENT> print ( sum ) <NEWLINE> <NL> <DEDENT>
N = int ( input ( ) ) <NEWLINE> t = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> T = sum ( t ) <NEWLINE> M = int ( input ( ) ) <NEWLINE> for _ in range ( M ) : <NEWLINE> <INDENT> p , x = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( T + ( T [ p - 1 ] - x ) ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> a = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> t = int ( input ( ) ) <NEWLINE> a . append ( t ) <NEWLINE> <DEDENT> m = int ( input ( ) ) <NEWLINE> for j in range ( m ) : <NEWLINE> <INDENT> p , x = map ( int , input ( ) . split ( ) ) <NEWLINE> for k in range ( n ) : <NEWLINE> <INDENT> if t == k + 1 : <NEWLINE> <INDENT> a [ k ] = x <NEWLINE> <DEDENT> <DEDENT> <DEDENT> for j in range ( m ) : <NEWLINE> <INDENT> print ( sum ( a ) ) <NEWLINE> <NL> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> d = [ int ( input ( ) ) for i in range ( c ) ] <NEWLINE> for i in range ( c ) : <NEWLINE> <INDENT> print ( sum ( b ) - b [ d [ i ] [ 0 ] ] + d [ i ] [ 1 ] ) <NEWLINE> <DEDENT>
import sys <NEWLINE> from collections import deque <NEWLINE> p = 10 ** 9 + 7 <NEWLINE> <NL> def main ( n , a ) : <NEWLINE> <INDENT> h = n // 2 <NEWLINE> g = n % 2 <NEWLINE> a . sort ( ) <NEWLINE> c = [ 2 * ( x // 2 ) + g + 1 for x in range ( n - g ) ] <NEWLINE> if g == 1 : <NEWLINE> <INDENT> c . insert ( 0 , 0 ) <NEWLINE> <DEDENT> if a != c : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> return 2 ** ( h % ( p - 1 ) ) <NEWLINE> <NL> <DEDENT> if __name__ = <STRING> : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) ) ) <NEWLINE> print ( main ( n , a ) ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> * A = sorted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> a = True <NEWLINE> if n % 2 == 0 : <NEWLINE> <INDENT> for i in range ( 1 , n , 2 ) : <NEWLINE> <INDENT> if A [ i - 1 ] != i or A [ i ] != i : <NEWLINE> <INDENT> a = False <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if A [ 0 ] != 0 : a = False <NEWLINE> else : <NEWLINE> <INDENT> for i in range ( 2 , n , 2 ) : <NEWLINE> <INDENT> if A [ i - 1 ] != i or A [ i ] != i : <NEWLINE> <INDENT> a = False <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( 2 ** ( n // 2 ) % ( 10 ** 9 + 7 ) if a else 0 ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> A = check . copy ( ) <NEWLINE> A . sort ( ) <NEWLINE> <NL> check = [ 0 ] * N <NEWLINE> <NL> for idx in range ( N % 2 , N , 2 ) : <NEWLINE> <INDENT> check [ idx ] = idx + 1 <NEWLINE> check [ idx + 1 ] = idx + 1 <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> <NL> if check == A : <NEWLINE> <INDENT> if N % 2 == 0 : <NEWLINE> <INDENT> ans = ( 2 ** ( N // 2 ) ) % ( 10 ** 9 + 7 ) <NEWLINE> <DEDENT> elif N % 2 != 0 : <NEWLINE> <INDENT> ans = ( 2 ** ( ( N - 1 ) // 2 ) ) % ( 10 ** 9 + 7 ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> A_test = sorted ( list ( set ( A ) ) ) <NEWLINE> <NL> if N % 2 == 1 : <NEWLINE> <INDENT> judge = [ i for i in range ( 0 , N , 2 ) ] <NEWLINE> if A_test == judge : <NEWLINE> <INDENT> ans = 2 ** ( N // 2 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> judge = [ i for i in range ( 1 , N , 2 ) ] <NEWLINE> if A_test == judge : <NEWLINE> <INDENT> ans = 2 ** ( N // 2 ) ] <NEWLINE> <NL> <DEDENT> <DEDENT> ans = ans % ( 10 ** 9 + 7 ) <NEWLINE> print ( ans ) <NEWLINE>
if len ( a ) % 2 == 1 : <NEWLINE> <INDENT> tmp = [ 0 ] <NEWLINE> for i in range ( ( len ( a ) - 1 ) // 2 ) : <NEWLINE> <INDENT> tmp . append ( ( i + 1 ) * 2 ) <NEWLINE> tmp . append ( ( i + 1 ) * 2 ) <NEWLINE> <DEDENT> if a == tmp : <NEWLINE> <INDENT> ans = ( 2 ** ( ( len ( a ) - 1 ) // 2 ) ) % ( 10 ** 9 + 7 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = 0 <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> tmp = [ ] <NEWLINE> for i in range ( len ( a ) // 2 ) : <NEWLINE> <INDENT> tmp . append ( 2 * i + 1 ) <NEWLINE> tmp . append ( 2 * i + 1 ) <NEWLINE> <DEDENT> if a == tmp : <NEWLINE> <INDENT> ans = ( 2 ** ( len ( a ) // 2 ) ) % ( 10 ** 9 + 7 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = 0 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> from collections import defaultdict as dd <NEWLINE> Dict = dd ( lambda : 0 ) <NEWLINE> for a in A : <NEWLINE> <INDENT> Dict [ a ] += 1 <NEWLINE> <NL> <DEDENT> if N & 1 : Dict [ 0 ] += 1 <NEWLINE> f = ( lambda : ( lambda x : 0 if x & 1 else 2 ) if N & 1 else ( lambda x : 2 if x & 1 else 0 ) ) ( ) <NEWLINE> Possible = { i : f ( i ) for i in range ( N ) } <NEWLINE> for key , value in Dict . items : <NEWLINE> <INDENT> if value != Possible [ key ] : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( 2 ** ( N // 2 ) % 1000000007 ) <NEWLINE> <NL> <NL> <DEDENT>
import sys <NEWLINE> <NL> p = 10 ** 9 + 7 <NEWLINE> dthbit = lambda d , n : ( n >> d ) & 1 <NEWLINE> <NL> def main ( n ) : <NEWLINE> <INDENT> dp = [ [ 0 for _ in range ( 3 ) ] for _ in range ( 64 ) ] <NEWLINE> dp [ 63 ] [ 0 ] = 1 <NEWLINE> for d in range ( 62 , - 1 , - 1 ) : <NEWLINE> <INDENT> b = dthbit ( d , n ) <NEWLINE> s = dp [ d + 1 ] [ : ] <NEWLINE> dp [ d ] [ 0 ] = dp [ d + 1 ] [ 0 ] + ( 1 ^ b ) * dp [ d + 1 ] [ 1 ] % p <NEWLINE> dp [ d ] [ 1 ] = b * dp [ d + 1 ] [ 0 ] + dp [ d + 1 ] [ 1 ] % p <NEWLINE> dp [ d ] [ 2 ] = ( 1 + b ) * dp [ d + 1 ] [ 1 ] + 3 * dp [ d + 1 ] [ 2 ] % p <NEWLINE> <DEDENT> return sum ( dp [ 0 ] [ : ] % p ) <NEWLINE> <NL> <DEDENT> n = int ( input ( ) ) <NEWLINE> print ( main ( n ) ) <NEWLINE>
def main ( ) : <NEWLINE> <INDENT> import sys <NEWLINE> <NL> def input ( ) : return sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> <NL> n = int ( input ( ) ) <NEWLINE> a = map ( int , input ( ) . split ( ) ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> a . sort ( ) <NEWLINE> check = [ i + 1 - ( i + n ) % 2 for i in range ( n ) ] <NEWLINE> if a != check : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> return <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = pow ( 2 , n // 2 , mod ) <NEWLINE> print ( ans ) <NEWLINE> <NL> <NL> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> vowel = set ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) <NEWLINE> if a in vowel : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<NL> lst = list ( map ( str , input ( ) . split ( ) ) ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> print ( lst [ 0 ] [ 0 ] + lst [ 1 ] [ 0 ] + lst [ 2 ] [ 0 ] ) <NEWLINE>
s = input ( ) <NEWLINE> if s == <STRING> or s == <STRING> or s == <STRING> or s == <STRING> or s == <STRING> : <NEWLINE> <INDENT> print ( vowel ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( consonant ) <NEWLINE> <DEDENT>
n = str ( input ( ) ) <NEWLINE> if n = <STRING> or <STRING> or <STRING> or <STRING> or <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
letter = input ( ) <NEWLINE> if ( letter == <STRING> or letter == <STRING> or letter = <STRING> or letter == <STRING> or letter == <STRING> ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
c = input ( ) <NEWLINE> if c in [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> l = [ chr ( ord ( a ) + i ) for i in range ( 5 ) ] <NEWLINE> print ( <STRING> if s in l else <STRING> ) <NEWLINE>
A = input ( ) <NEWLINE> if A = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if A = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if A = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if A = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if A = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
c = input ( ) <NEWLINE> vowel = [ a , i , u , e , o ] <NEWLINE> print ( <STRING> if c in vowel else <STRING> ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> S = input ( ) <NEWLINE> S = S . replace ( <STRING> , <STRING> ) <NEWLINE> S = S . replace ( <STRING> , <STRING> ) <NEWLINE> S = S . replace ( <STRING> , <STRING> ) <NEWLINE> S = S . replace ( <STRING> , <STRING> ) <NEWLINE> S = S . replace ( <STRING> , <STRING> ) <NEWLINE> print ( N - int ( len ( S ) ) ) <NEWLINE>
c = int ( input ( ) ) <NEWLINE> if c == <STRING> or c == <STRING> or c == <STRING> or c == <STRING> or c == <STRING> : print ( <STRING> ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
c = input ( ) <NEWLINE> if c in <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> else : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
x = <STRING> <NEWLINE> i = input ( ) <NEWLINE> if i in x : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
if c in <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
text = str ( input ( ) ) <NEWLINE> if text == a <NEWLINE> <INDENT> print ( vowel ) <NEWLINE> <DEDENT> elif text == i <NEWLINE> <INDENT> print ( vowel ) <NEWLINE> <DEDENT> elif text == u <NEWLINE> <INDENT> print ( vowel ) <NEWLINE> <DEDENT> elif text == e : <NEWLINE> <INDENT> print ( vowel ) <NEWLINE> <DEDENT> elif text == o : : <NEWLINE> <INDENT> print = ( vowel ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print = ( consonant ) <NEWLINE> <DEDENT>
x = str ( input ( ) ) <NEWLINE> if x = <STRING> or x = <STRING> or x = <STRING> or x = <STRING> or x = <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> print ( [ <STRING> , <STRING> ] [ s = <STRING> or s = <STRING> or s = <STRING> or s = <STRING> or s = <STRING> ] ) <NEWLINE>
c = input ( ) <NEWLINE> x = [ a , e , i , o , u ] <NEWLINE> if x in c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N = input ( ) <NEWLINE> if N in <STRING> <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> C = [ ] <NEWLINE> for i in range ( H ) : <NEWLINE> <INDENT> C [ i ] = input ( ) <NEWLINE> <DEDENT> for i in range ( H ) : <NEWLINE> <INDENT> print ( C [ i ] ) <NEWLINE> print ( C [ i ] ) <NEWLINE> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( h ) ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> print ( c [ i ] ) <NEWLINE> print ( c [ i ] ) <NEWLINE> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> for i in range ( h ) : <NEWLINE> <INDENT> print ( input ( ) ) <NEWLINE> print ( input ( ) ) <NEWLINE> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> li = [ input ( ) for _ in range ( h ) ] <NEWLINE> <NL> for i in li : <NEWLINE> <INDENT> print ( i , i , sep = <STRING> ) ** * . <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> import sys <NEWLINE> from io import StringIO <NEWLINE> import unittest <NEWLINE> <NL> <NL> class TestClass ( unittest . TestCase ) : <NEWLINE> <INDENT> def assertIO ( self , input , output ) : <NEWLINE> <INDENT> stdout , stdin = sys . stdout , sys . stdin <NEWLINE> sys . stdout , sys . stdin = StringIO ( ) , StringIO ( input ) <NEWLINE> resolve ( ) <NEWLINE> sys . stdout . seek ( 0 ) <NEWLINE> out = sys . stdout . read ( ) [ : - 1 ] <NEWLINE> sys . stdout , sys . stdin = stdout , stdin <NEWLINE> self . assertEqual ( out , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_1 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_2 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_3 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> def resolve ( ) : <NEWLINE> <INDENT> H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = [ ] <NEWLINE> for i in range ( H ) : <NEWLINE> <INDENT> S = input ( ) <NEWLINE> ans . append ( S ) <NEWLINE> ans . append ( S ) <NEWLINE> <NL> for i in range ( 2 * H ) : <NEWLINE> print ( ans [ i ] ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <COMMENT> <NL> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
h , w = int ( input ( ) ) <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> s = input ( ) <NEWLINE> print ( s ) <NEWLINE> print ( s ) <NEWLINE> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> q = input ( ) <NEWLINE> print ( q ) <NEWLINE> print ( q ) <NEWLINE> <DEDENT>
a , b = input ( ) . split ( ) <NEWLINE> a = int ( a ) <NEWLINE> b = int ( b ) <NEWLINE> c = [ input ( ) for i in range ( a ) ] <NEWLINE> for i in range ( a ) : <NEWLINE> <INDENT> print ( b [ i ] ) <NEWLINE> print ( b [ i ] ) <NEWLINE> <DEDENT>
<NL> url = <STRING> <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> h , w = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ss = [ input ( ) for _ in range ( h ) ] <NEWLINE> for s in ss : <NEWLINE> <INDENT> print ( s ) <NEWLINE> print ( s ) <NEWLINE> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> while 1 : <NEWLINE> <INDENT> if len ( S ) == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> if s [ len ( s ) - 5 : ] == <STRING> : <NEWLINE> <INDENT> s = s [ : len ( s ) - 5 ] <NEWLINE> continue <NEWLINE> <DEDENT> elif s [ len ( s ) - 7 : ] == <STRING> : <NEWLINE> <INDENT> s = s [ : len ( s ) - 7 ] <NEWLINE> continue <NEWLINE> <DEDENT> elif s [ len ( s ) - 5 : ] == <STRING> : <NEWLINE> <INDENT> s = s [ : len ( s ) - 5 ] <NEWLINE> continue <NEWLINE> <DEDENT> elif s [ len ( s ) - 6 : ] == <STRING> : <NEWLINE> <INDENT> s = s [ : len ( s ) - 6 ] <NEWLINE> continue <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
import re <NEWLINE> <NL> s = input ( ) <NEWLINE> s = re . sub ( <STRING> , <STRING> , s ) <NEWLINE> s = re . sub ( <STRING> , <STRING> , s ) <NEWLINE> s = re . sub ( <STRING> , <STRING> , s ) <NEWLINE> s = re . sub ( <STRING> , <STRING> , s ) <NEWLINE> <NL> if int ( s ) == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> while s : <NEWLINE> <INDENT> if s [ - 5 : ] == <STRING> : <NEWLINE> <INDENT> for i in range ( 5 ) : <NEWLINE> <INDENT> s . pop ( ) <NEWLINE> <DEDENT> <DEDENT> elif s [ - 5 : ] == <STRING> : <NEWLINE> <INDENT> for i in range ( 5 ) : <NEWLINE> <INDENT> s . pop ( ) <NEWLINE> <DEDENT> <DEDENT> elif s [ - 6 : ] == <STRING> : <NEWLINE> <INDENT> for i in range ( 6 ) : <NEWLINE> <INDENT> s . pop ( ) <NEWLINE> <DEDENT> <DEDENT> elif s [ - 7 : ] == <STRING> : <NEWLINE> <INDENT> for i in range ( 7 ) : <NEWLINE> <INDENT> s . pop ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
S = input ( ) <NEWLINE> if re . match ( <STRING> , S ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> <NL> list = [ <STRING> , <STRING> , <STRING> , <STRING> ] <NEWLINE> <NL> for i in list : <NEWLINE> <INDENT> s = s . replace ( i , <STRING> ) <NEWLINE> <NL> <DEDENT> s . sort ( ) <NEWLINE> <NL> if s [ 0 ] == s [ - 1 ] and s [ - 1 ] == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) replace ( <STRING> , <STRING> ) . replace ( <STRING> , <STRING> ) . replace ( <STRING> , <STRING> ) . replace ( <STRING> , <STRING> ) . <NEWLINE> print ( <STRING> if s == <STRING> else <STRING> ) <NEWLINE>
S = list ( input ( ) ) <NEWLINE> N = len ( S ) <NEWLINE> <NL> def f ( x ) : <NEWLINE> <INDENT> print ( x ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> if N < 5 : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> elif S [ 0 ] == <STRING> : <NEWLINE> <INDENT> w = 1 <NEWLINE> <DEDENT> elif S [ 0 ] == <STRING> : <NEWLINE> <INDENT> w = - 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <NL> <DEDENT> i = 0 <NEWLINE> while True : <NEWLINE> <INDENT> if w > 0 : <NEWLINE> <INDENT> if S [ i ] + S [ i + 1 ] + S [ i + 2 ] + S [ i + 3 ] + S [ i + 4 ] == <STRING> : <NEWLINE> <INDENT> i += 5 <NEWLINE> if i == N : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> elif S [ i ] == <STRING> : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> elif S [ i ] == <STRING> : <NEWLINE> <INDENT> if i + 1 <= N - 1 : <NEWLINE> <INDENT> if S [ i + 1 ] == <STRING> : <NEWLINE> <INDENT> if i + 1 == N - 1 : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> elif S [ i + 2 ] == <STRING> : <NEWLINE> <INDENT> w *= - 1 <NEWLINE> <DEDENT> elif S [ i + 2 ] == <STRING> : <NEWLINE> <INDENT> i += 2 <NEWLINE> w *= - 1 <NEWLINE> <DEDENT> elif S [ i + 2 ] == <STRING> : <NEWLINE> <INDENT> i += 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> elif w < 0 : <NEWLINE> <INDENT> if S [ i ] + S [ i + 1 ] + S [ i + 2 ] + S [ i + 3 ] + S [ i + 4 ] == <STRING> : <NEWLINE> <INDENT> i += 5 <NEWLINE> if i == N : <NEWLINE> if S [ i ] == <STRING> : <NEWLINE> <INDENT> i += 1 <NEWLINE> if i == N : <NEWLINE> <DEDENT> if S [ i ] == <STRING> : <NEWLINE> <INDENT> w *= - 1 <NEWLINE> <DEDENT> elif S [ i ] == <STRING> : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> if i + 4 > N - 1 : <NEWLINE> <INDENT> f ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
<COMMENT> <NL> using namespace std ; <NEWLINE> using Graph = vector < vector < int >> ; <NEWLINE> <NL> long set_index ; <NEWLINE> <NL> void dfs ( Graph graph , vector < bool > & seen , vector < int > & set , int v ) { <NEWLINE> <INDENT> seen [ v ] = true ; <NEWLINE> set [ v ] = set_index ; <NEWLINE> for ( auto next_v : graph [ v ] ) { <NEWLINE> <INDENT> if ( seen [ next_v ] ) continue ; <NEWLINE> dfs ( graph , seen , set , next_v ) ; <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE> <NL> void input ( Graph & graph , int M ) { <NEWLINE> <INDENT> int p , q ; <NEWLINE> for ( int i = 0 ; i < M ; i + + ) { <NEWLINE> <INDENT> cin >> p >> q ; <NEWLINE> graph [ p - 1 ] . push_back ( q - 1 ) ; <NEWLINE> graph [ q - 1 ] . push_back ( p - 1 ) ; <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE> <NL> void connect ( Graph & graph , vector < bool > & seen , vector < int > & set , int n ) { <NEWLINE> <INDENT> set_index = 0 ; <NEWLINE> for ( int v = 0 ; v < n ; v + + ) { <NEWLINE> <INDENT> if ( seen [ v ] ) continue ; <NEWLINE> dfs ( graph , seen , set , v ) ; <NEWLINE> set_index + + ; <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE> <NL> int main ( ) { <NEWLINE> <INDENT> int N , K , L ; <NEWLINE> cin >> N >> K >> L ; <NEWLINE> Graph road , rail ; <NEWLINE> vector < bool > seen_road , seen_rail ; <NEWLINE> vector < int > set_road , set_rail ; <NEWLINE> road . resize ( N ) ; <NEWLINE> rail . resize ( N ) ; <NEWLINE> set_road . assign ( N , 0 ) ; <NEWLINE> set_rail . assign ( N , 0 ) ; <NEWLINE> input ( road , K ) ; <NEWLINE> input ( rail , L ) ; <NEWLINE> <NL> seen_road . assign ( N , false ) ; <NEWLINE> connect ( road , seen_road , set_road , N ) ; <NEWLINE> seen_rail . assign ( N , false ) ; <NEWLINE> connect ( rail , seen_rail , set_rail , N ) ; <NEWLINE> <NL> map < pair < long , long > , int > ans ; <NEWLINE> for ( int i = 0 ; i < N ; i + + ) { <NEWLINE> <INDENT> ans [ make_pair ( set_road [ i ] , set_rail [ i ] ) ] + + ; <NEWLINE> <DEDENT> } <NEWLINE> for ( int i = 0 ; i < N ; i + + ) { <NEWLINE> <INDENT> cout << ans [ make_pair ( set_road [ i ] , set_rail [ i ] ) ] << <STRING> ; <NEWLINE> <DEDENT> } <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE>
N , K , L = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> road = [ i for i in range ( N ) ] <NEWLINE> rail = [ i for i in range ( N ) ] <NEWLINE> <NL> def fp ( x , P ) : <COMMENT> <NEWLINE> <INDENT> if x == P [ x ] : <NEWLINE> <INDENT> return x <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> P [ x ] = fp ( P [ x ] ) <NEWLINE> return P [ x ] <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( K + L ) : <NEWLINE> <INDENT> PL = ( lambda x : road if x < K else rail ) ( i ) <NEWLINE> p , q = map ( lambda x : int ( x ) - 1 , input ( ) . split ( ) ) <NEWLINE> p , q = fp ( p , PL ) , fp ( q , PL ) <NEWLINE> PL [ p ] = PL [ q ] = min ( p , q ) <NEWLINE> <NL> <DEDENT> from collections import defaultdict as dd <NEWLINE> Wconnected = dd ( lambda : 0 ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> Wconnected [ fp ( i , road ) , fp ( i , rail ) ] += 1 <NEWLINE> <DEDENT> print ( * [ Wconnected [ fp ( i , road ) , fp ( i , rail ) ] for i in range ( N ) ] ) <NEWLINE>
import sys <NEWLINE> from collections import deque <NEWLINE> from collections import defaultdict <NEWLINE> from collections import Counter <NEWLINE> <NL> def conn ( n , m , e ) : <NEWLINE> <INDENT> d = dict ( zip ( range ( 1 , n + 1 ) , range ( - 1 , ( - 1 ) * n - 1 , - 1 ) ) ) <NEWLINE> td = defaultdict ( lambda : deque ( [ ] ) ) <COMMENT> <NEWLINE> c = 1 <NEWLINE> for edge in e : <NEWLINE> <INDENT> a = edge [ 0 ] <NEWLINE> b = edge [ 1 ] <NEWLINE> da = d [ a ] <COMMENT> <NEWLINE> db = d [ b ] <NEWLINE> if da < 0 and db < 0 : <NEWLINE> <INDENT> d [ a ] = c <NEWLINE> d [ b ] = c <NEWLINE> td [ c ] . append ( a ) <NEWLINE> td [ c ] . append ( b ) <NEWLINE> c += 1 <NEWLINE> <DEDENT> elif da > 0 and db < 0 : <NEWLINE> <INDENT> d [ b ] = da <NEWLINE> td [ d [ a ] ] . append ( b ) <NEWLINE> <DEDENT> elif da < 0 and db > 0 : <NEWLINE> <INDENT> d [ a ] = db <NEWLINE> td [ d [ b ] ] . append ( a ) <NEWLINE> <DEDENT> elif da > 0 and db > 0 and da != db : <NEWLINE> <INDENT> for x in td [ db ] : <NEWLINE> <INDENT> d [ x ] = da <NEWLINE> td [ da ] . append ( x ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> return list ( d . values ( ) ) <NEWLINE> <NL> <DEDENT> def components ( n , k , e ) : <NEWLINE> <INDENT> ed = defaultdict ( lambda : deque ( ) ) <NEWLINE> for edge in e : <NEWLINE> <INDENT> ed [ edge [ 0 ] ] . append ( edge [ 1 ] ) <NEWLINE> <DEDENT> c = 0 <NEWLINE> s = [ 0 ] * n <NEWLINE> label = [ 0 ] * n <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> if s [ i - 1 ] == 0 : <NEWLINE> <INDENT> c += 1 <NEWLINE> label [ c - 1 ] = c <NEWLINE> stack = deque ( [ i ] ) <NEWLINE> while stack : <NEWLINE> <INDENT> w = stack . pop ( ) <NEWLINE> s [ w - 1 ] = c <NEWLINE> while ed [ w ] : <NEWLINE> <INDENT> wn = ed [ w ] . pop ( ) <NEWLINE> if s [ wn - 1 ] == 0 : <NEWLINE> <INDENT> s [ wn - 1 ] = c <NEWLINE> if ed [ wn ] : <NEWLINE> <INDENT> stack . append ( w ) <NEWLINE> w = wn <NEWLINE> <DEDENT> <DEDENT> elif s [ wn - 1 ] < c : <NEWLINE> <INDENT> label [ s [ wn - 1 ] - 1 ] = c <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> return [ label [ s [ i ] - 1 ] for i in range ( n ) ] <NEWLINE> <NL> <DEDENT> def components2 ( n , k , e ) : <NEWLINE> <INDENT> ed = defaultdict ( lambda : deque ( ) ) <NEWLINE> for edge in e : <NEWLINE> <INDENT> ed [ edge [ 0 ] ] . append ( edge [ 1 ] ) <NEWLINE> ed [ edge [ 1 ] ] . append ( edge [ 0 ] ) <NEWLINE> <DEDENT> c = 0 <NEWLINE> s = [ 0 ] * n <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> if s [ i - 1 ] == 0 : <NEWLINE> <INDENT> c += 1 <NEWLINE> stack = deque ( [ i ] ) <NEWLINE> while stack : <NEWLINE> <INDENT> w = stack . pop ( ) <NEWLINE> s [ w - 1 ] = c <NEWLINE> while ed [ w ] : <NEWLINE> <INDENT> wn = ed [ w ] . pop ( ) <NEWLINE> if s [ wn - 1 ] == 0 : <NEWLINE> <INDENT> s [ wn - 1 ] = c <NEWLINE> if ed [ wn ] : <NEWLINE> <INDENT> stack . append ( w ) <NEWLINE> w = wn <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> return [ [ s [ i ] for i in range ( n ) ] <NEWLINE> <DEDENT> def main ( n , k , l , e1 , e2 ) : <NEWLINE> <INDENT> d1 = components2 ( n , k , e1 ) <NEWLINE> d2 = components2 ( n , l , e2 ) <NEWLINE> p = tuple ( zip ( iter ( d1 ) , iter ( d2 ) ) ) <NEWLINE> d = Counter ( p ) <NEWLINE> <COMMENT> <NL> print ( <STRING> . join ( [ str ( d [ x ] ) for x in p ] ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> ssr = sys . stdin . readline <NEWLINE> n , k , l = map ( int , ssr ( ) . strip ( ) . split ( ) ) <NEWLINE> e1 = [ ] <NEWLINE> e2 = [ ] <NEWLINE> for _ in range ( k ) : <NEWLINE> <INDENT> e1 . append ( tuple ( map ( int , ssr ( ) . strip ( ) . split ( ) ) ) ) <NEWLINE> <DEDENT> for _ in range ( l ) : <NEWLINE> <INDENT> e2 . append ( tuple ( map ( int , ssr ( ) . strip ( ) . split ( ) ) ) ) <NEWLINE> <DEDENT> main ( n , k , l , e1 , e2 ) <NEWLINE> <DEDENT>
sentence = input ( ) <NEWLINE> new_sent = sentence . split ( <STRING> ) <NEWLINE> acro = <STRING> <NEWLINE> for i in range ( len ( new_sent ) ) : <NEWLINE> <INDENT> for j in range ( new_sent [ i ] ) : <NEWLINE> <INDENT> acro += new_sent [ i ] [ 0 ] <NEWLINE> <DEDENT> <DEDENT> print ( acro ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( len ( set ( [ a , b , c ] ) ) ) <NEWLINE>
a , b , c = str ( input ( ) . split ( ) ) <NEWLINE> print ( a [ 0 ] + b [ 0 ] + c [ 0 ] ) <NEWLINE>
a , b , c = imput ( ) . split ( ) <NEWLINE> print ( <STRING> + b [ 0 ] + <STRING> ) <NEWLINE>
a , b , c = input ( ) . split ( ) <NEWLINE> print ( a [ 0 ] , upper ( b [ 0 ] ) , c [ 0 ] ) <NEWLINE>
A , B , C = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( <STRING> + B + <STRING> ) <NEWLINE>
a , b , x = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> a1 = a // x if a % x else a // x - 1 <NEWLINE> a2 = b // x <NEWLINE> print ( a2 - a1 ) <NEWLINE>
s = input ( ) <NEWLINE> ss = s [ 0 ] <NEWLINE> sss = upper ( ss ) <NEWLINE> print ( <STRING> + sss + <STRING> ) <NEWLINE>
string = input ( ) <NEWLINE> <INDENT> Capital = string [ 0 ] <NEWLINE> print ( <STRING> + Capital + <STRING> ) <NEWLINE> <NL> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( a [ 0 ] + b [ 0 ] + c [ 0 ] ) <NEWLINE>
a , b , c = map ( input ( ) . split ( ) ) <NEWLINE> print ( a + b [ 0 ] + c ) <NEWLINE>
xs = inpt ( ) . split ( ) <NEWLINE> <NL> print ( <STRING> + xs [ 2 ] [ 0 ] + <STRING> ) <NEWLINE>
print ( <STRING> . join ( s [ 0 ] for s in input ( ) split ( ) ) ) <NEWLINE>
a , s , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( a [ 0 ] + s [ 0 ] + c [ 0 ] ) <NEWLINE>
arr = list ( input ( ) . split ( ) ) <NEWLINE> print ( arr [ 0 ] . [ 0 ] + arr [ 1 ] . [ 0 ] + arr [ 2 ] . [ 0 ] ) <NEWLINE>
l = input ( ) . replace ( <STRING> , <STRING> ) <NEWLINE> print ( l [ 0 ] + l [ 7 ] + l [ - 7 ] ) <NEWLINE> <NL>
import sys <NEWLINE> def I_dont_know_what_to_do ( ) : <NEWLINE> <INDENT> a = long ( input ( ) ) <NEWLINE> b = long ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> if a < b : <NEWLINE> <INDENT> n = a <NEWLINE> a = b <NEWLINE> b = n <NEWLINE> <NL> <DEDENT> s = ( a - b + 2 - a % c - b % c ) / c <NEWLINE> print ( s ) <NEWLINE> <NL> <NL> <DEDENT> I_dont_know_what_to_do ( ) <NEWLINE>
a , b , x = list ( map ( int , input_ [ 0 ] . split ( ) ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> if a != b : <NEWLINE> <INDENT> A = ( a - 1 ) // x <NEWLINE> B = b // x <NEWLINE> <NL> ans = B - A <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
a , b , x = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <INDENT> print ( ( b - a ) // x ) <NEWLINE> <DEDENT>
a , b , c = list ( map ( str , input ( ) . split ( ) ) ) <NEWLINE> a = a / c <NEWLINE> b = b / c <NEWLINE> print ( b - a ) <NEWLINE>
<COMMENT> <NL> <NL> a , b , x = map ( int , input ( ) . split ( <STRING> ) ) <NEWLINE> <NL> n = b - a - 1 <NEWLINE> <COMMENT> <NL> <NL> a , b , x = map ( int , input ( ) . split ( <STRING> ) ) <NEWLINE> <NL> n = b - a <NEWLINE> if a % x == 0 or b % x == 0 : <NEWLINE> <INDENT> print ( n // x + 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( n // x ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> max = b // x <NEWLINE> min = ( a + x - 1 ) // x <NEWLINE> print ( max - min + 1 ) <NEWLINE>
<COMMENT> <NL> import sys <NEWLINE> <COMMENT> <NL> sysread = sys . stdin . buffer . readline <NEWLINE> read = sys . stdin . buffer . read <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> sys . setrecursionlimit ( 10 ** 7 ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <NL> def run ( ) : <NEWLINE> <INDENT> a , b , x = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> if a == 0 : <NEWLINE> <INDENT> a += 1 <NEWLINE> ans = 1 <NEWLINE> <DEDENT> ans += b // x - ( a - 1 ) // x <NEWLINE> print ( ans ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE>
import bisect , collections , copy , heapq , itertools , math , string , sys <NEWLINE> input = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> sys . setrecursionlimit ( 10 ** 7 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> def I ( ) : return int ( input ( ) ) <NEWLINE> def F ( ) : return float ( input ( ) ) <NEWLINE> def SS ( ) : return input ( ) <NEWLINE> def LI ( ) : return [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> def LI_ ( ) : return [ int ( x ) - 1 for x in input ( ) . split ( ) ] <NEWLINE> def LF ( ) : return [ float ( x ) for x in input ( ) . split ( ) ] <NEWLINE> def LSS ( ) : return input ( ) . split ( ) <NEWLINE> <NL> def resolve ( ) : <NEWLINE> <INDENT> N , x = LI ( ) <NEWLINE> a = LI ( ) <NEWLINE> <NL> s = [ max ( a [ i ] + a [ i + 1 ] - x , 0 ) for i in range ( N - 1 ) ] <NEWLINE> <NL> ans = sum ( [ ss [ i ] for i in range ( len ( s ) ) if i % 2 == 0 ] ) <NEWLINE> print ( ans ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
def candy ( ) : <NEWLINE> <INDENT> n = input ( ) . split ( ) <NEWLINE> N = int ( n [ 0 ] ) <NEWLINE> x = int ( n [ 1 ] ) <NEWLINE> alist = [ int ( i ) for i in input ( ) . split ( ) ] <NEWLINE> <NL> s = 0 <NEWLINE> for i in range ( 0 , N - 1 ) : <NEWLINE> <INDENT> c = alist [ i ] , d = alist [ i + 1 ] <NEWLINE> if int ( alist [ i ] + alist [ i + 1 ] ) > x : <NEWLINE> <INDENT> if int ( alist [ i ] ) >= x : <NEWLINE> <INDENT> alist [ i ] = x <NEWLINE> alist [ i + 1 ] = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> alist [ i + 1 ] = x - a [ i ] <NEWLINE> <DEDENT> s += c - alist [ i ] + d - alist [ i + 1 ] <NEWLINE> <DEDENT> / * <NEWLINE> if int ( alist [ i ] ) > x : <NEWLINE> <INDENT> s = s + int ( alist [ i + 1 ] ) <NEWLINE> alist [ i + 1 ] = 0 <NEWLINE> <NL> <DEDENT> if int ( alist [ i + 1 ] ) + int ( alist [ i ] ) > x : <NEWLINE> <INDENT> s = s + ( int ( alist [ i + 1 ] ) + int ( alist [ i ] ) - x ) <NEWLINE> alist [ i + 1 ] = x - int ( alist [ i ] ) <NEWLINE> <DEDENT> * / <NEWLINE> <DEDENT> print ( s ) <NEWLINE> <DEDENT> candy ( ) <NEWLINE>
import sys <NEWLINE> <NL> read = sys . stdin . read <NEWLINE> readline = sys . stdin . readline <NEWLINE> readlines = sys . stdin . readlines <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> INF = 1 << 60 <NEWLINE> MOD = 1000000007 <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> a , b , x = map ( int , readline ( ) . split ( ) ) <NEWLINE> <NL> if a == 0 : <NEWLINE> <INDENT> ans = b // x + 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = b // x - ( a - 1 ) // x <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE> return <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> l = len ( s ) <NEWLINE> if s [ 0 ] == s [ - 1 ] : <NEWLINE> <INDENT> if l % 2 = 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if l % 2 = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
import sys <NEWLINE> import numpy as np <NEWLINE> import numba <NEWLINE> from numba import njit <NEWLINE> i8 = numba . int64 <NEWLINE> <NL> read = sys . stdin . buffer . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> <NL> @ njit ( ( i8 [ : ] , i8 , i8 ) , cache = True ) <NEWLINE> def test ( A , keta , n ) : <NEWLINE> <COMMENT> <NL> <INDENT> MOD = 10 ** ( keta + 1 ) <NEWLINE> I = [ ( n * 10 ** keta , ( n + 1 ) * 10 ** keta ) ] <COMMENT> <NEWLINE> for x in A : <NEWLINE> <INDENT> if I [ 0 ] [ 0 ] == 0 : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> newI = I . copy ( ) <NEWLINE> x %= MOD <NEWLINE> for l , r in I : <NEWLINE> <INDENT> l , r = l + MOD - x , r + MOD - x <NEWLINE> if l >= MOD : <NEWLINE> <INDENT> l , r = l - MOD , r - MOD <NEWLINE> <DEDENT> if r <= MOD : <NEWLINE> <INDENT> newI . append ( ( l , r ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> newI . append ( ( l , MOD ) ) <NEWLINE> newI . append ( ( 0 , r - MOD ) ) <NEWLINE> <DEDENT> <DEDENT> I = newI <NEWLINE> I . sort ( key = lambda x : x [ 1 ] ) <NEWLINE> newI = [ ( 0 , 0 ) ] * 0 <NEWLINE> for x , y in I : <NEWLINE> <INDENT> while newI and newI [ - 1 ] [ 1 ] >= x : <COMMENT> <NEWLINE> <INDENT> x , y = min ( x , newI [ - 1 ] [ 0 ] ) , y <NEWLINE> newI . pop ( ) <NEWLINE> <DEDENT> newI . append ( ( x , y ) ) <NEWLINE> <DEDENT> I = newI <NEWLINE> <DEDENT> return I [ 0 ] [ 0 ] == 0 <NEWLINE> <NL> <DEDENT> def main ( A ) : <NEWLINE> <INDENT> N = len ( A ) <NEWLINE> ans = 0 <NEWLINE> for keta in range ( 18 ) : <NEWLINE> <INDENT> for x in range ( 9 , 0 , - 1 ) : <NEWLINE> <INDENT> if test ( A , keta , x ) : <NEWLINE> <INDENT> ans += x <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return ans <NEWLINE> <NL> <DEDENT> A = np . array ( read ( ) . split ( ) , np . int64 ) [ 1 : ] <NEWLINE> np . random . shuffle ( A ) <NEWLINE> print ( main ( A ) ) <NEWLINE>
H , W = map ( int , input ( ) . split ( ) ) <NEWLINE> flag = False <NEWLINE> for i in range ( H ) : <NEWLINE> <INDENT> for j in range ( W ) : <NEWLINE> <INDENT> s = input ( ) <NEWLINE> if s == <STRING> : <NEWLINE> <INDENT> print ( chr ( ord ( <STRING> ) + j ) + str ( i + 1 ) ) <NEWLINE> flag = True <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> if flag : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT>
alpha = { 1 : <STRING> , 2 : <STRING> , 3 : <STRING> , 4 : <STRING> , 5 : <STRING> , 6 : <STRING> , 7 : <STRING> , 8 : <STRING> , 9 : <STRING> , 10 : <STRING> , 11 : <STRING> , 12 : <STRING> , 13 : <STRING> , 14 : <STRING> , 15 : <STRING> , 16 : <STRING> , 17 : <STRING> , 18 : <STRING> , 19 : <STRING> , 20 : <STRING> , 21 : <STRING> , 22 : <STRING> , 23 : <STRING> , 24 : <STRING> , 25 : <STRING> , 26 : <STRING> } <NEWLINE> h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> for j in range ( w ) : <NEWLINE> <INDENT> if a [ j ] == <STRING> : <NEWLINE> <INDENT> ans = alpha [ j + 1 ] + str ( i + 1 ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> <NL> def ts ( x ) : <NEWLINE> <INDENT> return x * ( x + 1 ) <NEWLINE> <NL> <NL> <DEDENT> m = n <NEWLINE> for i in range ( math . ceil ( math . sqrt ( 2 * n ) - 2 ) , math . floor ( math . sqrt ( 2 * n ) ) + 1 , 1 ) : <NEWLINE> <INDENT> if ts ( i ) < 2 * n <= ts ( i + 1 ) : <NEWLINE> <INDENT> m = i + 1 <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> a = n % ( m + 1 ) <NEWLINE> b = n // ( m + 1 ) <NEWLINE> <NL> if m % 2 == 0 : <NEWLINE> <INDENT> if a != 0 : <NEWLINE> <INDENT> print ( a ) <NEWLINE> <DEDENT> i = 1 <NEWLINE> c = 0 <NEWLINE> while c != b : <NEWLINE> <INDENT> if i != a and m + 1 - i != a : <NEWLINE> <INDENT> print ( i ) <NEWLINE> print ( m + 1 - i ) <NEWLINE> c += 1 <NEWLINE> <DEDENT> i += 1 <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> <STRING> <NEWLINE> print ( m ) <NEWLINE> n -= m <NEWLINE> m -= 1 <NEWLINE> <NL> a = n % ( m + 1 ) <NEWLINE> b = n // ( m + 1 ) <NEWLINE> if a != 0 : <NEWLINE> <INDENT> print ( a ) <NEWLINE> i = 1 <NEWLINE> c = 0 <NEWLINE> while c != b : <NEWLINE> <INDENT> if i != a and m + 1 - i != a : <NEWLINE> <INDENT> print ( i ) <NEWLINE> print ( m + 1 - i ) <NEWLINE> c += 1 <NEWLINE> <DEDENT> i += 1 <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> <DEDENT>
import sys <NEWLINE> from collections import defaultdict ( int ) <NEWLINE> <NL> sys . setrecursionlimit ( 10 ** 7 ) <NEWLINE> input = sys . stdin . readline <NEWLINE> f_inf = float ( <STRING> ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> <NL> def resolve ( ) : <NEWLINE> <INDENT> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> X = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> MOD = [ defaultdict ( int ) for _ in range ( m + 1 ) ] <NEWLINE> cnt = defaultdict ( int ) <NEWLINE> for x in X : <NEWLINE> <INDENT> MOD [ x % m ] [ x ] += 1 <NEWLINE> cnt [ x % m ] += 1 <NEWLINE> <NL> <DEDENT> res = cnt [ 0 ] // 2 <NEWLINE> if m % 2 == 0 : <NEWLINE> <INDENT> res += cnt [ m // 2 ] // 2 <NEWLINE> <NL> <DEDENT> for i in range ( 1 , ( m + 1 ) // 2 ) : <NEWLINE> <INDENT> res += min ( cnt [ i ] , cnt [ m - i ] ) <NEWLINE> <NL> if cnt [ i ] > cnt [ m - i ] : <NEWLINE> <INDENT> diff = ( cnt [ i ] - cnt [ m - i ] ) // 2 <NEWLINE> for v in MOD [ i ] . values ( ) : <NEWLINE> <INDENT> if diff == 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> t = min ( diff , v // 2 ) <NEWLINE> diff -= t <NEWLINE> res += t <NEWLINE> <DEDENT> <DEDENT> elif cnt [ i ] < cnt [ m - i ] : <NEWLINE> <INDENT> diff = ( cnt [ m - i ] - cnt [ i ] ) // 2 <NEWLINE> for v in MOD [ m - i ] . values ( ) : <NEWLINE> <INDENT> if diff == 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> t = min ( diff , v // 2 ) <NEWLINE> diff -= t <NEWLINE> res += t <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( res ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> x = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> xmod = [ y % m for y in x ] <NEWLINE> from collections import Counter <NEWLINE> cx = dict ( Counter ( x ) ) <NEWLINE> cxmod = dict ( Counter ( xmod ) ) <NEWLINE> ans1 , ans2 = 0 , 0 <COMMENT> <NEWLINE> for k in cxmod . keys ( ) : <NEWLINE> <INDENT> if k == 0 : <NEWLINE> <INDENT> ans1 += cxmod [ k ] // 2 <NEWLINE> cxmod [ k ] -= 2 * ( cxmod [ k ] // 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if k == m - k : <NEWLINE> <INDENT> ans1 += cxmod [ k ] // 2 <NEWLINE> cxmod [ k ] -= 2 * ( cxmod [ k ] // 2 ) <NEWLINE> <DEDENT> elif m - k in keys : <NEWLINE> <INDENT> tmp = min ( cxmod [ k ] , cxmod [ m - k ] ) <NEWLINE> ans1 += tmp <NEWLINE> cxmod [ k ] -= tmp <NEWLINE> cxmod [ m - k ] -= tmp <NEWLINE> <DEDENT> <DEDENT> <DEDENT> for k in cx : <NEWLINE> <INDENT> v = cx [ k ] <NEWLINE> if v >= 2 and cxmod [ k % m ] >= 2 : <NEWLINE> <INDENT> tmp = min ( v // 2 , cxmod [ k % m ] // 2 ) <NEWLINE> ans2 += tmp <NEWLINE> cxmod [ k % m ] -= tmp * 2 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans1 + ans2 ) <NEWLINE> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <NL> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> s = [ list ( input ( ) . split ( ) ) for i in range ( h ) ] <NEWLINE> alp = <STRING> <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> for j in range ( w ) : <NEWLINE> <INDENT> if s [ i ] [ j ] == <STRING> : <NEWLINE> <INDENT> print ( alp [ j + 1 ] + ( i + 1 ) ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ input ( ) . split ( ) for i in range ( h ) ] <NEWLINE> for i in range ( h ) : <NEWLINE> <INDENT> for j in range ( w ) : <NEWLINE> <INDENT> if a [ i ] [ w ] == <STRING> : <NEWLINE> <INDENT> print ( chr ( ord ( <STRING> ) + j ) + str ( i + 1 ) ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> if n < 3 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> table = [ [ 0 ] * 5 for i in range ( 11 ) ] <NEWLINE> for i in range ( 11 ) : <NEWLINE> <INDENT> for j in range ( 5 ) : <NEWLINE> <INDENT> t = 9 * ( j + 2 + 7 * ( i + 1 ) ) <NEWLINE> table [ i ] [ j ] = t % 11 <NEWLINE> <NL> <DEDENT> <DEDENT> c = [ 0 ] <NEWLINE> for row in table : <NEWLINE> <INDENT> c . append ( c [ - 1 ] + row . count ( K ) ) <NEWLINE> <NL> <DEDENT> d , m = divmod ( n - 2 , 11 ) <NEWLINE> ans = c [ m ] + c [ - 1 ] * d <NEWLINE> print ( ans ) <NEWLINE>
import sys <NEWLINE> import numpy as np <NEWLINE> import numba <NEWLINE> from numba import njit <NEWLINE> i8 = numba . int64 <NEWLINE> <NL> read = sys . stdin . buffer . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> <NL> @ njit ( ( i8 [ : ] , ) , cache = True ) <NEWLINE> def build ( raw_data ) : <NEWLINE> <INDENT> bit = raw_data . copy ( ) <NEWLINE> for i in range ( len ( bit ) ) : <NEWLINE> <INDENT> j = i + ( i & ( - i ) ) <NEWLINE> if j < len ( bit ) : <NEWLINE> <INDENT> bit [ j ] += bit [ i ] <NEWLINE> <DEDENT> <DEDENT> return bit <NEWLINE> <NL> <NL> <DEDENT> @ njit ( ( i8 [ : ] , i8 ) , cache = True ) <NEWLINE> def get_sum ( bit , i ) : <NEWLINE> <INDENT> s = 0 <NEWLINE> while i : <NEWLINE> <INDENT> s += bit [ i ] <NEWLINE> i -= i & - i <NEWLINE> <DEDENT> return s <NEWLINE> <NL> <NL> <DEDENT> @ njit ( ( i8 [ : ] , i8 , i8 ) , cache = True ) <NEWLINE> def add ( bit , i , x ) : <NEWLINE> <INDENT> while i < len ( bit ) : <NEWLINE> <INDENT> bit [ i ] += x <NEWLINE> i += i & - i <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> @ njit ( ( i8 [ : ] , i8 ) , cache = True ) <NEWLINE> def find_kth_element ( bit , k ) : <NEWLINE> <INDENT> N = len ( bit ) <NEWLINE> x , sx = 0 , 0 <NEWLINE> dx = 1 <NEWLINE> while 2 * dx < N : <NEWLINE> <INDENT> dx *= 2 <NEWLINE> <DEDENT> while dx : <NEWLINE> <INDENT> y = x + dx <NEWLINE> if y < N : <NEWLINE> <INDENT> sy = sx + bit [ y ] <NEWLINE> if sy < k : <NEWLINE> <INDENT> x , sx = y , sy <NEWLINE> <DEDENT> <DEDENT> dx //= 2 <NEWLINE> <DEDENT> return x + 1 <NEWLINE> <NL> <DEDENT> @ njit ( ( i8 , i8 [ : ] ) , cache = True ) <NEWLINE> def main ( N , AB ) : <NEWLINE> <INDENT> A , B = AB [ : : 2 ] , AB [ 1 : : 2 ] <NEWLINE> Q = len ( A ) <NEWLINE> <NL> bit = np . zeros ( N + 1 , np . int64 ) <COMMENT> <NEWLINE> bit_raw = np . zeros ( N + 1 , np . int64 ) <NEWLINE> H = np . zeros ( N + 1 , np . int64 ) <COMMENT> <NEWLINE> H [ 0 ] = 10 ** 13 + 10 <NEWLINE> bit_raw [ N ] = 1 <NEWLINE> add ( bit , N , 1 ) <NEWLINE> <NL> for i in range ( Q ) : <NEWLINE> <INDENT> a , b = A [ i ] , B [ i ] <NEWLINE> n = get_sum ( bit , a - 1 ) <NEWLINE> h = H [ find_kth_element ( bit , 1 + n ) ] <NEWLINE> if not bit_raw [ a ] : <NEWLINE> <INDENT> bit_raw [ a ] = 1 <NEWLINE> add ( bit , a , 1 ) <NEWLINE> H [ a ] = h <NEWLINE> <DEDENT> r = a <NEWLINE> <NL> while b : <NEWLINE> <INDENT> l = 0 if n == 0 else find_kth_element ( bit , n ) <NEWLINE> n -= 1 <NEWLINE> area = ( H [ l ] - H [ r ] ) * ( r - l ) <NEWLINE> if area <= b : <NEWLINE> <INDENT> b -= area <NEWLINE> if l : <NEWLINE> <INDENT> bit_raw [ l ] = 0 <NEWLINE> add ( bit , l , - 1 ) <NEWLINE> <DEDENT> H [ l ] , H [ r ] = 0 , H [ l ] <NEWLINE> continue <NEWLINE> <DEDENT> k = b // ( r - l ) <NEWLINE> b -= k * ( r - l ) <NEWLINE> H [ r ] += k <NEWLINE> if b : <NEWLINE> <INDENT> m = l + b <NEWLINE> bit_raw [ m ] = 1 <NEWLINE> add ( bit , m , 1 ) <NEWLINE> H [ m ] = H [ r ] + 1 <NEWLINE> b = 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> for n in range ( N , 0 , - 1 ) : <NEWLINE> <INDENT> H [ n - 1 ] = max ( H [ n - 1 ] , H [ n ] ) <NEWLINE> <DEDENT> return H [ 1 : N + 1 ] <NEWLINE> <NL> <DEDENT> N , Q = map ( int , readline ( ) . split ( ) ) <NEWLINE> AB = np . array ( read ( ) . split ( ) , np . int64 ) <NEWLINE> <NL> ans = main ( N , AB ) <NEWLINE> print ( <STRING> . join ( map ( str , ans . tolist ( ) ) ) ) <NEWLINE>
h , w = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ list ( input ( ) ) for _ in range ( H ) ] <NEWLINE> c = 0 <NEWLINE> for p in a : <NEWLINE> <INDENT> for q in p : <NEWLINE> <INDENT> if q == <STRING> : <NEWLINE> <INDENT> c += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> if c == h + w - 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
H , W = 4 , 5 <NEWLINE> a = [ input ( ) for i in range ( H ) ] <NEWLINE> <NL> <NL> ans = 0 <NEWLINE> cnt = 0 <NEWLINE> <NL> for i in range ( H - 1 ) : <NEWLINE> <INDENT> for j in range ( W - 1 ) : <NEWLINE> <INDENT> if a [ i ] [ j ] == <STRING> and a [ i + 1 ] [ j ] == <STRING> and a [ i ] [ j + 1 ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> break <NEWLINE> <DEDENT> elif a [ i ] [ j ] == <STRING> and a [ i + 1 ] [ j ] == <STRING> and a [ i ] [ j + 1 ] == <STRING> : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> if cnt > 0 else <STRING> ) <NEWLINE> <NL>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> if a == b + c or b == a + c or c == a + b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
def MAP ( ) : return map ( int , input ( ) . split ( ) ) <NEWLINE> x = sorted ( MAP ( x ) ) <NEWLINE> if x [ 0 ] + x [ 1 ] == x [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = int ( input ( ) ) , int ( input ( ) ) , int ( input ( ) ) <NEWLINE> if a + b == c or a + c == b or b + c == a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a + b == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif : <NEWLINE> <INDENT> a + c == b : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT> elif : <NEWLINE> <INDENT> a == b + c : <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
L = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> print ( <STRING> if sum ( L [ : 2 ] == L [ 2 ] ) else <STRING> ) <NEWLINE>
x = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> y = sorted ( x ) <NEWLINE> if y [ 0 ] + y [ 1 ] = y [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
if ( a + b == c ) or ( a + c == b ) or ( b + c == a ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<INDENT> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <DEDENT> if ( ( a + b ) == c ) or ( ( b + c ) == a ) or ( ( c + a ) == b ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a + b == c pr a + c == b or b + c == a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a + b = c or b + c = a or c + a = b : <NEWLINE> <INDENT> print ( Yes ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( No ) <NEWLINE> <DEDENT>
import sys <NEWLINE> sys . setrecursionlimit ( 250000 ) <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a == b + c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b == a + c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif c == a + b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> main ( ) <NEWLINE>
a , b , c = int ( input . split ( ) ) <NEWLINE> if a + b == c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a + c == b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b + c == a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = ( int ( T ) for T in input ( ) . split ( ) ) <NEWLINE> print ( [ <STRING> , <STRING> ] [ ( a + ab ) == c or ( b + c ) == a or ( c + a ) == b ] ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if ( a + b + c ) % 3 == 0 : P <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = list ( map , int ( input ( ) . split ( ) ) ) <NEWLINE> a . sort ( ) <NEWLINE> <NL> if a [ 0 ] + a [ 1 ] == a [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> b = a . sort ( ) <NEWLINE> print ( b ) <NEWLINE> print ( <STRING> if b [ 0 ] + b [ 1 ] == b [ 2 ] else <STRING> ) <NEWLINE>
x = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> if x [ 0 ] + x [ 1 ] == x [ 2 ] or x [ 1 ] + x [ 2 ] = x [ 0 ] or x [ 0 ] + x [ 2 ] == x [ 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> if a == b + c or b == a + c or c == a + b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
ys = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ys . sort ( ) <NEWLINE> print ( <STRING> if ys [ 0 ] + ys [ 1 ] == y [ 2 ] else <STRING> ) <NEWLINE>
a = list ( map ( int , input ( ) ) ) <NEWLINE> a . sort ( ) <NEWLINE> print ( <STRING> ) if max ( a [ 2 ] == a [ 1 ] + a [ 0 ] ) else print ( <STRING> ) <NEWLINE>
list . sort ( l , reverse = True ) <NEWLINE> a = int ( l [ 0 ] ) <NEWLINE> b = int ( l [ 1 ] ) <NEWLINE> c = int ( l [ 2 ] ) <NEWLINE> if a == b + c : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a + b = c or a + c = b or b + c = a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
abc = map ( int , input ( ) . split ( ) ) <NEWLINE> abc . sort ( ) <NEWLINE> if abc [ 0 ] + abc [ 1 ] == abc [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
lst = list ( map ( int , input ( ) . split ) ) <NEWLINE> lst . sort ( ) <NEWLINE> if lst [ 0 ] + lst [ 1 ] == lst [ 2 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a + b = c or a + c = b or b + c = a : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
p = list ( map ( int , input ( ) . split ( ) ) ) . sort ( ) <NEWLINE> print ( <STRING> if p [ 0 ] + p [ 1 ] == p [ 2 ] else <STRING> ) <NEWLINE>
W , H , N = map ( int , input ( ) . split ( ) ) <NEWLINE> List = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> List . append ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <DEDENT> WRange = [ 0 , W ] <NEWLINE> HRange = [ 0 , H ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if List [ i ] [ 2 ] == 1 : <NEWLINE> <INDENT> WRange [ 0 ] = List [ i ] [ 0 ] <NEWLINE> <DEDENT> elif List [ i ] [ 2 ] == 2 : <NEWLINE> <INDENT> WRange [ 1 ] = List [ i ] [ 0 ] <NEWLINE> <DEDENT> elif List [ i ] [ 2 ] == 3 : <NEWLINE> <INDENT> HRange [ 0 ] = List [ i ] [ 1 ] <NEWLINE> <DEDENT> else List [ i ] [ 2 ] == 4 : <NEWLINE> <INDENT> HRange [ 1 ] = List [ i ] [ 1 ] <NEWLINE> <DEDENT> <DEDENT> if WRange [ 1 ] - WRange [ 0 ] > 0 : <NEWLINE> <INDENT> W = WRange [ 1 ] - WRange [ 0 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> W = 0 <NEWLINE> <DEDENT> if HRange [ 1 ] - HRange [ 0 ] > 0 : <NEWLINE> <INDENT> H = HRange [ 1 ] - HRange [ 0 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> H = 0 <NEWLINE> <DEDENT> res = H * W <NEWLINE> print ( res ) <NEWLINE>
<COMMENT> <NL> L = [ ] <NEWLINE> Q = [ ] <NEWLINE> <NL> <COMMENT> <NL> W , H , N , = map ( int , raw_input ( ) . split ( ) ) <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> L . append ( map ( int , raw_input ( ) . split ( ) ) ) <NEWLINE> <DEDENT> x1 = 0 <NEWLINE> x2 = W <NEWLINE> y1 = 0 <NEWLINE> y2 = H <NEWLINE> <NL> <COMMENT> <NL> Q = [ row [ 2 ] for row in L ] <NEWLINE> <NL> <NL> for k in range ( N ) : <NEWLINE> <INDENT> if Q [ k ] == 1 : <NEWLINE> <INDENT> x1 = max ( x1 , L [ k ] [ 0 ] ) <NEWLINE> <DEDENT> elif Q [ k ] == 2 : <NEWLINE> <INDENT> x2 = min ( x2 , L [ k ] [ 0 ] ) <NEWLINE> <DEDENT> elif Q [ k ] == 3 : <NEWLINE> <INDENT> y1 = max ( y1 , L [ k ] [ 1 ] ) <NEWLINE> <DEDENT> elif Q [ k ] == 4 : <NEWLINE> <INDENT> y2 = min ( y2 , L [ k ] [ 1 ] ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( max ( 0 , x2 - x1 ) * max ( 0 , y2 - y1 ) ) <NEWLINE>
W , H , N = map ( int , input ( ) . split ( ) ) <NEWLINE> hen = [ 0 , W , 0 , H ] <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> x , y , a = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == 1 : <NEWLINE> <INDENT> heb [ a - 1 ] = max ( hen [ a - 1 ] , x ) <NEWLINE> <DEDENT> elif a == 2 : <NEWLINE> <INDENT> hen [ a - 1 ] = min ( hen [ a - 1 ] , x ) <NEWLINE> <DEDENT> elif a == 3 : <NEWLINE> <INDENT> hen [ a - 1 ] = max ( hen [ a - 1 ] , y ) <NEWLINE> <DEDENT> elif a == 4 : <NEWLINE> <INDENT> hen [ a - 1 ] = min ( hen [ a - 1 ] , y ) <NEWLINE> <DEDENT> <DEDENT> yoko = hen [ 1 ] - hen [ 0 ] <NEWLINE> tate = hen [ 3 ] - hen [ 2 ] <NEWLINE> if yoko < 0 or tate < 0 : <NEWLINE> <INDENT> ans = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = yoko * tate <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
w , h , n = map ( int , input ( ) . split ( ) ) <NEWLINE> x = [ ] <NEWLINE> y = [ ] <NEWLINE> a = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> s = map ( int , input ( ) . split ( ) ) <NEWLINE> x . append ( s [ 0 ] ) <NEWLINE> y . append ( s [ 1 ] ) <NEWLINE> a . append ( s [ 2 ] ) <NEWLINE> <DEDENT> x_l = 0 <NEWLINE> x_h = w <NEWLINE> y_l = 0 <NEWLINE> y_h = h <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if a [ i ] == 1 : <NEWLINE> <INDENT> if x_l < x [ i ] : <NEWLINE> <INDENT> x_l = x [ i ] <NEWLINE> <DEDENT> <DEDENT> elif a [ i ] == 2 : <NEWLINE> <INDENT> if x_h > x [ i ] : <NEWLINE> <INDENT> x_h = x [ i ] <NEWLINE> <DEDENT> <DEDENT> elif a [ i ] == 3 : <NEWLINE> <INDENT> if y_l < y [ i ] : <NEWLINE> <INDENT> y_l = y [ i ] <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if y_h > y [ i ] : <NEWLINE> <INDENT> y_h = y [ i ] <NEWLINE> <DEDENT> <DEDENT> <DEDENT> s = ( x_h - x_l ) * ( y_h - y_l ) <NEWLINE> if s > 0 : <NEWLINE> <INDENT> print ( s ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
W , H , N = map ( int . input ( ) . split ( ) ) <NEWLINE> a , b , c , d = 0 , W , 0 , H <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> x , y , A = map ( int . input ( ) . split ( ) ) <NEWLINE> if A == 1 : <NEWLINE> <INDENT> a = max ( a , x ) <NEWLINE> <DEDENT> if A == 2 : <NEWLINE> <INDENT> b = min ( b , x ) <NEWLINE> <DEDENT> if A == 3 : <NEWLINE> <INDENT> c = max ( c , y ) <NEWLINE> <DEDENT> if A == 4 : <NEWLINE> <INDENT> d = min ( d , y ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( max ( 0 , b - a ) * max ( 0 , d - c ) ) <NEWLINE>
def p_grid ( w , h ) : <NEWLINE> <INDENT> for i in range ( h ) : <NEWLINE> <INDENT> for j in range ( w ) : <NEWLINE> <INDENT> print ( grid [ j + w * i ] , end = <STRING> ) <NEWLINE> <DEDENT> print ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> def coloring ( ) : <NEWLINE> <INDENT> line = input ( ) <NEWLINE> words = line . split ( ) <NEWLINE> W = int ( words [ 0 ] ) <NEWLINE> H = int ( words [ 1 ] ) <NEWLINE> N = int ( words [ 2 ] ) <NEWLINE> <NL> x = 0 <NEWLINE> y = 0 <NEWLINE> w = W <NEWLINE> h = H <NEWLINE> <NL> grid = [ ] <NEWLINE> <NL> for i in range ( h ) : <NEWLINE> <INDENT> for j in range ( w ) : <NEWLINE> <INDENT> grid . append ( 0 ) <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> s = input ( ) <NEWLINE> ws = s . split ( ) <NEWLINE> x = int ( ws [ 0 ] ) <NEWLINE> y = int ( ws [ 1 ] ) <NEWLINE> a = int ( ws [ 2 ] ) <NEWLINE> if a == 1 or a == 3 : <NEWLINE> <COMMENT> <NL> <INDENT> for i in range ( y ) : <NEWLINE> <INDENT> for j in range ( x ) : <NEWLINE> <INDENT> grid [ j + w * i ] = 1 <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( h ) : <NEWLINE> for j in range ( w ) : <NEWLINE> <INDENT> print ( grid [ j + w * i ] , end = <STRING> ) <NEWLINE> <DEDENT> print ( ) <NEWLINE> <NL> <DEDENT> if a == 2 : <NEWLINE> <COMMENT> <NL> <INDENT> for i in range ( y ) : <NEWLINE> <INDENT> for j in range ( x , w ) : <NEWLINE> <INDENT> grid [ j + w * i ] = 1 <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( h ) : <NEWLINE> for j in range ( w ) : <NEWLINE> <INDENT> print ( grid [ j + w * i ] , end = <STRING> ) <NEWLINE> <DEDENT> print ( ) <NEWLINE> <NL> <DEDENT> if a == 4 : <NEWLINE> <COMMENT> <NL> <INDENT> for i in range ( y , h ) : <NEWLINE> <INDENT> for j in range ( x ) : <NEWLINE> <INDENT> grid [ j + w * i ] = 1 <NEWLINE> <NL> <DEDENT> <DEDENT> for i in range ( h ) : <NEWLINE> for j in range ( w ) : <NEWLINE> <INDENT> print ( grid [ j + w * i ] , end = <STRING> ) <NEWLINE> <DEDENT> print ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( grid . count ( 0 ) ) <NEWLINE> <NL> <NL> <NL> <NL> <DEDENT> coloring ( ) <NEWLINE>
import sys <NEWLINE> <NL> def nextrec ( coor , pt ) : <NEWLINE> <INDENT> if pt [ 2 ] == 1 : <NEWLINE> <INDENT> coor [ 0 ] = min ( max ( coor [ 0 ] , pt [ 0 ] ) , coor [ 2 ] ) <NEWLINE> <DEDENT> elif pt [ 2 ] == 2 : <NEWLINE> <INDENT> coor [ 2 ] = max ( min ( coor [ 2 ] , pt [ 0 ] ) , coor [ 0 ] ) <NEWLINE> <DEDENT> elif pt [ 2 ] == 3 : <NEWLINE> <INDENT> coor [ 1 ] = min ( max ( coor [ 1 ] , pt [ 1 ] ) , coor [ 3 ] ) <NEWLINE> <DEDENT> elif pt [ 2 ] == 4 : <NEWLINE> <INDENT> coor [ 3 ] = max ( min ( coor [ 3 ] , pt [ 1 ] ) , coor [ 1 ] ) <NEWLINE> <DEDENT> <DEDENT> def main ( w , h , n , pts ) : <NEWLINE> <INDENT> rec = [ 0 , 0 , w , h ] <NEWLINE> for x in range ( n ) : <NEWLINE> <INDENT> nextrec ( rec , pt [ x ] ) : <NEWLINE> <DEDENT> return ( rec [ 0 ] - rec [ 2 ] ) * ( rec [ 1 ] - rec [ 3 ] ) <NEWLINE> <NL> <DEDENT> w , h , n = map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) ) <NEWLINE> pts = [ list ( map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) ) ) for x in range ( n ) ] <NEWLINE> <NL> print ( main ( w , h , n , pts ) ) <NEWLINE>
W , H , N = map ( int , input ( ) . split ( ) ) <NEWLINE> xya = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] <NEWLINE> <NL> S = [ [ 1 ] * W for _ in range ( H ) ] <NEWLINE> for x , y , a in xya : <NEWLINE> <INDENT> if a == 1 : <NEWLINE> <INDENT> for i in range ( H ) : <NEWLINE> <INDENT> for j in range ( x ) : <NEWLINE> <INDENT> S [ i ] [ j ] = 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> elif a == 2 : <NEWLINE> <INDENT> for i in range ( x , W ) : <NEWLINE> <INDENT> for j in range ( x , W ) <NEWLINE> <INDENT> S [ i ] [ j ] = 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> elif a == 3 : <NEWLINE> <INDENT> for i in range ( y ) : <NEWLINE> <INDENT> for j in range ( W ) : <NEWLINE> <INDENT> S [ i ] [ j ] = 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( y , H ) : <NEWLINE> <INDENT> for j in range ( W ) : <NEWLINE> <INDENT> S [ i ] [ j ] = 0 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( sum ( S ) ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> import sys <NEWLINE> from io import StringIO <NEWLINE> import unittest <NEWLINE> <NL> <NL> class TestClass ( unittest . TestCase ) : <NEWLINE> <INDENT> def assertIO ( self , input , output ) : <NEWLINE> <INDENT> stdout , stdin = sys . stdout , sys . stdin <NEWLINE> sys . stdout , sys . stdin = StringIO ( ) , StringIO ( input ) <NEWLINE> resolve ( ) <NEWLINE> sys . stdout . seek ( 0 ) <NEWLINE> out = sys . stdout . read ( ) [ : - 1 ] <NEWLINE> sys . stdout , sys . stdin = stdout , stdin <NEWLINE> self . assertEqual ( out , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_1 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_2 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <DEDENT> def test_入力例_3 ( self ) : <NEWLINE> <INDENT> input = <STRING> <NEWLINE> output = <STRING> <NEWLINE> self . assertIO ( input , output ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> def resolve ( ) : <NEWLINE> <INDENT> W , H , N = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ ] <NEWLINE> ox = 0 <NEWLINE> oy = 0 <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> <DEDENT> for i in range ( N ) : <NEWLINE> <INDENT> if a [ i ] [ 2 ] == 1 : <NEWLINE> <INDENT> ox = max ( a [ i ] [ 0 ] , ox ) <NEWLINE> <DEDENT> elif a [ i ] [ 2 ] == 2 : <NEWLINE> <INDENT> W = min ( a [ i ] [ 0 ] , W ) <NEWLINE> <DEDENT> elif a [ i ] [ 2 ] == 3 : <NEWLINE> <INDENT> oy = max ( a [ i ] [ 1 ] , oy ) <NEWLINE> <DEDENT> elif a [ i ] [ 2 ] == 4 : <NEWLINE> <INDENT> H = min ( a [ i ] [ 1 ] , H ) <NEWLINE> <DEDENT> <DEDENT> print ( max ( ( W - ox ) ) * max ( ( H - oy ) , 0 ) ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <COMMENT> <NL> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
a = input ( ) <NEWLINE> b = 0 <NEWLINE> for i in range ( len ( a ) - 1 ) : <NEWLINE> <INDENT> a [ i ] != a [ i + 1 ] : <NEWLINE> <INDENT> b = b + 1 <NEWLINE> <DEDENT> <DEDENT> if a [ - 2 ] != a [ - 1 ] : <NEWLINE> <INDENT> b = b + 1 <NEWLINE> <DEDENT> print ( b ) <NEWLINE>
S = input ( ) <NEWLINE> X = S [ 0 ] <NEWLINE> ans = 0 <NEWLINE> while 1 : <NEWLINE> <INDENT> for i in range ( S ) : <NEWLINE> <INDENT> if S [ i ] != X : <NEWLINE> <INDENT> ans += 1 <NEWLINE> X = S [ i ] <NEWLINE> S = S [ i : ] <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <NL>
s = input ( ) <NEWLINE> ans = 0 <NEWLINE> <NL> for i in range ( len ( s ) - 1 ) : <NEWLINE> <INDENT> if s [ i ] != S [ i + 1 ] : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
S = input ( ) <NEWLINE> cntb = 1000000 if if S [ 0 ] == <STRING> and S [ - 1 ] == <STRING> else 0 <NEWLINE> cntw = 1000000 if S [ 0 ] == <STRING> and S [ - 1 ] == <STRING> else 0 <NEWLINE> for s in S . split ( <STRING> ) : <NEWLINE> <INDENT> if s != <STRING> : <NEWLINE> <INDENT> cntb += 1 <NEWLINE> <DEDENT> <DEDENT> for s in S . split ( <STRING> ) : <NEWLINE> <INDENT> if s != <STRING> : <NEWLINE> <INDENT> cntw += 1 <NEWLINE> <DEDENT> <DEDENT> print ( min ( cntb , cntw ) ) <NEWLINE>
<INDENT> def main ( ) : <NEWLINE> <INDENT> s = str ( input ( ) ) <NEWLINE> b_count = s . count ( <STRING> ) <NEWLINE> w_count = len ( s ) - b_count <NEWLINE> <NL> if b_count == len ( s ) or w_count == len ( s ) : <NEWLINE> <INDENT> count = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count = 0 <NEWLINE> index = 0 <NEWLINE> alp = s [ index ] <NEWLINE> <NL> while True : <NEWLINE> <INDENT> if b_count == 0 or w_count == 0 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if s [ index ] == <STRING> : <NEWLINE> <INDENT> b_count -= 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> w_count -= 1 <NEWLINE> <NL> <DEDENT> if s [ index ] == alp : <NEWLINE> <INDENT> index += 1 <NEWLINE> continue <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count += 1 <NEWLINE> alp = s [ index ] <NEWLINE> index += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> if not ( b_count == 0 and w_count == 0 ) : <NEWLINE> <INDENT> count += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( count ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
S = input ( ) <NEWLINE> List = list ( S ) <NEWLINE> trial = 0 <NEWLINE> for i in range ( 1 , len ( List ) ) : <NEWLINE> <INDENT> if List [ i ] != List [ i - 1 ] : <NEWLINE> <INDENT> trial += 1 <NEWLINE> <DEDENT> <DEDENT> print ( res ) <NEWLINE>
n = input ( ) <NEWLINE> gr = itertools . groupby ( n ) <NEWLINE> print ( len ( gr ) - 1 ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> using namespace std ; <NEWLINE> typedef long long ll ; <NEWLINE> <NL> int main ( ) { <NEWLINE> <INDENT> cin . tie ( 0 ) ; <NEWLINE> ios : : sync_with_stdio ( false ) ; <NEWLINE> string s ; <NEWLINE> int ans = 0 ; <NEWLINE> cin >> s ; <NEWLINE> rep ( i , s . size ( ) - 1 ) { <NEWLINE> <INDENT> if ( s [ i ] != s [ i + 1 ] ) { <NEWLINE> <INDENT> ans + + ; <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE> cout << ans << <STRING> ; <NEWLINE> <DEDENT> } <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> S = input ( ) <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> s = S [ 0 ] <NEWLINE> <NL> r = 0 <NEWLINE> <NL> for i in range ( 1 , len ( S ) ) : <NEWLINE> <INDENT> if s != S [ i ] : <NEWLINE> <INDENT> r += 1 <NEWLINE> <NL> <DEDENT> s = S [ i ] <NEWLINE> <NL> <DEDENT> print ( res ) <NEWLINE>
<COMMENT> <NL> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <NL> def calcGroup ( s ) : <NEWLINE> <INDENT> whiteCount = 0 <NEWLINE> blackCount = 0 <NEWLINE> prev = <STRING> <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] == prev : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if s [ i ] = <STRING> : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> elif s [ i ] = <STRING> : <NEWLINE> <INDENT> whiteCount += 1 <NEWLINE> <DEDENT> elif s [ i ] = <STRING> : <NEWLINE> <INDENT> blackCount += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> raise ValueError <NEWLINE> <DEDENT> <DEDENT> prev = s [ i ] <NEWLINE> <DEDENT> return whiteCount , blackCount <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> def solve ( s ) : <NEWLINE> <COMMENT> <NL> <INDENT> return min ( calcGroup ( s ) ) <NEWLINE> <NL> <NL> <NL> <DEDENT> def main ( ) : <NEWLINE> <INDENT> s = input ( ) <NEWLINE> print ( solve ( s ) ) <NEWLINE> return <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
if ( n == len ( s ) and ( s == t ) ) : <NEWLINE> <INDENT> print ( n ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ind = [ 0 ] <NEWLINE> for i in range ( 1 , len ( s ) ) : <NEWLINE> <INDENT> if s [ - i : ] == t [ : i ] : <NEWLINE> <INDENT> ind . append ( i ) <NEWLINE> <NL> <DEDENT> <DEDENT> ind . reverse ( ) <NEWLINE> for i in ind : <NEWLINE> <INDENT> if i == 0 : <NEWLINE> <INDENT> print ( 2 * n ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> res = s [ 0 : - i ] + t <NEWLINE> if len ( res ) >= n : <NEWLINE> <INDENT> print ( len ( res ) ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
n = int ( input ( ) ) <NEWLINE> s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> <NL> for i in range ( n , 2 * n - 1 ) : <NEWLINE> <INDENT> if s [ : 2 * n - i ] == t [ 2 * n - i ] : <NEWLINE> <INDENT> print ( i ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( 2 * n ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> while True : <NEWLINE> <INDENT> if s == t : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> s = s [ 1 : ] <NEWLINE> t = [ : - 1 ] <NEWLINE> n += 1 <NEWLINE> <DEDENT> print ( n ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> s = input ( ) <NEWLINE> t = input ( ) <NEWLINE> answer = n <NEWLINE> for i in range ( n + 1 ) : <NEWLINE> <INDENT> if answer == n : <NEWLINE> <INDENT> newstring = s [ 0 : i ] + t [ : n ] <NEWLINE> if newstring [ 0 : n ] == s : <NEWLINE> <INDENT> answer += i <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( answer ) <NEWLINE>
n , x = map ( int , input ( ) . split ( ) ) <NEWLINE> if abs ( n - x ) <= 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if n == x : <NEWLINE> <INDENT> for i in range ( 2 * ( n - 1 ) ) : <NEWLINE> <INDENT> print ( i + 1 ) <NEWLINE> <DEDENT> <DEDENT> elif x == n - 1 : <NEWLINE> <INDENT> print ( n ) <NEWLINE> for i in range ( 2 * ( n - 1 ) ) : <NEWLINE> <INDENT> if i != n : <NEWLINE> <INDENT> print ( i ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else x == n - 1 : <NEWLINE> <INDENT> for i in range ( 2 * ( n - 1 ) ) : <NEWLINE> <INDENT> if i != n : <NEWLINE> <INDENT> print ( i ) <NEWLINE> <DEDENT> <DEDENT> print ( n ) <NEWLINE> <DEDENT>
n , x = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> if x == 1 or x == 2 * n - 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x == 2 * n - 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> print ( i + 1 ) <NEWLINE> <DEDENT> print ( x ) <NEWLINE> print ( 2 * n - 1 ) <NEWLINE> for i in range ( n - 1 , x - 1 ) : <NEWLINE> <INDENT> print ( i + 1 ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> l = [ i for i in range ( 1 , x - 1 ) ] + [ i for i in range ( x , 2 * n - 3 ) ] <NEWLINE> for i in range ( n - 1 ) : <NEWLINE> <INDENT> print ( l [ i ] + 1 ) <NEWLINE> <DEDENT> print ( 2 * n - 1 ) <NEWLINE> print ( x ) <NEWLINE> print ( 1 ) <NEWLINE> print ( 2 * n - 2 ) <NEWLINE> for i in range ( n - 1 , 2 * n - 3 ) : <NEWLINE> <INDENT> print ( l [ i ] + 1 ) <NEWLINE> <DEDENT> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> s = input ( ) <NEWLINE> a = s . find ( <STRING> ) <NEWLINE> if ( a == - 1 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> a2 = s . find ( <STRING> , a + 1 , len ( s ) ) <NEWLINE> if ( a2 == - 1 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> main ( ) <NEWLINE>
k , t = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> nums = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> m = max ( nums ) <NEWLINE> rest = k - m <NEWLINE> if max - rest - 1 > 0 : <NEWLINE> <INDENT> print ( max - rest - 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> a = list ( map ( int , input ( ) split ( ) ) ) <NEWLINE> s = max ( a ) <NEWLINE> print ( max ( 2 * s - n - 1 ) ) <NEWLINE>
K , T = map ( int , input ( ) . split ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> A = sorted ( A , reverse = True ) <NEWLINE> <NL> print ( max ( 0 , A [ 0 ] - 1 - sum ( A [ 1 : ] ) ) <NEWLINE>
<COMMENT> <NL> import sys <NEWLINE> <COMMENT> <NL> sysread = sys . stdin . buffer . readline <NEWLINE> read = sys . stdin . buffer . read <NEWLINE> from heapq import heappop , heappush <NEWLINE> from collections import defaultdict <NEWLINE> sys . setrecursionlimit ( 10 ** 7 ) <NEWLINE> import math <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> from collections import deque <NEWLINE> <COMMENT> <NL> <NL> INF = 1 << 50 <NEWLINE> <NL> def run ( ) : <NEWLINE> <INDENT> K , T , * A = map ( int , read ( ) . split ( ) ) <NEWLINE> A = sorted ( A ) <NEWLINE> A = deque ( A ) <NEWLINE> high , low = 0 , 0 <NEWLINE> last = None <NEWLINE> while A : <NEWLINE> <COMMENT> <NL> <INDENT> if high == 1 : <NEWLINE> <INDENT> A . appendleft ( 1 ) <NEWLINE> high = A . pop ( ) <NEWLINE> <NL> <DEDENT> if not high : <NEWLINE> <INDENT> high = A . pop ( ) <NEWLINE> if high == 1 : break <NEWLINE> <DEDENT> elif not low : <NEWLINE> <INDENT> low = A . popleft ( ) <NEWLINE> <COMMENT> <NL> <NL> <DEDENT> val = min ( low , high - 1 ) <NEWLINE> if not val : <NEWLINE> <INDENT> last = None <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> last = <STRING> <NEWLINE> <DEDENT> high -= val <NEWLINE> low -= val <NEWLINE> <COMMENT> <NL> <DEDENT> if high == 1 <NEWLINE> <INDENT> if last == None : <NEWLINE> <INDENT> print ( max ( low - high - 1 , 0 ) ) <NEWLINE> return <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( max ( low - 1 , 0 ) ) ) <NEWLINE> return <NEWLINE> <DEDENT> <DEDENT> print ( high - 1 + max ( low - 1 , 0 ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> run ( ) <NEWLINE> <DEDENT>
3 3 33 <NEWLINE>
a = set ( int , input ( ) . split ( ) ) <NEWLINE> print ( len ( a ) <NEWLINE>
l = set ( list ( map , input ( ) . split ( ) ) ) <NEWLINE> print ( len ( l ) ) <NEWLINE>
a = set ( map ( int , input ( ) ) ) <NEWLINE> print ( len ( a ) ) <NEWLINE>
a = input ( ) . split ( ) <NEWLINE> a . sort ( ) <NEWLINE> cnt = 0 <NEWLINE> while len ( s ) > 0 : <NEWLINE> <INDENT> i = a . count ( a . pop ( 0 ) ) <NEWLINE> for j in range ( i ) : <NEWLINE> <INDENT> a . pop ( 0 ) <NEWLINE> <DEDENT> cnt += 1 <NEWLINE> <DEDENT> print ( cnt ) <NEWLINE>
a = list ( map ( int , input ( ) ) ) <NEWLINE> print ( len ( set ( a ) ) ) <NEWLINE>
<COMMENT> <NL> lst = input ( ) . split ( ) <NEWLINE> <NL> <COMMENT> <NL> for i in range ( len ( lst ) ) : <NEWLINE> <INDENT> lst [ i ] = int ( lst [ i ] ) <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> lst . sort ( ) <NEWLINE> <NL> <COMMENT> <NL> if lst [ 0 ] == lst [ 2 ] <NEWLINE> <INDENT> print ( 3 ) <NEWLINE> <DEDENT> elif lst [ 0 ] == lst [ 1 ] or lst [ 1 ] == lst [ 2 ] : <NEWLINE> <INDENT> print ( 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT>
print ( len ( set ( [ input ( ) for i in range ( 3 ) ] ) ) ) <NEWLINE>
s = list ( input ( ) . split ( ) ) <NEWLINE> print ( len ( set ( s ) ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> count = 0 <NEWLINE> <NL> if a != b : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> if b != c : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> if a != c : <NEWLINE> <INDENT> count += 1 <NEWLINE> <NL> <DEDENT> print ( int ( count / 2 ) ) <NEWLINE>
j = int ( input ( ) ) <NEWLINE> <NL> x = j . split ( ) <NEWLINE> y = [ ] <NEWLINE> <NL> for i in x : <NEWLINE> <INDENT> if ( i not in y ) : <NEWLINE> <INDENT> y . append ( i ) <NEWLINE> <DEDENT> <DEDENT> print ( len ( y ) ) <NEWLINE>
def paint ( ) : <NEWLINE> <INDENT> a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> count = 1 <NEWLINE> if a != b : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> if a != c and b != c : <NEWLINE> <INDENT> count += 1 <NEWLINE> <NL> <DEDENT> print ( count ) <NEWLINE> <NL> <DEDENT> paint ( ) <NEWLINE>
s = set ( int ( input ( ) . split ( ) ) ) <NEWLINE> print ( len ( s ) ) <NEWLINE>
abc = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> if a == c : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> elif a == b or b == c : <NEWLINE> <INDENT> print ( 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 3 ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a = b and b = c : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> elif a = b and a != c : <NEWLINE> <INDENT> print ( 2 ) <NEWLINE> <DEDENT> elif a != b and b = c : <NEWLINE> <INDENT> print ( 2 ) <NEWLINE> <DEDENT> elif a = c and a != b : <NEWLINE> <INDENT> print ( 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( 3 ) <NEWLINE> <DEDENT>
sample = input ( ) <NEWLINE> sample_list = sample . split ( <STRING> ) <NEWLINE> count = 0 <NEWLINE> flag = 0 <NEWLINE> for i in range ( len ( sample_list ) ) : <NEWLINE> <INDENT> for j in range ( 1 , i ) : <NEWLINE> <INDENT> if sample_list [ i ] == sample_list [ j ] : <NEWLINE> <INDENT> flag = 1 <NEWLINE> <DEDENT> if flag == 0 : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> flag = 0 <NEWLINE> <DEDENT> return count <NEWLINE> <DEDENT>
def iroha ( ) : <NEWLINE> <INDENT> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == b and b == c and a == c : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> elif a != b and b != c and a != c : <NEWLINE> <INDENT> print ( 3 ) <NEWLINE> <DEDENT> elif else : <NEWLINE> <INDENT> print ( 2 ) <NEWLINE> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> iroha ( ) <NEWLINE> <NL> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> m = set ( [ a , b , c ] ) <NEWLINE> print ( len ( m ) <NEWLINE>
lst = list ( map ( int , input ( ) . strip ( ) ) ) <NEWLINE> N = lst [ 0 ] <NEWLINE> K = lst [ 1 ] <NEWLINE> print ( K * ( N - 1 ) * ( K - 1 ) ) <NEWLINE>
ans = 1 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if i == 0 : <NEWLINE> <INDENT> ans *= K <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans *= K - 1 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
i = input ( ) <NEWLINE> j = i . split ( ) <NEWLINE> num_balls = j [ 0 ] <NEWLINE> num_colors = j [ 1 ] <NEWLINE> product = num_colors <NEWLINE> if ( num_balls > 1 and num_colors == 1 ) : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> for i in range ( 1 , num_balls ) : <NEWLINE> <INDENT> product *= ( num_balls - 1 ) <NEWLINE> <DEDENT> print ( product ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> <NL> ans = 1 <NEWLINE> <NL> for i in range ( k ) : <NEWLINE> <INDENT> ans = ans * n <NEWLINE> n -= 1 <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) % 10 <NEWLINE> hon = [ 2 , 4 , 5 , 7 , 9 ] <NEWLINE> bon = [ 3 ] <NEWLINE> <NL> if N in hon : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif N in bon : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( K * ( ( K - 1 ) ** ( N - 1 ) ) <NEWLINE>
sample = input ( ) <COMMENT> <NEWLINE> new_sample = sample . split ( <STRING> ) <NEWLINE> <NL> ball = int ( new_sample [ 0 ] ) <COMMENT> <NEWLINE> color = int ( new_sample [ 1 ] ) <COMMENT> <NEWLINE> if color == 1 and ball > 1 : <NEWLINE> <INDENT> print ( 0 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> product = color <NEWLINE> <NL> <NL> <COMMENT> <NL> for i in range ( 1 , ball ) : <NEWLINE> <INDENT> product *= ( color - 1 ) <NEWLINE> <DEDENT> print ( product ) <NEWLINE> <NL> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <DEDENT>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( k * ( ( k - 1 ) ** ( n - 1 ) ) <NEWLINE>
import math <NEWLINE> n = int ( input ( ) ) <NEWLINE> A , B = 0 , 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> x , y = int ( input . split ( ) ) <NEWLINE> dx , dy = 1 , 1 <NEWLINE> if A > x : <NEWLINE> <INDENT> dx = A // x <NEWLINE> if A % x != 0 : <NEWLINE> <INDENT> dx += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if B > y : <NEWLINE> <INDENT> dy = B // y <NEWLINE> if B % y != 0 : <NEWLINE> <INDENT> dy += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> a = max ( dx , dy ) <NEWLINE> A , B = a * x , a * y <NEWLINE> <DEDENT> print ( A + B ) <NEWLINE>
import sys <NEWLINE> import numpy as np <NEWLINE> import random <NEWLINE> import math <NEWLINE> from decimal import Decimal <NEWLINE> import itertools <NEWLINE> import re <NEWLINE> import bisect <NEWLINE> from collections import deque , Counter <NEWLINE> from functools import lru_cache <NEWLINE> <NL> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> INF = 10 ** 13 <NEWLINE> def LI ( ) : return list ( map ( int , sys . stdin . buffer . readline ( ) . split ( ) ) ) <NEWLINE> def I ( ) : return int ( sys . stdin . buffer . readline ( ) ) <NEWLINE> def LS ( ) : return sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( <STRING> ) . split ( ) <NEWLINE> def S ( ) : return sys . stdin . buffer . readline ( ) . rstrip ( ) . decode ( <STRING> ) <NEWLINE> def IR ( n ) : return [ I ( ) for i in range ( n ) ] <NEWLINE> def LIR ( n ) : return [ LI ( ) for i in range ( n ) ] <NEWLINE> def SR ( n ) : return [ S ( ) for i in range ( n ) ] <NEWLINE> def LSR ( n ) : return [ LS ( ) for i in range ( n ) ] <NEWLINE> def SRL ( n ) : return [ list ( S ( ) ) for i in range ( n ) ] <NEWLINE> def MSRL ( n ) : return [ [ int ( j ) for j in list ( S ( ) ) ] for i in range ( n ) ] <NEWLINE> def SERIES ( n ) : return np . fromstring ( sys . stdin . buffer . read ( ) , dtype = np . int32 , sep = <STRING> ) <NEWLINE> def GRID ( h , w ) : return np . fromstring ( sys . stdin . buffer . read ( ) , dtype = np . int32 , sep = <STRING> ) . reshape ( h , - 1 ) [ : , : w ] <NEWLINE> def GRIDfromString ( h , w ) : return np . frombuffer ( sys . stdin . buffer . read ( ) , <STRING> ) . reshape ( h , - 1 ) [ : , : w ] <NEWLINE> MOD = 1000000007 <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> n = I ( ) <NEWLINE> x , y = 1 , 1 <NEWLINE> for _ in range ( n ) : <NEWLINE> <INDENT> t , a = LI ( ) <NEWLINE> m = max ( ( x + t - 1 ) // a , ( y + a - 1 ) // b ) <NEWLINE> x , y = m * t , m * a <NEWLINE> <DEDENT> print ( x + y ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> n = len ( s ) <NEWLINE> p = 0 <NEWLINE> for e in s : <NEWLINE> <INDENT> if e == <STRING> : <NEWLINE> <INDENT> p += 1 <NEWLINE> <DEDENT> <DEDENT> print ( s // 2 - p ) <NEWLINE>
import math <NEWLINE> N = int ( input ( ) ) <NEWLINE> t = 1 <NEWLINE> a = 1 <NEWLINE> <NL> def t_small ( t , a , t1 , a1 ) : <NEWLINE> <INDENT> gain = - ( - t // t1 ) <NEWLINE> t = gain * t1 <NEWLINE> a_tmp = gain * a1 <NEWLINE> if a_tmp < a : <NEWLINE> <INDENT> gain_a = - ( - a // a_tmp ) <NEWLINE> t *= gain_a <NEWLINE> a = a_tmp * gain_a <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a = a_tmp <NEWLINE> <DEDENT> return t , a , t + a <NEWLINE> <NL> <DEDENT> def a_small ( t , a , t1 , a1 ) : <NEWLINE> <INDENT> gain = - ( - a // a1 ) <NEWLINE> a = gain * a1 <NEWLINE> t_tmp = gain * t1 <NEWLINE> if t_tmp < t : <NEWLINE> <INDENT> gain_t = - ( - t // t_tmp ) <NEWLINE> a *= gain_t <NEWLINE> t = t_tmp * gain_t <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t = t_tmp <NEWLINE> <DEDENT> return t , a , t + a <NEWLINE> <NL> <DEDENT> ans = 0 <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> t1 , a1 = map ( int , input ( ) . split ( ) ) <NEWLINE> tt1 , aa1 , sta1 = t_small ( t , a , t1 , a1 ) <NEWLINE> tt2 , aa2 , sta2 = a_small ( t , a , t1 , a1 ) <NEWLINE> if sta1 <= sta2 : <NEWLINE> <INDENT> t = tt1 ; a = aa1 , ans = sta1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t = tt2 , a = aa2 , ans = sta2 <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import sys <NEWLINE> from fractions import gcd <NEWLINE> <NL> sys . setrecursionlimit ( 10 ** 8 ) <NEWLINE> ini = lambda : int ( sys . stdin . readline ( ) ) <NEWLINE> inm = lambda : map ( int , sys . stdin . readline ( ) . split ( ) ) <NEWLINE> inl = lambda : list ( inm ( ) ) <NEWLINE> ins = lambda : sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> debug = lambda * a , ** kw : print ( * a , ** dict ( file = sys . stderr , ** kw ) ) <NEWLINE> <NL> N = ini ( ) <NEWLINE> <NL> <NL> def solve ( ) : <NEWLINE> <INDENT> p = q = 1 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> x , y = inm ( ) <NEWLINE> k = 1 <NEWLINE> while True : <NEWLINE> <INDENT> if x * k >= p and y * k >= q : <NEWLINE> <INDENT> p = x * k <NEWLINE> q = y * k <NEWLINE> break <NEWLINE> <DEDENT> k += 1 <NEWLINE> <DEDENT> <DEDENT> return p + q <NEWLINE> <NL> <NL> <DEDENT> print ( solve ( ) ) <NEWLINE>
<INDENT> s = input ( ) <NEWLINE> print ( ( s . count ( <STRING> ) - s . count ( <STRING> ) ) // 2 ) <NEWLINE> <DEDENT>
n = input ( ) <NEWLINE> a = 0 <NEWLINE> a = <STRING> <NEWLINE> for i , j in zip ( n , a ) : <NEWLINE> <INDENT> if i != j : <NEWLINE> <INDENT> a += 1 <NEWLINE> <DEDENT> <DEDENT> print ( a ) <NEWLINE>
S = input ( ) <NEWLINE> T = <STRING> <NEWLINE> ans = 0 <NEWLINE> for _ in range ( 16 ) : <NEWLINE> <INDENT> ans += S [ i ] != T [ i ] <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
<STRING> <NEWLINE> import numpy as np <NEWLINE> import sys <NEWLINE> <NL> N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> S = str ( input ( ) ) <NEWLINE> <NL> for i in range ( len ( N ) ) : <NEWLINE> <INDENT> if ( S [ i ] == <STRING> ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if ( i >= A + B ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if ( S [ i ] == <STRING> and i < B ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
N , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> S = input ( ) <NEWLINE> <NL> ok_count = 0 <NEWLINE> ok_fcount = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if S [ i ] == <STRING> : <NEWLINE> <INDENT> if ok_count < A + B - 1 <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> ok_count += 1 <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> elif S [ i ] == <STRING> : <NEWLINE> <INDENT> if ok_count <= A + B - 1 and ok_fcount < B - 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> ok_count += 1 <NEWLINE> ok_fcount += 1 <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
n , A , B = map ( int , input ( ) . split ( ) ) <NEWLINE> a , b = 0 <NEWLINE> s = input ( ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> s_i = s [ i ] <NEWLINE> if s_i == <STRING> : <NEWLINE> <INDENT> if ( a + b ) < ( A + B ) : <NEWLINE> <INDENT> a += 1 <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> elif s_i == <STRING> : <NEWLINE> <INDENT> if ( ( a + b ) < ( A + B ) ) & ( b < B ) : <NEWLINE> <INDENT> b += 1 <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT>
N = int ( input ( ) ) <NEWLINE> X = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> HP = [ ] <NEWLINE> for p in range ( 1 , 101 , 1 ) : <NEWLINE> <INDENT> P = [ p ] * len ( X ) <NEWLINE> delta = sum ( [ ( i - j ) ** 2 for ( i , j ) in zip ( X , P ) ] ) <NEWLINE> HP . append ( delta ) <NEWLINE> <NL> <DEDENT> print ( min ( HP ) ) <NEWLINE>
5 2 2 <NEWLINE> ccccc <NEWLINE>
n , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = list ( input ( ) ) <NEWLINE> <NL> result = [ ] <NEWLINE> cnt = 0 <NEWLINE> cnt_b = 0 <NEWLINE> limit = a + b <NEWLINE> <NL> for student in s : <NEWLINE> <INDENT> if student == c : <NEWLINE> <INDENT> result . append ( <STRING> ) <NEWLINE> <DEDENT> elif ( student == <STRING> ) & ( cnt < limit ) : <NEWLINE> <INDENT> result . append ( <STRING> ) <NEWLINE> cnt += 1 <NEWLINE> <DEDENT> elif ( student == <STRING> ) & ( cnt < limit ) & ( cnt_b < b ) : <NEWLINE> <INDENT> result . append ( <STRING> ) <NEWLINE> cnt += 1 <NEWLINE> cnt_b += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> result . append ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> . join ( result ) ) <NEWLINE>
X = input ( ) <NEWLINE> <NL> cache = 0 <NEWLINE> ans = len ( X ) <NEWLINE> <NL> for c in X : <NEWLINE> <INDENT> if c == <STRING> <NEWLINE> <INDENT> cache += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if cache > 0 : <NEWLINE> <INDENT> cache -= 1 <NEWLINE> ans -= 2 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import sys <NEWLINE> if sys . argv [ - 1 ] == <STRING> : <NEWLINE> <INDENT> import os , zlib , base64 <NEWLINE> open ( <STRING> , <STRING> ) . write ( zlib . decompress ( base64 . b85decode ( <STRING> ) ) ) <NEWLINE> os . system ( <STRING> ) <NEWLINE> <DEDENT> import solve <NEWLINE>
s = input ( ) <NEWLINE> print ( s [ : 4 ] + <STRING> + s [ 4 : ] <NEWLINE>
n = input ( ) <NEWLINE> print ( <STRING> . join ( n [ : 4 ] , n [ 4 : ] ) ) <NEWLINE>
<COMMENT> <NL> using namespace std ; <NEWLINE> <NL> int main ( ) { <NEWLINE> <INDENT> string s ; <NEWLINE> cin >> s ; <NEWLINE> <NL> for ( int i = 0 ; i < s . size ( ) ; i + + ) { <NEWLINE> <INDENT> if ( i == 4 ) cout << <STRING> ; <NEWLINE> else cout << s [ i ] ; <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <NL> ans = 0 <NEWLINE> <NL> if N % 2 == 0 : <NEWLINE> <INDENT> for i in range ( N // 2 ) : <NEWLINE> <INDENT> if a [ a [ i ] - 1 ] == i + 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for i in range ( N // 2 + 1 ) : <NEWLINE> <INDENT> if a [ a [ i ] - 1 ] == i + 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> l = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] <NEWLINE> l = l [ 0 ] <NEWLINE> cnt = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if l [ i ] - 1 > i : <NEWLINE> <INDENT> if ( l [ l [ i ] - 1 ] - 1 == i ) : <NEWLINE> <INDENT> cnt += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( cnt ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> if A [ a [ i - 1 ] - 1 ] == i + 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> print ( ans // 2 ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> rabit = [ int ( v ) for v in input ( ) . split ( <STRING> ) ] <NEWLINE> skip = set ( ) <NEWLINE> num = 0 <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> n = rabit [ i ] <NEWLINE> if i in skip : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> if rabit [ n - 1 ] == i + 1 : <NEWLINE> <INDENT> skip . append ( n - 1 ) <NEWLINE> num += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> print ( num ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( a ) : <NEWLINE> <INDENT> if a [ a [ i ] - 1 ] == i + 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <DEDENT> <DEDENT> print ( ans // 2 ) <NEWLINE>
import sys <NEWLINE> import itertools <NEWLINE> <COMMENT> <NL> import time <NEWLINE> import math <NEWLINE> from heapq import heappop , heappush <NEWLINE> from collections import defaultdict <NEWLINE> from collections import Counter <NEWLINE> from collections import deque <NEWLINE> from itertools import permutations <NEWLINE> sys . setrecursionlimit ( 10 ** 7 ) <NEWLINE> <NL> INF = 10 ** 18 <NEWLINE> MOD = 10 ** 9 + 7 <NEWLINE> read = sys . stdin . buffer . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> readlines = sys . stdin . buffer . readlines <NEWLINE> <NL> <COMMENT> <NL> S = input ( ) <NEWLINE> K = int ( input ( ) ) <NEWLINE> <NL> ans = [ ] <NEWLINE> for i , c in enumerate ( S ) : <NEWLINE> <INDENT> num = ord ( <STRING> ) - ord ( c ) + 1 <NEWLINE> if K >= num : <NEWLINE> <INDENT> K -= num <NEWLINE> ans . append ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans . append ( c ) <NEWLINE> <DEDENT> <DEDENT> if K > 0 : <NEWLINE> <INDENT> ans [ - 1 ] = chr ( ( ord ( S [ - 1 ] ) - ord ( <STRING> ) + K ) % 26 + ord ( <STRING> ) ) <NEWLINE> <DEDENT> print ( <STRING> . join ( an ) ) <NEWLINE> <NL>
s , k , t = input ( ) , int ( input ( ) ) , <STRING> <NEWLINE> for q in s : <NEWLINE> <INDENT> if ( p : = ( 123 - ord ( q ) ) % 26 ) <= k : t += <STRING> ; k -= p <NEWLINE> else : t += q <NEWLINE> <DEDENT> * a , b = t <NEWLINE> print ( a + chr ( ( ord ( b ) - 97 + k ) % 26 + 97 ) ) <NEWLINE>
s , k , t = input ( ) , int ( input ( ) ) , <STRING> <NEWLINE> for q in s : <NEWLINE> <INDENT> if ( p : = ( 123 - ord ( q ) ) % 26 ) <= k : n += <STRING> ; K -= i <NEWLINE> else : n += c <NEWLINE> <DEDENT> print ( t [ : - 1 ] + chr ( ( ord ( t [ - 1 ] ) - 97 + k ) % 26 + 97 ) ) <NEWLINE>
def actual ( a , b , h ) : <NEWLINE> <INDENT> return int ( ( a + b ) * h / 2 ) <NEWLINE> <NL> <DEDENT> a , b , h = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( actual ( a , b , h ) ) <NEWLINE>
print ( eval ( <STRING> . replace ( <STRING> , <STRING> ) ) ) <NEWLINE>
a , b , h = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ( a + b ) * h // 2 ) <NEWLINE>
a , b , h = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( ( ( a + b ) * h ) // 2 ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> print ( ( a + b ) * h / 2 ) <NEWLINE>
a = int ( input ( ) . split ( ) ) <NEWLINE> b = int ( input ( ) . split ( ) ) <NEWLINE> h = int ( input ( ) . split ( ) ) <NEWLINE> print ( ( ( a + b ) * h ) // 2 ) <NEWLINE>
a = int ( input ( ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> h = int ( input ( ) ) <NEWLINE> print ( ( a + b ) * h // 2 ) <NEWLINE>
a , b , h = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> answer = ( a + b ) * h // 2 <NEWLINE> <NL> print ( answer ) <NEWLINE>
print ( ( int ( input ( ) ) + int ( input ( ) ) ) * int ( input ( ) // 2 ) <NEWLINE>
( a , b , c ) = ( int ( input ( ) ) , int ( input ( ) ) , int ( input ( ) ) ) <NEWLINE> s = ( a + b ) * h / 2 <NEWLINE> print ( s ) <NEWLINE>
a = [ int ( input ( ) ) for i in range ( 5 ) ] <NEWLINE> ( a [ 0 ] + a [ 1 ] ) * a [ 2 ] / 2 <NEWLINE>
a , b , h = [ input ( ) for _ in range ( 3 ) ] <NEWLINE> print ( int ( ( a + b ) * h / 2 ) ) <NEWLINE>
<INDENT> a , b , h = [ int ( input ( ) ) for _ in range ( 3 ) ] <NEWLINE> print ( ( a + b ) * h / 2 ) <NEWLINE> <DEDENT>
list = [ ] <NEWLINE> <NL> for i in range ( 3 ) : <NEWLINE> <INDENT> list . append ( int ( input ( ) ) ) <NEWLINE> <NL> <DEDENT> area = ( list [ 0 ] + list [ 1 ] ) * list [ 2 ] / 2 ) <NEWLINE> <NL> <NL> print ( int ( area ) ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> h = int ( input ( ) / 2 ) <NEWLINE> print ( ( a + b ) * h ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> print ( ( a + b ) * h // 2 ) <NEWLINE>
a , b , c = eval ( <STRING> * 3 ) <NEWLINE> print ( ( a + b ) * h // 2 ) <NEWLINE>
a , b , h = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ( a + b ) * h / 2 ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> print ( ( a + b ) * h // 2 ) <NEWLINE>
import sys <NEWLINE> <NL> def main ( a , b , h ) : <NEWLINE> <INDENT> reuturn ( a + b ) * h // 2 <NEWLINE> <NL> <DEDENT> a = int ( sys . stdin . readline ( ) . strip ( ) ) <NEWLINE> b = int ( sys . stdin . readline ( ) . strip ( ) ) <NEWLINE> h = int ( sys . stdin . readline ( ) . strip ( ) ) <NEWLINE> <NL> print ( main ( a , b , h ) ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ( a + b ) * h / 2 ) <NEWLINE>
a , b , h = [ int ( i ) for i in input ( ) ] <NEWLINE> print ( ( a + b ) * h / 2 ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ( a + b ) * c // 2 ) <NEWLINE>
a , b , h = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( ( a + b ) * h / 2 ) <NEWLINE>
<COMMENT> <NL> a , b , h = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> answer = ( a + b ) * h / 2 <NEWLINE> <NL> <COMMENT> <NL> print ( int ( answer ) ) <NEWLINE>
a , b , h = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( ( a + b ) * h // 2 ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> h = int ( input ( ) ) <NEWLINE> print ( in ( ( ( a + b ) * h ) / 2 ) ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> h = int ( input ( ) ) <NEWLINE> area = 0.5 ( a + b ) * h <NEWLINE> print ( area ) <NEWLINE>
d = { <STRING> : input ( ) , <STRING> : input ( ) , <STRING> : input ( ) } <NEWLINE> pointer = <STRING> <NEWLINE> while True : <NEWLINE> <INDENT> if 0 < len ( d [ pointer ] ) : <NEWLINE> <INDENT> tmp = d [ pointer ] [ 0 ] <NEWLINE> d [ pointer ] = s [ pointer ] [ 1 : ] <NEWLINE> pointer = tmp <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( pointer . upper ( ) ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
<COMMENT> <NL> using namespace std ; <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> typedef long long ll ; <NEWLINE> typedef pair < int , int > P ; <NEWLINE> const int INF = 100100100 ; <NEWLINE> const int MOD = ( int ) 1e9 + 7 ; <NEWLINE> const double EPS = 1e-9 ; <NEWLINE> struct Edge { <NEWLINE> <INDENT> ll to ; <NEWLINE> ll cost ; <NEWLINE> <DEDENT> } ; <NEWLINE> int main ( ) { <NEWLINE> <INDENT> string sa , sb , sc ; <NEWLINE> cin >> sa >> sb >> sc ; <NEWLINE> char now = <STRING> ; <NEWLINE> while ( true ) { <NEWLINE> <INDENT> if ( now == <STRING> ) { <NEWLINE> <INDENT> if ( sa . size ( ) == 0 ) { <NEWLINE> <INDENT> cout << <STRING> << endl ; <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE> now = sa [ 0 ] ; <NEWLINE> sa . erase ( sa . begin ( ) ) ; <NEWLINE> <DEDENT> } else if ( now == <STRING> ) { <NEWLINE> <INDENT> if ( sb . size ( ) == 0 ) { <NEWLINE> <INDENT> cout << <STRING> << endl ; <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE> now = sb [ 0 ] ; <NEWLINE> sb . erase ( sb . begin ( ) ) ; <NEWLINE> <DEDENT> } else { <NEWLINE> <INDENT> if ( sc . size ( ) == 0 ) { <NEWLINE> <INDENT> cout << <STRING> << endl ; <NEWLINE> return 0 ; <NEWLINE> <DEDENT> } <NEWLINE> now = sc [ 0 ] ; <NEWLINE> sc . erase ( sc . begin ( ) ) ; <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> } <NEWLINE>
for i in range ( 3 ) : <NEWLINE> <INDENT> s . append ( input ( ) ) <NEWLINE> <DEDENT> member = [ <STRING> , <STRING> , <STRING> ] <NEWLINE> turn = 0 <NEWLINE> <NL> while True : <NEWLINE> <INDENT> if s [ turn ] == <STRING> : <NEWLINE> <INDENT> winner = turn <NEWLINE> break <NEWLINE> <DEDENT> elif s [ turn ] [ 0 ] == <STRING> : <NEWLINE> <INDENT> s [ turn ] = s [ turn ] [ 1 : ] <NEWLINE> turn = 0 <NEWLINE> <DEDENT> elif s [ turn ] [ 0 ] == <STRING> : <NEWLINE> <INDENT> s [ turn ] = s [ turn ] [ 1 : ] <NEWLINE> turn = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> s [ turn ] = s [ turn ] [ 1 : ] <NEWLINE> turn = 2 <NEWLINE> <DEDENT> <DEDENT> print ( member [ winner ] ) <NEWLINE> <NL>
alice = input ( ) <NEWLINE> bob = input ( ) <NEWLINE> charlie = input ( ) <NEWLINE> <NL> for i in range ( len ( alice ) ) : <NEWLINE> <INDENT> if alice [ i ] == <STRING> : <NEWLINE> <INDENT> while alice [ i ] == <STRING> : <NEWLINE> <INDENT> alice . pop ( i ) <NEWLINE> <NL> <DEDENT> <DEDENT> elif alice [ i ] == <STRING> : <NEWLINE> <INDENT> alice . pop ( i ) <NEWLINE> if bob [ i ] == <STRING> : <NEWLINE> <INDENT> while bob [ i ] == <STRING> : <NEWLINE> <INDENT> bob . pop ( i ) <NEWLINE> <DEDENT> <DEDENT> elif bob [ i ] == <STRING> : <NEWLINE> <INDENT> while bob [ i ] == <STRING> : <NEWLINE> <INDENT> alice . pop ( i ) <NEWLINE> <DEDENT> <DEDENT> elif bob [ i ] == <STRING> : <NEWLINE> <INDENT> while bob [ i ] == <STRING> : <NEWLINE> <INDENT> charlie . pop ( i ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> elif alice [ i ] == <STRING> : <NEWLINE> <INDENT> alice . pop ( i ) <NEWLINE> if charlie [ i ] == <STRING> : <NEWLINE> <INDENT> while charlie [ i ] == <STRING> : <NEWLINE> <INDENT> charlie . pop ( i ) <NEWLINE> <DEDENT> <DEDENT> elif charlie [ i ] == <STRING> : <NEWLINE> <INDENT> while charlie [ i ] == <STRING> : <NEWLINE> <INDENT> bob . pop ( i ) <NEWLINE> <DEDENT> <DEDENT> elif charlie [ i ] == <STRING> : <NEWLINE> <INDENT> while charlie [ i ] == <STRING> : <NEWLINE> <INDENT> alice . pop ( i ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> <DEDENT> for i in range ( len ( alice ) ) : <NEWLINE> <INDENT> if len ( alice ) == 0 and alice [ <NEWLINE> <DEDENT>
S = { i : input ( ) for i in <STRING> } <NEWLINE> n = <STRING> <NEWLINE> while S [ n ] : <NEWLINE> <INDENT> n = S [ n ] . pop ( 0 ) <NEWLINE> <NL> <DEDENT> print ( n . upper ( ) ) <NEWLINE>
lis = [ ] <NEWLINE> ll = [ <STRING> , <STRING> , <STRING> ] <NEWLINE> for i in range ( 3 ) : <NEWLINE> <INDENT> lis . append ( list ( input ( ) ) ) <NEWLINE> <DEDENT> turn = 0 <NEWLINE> while 1 : <NEWLINE> <INDENT> x = ll . index ( lis [ turn ] . pop ( ) ) <NEWLINE> if lis [ turn ] = [ ] : <NEWLINE> <INDENT> print ( ll [ turn ] . upper ( ) ) <NEWLINE> break <NEWLINE> <DEDENT> turn = x <NEWLINE> <DEDENT>
S = dict ( ) <NEWLINE> <NL> S [ <STRING> ] = input ( ) [ : : - 1 ] <NEWLINE> S [ <STRING> ] = input ( ) [ : : - 1 ] <NEWLINE> S [ <STRING> ] = input ( ) [ : : - 1 ] <NEWLINE> <NL> player = <STRING> <NEWLINE> <NL> while S [ player ] : <NEWLINE> <INDENT> player = S [ player ] . pop ( ) <NEWLINE> <NL> <NL> <DEDENT> res = player . upper ( ) <NEWLINE> print ( res ) <NEWLINE>
S = Sa <NEWLINE> card = S . pop ( 0 ) <NEWLINE> while True : <NEWLINE> <INDENT> if card == <STRING> : <NEWLINE> <INDENT> S = Sa <NEWLINE> <DEDENT> if card == <STRING> : <NEWLINE> <INDENT> S = Sb <NEWLINE> <DEDENT> if card == <STRING> : <NEWLINE> <INDENT> S = Sc <NEWLINE> <DEDENT> try : <NEWLINE> <INDENT> card = S . pop ( 0 ) <NEWLINE> <DEDENT> except : <NEWLINE> <INDENT> print ( card . upper ( ) ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
s = { <STRING> : input ( ) , <STRING> : input ( ) , <STRING> input ( ) } <NEWLINE> now = <STRING> <NEWLINE> while s [ now ] != <STRING> : <NEWLINE> <INDENT> next = s [ now ] [ 0 ] <NEWLINE> s [ now ] = s [ now ] [ 1 : ] <NEWLINE> now = next <NEWLINE> <DEDENT> print ( now . upper ( ) ) <NEWLINE>
alice = list ( input ( ) ) <NEWLINE> bob = list ( input ( ) ) <NEWLINE> charlie = list ( input ( ) ) <NEWLINE> <NL> current = alice <NEWLINE> while ( len ( alice ) > 0 and len ( bob ) > 0 and len ( charlie ) > 0 ) : <NEWLINE> <INDENT> if ( current [ 0 ] == <STRING> ) : <NEWLINE> del current [ 0 ] <NEWLINE> <INDENT> current = alice <NEWLINE> <DEDENT> elif ( current [ 0 ] == <STRING> ) : <NEWLINE> <INDENT> del current [ 0 ] <NEWLINE> <DEDENT> currrent = bob <NEWLINE> elif ( current [ 0 ] == <STRING> ) : <NEWLINE> <INDENT> del current [ 0 ] <NEWLINE> <DEDENT> current = charlie <NEWLINE> <DEDENT> if ( len ( alice ) == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( len ( bob ) == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( len ( charlie ) == 0 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
mb = input ( ) <NEWLINE> mc = input ( ) <NEWLINE> mdic = { <STRING> : ma , <STRING> : mb , <STRING> : mc } <NEWLINE> m = <STRING> <NEWLINE> ndic = { <STRING> : 0 , <STRING> : - 1 , <STRING> : - 1 } <NEWLINE> while ndic [ m ] < len ( mdic [ m ] ) : <NEWLINE> <INDENT> m = mdic [ m ] [ ndic [ m ] ] <NEWLINE> ndic [ m ] += 1 <NEWLINE> <DEDENT> print ( m . upper ( ) ) <NEWLINE>
n = input ( ) <NEWLINE> l = len ( n ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( l ) : <NEWLINE> <INDENT> for j in range ( l - i ) : <NEWLINE> <INDENT> ans += int ( n [ i ] ) * 10 ** j * 2 ** i * 2 ** ( n - i - j - 2 ) <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
def dfs ( i , f ) : <NEWLINE> <INDENT> if i == n - 1 : <NEWLINE> <INDENT> return sum ( list ( map ( int , input ( ) . split ( <STRING> ) ) ) ) <NEWLINE> <DEDENT> return dfs ( i + 1 , f + s [ i + 1 ] ) + dfs [ i + 1 , f + <STRING> + s [ i + 1 ] ] <NEWLINE> <NL> <DEDENT> s = input ( ) <NEWLINE> n = len ( s ) <NEWLINE> print ( dfs ( 0 , s [ 0 ] ) ) <NEWLINE>
s = input ( ) <NEWLINE> n = len ( s - 1 ) <NEWLINE> total = 0 <NEWLINE> for i in range ( 2 ** n ) : <NEWLINE> <INDENT> pl = [ <STRING> ] * n <NEWLINE> ans = <STRING> <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> if ( ( i >> j ) & 1 ) : <NEWLINE> <INDENT> pl [ n - 1 - j ] = <STRING> <NEWLINE> <DEDENT> <DEDENT> for k in range ( n ) : <NEWLINE> <INDENT> ans += s [ k ] + pl [ k ] <NEWLINE> <DEDENT> ans += s [ - 1 ] <NEWLINE> total += eval ( ans ) <NEWLINE> <NL> <DEDENT> print ( total ) <NEWLINE>
def a ( s , i ) : <NEWLINE> <INDENT> if i == l - 1 : <NEWLINE> <INDENT> return sum ( map ( int , s . split ( <STRING> ) ) ) <NEWLINE> <DEDENT> return a ( s + s [ i + 1 ] , i + 1 ) + a ( s + <STRING> + s [ i + 1 ] , i + 1 ) <NEWLINE> <DEDENT> s = input ( ) <NEWLINE> l = len ( s ) <NEWLINE> print ( a ( s [ 0 ] , 0 ) ) <NEWLINE>
s = input ( ) <NEWLINE> <NL> for i in range ( 2 ** ( len ( s ) - 1 ) ) : <NEWLINE> <INDENT> plus = [ <STRING> ] * ( len ( s ) ) <NEWLINE> fomula = <STRING> <NEWLINE> for j in range ( len ( s ) - 1 ) : <NEWLINE> <INDENT> if ( i >> j & 1 ) : <NEWLINE> <INDENT> plus [ j ] = <STRING> <NEWLINE> <DEDENT> <DEDENT> for k in range ( len ( s ) ) : <NEWLINE> <INDENT> fomula += s [ k ] + plus [ k ] <NEWLINE> <DEDENT> ans += eval ( fomula ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
<COMMENT> <NL> <NL> s = int ( input ( ) ) <NEWLINE> n = len ( s ) - 1 <NEWLINE> answer = 0 <NEWLINE> for i in range ( 2 ** n ) : <NEWLINE> <INDENT> operation = [ <STRING> ] * n <NEWLINE> for j in range ( n ) : <NEWLINE> <INDENT> if ( i >> j ) & 1 : <NEWLINE> <INDENT> operation [ n - 1 - j ] = <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> formula = <STRING> <NEWLINE> for p_n , p_o in zip ( s , operation + [ <STRING> ] ) : <NEWLINE> <INDENT> formula += ( p_n + p_o ) <NEWLINE> <NL> <DEDENT> answer += eval ( formula ) <NEWLINE> <NL> <DEDENT> print ( answer ) <NEWLINE>
from sys import stdin <NEWLINE> input = stdin . readline <NEWLINE> <NL> S = input ( ) <NEWLINE> n = len ( S ) <NEWLINE> <NL> tot = 0 <NEWLINE> <NL> for i in range ( 2 ** ( n - 1 ) ) : <NEWLINE> <INDENT> f = S [ 0 ] <NEWLINE> for j in range ( n - 1 ) : <NEWLINE> <INDENT> if ( ( i >> j ) & 1 ) : <NEWLINE> <INDENT> f += <STRING> <NEWLINE> <DEDENT> f += S [ j + 1 ] <NEWLINE> <NL> <DEDENT> tot += sum ( map ( int , f . split ( <STRING> ) ) ) <NEWLINE> <NL> <DEDENT> print ( tot ) <NEWLINE>
S = input ( ) <NEWLINE> total = 0 <NEWLINE> for p in ( product ( ( 0 , 1 ) , repeat = len ( S ) - 1 ) ) : <NEWLINE> <INDENT> ns = S [ 0 ] <NEWLINE> for i , pp in enumerate ( p , 1 ) : <NEWLINE> <INDENT> if pp == 0 : <NEWLINE> <INDENT> ns += S [ i ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> total += int ( ns ) <NEWLINE> ns = S [ i ] <NEWLINE> <DEDENT> <DEDENT> total += int ( ns ) <NEWLINE> <DEDENT> print ( total ) <NEWLINE> <NL> <NL>
<NL> def a ( t , i ) : <NEWLINE> <INDENT> if i = len ( s ) - 1 : <NEWLINE> <INDENT> return sum ( map ( int , t . split ( <STRING> ) ) ) <NEWLINE> <DEDENT> return a ( t + s [ i + 1 ] , i + 1 ) + a ( t + <STRING> + s [ i + 1 ] , i + 1 ) <COMMENT> <NEWLINE> <DEDENT> s = input ( ) <NEWLINE> print ( a ( s [ 0 ] , 0 ) ) <NEWLINE>
def a ( t , i ) : <NEWLINE> <INDENT> if i == n - 1 : <NEWLINE> <INDENT> return sum ( map ( int , t . split ( ) ) ) <NEWLINE> <DEDENT> return a ( t + s [ i + 1 ] , i + 1 ) + a ( t + <STRING> + s [ i + 1 ] , i + 1 ) <NEWLINE> <NL> <DEDENT> s = input ( ) <NEWLINE> n = len ( s ) <NEWLINE> i = 0 <NEWLINE> print ( a ( s [ 0 ] , 0 ) ) <NEWLINE>
s = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) <NEWLINE> a = s . pop ( - 1 ) <NEWLINE> b , c = a // 2 , a - ( a // 2 ) <NEWLINE> d = s [ 0 ] * a [ 1 ] <NEWLINE> print ( abs ( d * b - d * c ) ) <NEWLINE>
import sys <NEWLINE> input = sys . stdin . readline <NEWLINE> <NL> def linput ( ty = int , cvt = list ) : <NEWLINE> <INDENT> return cvt ( map ( ty , input ( ) . split ( ) ) ) <NEWLINE> <NL> <DEDENT> def gcd ( a : int , b : int ) : <NEWLINE> <INDENT> while b : a , b = b , a % b <NEWLINE> return a <NEWLINE> <NL> <DEDENT> def lcm ( a : int , b : int ) : <NEWLINE> <INDENT> return a * b // gcd ( a , b ) <NEWLINE> <NL> <DEDENT> def main ( ) : <NEWLINE> <COMMENT> <NL> <NEWLINE>
header_code = <STRING> <NEWLINE> <NL> code = <STRING> <NEWLINE> <NL> <NL> import os , sys , getpass <NEWLINE> <NL> if sys . argv [ - 1 ] == <STRING> : <NEWLINE> <INDENT> code = code . replace ( <STRING> , getpass . getuser ( ) ) <NEWLINE> open ( <STRING> , <STRING> ) . write ( header_code ) <NEWLINE> open ( <STRING> , <STRING> ) . write ( code ) <NEWLINE> os . system ( <STRING> ) <NEWLINE> sys . exit ( 0 ) <NEWLINE> <NL> <NL> <DEDENT> from atcoder import SegTree <NEWLINE> <NL> N , x = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ST = SegTree ( A , <STRING> ) <NEWLINE> ans = 10 ** 27 <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> t = 0 <NEWLINE> for j in range ( N ) : <NEWLINE> <INDENT> if j - i < 0 : <NEWLINE> <INDENT> t += min ( ST . prod ( 0 , j + 1 ) , ST . prod ( N + j - i , N ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t += ST . prod ( j - i , j + 1 ) <NEWLINE> <NL> <DEDENT> <DEDENT> ans = min ( t + i * x , ans ) <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
N , K , X , Y = [ int ( input ( ) ) for i in range ( 4 ) ] <NEWLINE> <NL> if ( K > N ) : <NEWLINE> <INDENT> N = K <NEWLINE> <DEDENT> else : <NEWLINE> <NL> <NL> Z = K * X + ( N - K ) * Y <NEWLINE> print ( Z ) <NEWLINE>
<COMMENT> <NL> n , k , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> first_stay = k * x <NEWLINE> second_stay = ( n - k ) * y <NEWLINE> <NL> total_price = first_stay + second_stay <NEWLINE> <NL> <COMMENT> <NL> print ( total_price ) <NEWLINE>
import sys <NEWLINE> n , k , x , y = map ( int , sys . stdio . read ( ) . split ( ) ) <NEWLINE> high = n - k <NEWLINE> ans = 0 <NEWLINE> if high > 0 : <NEWLINE> <INDENT> ans = x * k + high * y <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = n * x <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> d = int ( input ( ) ) <NEWLINE> e = 0 <NEWLINE> <NL> for i in range ( 1 , a + 1 ) : <NEWLINE> <INDENT> if i >= b + 1 : <NEWLINE> <INDENT> e += d <NEWLINE> else : <NEWLINE> <INDENT> e += c <NEWLINE> print ( e ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n , k , x , y = map ( int , [ input for i in range ( 4 ) ] ) <NEWLINE> <NL> print ( x * k + y * ( n - k ) ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> x = int ( input ( ) ) <NEWLINE> y = int ( input ( ) ) <NEWLINE> if k <= n : <NEWLINE> <INDENT> ans += k * x + ( n - k ) * y <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += x * n <NEWLINE> <DEDENT>
n , k , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> if n <= k : <NEWLINE> <INDENT> print ( n * x ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( k * x + ( n - k ) * y ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> x = int ( input ( ) ) <NEWLINE> y = int ( input ( ) ) <NEWLINE> sum = 0 <NEWLINE> if ( n >= k ) : <NEWLINE> <INDENT> sum = k * x + ( n - k ) * y <NEWLINE> <INDENT> print ( sum ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> sum = n * x <NEWLINE> <INDENT> print ( sum ) <NEWLINE> <DEDENT> <DEDENT>
<INDENT> n , k , price , special = map ( int , input ( ) . split ( ) ) <NEWLINE> result = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if i < k : <NEWLINE> <INDENT> result += price <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> result += special <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
n , k , x , y = map ( int ( input ( ) ) for i in range ( 4 ) ) <NEWLINE> if k <= n : <NEWLINE> <INDENT> print ( k * x ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( k * x + ( n - k ) * y ) <NEWLINE> <DEDENT>
N , K , X , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if N <= K : <NEWLINE> <INDENT> print ( N * X ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( K * X + ( N - K ) * Y ) <NEWLINE> <DEDENT>
n , k , x , y = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> if k <= x : <NEWLINE> <INDENT> print ( n * k ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( k * x + ( n - k ) * y ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> d = int ( input ( ) ) <NEWLINE> print ( int ( ( c * ( b - a ) + d * ( b ) ) ) <NEWLINE>
n , k , x , y = [ int ( input ) for i in range ( 4 ) ] <NEWLINE> print ( min ( n , k ) * x + max ( n - k , 0 ) * y ) <NEWLINE>
ab , bc , ca = map ( int , input ( ) . rstrip ( ) . split ( ) ) <NEWLINE> print ( ab * bc // 2 ) <NEWLINE>
k , x , y , n = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if n <= k : <NEWLINE> <INDENT> print ( n * x ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( k * x + ( n - k ) * y ) <NEWLINE> <COMMENT> <NL> <NEWLINE> <DEDENT>
input = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> print ( int ( input [ 1 ] * input [ 2 ] + ( input [ 0 ] - input [ 1 ] ) * input [ 3 ] ) ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> n , k , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> if n > k : <NEWLINE> <INDENT> answer = k * x + ( n - k ) * y <NEWLINE> <COMMENT> <NL> <DEDENT> else : <NEWLINE> <INDENT> answer = n * x <NEWLINE> <NL> <DEDENT> print ( answer ) <NEWLINE>
N , K , X , Y = input ( ) . split ( ) <NEWLINE> print ( ( K * X + ( N - K ) * Y ) if N >= K else N * X ) <NEWLINE>
import sys <NEWLINE> <NL> read = sys . stdin . read <NEWLINE> readline = sys . stdin . buffer . readline <NEWLINE> sys . setrecursionlimit ( 10 ** 8 ) <NEWLINE> INF = float ( <STRING> ) <NEWLINE> MOD = 10 ** 9 + 7 <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> N = int ( readline ( ) ) <NEWLINE> K = int ( readline ( ) ) <NEWLINE> X = int ( readline ( ) ) <NEWLINE> Y = int ( readline ( ) ) <NEWLINE> if N <= K : <NEWLINE> <INDENT> ans = X * N <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = X * k + Y * ( N - K ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
total_stay = int ( input ( ) ) <NEWLINE> normal_stay = int ( input ( ) ) <NEWLINE> normal_cost = int ( input ( ) ) <NEWLINE> discounted_cost = int ( input ( ) ) <NEWLINE> if total_stay <= normal_stay : <NEWLINE> <INDENT> total_cost = total_stay * normal_cost <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> total_cost = normal_stay * normal_cost + ( total_stay - normal_stay ) * discounted_cost <NEWLINE> <DEDENT> print ( P ) <NEWLINE>
n , k , x , y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> print ( int ( k * x + y * ( n - k ) ) ) <NEWLINE>
<COMMENT> <NL> N , K , X , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> if N > K : <NEWLINE> <INDENT> total_price = K * X + ( N - K ) * Y <NEWLINE> <COMMENT> <NL> <DEDENT> else : <NEWLINE> <INDENT> total_price = N * X <NEWLINE> <NL> <DEDENT> print ( total_price ) <NEWLINE>
<NL> <NL> N , K , X , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> a = N * X <NEWLINE> <NL> b = K * X + ( N - K ) * Y <NEWLINE> <NL> if N <= K : <NEWLINE> <INDENT> print ( a ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( b ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> k = int ( input ( ) ) <NEWLINE> x = int ( input ( ) ) <NEWLINE> y = int ( input ( ) ) <NEWLINE> if n = < k : <NEWLINE> <INDENT> ans = n * x <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans = k * x + y * ( n - k ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N , K , X , Y = map ( int , input ( ) . split ( ) ) <NEWLINE> yen1 = K * X <NEWLINE> yen2 = ( N - K ) * Y <NEWLINE> print ( yen1 + yen2 ) <NEWLINE>
W = input ( ) <NEWLINE> W_list = set ( list ( s for s in W ) ) <NEWLINE> ans = True <NEWLINE> for s in W_list : <NEWLINE> <INDENT> if W . count ( s ) % 2 != 0 <NEWLINE> <INDENT> False <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> if ans : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> di = { } <NEWLINE> for c in s : <NEWLINE> <INDENT> di [ c ] = 0 <NEWLINE> <DEDENT> for c in s : <NEWLINE> <INDENT> di [ c ] += 1 <NEWLINE> <NL> <DEDENT> is_beautiful = True <NEWLINE> for c in s : <NEWLINE> <INDENT> if di [ c ] % 2 == 1 : <NEWLINE> <INDENT> is_beautiful = False <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> is is_beautiful else <STRING> ) <NEWLINE>
<NL> def inp ( ) : <NEWLINE> <INDENT> return int ( input ( ) ) <NEWLINE> <DEDENT> def inpl ( ) : <NEWLINE> <INDENT> return list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <DEDENT> def dbg ( o ) : <NEWLINE> <INDENT> print ( o , file = sys . stderr ) <NEWLINE> <NL> <COMMENT> <NL> <NL> <DEDENT> def main ( ) : <NEWLINE> <INDENT> s = input ( ) <NEWLINE> dc = { } <NEWLINE> for st in s : <NEWLINE> <INDENT> if not st in dc : <NEWLINE> <INDENT> dc [ st ] = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> dc [ st ] += 1 <NEWLINE> <DEDENT> <DEDENT> dbg ( dc ) <NEWLINE> for k , v in dc . items ( ) : <NEWLINE> <INDENT> if v % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> main ( ) <NEWLINE>
s = input ( ) <NEWLINE> d = { } <NEWLINE> for i in s : <NEWLINE> <INDENT> d . get ( i , 0 ) += 1 <NEWLINE> <DEDENT> for i in set ( s ) : <NEWLINE> <INDENT> if d [ i ] % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> d = { } <NEWLINE> for i in s : <NEWLINE> <INDENT> if i in d : <NEWLINE> <INDENT> d [ i ] += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> d [ i ] = 1 <NEWLINE> <NL> <DEDENT> <DEDENT> for key in d : <NEWLINE> <INDENT> if d [ key ] % 2 != 0 <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT>
print ( <STRING> if all ( input ( ) . count ( i ) % 2 == 0 for i in set ( s ) ) else <STRING> ) <NEWLINE>
a = list ( input ( ) ) <NEWLINE> even_number = range ( 0 , 101 , 2 ) <NEWLINE> values , count = * zip ( a . most_common ( ) ) <NEWLINE> <NL> if even_number in count : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
n = input ( ) <NEWLINE> ans = 0 <NEWLINE> for i ih set ( n ) : <NEWLINE> <INDENT> if n . count ( i ) % 2 == 0 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if ans == len ( set ( n ) ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
from collection import Counter <NEWLINE> S = list ( input ( ) ) <NEWLINE> <NL> C = Counter ( S ) <NEWLINE> <NL> ok = True <NEWLINE> for s , x in list ( C . items ( ) ) : <NEWLINE> <INDENT> if x % 2 != 0 : <NEWLINE> <INDENT> ok = False <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> if ok : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
w = input ( ) <NEWLINE> <NL> dict = { } <NEWLINE> alh = <STRING> <NEWLINE> for i in alh : <NEWLINE> <INDENT> dict [ i ] = 0 <NEWLINE> <DEDENT> for i in w : <NEWLINE> <INDENT> dict [ i ] += 1 <NEWLINE> <DEDENT> flag = True <NEWLINE> for j in range ( len ( dict ) ) : <NEWLINE> <INDENT> if dict [ j ] % 2 == 1 : <NEWLINE> <INDENT> flag = False <NEWLINE> <DEDENT> <DEDENT> if flag : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
s = input ( ) <NEWLINE> alphabets = [ 0 ] * 26 <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> x = ord ( s [ i ] ) <NEWLINE> alphabets [ x - 97 ] += 1 <NEWLINE> <DEDENT> flag = True <NEWLINE> for x in alphabets : <NEWLINE> <INDENT> if x % 2 != 0 : <NEWLINE> <INDENT> ok = False <NEWLINE> <DEDENT> <DEDENT> if ok : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
w = input ( ) <NEWLINE> <NL> s = { } <NEWLINE> for c in w : <NEWLINE> <INDENT> s [ c ] += 1 <NEWLINE> <NL> <DEDENT> b = True <NEWLINE> for k , v in s . items ( ) : <NEWLINE> <INDENT> b = b and v % 2 == 0 <NEWLINE> <NL> <DEDENT> if b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
w = input ( ) <NEWLINE> A = [ 0 ] * 26 <NEWLINE> <NL> for in in w : <NEWLINE> <INDENT> A [ ord ( i ) - 97 ] += 1 <NEWLINE> <NL> <DEDENT> flag = True <NEWLINE> for a in A : <NEWLINE> <INDENT> if a % 2 == 1 : <NEWLINE> <INDENT> flag = False <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if flag == False : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = input ( ) <NEWLINE> dic = [ a , b , c , d , e , f , g , h , i , j , k , l , m , n , o , p , q , r , s , t , u , v , w , x , y , z ] <NEWLINE> for i in range ( 26 ) : <NEWLINE> <INDENT> if n . count ( str ( dic [ i ] ) ) % 2 != 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> s = int ( input ( ) ) <NEWLINE> if n == s : <NEWLINE> <INDENT> print ( n + 1 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> if ( n + 3 ) // 2 <= s : <NEWLINE> <INDENT> print ( - 1 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> ewew <NEWLINE>
s = input ( ) <NEWLINE> <NL> ans1 = ( ( <STRING> in s ) and ( <STRING> in s ) ) or ( ( <STRING> not in s ) & ( <STRING> not in s ) ) <NEWLINE> ans2 = ( ( <STRING> in s ) and ( <STRING> in s ) ) or ( ( <STRING> not in s ) & ( <STRING> not in s ) <NEWLINE> <NL> print ( <STRING> if ans1 and ans2 else <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> <NL> n = 0 <NEWLINE> e = 0 <NEWLINE> w = 0 <NEWLINE> s = 0 <NEWLINE> <NL> for v in s : <NEWLINE> <INDENT> if v == <STRING> : n += 1 <NEWLINE> if v == <STRING> : e += 1 <NEWLINE> if v == <STRING> : w += 1 <NEWLINE> if v == <STRING> : s += 1 <NEWLINE> <NL> <DEDENT> if n == s and e == w : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> S = input ( ) <NEWLINE> dic = { <STRING> : 0 , <STRING> : 0 , <STRING> : 0 , <STRING> : 0 } <NEWLINE> ans = <STRING> <NEWLINE> <NL> for s in S : <NEWLINE> <INDENT> dic [ s ] += 1 <NEWLINE> <NL> <DEDENT> if ( dic [ <STRING> ] == 0 and dic [ <STRING> ] == 0 ) or ( dic [ <STRING> ] > 0 and dic [ <STRING> ] > 0 ) : <NEWLINE> <INDENT> if ( dic [ <STRING> ] == 0 and dic [ <STRING> ] == 0 ) or ( dic [ <STRING> ] > 0 and mp [ <STRING> ] > 0 ) : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
s = list ( input ( ) ) <NEWLINE> n = s . count ( <STRING> ) <NEWLINE> w = s . count ( <STRING> ) <NEWLINE> s = s . count ( <STRING> ) <NEWLINE> e = s . count ( <STRING> ) <NEWLINE> if ( n + s ) % 2 == 0 and ( w + e ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> ans = [ 0 ] * 4 <NEWLINE> checK = <STRING> <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> for j in range ( len ( check ) ) : <NEWLINE> <INDENT> if s [ i ] == check [ j ] : <NEWLINE> <INDENT> ans [ j ] += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> if ( ans [ 0 ] % 2 + ans [ 2 ] % 2 ) % 2 == 0 and ( ans [ 1 ] % 2 + ans [ 3 ] % 2 ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> we = [ 0 , 0 ] <NEWLINE> ns = [ 0 , 0 ] <NEWLINE> <NL> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] == ( <STRING> ) : <NEWLINE> <INDENT> ns [ 0 ] == 1 <NEWLINE> <DEDENT> elif s [ i ] == ( <STRING> ) : <NEWLINE> <INDENT> we [ 0 ] == 1 <NEWLINE> <DEDENT> elif s [ i ] == ( <STRING> ) : <NEWLINE> <INDENT> ns [ 1 ] == 1 <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> we [ 1 ] == 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if sum ( we ) % 2 == 0 and sum ( ns ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
string = input ( ) <NEWLINE> <NL> c1 = True <NEWLINE> c2 = True <NEWLINE> c3 = True <NEWLINE> <NL> if ( <STRING> in string and not ( <STRING> in string ) or <STRING> in string and not ( <STRING> in string ) : c1 = False <NEWLINE> <NL> if ( <STRING> in string and not ( <STRING> in string ) or <STRING> in string and not ( <STRING> in string ) : c2 = False <NEWLINE> <NL> if <STRING> in string and <STRING> in string and <STRING> in string and <STRING> in string : <NEWLINE> <INDENT> N = string . count ( <STRING> ) <NEWLINE> S = string . count ( <STRING> ) <NEWLINE> W = string . count ( <STRING> ) <NEWLINE> E = string . count ( <STRING> ) <NEWLINE> if not ( N / S == W / E or N / S == E / W ) : c3 = False <NEWLINE> <NL> <DEDENT> if c1 and c2 and c3 : print ( <STRING> ) <NEWLINE> else : print ( <STRING> ) <NEWLINE>
s = input ( ) <NEWLINE> <NL> def walk ( s ) : <NEWLINE> <INDENT> ls = len ( s ) <NEWLINE> if ls % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> return <NEWLINE> <DEDENT> nc = 0 <NEWLINE> sc = 0 <NEWLINE> wc = 0 <NEWLINE> ec = 0 <NEWLINE> for i in range ( ls ) : <NEWLINE> <INDENT> if s [ i ] = <STRING> : <NEWLINE> <INDENT> wc += 1 <NEWLINE> <DEDENT> elif s [ i ] = <STRING> : <NEWLINE> <INDENT> ec += 1 <NEWLINE> <DEDENT> elif s [ i ] = <STRING> : <NEWLINE> <INDENT> nc += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> sc += 1 <NEWLINE> <DEDENT> <DEDENT> if wc == ec and nc == sc : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> return <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> return <NEWLINE> <DEDENT> <DEDENT> walk ( s ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> ans = 0 <NEWLINE> lis = [ int ( input ( ) ) for i in range ( n ) ] + [ 0 ] <NEWLINE> <NL> count = 0 <NEWLINE> m = - 1 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if lis [ i ] % 2 == 0 : <NEWLINE> <INDENT> count += l [ i ] // 2 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if lis [ i + 1 ] > 1 : <NEWLINE> <INDENT> count += lis [ i ] // 2 + 1 <NEWLINE> lis [ i + 1 ] -= 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count += lis [ i ] // 2 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( count ) <NEWLINE>
import sys <NEWLINE> n = int ( sys . stdin . readline ( ) ) <NEWLINE> ans = 0 <NEWLINE> t = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a = int ( sys . stdin . readline ( ) ) <NEWLINE> if a == 0 : <NEWLINE> <INDENT> ans += t // 2 <NEWLINE> t = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> t += a <NEWLINE> <DEDENT> <DEDENT> if t > 0 : ans += t // 2 <NEWLINE> pritn ( ans ) <NEWLINE>
from collections import Counter <NEWLINE> n = int ( input ( ) ) <NEWLINE> a = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> b = Counter ( a [ : : 2 ] ) <NEWLINE> a . sort ( ) <NEWLINE> c = Counter ( a [ : : 2 ] ) <NEWLINE> <NL> ans = 0 <NEWLINE> for i in b : <NEWLINE> <INDENT> if i in c : <NEWLINE> <INDENT> ans += abs ( b [ i ] ) - c [ i ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> ans += b [ i ] <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import sys <NEWLINE> from subprocess import Popen , PIPE <NEWLINE> from itertools import groupby <NEWLINE> from collections import Counter <NEWLINE> <NL> def main ( ) : <NEWLINE> <INDENT> sys . stdin . readline ( ) <NEWLINE> S = sys . stdin . read ( ) <NEWLINE> T = [ ] <NEWLINE> inv_dict = { } <NEWLINE> Factors = Popen ( <STRING> + S , stdout = PIPE ) . communicate ( ) [ 0 ] . split ( <STRING> ) <NEWLINE> for factors in Factors : <NEWLINE> <INDENT> factors = map ( int , factors . split ( ) [ 1 : ] ) <NEWLINE> t = 1 <NEWLINE> t_inv = 1 <NEWLINE> for f , group in groupby ( factors ) : <NEWLINE> <INDENT> n = len ( list ( group ) ) % 3 <NEWLINE> if n == 1 : <NEWLINE> <INDENT> t *= f <NEWLINE> <DEDENT> elif n == 2 : <NEWLINE> <INDENT> t_inv *= f <NEWLINE> <DEDENT> <DEDENT> t , t_inv = t * t_inv * t_inv , t * t * t_inv <NEWLINE> T . append ( t ) <NEWLINE> inv_dict [ t ] = t_inv <NEWLINE> <NL> <DEDENT> counter_T = Counter ( T ) <NEWLINE> ans = 0 <NEWLINE> for t , t_cnt in counter_T . items ( ) : <NEWLINE> <INDENT> if t == 1 : <NEWLINE> <INDENT> ans += 1 <NEWLINE> continue <NEWLINE> <DEDENT> t_inv = inv_dict [ t ] <NEWLINE> t_inv_cnt = counter_T [ t_inv ] <NEWLINE> if t_cnt > t_inv_cnt or ( t_cnt == t_inv_cnt and t > t_inv ) : <NEWLINE> <INDENT> ans += t_cnt <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <NL> <DEDENT> main ( ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> Sum = 0 <NEWLINE> for i in range ( len ( A ) ) : <NEWLINE> <INDENT> Sum += ( A [ 0 ] - A [ i ] ) ** 2 <NEWLINE> <DEDENT> Answer = Sum <NEWLINE> for j in range ( len ( A ) ) : <NEWLINE> <INDENT> Sum = 0 <NEWLINE> for k in range ( - 100 , 101 ) : <NEWLINE> <INDENT> Sum += ( A [ k ] - j ) ** 2 <NEWLINE> <DEDENT> Answer = min ( Answer , Sum ) <NEWLINE> <DEDENT> print ( Answer ) <NEWLINE> <NL>
N = int ( input ( ) ) <NEWLINE> Print ( N * ( N + 1 ) // 2 ) <NEWLINE>
k = 0 <NEWLINE> <NL> for i in range ( N + 1 ) : <NEWLINE> <INDENT> k += i <NEWLINE> <NL> <DEDENT> print ( k ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <INDENT> = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> answer = ( n + 1 ) * n / 2 <NEWLINE> <NL> print ( answer ) <NEWLINE>
for i in N : <NEWLINE> <INDENT> x += 1 <NEWLINE> <DEDENT> print ( x ) <NEWLINE>
val1 = int ( input ( ) ) <NEWLINE> <NL> print ( val1 * ( val1 + 1 ) / ) <NEWLINE>
print ( sum ( list ( range ( 1 , int ( input ( ) + 1 ) ) ) ) ) <NEWLINE>
number = input ( ) <NEWLINE> answer = 0 <NEWLINE> <NL> for i in range ( number ) : <NEWLINE> <INDENT> number = number + 1 <NEWLINE> answer = answer + number <NEWLINE> <NL> <DEDENT> print ( answer ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> res = int ( N ( N + 1 ) / 2 ) <NEWLINE> print ( res ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> print ( N * ( N + 1 ) ) / 2 <NEWLINE>
N = ini ( ) <NEWLINE> print ( int ( ( N * ( N + 1 ) ) / 2 ) ) <NEWLINE> <STRING> <NEWLINE>
def iroha ( ) : <NEWLINE> <INDENT> count = int ( input ( ) ) <NEWLINE> result = 0 <NEWLINE> for i in range ( count + 1 ) : <NEWLINE> <INDENT> result += i <NEWLINE> <NL> <DEDENT> print ( result ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> iroha ( <NEWLINE> <DEDENT>
N = int ( input ( ) ) <NEWLINE> ans = 1 <NEWLINE> for i in range ( 1 , N + 1 ) : <NEWLINE> <INDENT> ans += ans + i <NEWLINE> <DEDENT> print ( answer ) <NEWLINE>
<NL> N = int ( input ( ) ) <NEWLINE> list = [ int ( a ) for a in input ( ) . split ( ) ] <NEWLINE> <NL> A = sum ( list ) // N <NEWLINE> ans = 0 <NEWLINE> <NL> for k in range ( N ) : <NEWLINE> <INDENT> ans = ans + ( list [ j ] - A ) ** 2 <NEWLINE> <NL> <DEDENT> for i in range ( - 100 , 100 ) : <NEWLINE> <INDENT> sum = 0 <NEWLINE> sum_new = 0 <NEWLINE> for j in range ( N ) : <NEWLINE> <INDENT> sum_new = sum_new + ( list [ j ] - i ) ** 2 <NEWLINE> <DEDENT> if ( sum > sum_new ) : <NEWLINE> <INDENT> ans = sum_new <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
n = input ( ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> ans += i <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( 1 , N + 1 ) <NEWLINE> <INDENT> ans += i <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ans = 10 ** 18 <NEWLINE> for num in range ( - 100 , 101 ) : <NEWLINE> <INDENT> cnt = 0 <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> cnt += ( num - a [ i ] ) ** 2 <NEWLINE> <DEDENT> ans = min ( ans , cnt ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
def candy ( ) : <NEWLINE> <INDENT> n = int ( input ( ) ) <NEWLINE> <INDENT> a = 0 <NEWLINE> for i in range ( 0 , n ) <NEWLINE> <INDENT> a = a + 1 <NEWLINE> <DEDENT> print ( a ) <NEWLINE> <NL> <DEDENT> <DEDENT> candy ( 10 ) <NEWLINE>
n = int ( input ( ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( 1 , n + 1 ) : <NEWLINE> <INDENT> ans += i <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> <NL> ans = 0 <NEWLINE> <NL> for ( i = 1 ; i <= N ; i + + ) : <NEWLINE> <INDENT> ans += 1 <NEWLINE> <NL> <DEDENT> print ( i ) <NEWLINE>
ame = N * ( N + 1 ) / 2 <NEWLINE> print ( ame ) <NEWLINE>
<COMMENT> <NL> <NL> N = int ( input ( ) ) <NEWLINE> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> a = N + 1 <NEWLINE> b = N <NEWLINE> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <COMMENT> <NL> print ( math . floor ( a * b / 2 ) <NEWLINE>
<COMMENT> <NL> a = 1 <NEWLINE> <NL> <COMMENT> <NL> b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> <COMMENT> <NL> answer = a + b + c <NEWLINE> <NL> <COMMENT> <NL> print ( answer ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> <NL> ans = n ( 1 + n ) / 2 <NEWLINE> print ( ans ) <NEWLINE>
N = input ( ) <NEWLINE> print ( N * ( N + 1 ) / 2 ) <NEWLINE>
<NL> <NL> <NL> <NL> <COMMENT> <NL> n = input ( ) <NEWLINE> n = int ( input ( ) ) <NEWLINE> candy = ( 1 / 2 ) * n * ( n + 1 ) <NEWLINE> print ( int ( candy ) ) <NEWLINE> <COMMENT> <NL> <NL> <NL>
x = N <NEWLINE> if x % 2 == 1 : <NEWLINE> <INDENT> print ( ( N + 1 ) * ( N // 2 ) + ( N + 1 ) / 2 ) <NEWLINE> <DEDENT> if x % 2 == 0 : <NEWLINE> <INDENT> print ( ( N + 1 ) * N / 2 ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> num = 0 <NEWLINE> for num in range ( n + 1 ) : <NEWLINE> <INDENT> total = total + num <NEWLINE> <DEDENT> print ( total ) <NEWLINE>
n = input ( ) <NEWLINE> print ( n * ( n + 1 ) / 2 ) <NEWLINE>
N = input ( ) <NEWLINE> sum = 0 <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> sum += i ** 2 <NEWLINE> <NL> <DEDENT> print ( sum ) <NEWLINE>
<INDENT> AキャンディーとNにんの子供イージー <NEWLINE> <NL> <COMMENT> <NL> <COMMENT> <NL> <COMMENT> <NL> <NL> <COMMENT> <NL> <DEDENT> N = int ( input ( ) ) <NEWLINE> <COMMENT> <NL> <NL> <COMMENT> <NL> answer = ( N * ( N + 1 ) // 2 ) <NEWLINE> <NL> print ( answer ) <NEWLINE>
candy = N * N / 2 + N / 2 <NEWLINE> <NL> print ( candy ) <NEWLINE>
n = int ( input ( ) <NEWLINE> <NL> total = 0 <NEWLINE> <NL> for i in range ( n + 1 ) : <NEWLINE> <INDENT> total += i <NEWLINE> <NL> <DEDENT> print ( total ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> while n > 0 : <NEWLINE> <INDENT> a += n <NEWLINE> n -= 1 <NEWLINE> <DEDENT> print ( a ) <NEWLINE>
<NL> opperations = list ( input ( ) ) <NEWLINE> display_stack = [ ] <NEWLINE> for opperation in opperations : <NEWLINE> <INDENT> if opperation == <STRING> : <NEWLINE> <INDENT> if display_stack : <NEWLINE> <INDENT> display_stack . pop ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> display_stack . append ( opperation ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> . join ( display_stack ) ) <NEWLINE> ß <NEWLINE>
<INDENT> s = input ( ) <NEWLINE> ans = <STRING> <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> ans += <STRING> <NEWLINE> <NL> <DEDENT> elif s [ i ] == <STRING> : <NEWLINE> <INDENT> ans += <STRING> <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> if ans != <STRING> : <NEWLINE> <INDENT> ans = ans [ : - 1 ] <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( ans ) <NEWLINE> <DEDENT>
<COMMENT> <NL> input = input ( ) <NEWLINE> <NL> lst = [ ] <NEWLINE> text = <STRING> <NEWLINE> <NL> <COMMENT> <NL> for i in range ( len ( input ) ) : <NEWLINE> <INDENT> if input [ i ] == <STRING> : <NEWLINE> <INDENT> text = text + <STRING> <NEWLINE> <DEDENT> elif input [ i ] == <STRING> : <NEWLINE> <INDENT> text = text + <STRING> <NEWLINE> <DEDENT> elif input [ i ] = <STRING> : <NEWLINE> <INDENT> if text != <STRING> : <COMMENT> <NEWLINE> <INDENT> text = text [ : - 1 ] <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> <DEDENT> <DEDENT> print ( text ) <NEWLINE>
s = [ ] <NEWLINE> a = int ( input ( ) ) <NEWLINE> <NL> if a == 0 : <NEWLINE> <INDENT> s . append ( 0 ) <NEWLINE> <DEDENT> elif a == 1 : <NEWLINE> <INDENT> s . append ( 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if len ( s ) > 0 : <NEWLINE> <INDENT> s . pop ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> for l in s : <NEWLINE> <INDENT> print ( l ) <NEWLINE> <DEDENT>
s = list ( str ( input ( ) ) ) <NEWLINE> <NL> ans = [ ] <NEWLINE> for i in s : <NEWLINE> <INDENT> if i == <STRING> : <NEWLINE> <INDENT> ans . append ( <STRING> ) <NEWLINE> <DEDENT> elif i == <STRING> : <NEWLINE> <INDENT> ans . append ( 0 , <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if ans : <NEWLINE> <INDENT> ans . pop ( - 1 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> continue <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> . join ( ans ) ) <NEWLINE>
s = input ( ) <NEWLINE> txt = [ ] <NEWLINE> <NL> for c in s : <NEWLINE> <INDENT> if c == <STRING> & & len ( txt ) > 0 : <NEWLINE> <INDENT> txt . pop ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> txt . append ( c ) <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> . join ( txt ) ) <NEWLINE>
s = str ( input ( ) ) <NEWLINE> a = [ ] <NEWLINE> <NL> for i in len ( s ) : <NEWLINE> <INDENT> if s [ i ] == <STRING> : <NEWLINE> <INDENT> a . append ( <STRING> ) <NEWLINE> <DEDENT> elif s [ i ] == <STRING> : <NEWLINE> <INDENT> a . append ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if len ( a ) != 0 : <NEWLINE> <INDENT> a . pop ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> . join ( a ) ) <NEWLINE>
def key ( ) : <NEWLINE> <INDENT> a = input ( ) <NEWLINE> b = input ( ) <NEWLINE> c = input ( ) <NEWLINE> d = input ( ) <NEWLINE> key = [ a , b , c , d ] <NEWLINE> if key [ 0 ] == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif key [ 0 ] == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if key [ 1 ] == <STRING> : <NEWLINE> <INDENT> key . pop ( ) <NEWLINE> <DEDENT> elif key [ 1 ] == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if key [ 2 ] == <STRING> : <NEWLINE> <INDENT> key . pop ( ) <NEWLINE> <DEDENT> elif key [ 2 ] == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if key [ 3 ] == <STRING> : <NEWLINE> <INDENT> key . pop ( ) <NEWLINE> <DEDENT> elif key [ 3 ] == <STRING> : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> key ( ) <NEWLINE>
r = [ ] <NEWLINE> for i in input ( ) : <NEWLINE> <INDENT> if <STRING> == i : <NEWLINE> <INDENT> if r : <NEWLINE> <INDENT> r . pop ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> r . append ( i ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> . join ( r ) <NEWLINE>
n = input ( ) <NEWLINE> a = <STRING> <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> if i == <STRING> : <NEWLINE> <INDENT> a += i <NEWLINE> <DEDENT> elif i == <STRING> : <NEWLINE> <INDENT> a += i <NEWLINE> <DEDENT> elif i == <STRING> : <NEWLINE> <INDENT> a = a [ : - 1 ] <NEWLINE> <DEDENT> <DEDENT> print ( a ) <NEWLINE>
import re <NEWLINE> text = input ( ) <NEWLINE> b_length = int ( re . sub ( <STRING> , <STRING> , text ) ) <NEWLINE> for _ in range ( b_length ) : <NEWLINE> <INDENT> text = re . sub ( <STRING> , <STRING> , text , 1 ) <NEWLINE> <DEDENT> print ( text ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <NL> s = input ( ) <NEWLINE> listAns = [ ] <NEWLINE> <NL> set1 = [ <STRING> , <STRING> ] <NEWLINE> set2 = [ <STRING> ] <NEWLINE> <NL> listS = list ( s ) <NEWLINE> <NL> print ( listS ) <NEWLINE> <NL> for i in listS : <NEWLINE> <INDENT> if i in set1 : <NEWLINE> <INDENT> listAns . append ( i ) <NEWLINE> <NL> <DEDENT> elif i in set2 : <NEWLINE> <INDENT> if len ( listAns ) != 0 : <NEWLINE> <INDENT> listAns . pop ( ) <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> ans = reduce ( lambda x , y : x + y , [ str ( x ) for x in listAns ] ) <NEWLINE> <NL> print ( ans ) <NEWLINE>
s = input ( ) <NEWLINE> <NL> ans = <STRING> <NEWLINE> for x in s : <NEWLINE> <INDENT> if ans < > <STRING> : <NEWLINE> <INDENT> if x == <STRING> <NEWLINE> <INDENT> ans = ans [ : - 1 ] <NEWLINE> continue <NEWLINE> <DEDENT> <DEDENT> if x < > <STRING> : <NEWLINE> <INDENT> ans += x <NEWLINE> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
import bisect , collections , copy , heapq , itertools , math , numpy , string <NEWLINE> from fractions import gcd <NEWLINE> import sys <NEWLINE> def I ( ) : return int ( sys . stdin . readline ( ) . rstrip ( ) ) <NEWLINE> def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) ) <COMMENT> <NEWLINE> def S ( ) : return sys . stdin . readline ( ) . rstrip ( ) <NEWLINE> def LS ( ) : return list ( sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) <NEWLINE> <NL> <NL> def main ( ) : <NEWLINE> <INDENT> N = S ( ) <NEWLINE> L = [ i for i in N ] <NEWLINE> <NL> for i , num in enumerate ( L ) : <NEWLINE> <INDENT> if ( i != 0 and num == <STRING> ) : <NEWLINE> <INDENT> L [ i - 1 ] = <STRING> <NEWLINE> <NL> <DEDENT> <DEDENT> L . remove ( <STRING> ) <NEWLINE> print ( <STRING> . join ( L ) ) <NEWLINE> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> for i in range ( len ( s ) - 1 ) : <NEWLINE> <INDENT> if s [ i + 1 ] != <STRING> : <NEWLINE> <INDENT> ans += s [ i ] <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> an = list ( map ( int , input ( ) ) ) <NEWLINE> <NL> cost = 10000 * 3 <NEWLINE> ans = 10000 * 3 <NEWLINE> for i in range ( - 100 , 100 + 1 ) : <NEWLINE> <INDENT> cost = sum ( [ ( j - i ) ** 2 for j in an ] ) <NEWLINE> ans = min ( ans , cost ) <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = list ( map ( int , input ( split ( ) ) ) ) <NEWLINE> <NL> ans = 1e9 <NEWLINE> for p in a : <NEWLINE> <INDENT> sub = 0 <NEWLINE> for q in a : <NEWLINE> <INDENT> sub += pow ( p - q , 2 ) <NEWLINE> <DEDENT> ans = min ( ans , sub ) <NEWLINE> <NL> <DEDENT> print ( ans ) <NEWLINE>
<NL> N = int ( input ( ) ) <NEWLINE> list = [ int ( a ) for a in input ( ) . split ( ) ] <NEWLINE> <NL> A = sum ( list ) // N <NEWLINE> <NL> for k in range ( N ) : <NEWLINE> <INDENT> ans = ( list [ j ] - A ) ** 2 <NEWLINE> <NL> <DEDENT> for i in range ( - 100 , 100 ) : <NEWLINE> <INDENT> sum = 0 <NEWLINE> sum_new = 0 <NEWLINE> for j in range ( N ) : <NEWLINE> <INDENT> sum = sum + ( list [ j ] - A ) ** 2 <NEWLINE> sum_new = sum_new + ( list [ j ] - i ) ** 2 <NEWLINE> <DEDENT> if ( sum > sum_new ) : <NEWLINE> <INDENT> ans = sum_new <NEWLINE> <NL> <DEDENT> <DEDENT> print ( ans ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> l_ans = [ [ ] for _ in range ( 200 ) ] <NEWLINE> <NL> for i in range ( - 100 , 101 ) : <NEWLINE> <INDENT> sum = 0 <NEWLINE> <NL> for j in range ( N ) : <NEWLINE> <INDENT> sum = sum + ( i - l [ j ] ) ** 2 <NEWLINE> <NL> <DEDENT> l_ans [ i + 100 ] = sum <NEWLINE> <NL> <DEDENT> print ( l_ans ) <NEWLINE> print ( min ( l_ans ) ) <NEWLINE>
import math <NEWLINE> <NL> N = int ( input ( ) ) <NEWLINE> A = [ int ( a ) for a in input ( ) . split ( <STRING> ) ] <NEWLINE> ave = sum ( A ) / N <NEWLINE> can1 = math . floor ( ave ) <NEWLINE> can2 = math . ceil ( ave ) <NEWLINE> <NL> cost1 = sum ( [ ( a - can1 ) ** 2 for a in A ] ) <NEWLINE> cost2 = sum ( [ ( a - can2 ) ** 2 for a in A ] ) <NEWLINE> print ( min [ cost1 , cost2 ] ) <NEWLINE>
a = int ( input ( ) ) <NEWLINE> b = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> d = 0 <NEWLINE> <NL> for i in b : <NEWLINE> <INDENT> d += ( int ( i ) - int ( c ) ) ** 2 <NEWLINE> <DEDENT> print ( d ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> ans = INF <NEWLINE> for i in range ( - 100 , 101 ) : <NEWLINE> <INDENT> val = 0 <NEWLINE> for a in A : <NEWLINE> <INDENT> val += ( a - i ) ** 2 <NEWLINE> <DEDENT> ans = min ( ans , val ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
def resolve ( ) : <NEWLINE> <INDENT> S = list ( input ( ) ) <NEWLINE> if len ( S ) == 2 : <NEWLINE> <INDENT> print ( - 1 , - 1 ) <NEWLINE> <DEDENT> for i in range ( len ( S ) - 3 ) : <NEWLINE> <INDENT> if S [ i ] == S [ i + 1 ] or S [ i + 1 ] == S [ i + 2 ] or S [ i + 2 ] == S [ i ] ) : <NEWLINE> <INDENT> print ( i + 1 , i + 3 ) <NEWLINE> return <NEWLINE> <DEDENT> <DEDENT> print ( - 1 , - 1 ) <NEWLINE> <NL> <NL> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> resolve ( ) <NEWLINE> <DEDENT>
s = input ( ) <NEWLINE> N = len ( s ) <NEWLINE> if N == 2 : <NEWLINE> <INDENT> if s [ 0 ] == s [ 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> quit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> quit ( ) <NEWLINE> <DEDENT> <DEDENT> for i in range ( N - 2 ) : <NEWLINE> <INDENT> if s [ i ] == s [ i + 1 ] or s [ i ] == s [ i + 2 ] : <NEWLINE> <INDENT> print ( i + 1 , i + 3 ) <NEWLINE> quit ( ) <NEWLINE> <DEDENT> <DEDENT> if s [ - 1 ] == s [ - 2 ] : <NEWLINE> <INDENT> print ( N - 1 , N <NEWLINE> quit ( ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE>
if a > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if a <= 0 and b >= 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if ( b - a + 1 ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
a , b = map ( int , inout ( ) . split ( ) ) <NEWLINE> if a >= 0 : <NEWLINE> <INDENT> print ( <STRING> if a != 0 else <STRING> ) <NEWLINE> <DEDENT> if a < 0 and b > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> if b <= 0 : <NEWLINE> <INDENT> if b == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if ( a - b + 1 ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> c = b - a <NEWLINE> if a <= 0 <= b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> elif a > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> elif b < 0 : a <NEWLINE> <INDENT> if c % 2 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> if ab <= 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b < 0 : <NEWLINE> <INDENT> if ( b - a + 1 ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> c = ( b - a + 1 ) * ( a + b ) // 2 <NEWLINE> if c > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif c = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int ( input ( ) . split ( ) ) <NEWLINE> if a > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a < 0 : <NEWLINE> <INDENT> if ( b - a ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a > 0 and b > 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> elif a = 0 or b = 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> elif a < 0 and 0 < b : <NEWLINE> <INDENT> if abs ( a ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> if abs ( b - a ) % 2 == 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> <DEDENT>
n , m = map ( int , input ( ) . split ( ) ) <NEWLINE> possible = [ 0 ] * n <NEWLINE> kosuu = [ 1 ] * n <NEWLINE> possible [ 0 ] = 1 <NEWLINE> <NL> L = [ ] <NEWLINE> <NL> if flag == False : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> for i in range ( m ) : <NEWLINE> <INDENT> x , y = L [ i ] [ 0 ] , L [ i ] [ 1 ] <NEWLINE> x , y = x - 1 , y - 1 <NEWLINE> if kosuu [ x ] >= 2 and possible [ x ] == 1 : <NEWLINE> <INDENT> possible [ y ] = 1 <NEWLINE> kosuu [ x ] -= 1 <NEWLINE> kosuu [ y ] += 1 <NEWLINE> <DEDENT> elif kosuu [ x ] == 1 and possible [ x ] == 1 : <NEWLINE> <INDENT> possible [ x ] = 0 <NEWLINE> possible [ y ] = 1 <NEWLINE> kosuu [ x ] = 0 <NEWLINE> kosuu [ y ] += 1 <NEWLINE> <DEDENT> elif kosuu [ x ] >= 2 and possible [ x ] == 0 : <NEWLINE> <INDENT> kosuu [ x ] -= 1 <NEWLINE> kosuu [ y ] += 1 <NEWLINE> <DEDENT> elif kosuu [ x ] == 1 and possible [ x ] == 0 : <NEWLINE> <INDENT> kosuu [ x ] = 0 <NEWLINE> kosuu [ y ] += 1 <NEWLINE> <DEDENT> <DEDENT> print ( sum ( possible ) ) <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> d = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> def is_ok ( num ) : <NEWLINE> <INDENT> s = str ( num ) <NEWLINE> for ng in d : <NEWLINE> <INDENT> if ng in s : return False <NEWLINE> <NL> <DEDENT> return True <NEWLINE> <NL> <DEDENT> while True : <NEWLINE> <INDENT> if is_ok ( n ) : <NEWLINE> <INDENT> print ( n ) <NEWLINE> exit ( ) <NEWLINE> <NL> <DEDENT> n += 1 <NEWLINE> <DEDENT>
class Factorial : <NEWLINE> <INDENT> def __init__ ( self , max_fact , mod ) : <NEWLINE> <COMMENT> <NL> <COMMENT> <NL> <INDENT> f = [ 1 ] * ( max_fact + 1 ) <NEWLINE> for idx in range ( 2 , max_fact + 1 ) : <NEWLINE> <INDENT> f [ idx ] = f [ idx - 1 ] * idx <NEWLINE> f [ idx ] %= mod <NEWLINE> <DEDENT> if mod > max_fact : <NEWLINE> <INDENT> fi = [ pow ( f [ - 1 ] , mod - 2 , mod ) ] <NEWLINE> for idx in range ( max_fact , 0 , - 1 ) : <NEWLINE> <INDENT> fi += [ fi [ - 1 ] * idx % mod ] <NEWLINE> <DEDENT> fi = fi [ : : - 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> fi = [ pow ( n , mod - 2 , mod ) for n in f ] <NEWLINE> <DEDENT> self . mod = mod <NEWLINE> self . f = f <NEWLINE> self . fi = fi <NEWLINE> <NL> <DEDENT> def factorial ( self , n ) : <NEWLINE> <INDENT> return self . f [ n ] <NEWLINE> <NL> <DEDENT> def factorial_inverse ( self , n ) : <NEWLINE> <INDENT> return self . fi [ n ] <NEWLINE> <NL> <DEDENT> def combination ( self , n , r ) : <NEWLINE> <INDENT> f = self . f <NEWLINE> fi = self . fi <NEWLINE> return f [ n ] * fi [ r ] * fi [ n - r ] % self . mod <NEWLINE> <NL> <DEDENT> def permutation ( self , n , r ) : <NEWLINE> <INDENT> return self . f [ n ] * self . fi [ n - r ] % self . mod <NEWLINE> <NL> <DEDENT> def homogeneous_product ( self , n , r ) : <NEWLINE> <INDENT> f = self . f <NEWLINE> fi = self . fi <NEWLINE> return f [ n + r - 1 ] * fi [ r ] * fi [ n - 1 ] % self . mod <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> max_fact = 2 * 10 ** 6 <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> fact_instance = Factorial ( max_fact , mod ) <NEWLINE> comb = fact_instance . combination <NEWLINE> perm = fact_instance . permutation <NEWLINE> combrep = fact_instance . homogeneous_product <NEWLINE> <NL> H , W , A , B = [ int ( _ ) for _ in input ( ) . split ( ) ] <NEWLINE> ans = comb ( H + W - 2 , H - 1 ) <NEWLINE> for x in range ( H - A , H ) : <NEWLINE> <INDENT> ans -= comb ( x + B - 1 , B - 1 ) * ( H - 1 - x + W - B , W - B ) <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if ( ( a * b * c ) % 7 = 0 ) and ( ( a * b * c ) / 7 = 25 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
A , B , C = int ( input ( ) ) <NEWLINE> res = <STRING> <NEWLINE> if A == 5 or A == 7 : <NEWLINE> <INDENT> if B == 5 or B == 7 : <NEWLINE> <INDENT> if C == 5 or C == 7 : <NEWLINE> <INDENT> if A + B + C == 17 : <NEWLINE> <INDENT> res = <STRING> <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> print ( res ) <NEWLINE>
stdin << A , B , C <NEWLINE> lst = [ A , B , C ] <NEWLINE> sl = sort ( lst ) <NEWLINE> if sl [ 0 ] == 5 & & sl [ 1 ] == 5 & & sl [ 2 ] == 7 <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n , l = map ( int , input ( ) . split ( ) ) <NEWLINE> s = sorted ( [ input ( ) for i in range ( n ) ] ) <NEWLINE> print ( * s , sep = <STRING> ) <NEWLINE>
l = [ int ( x ) for x in input ( ) . split ( ) ] <NEWLINE> l = sorted ( l ) <NEWLINE> if l . count ( 5 ) == 2 and l . count ( 7 ) == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> <NEWLINE> <DEDENT>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> num_5 = 0 <NEWLINE> num_7 = 0 <NEWLINE> <NL> for i in a : <NEWLINE> <INDENT> if i == <STRING> : <NEWLINE> <INDENT> num_5 = num_5 + 1 <NEWLINE> <DEDENT> if i == <STRING> : <NEWLINE> <INDENT> num_7 = num_7 + 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if num_5 = 2 and num_7 = 1 : <NEWLINE> <INDENT> print <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print <STRING> <NEWLINE> <DEDENT>
def test ( ) : <NEWLINE> <INDENT> x = input ( ) <NEWLINE> x = x . split ( ) <NEWLINE> if x = [ <STRING> , <STRING> , <STRING> ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x = [ <STRING> , <STRING> , <STRING> ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif x = [ <STRING> , <STRING> , <STRING> ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
data = input ( ) . split ( ) <NEWLINE> <NL> seven = 0 <NEWLINE> five = 0 <NEWLINE> <NL> for i in range ( data ) : <NEWLINE> <INDENT> if int ( i ) == 7 : <NEWLINE> <INDENT> seven += 1 <NEWLINE> <DEDENT> elif int ( i ) == 5 : <NEWLINE> <INDENT> five += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if seven == 1 and five == 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> iroha = [ a , b , c ] <NEWLINE> <NL> if iroha . count ( 2 ) == 5 and iroha . count ( 1 ) == 7 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> prnt ( <STRING> ) <NEWLINE> <DEDENT>
def test ( ) : <NEWLINE> <INDENT> arr = input ( ) <NEWLINE> arr = [ int ( i ) for i in arr ] <NEWLINE> arr = sorted ( arr ) <NEWLINE> if arr == [ 5 , 5 , 7 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> test ( ) <NEWLINE>
a , b , c = sorted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> if ( a + b + c == 17 ) & ( a == b ) & ( c == 7 ) : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT>
A , B , C = list ( map ( int , input ( ) . split ( <STRING> ) ) <NEWLINE> if [ A , B , C ] . count ( 5 ) == 2 and [ A , B , C ] . count ( 7 ) == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) ) <NEWLINE> <DEDENT>
i = 0 <NEWLINE> k_n = [ ] <NEWLINE> k_n_all = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] <NEWLINE> <NL> p_price , k_number = map ( int , input ( ) . split ( ) ) <NEWLINE> k_n = map ( int , input ( ) . split ( ) ) <NEWLINE> result_number = list ( set ( k_n_all ) - set ( k_n ) ) <NEWLINE> result_price = p_price <NEWLINE> <NL> while True : <NEWLINE> <INDENT> x = 0 <NEWLINE> y = 0 <NEWLINE> z = list ( map ( int , str ( result_price ) ) ) <NEWLINE> while x < len ( z ) : <NEWLINE> <INDENT> if z [ x ] in result_number : <NEWLINE> <INDENT> y += 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> y += 1 <NEWLINE> <DEDENT> x += 1 <NEWLINE> <NL> <DEDENT> if y == 0 : <NEWLINE> <INDENT> print ( result_price ) <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> result_price += 1 <NEWLINE> <DEDENT> <DEDENT>
list = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> five = 0 <NEWLINE> seven = 0 <NEWLINE> <NL> for i in list : <NEWLINE> <INDENT> if i == 5 : <NEWLINE> <INDENT> five += 1 <NEWLINE> <DEDENT> elif i == 7 : <NEWLINE> <INDENT> seven += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pass <NEWLINE> <NL> <DEDENT> <DEDENT> if seven == 1 and five == 2 : <NEWLINE> <INDENT> print ( TRUE ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( NO ) <NEWLINE> <DEDENT>
A , B , C = map ( int , input ( ) . sprit ( ) ) <NEWLINE> if sorted [ A , B , C ] = [ 5 , 5 , 7 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
def main ( ) : <NEWLINE> <INDENT> a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if sum ( a , b , c ) == 17 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> main ( ) <NEWLINE> <DEDENT>
A = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> sort ( A ) <NEWLINE> if A == [ 5 , 5 , 7 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT>
a = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> success_cases = [ ( a [ 0 ] , a [ 1 ] , a [ 2 ] ) , ( a [ 1 ] , a [ 2 ] , a [ 0 ] ) , a [ 2 ] , a [ 0 ] , a [ 1 ] ) ] <NEWLINE> <NL> for c in success_cases : <NEWLINE> <INDENT> if c == ( 5 , 7 , 5 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> return <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> <NL>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if a = 5 , b = 5 , c = 7 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a = 5 , b = 7 , c = 5 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a = 7 , b = 5 , c = 5 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> if len ( a ) == 7 : <NEWLINE> <INDENT> if len ( b ) == 5 and len ( c ) == 5 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> if len ( b ) == 7 : <NEWLINE> <INDENT> if len ( a ) == 5 and len ( c ) == 5 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> <DEDENT> if len ( c ) == 7 : <NEWLINE> <INDENT> if len ( a ) == 5 and len ( b ) == 5 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
s = input ( ) <NEWLINE> s = s . split ( ) <NEWLINE> <NL> s . sort ( ) <NEWLINE> <NL> if s = [ <STRING> , <STRING> , <STRING> ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<INDENT> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> counter5 = 0 <NEWLINE> counter7 = 0 <NEWLINE> <NL> for num in l : <NEWLINE> <INDENT> if num == 5 : <NEWLINE> <INDENT> counter5 += 1 <NEWLINE> <NL> <DEDENT> if num == 7 : <NEWLINE> <INDENT> counter7 += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if counter5 == 2 and counter7 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
nums = map ( int , input ( ) . split ( ) ) <NEWLINE> if nums . count ( 5 ) == 2 and nums . count ( 7 ) == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
if ( a == 5 & b == 7 & c == 5 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( a == 7 & b == 5 & c == 5 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif ( a == 5 & b == 5 & c == 7 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> if a > b or b > c or a > c or a > b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> if a + b + c == 19 and a . count ( <STRING> ) == 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
x = input ( ) . split ( ) <NEWLINE> fn = 0 <NEWLINE> sn = 0 <NEWLINE> <NL> for i in range ( len ( x ) ) : <NEWLINE> <INDENT> if int ( x [ i ] ) == 5 : <NEWLINE> <INDENT> fn += 1 <NEWLINE> <DEDENT> elif int ( x [ i ] ) == 7 : <NEWLINE> <INDENT> sn += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if fn = 2 : <NEWLINE> <INDENT> if sn = 5 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
N , L = map ( int , input ( ) . split ( ) ) <NEWLINE> S = sorted ( [ input ( ) for i in range ( N ) ] ) <NEWLINE> print ( <STRING> . join ( S ) ) <NEWLINE>
A , B , C = map ( int , input ( ) ) <NEWLINE> <NL> num5 = 0 <NEWLINE> num7 = 0 <NEWLINE> ans = <STRING> <NEWLINE> <NL> for num in [ A , B , C ] : <NEWLINE> <INDENT> if num == 5 : <NEWLINE> <INDENT> num5 += 1 <NEWLINE> <DEDENT> elif num == 7 : <NEWLINE> <INDENT> num7 += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> if num5 == 2 and num7 == 1 : <NEWLINE> <INDENT> ans = <STRING> <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
s = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> for i in s : <NEWLINE> <INDENT> if i == 5 : <NEWLINE> <INDENT> count5 += 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> count7 += 1 <NEWLINE> <NL> <DEDENT> <DEDENT> if count5 == 2 and count7 == 1 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == b == 5 and c == 7 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif a == c == 5 and b == 7 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> elif b == c == 5 amd c == 7 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
from sys import stdin <NEWLINE> <NL> A , B , C = [ int ( x ) for x in stdin . realine ( ) . rstrip ( ) . split ( ) ] <NEWLINE> <NL> if A + B + C == 17 and A >= 5 and B >= 5 and C >= 5 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
n = int ( input ( ) ) <NEWLINE> print ( n * ( n + 1 ) // 2 ) <NEWLINE>
a = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> a , sort ( ) <NEWLINE> print ( <STRING> if a [ 0 ] == 5 and a [ 1 ] == 5 and a [ 2 ] == 7 else <STRING> ) <NEWLINE>
<COMMENT> <NL> <NL> def atc_042a ( input_value : str ) -> str : <NEWLINE> <INDENT> ABC = input_value . split ( <STRING> ) <NEWLINE> if ABC . count ( <STRING> ) == 2 and ABC . count ( <STRING> ) == 1 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> return <STRING> <NEWLINE> <NL> <DEDENT> Input_value_1 = input ( ) <NEWLINE> print ( atc_042a ( input_value_1 ) ) <NEWLINE>
abc = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> abc . sort ( ) <NEWLINE> if a [ 0 ] == 5 and a [ 1 ] == 5 and a [ 2 ] == 7 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE>
L = input ( ) . split ( ) <NEWLINE> A , B , C = int ( L [ 0 ] ) , int ( L [ 1 ] ) , int ( L [ 2 ] ) <NEWLINE> X = set ( [ 5 , 7 ] ) <NEWLINE> ans = [ ] <NEWLINE> for i in range ( len ( X ) ) : <NEWLINE> <INDENT> ans . append ( [ A , B , C ] . count ( X [ i ] ) ) <NEWLINE> <DEDENT> if ans == [ 2 , 1 ] : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
clause_list = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> for index , clause in enumerate ( clause_list ) : <NEWLINE> <INDENT> if clause = 5 : <NEWLINE> <INDENT> clause_list . pop ( index ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> for index , clause in enumerate ( clause_list ) : <NEWLINE> <INDENT> if clause = 7 : <NEWLINE> <INDENT> clause_list . pop ( index ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> for index , clause in enumerate ( clause_list ) : <NEWLINE> <INDENT> if clause = 5 : <NEWLINE> <INDENT> clause_list . pop ( index ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> print ( <STRING> if len ( clause_list ) == 0 else <STRING> ) <NEWLINE>
<COMMENT> <NL> list = list ( int , input ( ) . split ( ) ) <NEWLINE> <COMMENT> <NL> list . sort ( ) <NEWLINE> <NL> if list [ 0 ] == 5 and list [ 1 ] == 5 and list [ 2 ] == 7 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
S = int ( input ( ) ) <NEWLINE> <NL> if S . count ( 5 ) == 2 & & S . count ( 7 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <NL> a = int ( input ( ) ) <NEWLINE> b = int ( input ( ) ) <NEWLINE> c = int ( input ( ) ) <NEWLINE> <NL> if 7 == a : <NEWLINE> <INDENT> if 5 == b and 5 == c : <NEWLINE> <INDENT> print ( <STRING> , end = <STRING> ) <NEWLINE> <DEDENT> <DEDENT> elif 5 == a : <NEWLINE> <INDENT> if ( 7 == b and 5 == c ) or ( 5 == b and 7 == c ) : <NEWLINE> <INDENT> print ( <STRING> , end = <STRING> ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> , end = <STRING> ) <NEWLINE> <DEDENT>
A = input ( ) <NEWLINE> B = input ( ) <NEWLINE> C = input ( ) <NEWLINE> <NL> L = [ A , B , C ] <NEWLINE> <NL> for x in L : <NEWLINE> <INDENT> if len ( x ) == 7 : <NEWLINE> <INDENT> L . remove ( x ) <NEWLINE> for y in L : <NEWLINE> <INDENT> if len ( y ) != 5 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
a , b , c = map ( int , input ( ) . split ( ) ) <NEWLINE> if a == 5 and b == 7 and c == 7 ) or ( a == 7 and b == 5 and c == 7 ) or ( a == 7 and b == 7 c == 5 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
num = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> num = num . sorted <NEWLINE> if ( num [ 0 ] == 5 and num [ 1 ] == 5 and num [ 2 ] == 7 ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
s = map ( int ( input ( ) . split ( ) ) ) <NEWLINE> if s . count ( <STRING> ) == 1 and s . count ( <STRING> ) == 2 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> <NL> if __name__ == <STRING> : <NEWLINE> <INDENT> str_sum = sum ( [ map ( int , input ( ) . split ( ) ) ] ) <NEWLINE> if str_sum == 17 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
N , L = map ( int , input ( ) . split ( ) ) <NEWLINE> input_line1 = [ input ( ) for i in range ( N ) ] <NEWLINE> input_line2 = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> input_line2 . append ( min ( input_line1 ) ) <NEWLINE> <INDENT> input_line1 . remove ( min ( input_line1 ) ) <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> . join ( input_line2 ) ) <NEWLINE>
first = input ( ) <NEWLINE> first = first . split ( ) <NEWLINE> <NL> N = int ( first [ 0 ] ) <NEWLINE> L = [ ] <NEWLINE> for i in range ( N ) <NEWLINE> <INDENT> s = input ( ) <NEWLINE> L . append ( s ) <NEWLINE> <NL> <DEDENT> L . sort ( ) <NEWLINE> for i in L : <NEWLINE> <INDENT> print ( i , end = <STRING> ) <NEWLINE> <NL> <DEDENT>
n , l = map ( int , input ( ) . split ) <NEWLINE> s = sorted ( [ input ( ) for i in range ( n ) ] ) <NEWLINE> print ( * s , sep = <STRING> ) <NEWLINE>
N , L = map ( int , input ( ) . split ( ) ) <NEWLINE> S = [ input ( ) for s in range ( N ) ] <NEWLINE> S . sort ( ) <NEWLINE> output = <STRING> <NEWLINE> for i in S : <NEWLINE> <INDENT> output += i <NEWLINE> <DEDENT> prunt ( output ) <NEWLINE>
N , L = map ( int , input ( ) . split ( ) ) <NEWLINE> S = [ input ( ) for i in range ( N ) ] <NEWLINE> S . sorted ( ) <NEWLINE> for i in range ( len ( S ) ) : <NEWLINE> <INDENT> print ( S [ i ] ) <NEWLINE> <DEDENT>
N , L = map ( int , input ( ) . split ( ) ) <NEWLINE> string_list = [ input ( ) for i in range ( N ) ] <NEWLINE> string_list . sort ( ) <NEWLINE> print ( <STRING> . join ( string_list ) <NEWLINE>
n , l = map ( int , input ( ) , split ( ) ) <NEWLINE> s = [ input ( ) for _ in range ( n ) ] <NEWLINE> s . sort ( ) <NEWLINE> for k in s : <NEWLINE> <INDENT> print ( k , end = <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> n , l = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> a = [ ] <NEWLINE> for i in range ( n ) <NEWLINE> <INDENT> a . append ( input ( ) ) <NEWLINE> <NL> <DEDENT> a . sort ( ) <NEWLINE> <NL> print ( <STRING> . join ( mylist ) ) <NEWLINE>
N , L = map ( int , input ( ) . split ( ) ) <NEWLINE> List = [ ] <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> List . append ( int ( input ( ) ) ) <NEWLINE> <DEDENT> List . sort ( ) <NEWLINE> res = <STRING> <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> res += List [ i ] <NEWLINE> <DEDENT> print ( res ) <NEWLINE>
n , l = map ( int , input ( ) . split ( ) ) <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> list [ i ] = str ( input ( ) ) <NEWLINE> <DEDENT> newlist = list . sorted ( ) <NEWLINE> print ( newlist , sep = <STRING> ) <NEWLINE>
Firstline = input ( ) <NEWLINE> Firstline = Firstline . split ( ) <NEWLINE> <NL> List = [ ] <NEWLINE> for i in int ( Firstline [ 0 ] ) : <NEWLINE> <INDENT> List . append ( input ( ) ) <NEWLINE> <NL> <DEDENT> List . sort ( ) <NEWLINE> s = <STRING> <NEWLINE> for i in List : <NEWLINE> <INDENT> s += i <NEWLINE> <NL> <DEDENT> print ( s ) <NEWLINE>
l , n = map ( int , input ( ) . split ( ) ) <NEWLINE> a = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> a . append ( input ( ) ) <NEWLINE> <DEDENT> a . sort ( ) <NEWLINE> b = <STRING> <NEWLINE> for i in a : <NEWLINE> <INDENT> b += a <NEWLINE> <DEDENT> print ( b ) <NEWLINE>
n , l = map ( int , input ( ) . split ( ) ) <NEWLINE> s = sorted ( [ map ( int , input ( ) . split ( ) ) for _ in range ( n ) ] ) <NEWLINE> print ( * s , sep = <STRING> ) <NEWLINE>
from sys import stdin , stdout <NEWLINE> from time import perf_counter <NEWLINE> <NL> import sys <NEWLINE> sys . setrecursionlimit ( 10 ** 9 ) <NEWLINE> mod = 10 ** 9 + 7 <NEWLINE> <NL> import sys <NEWLINE> sys . stdout = open ( <STRING> , <STRING> ) <NEWLINE> sys . stdin = open ( <STRING> , <STRING> ) <NEWLINE> <NL> <NL> <NL> n , l = map ( int , input ( ) . split ( ) ) <NEWLINE> s = [ input ( ) for _ in range ( n ) ] <NEWLINE> s . sort ( ) <NEWLINE> result = <STRING> . join ( s ) <NEWLINE> print ( s ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = sorted ( [ input ( ) for i in range ( n ) ] ) <NEWLINE> print ( * s , sep = <STRING> ) <NEWLINE>
from sys import stdin <NEWLINE> input = stdin . readline <NEWLINE> <NL> L , N = map ( int , input ( ) . split ( ) ) <NEWLINE> D = [ ] <NEWLINE> <NL> for i in range ( N ) : <NEWLINE> <INDENT> D . append ( input ( ) <NEWLINE> <NL> <DEDENT> D . sort ( ) <NEWLINE> <NL> print ( <STRING> . join ( D ) ) <NEWLINE>
<COMMENT> <NL> <COMMENT> <NL> <NL> import sys <NEWLINE> <NL> <NL> def input ( ) : <NEWLINE> <INDENT> return sys . stdin . readline ( ) . strip ( ) <NEWLINE> <NL> <NL> <DEDENT> def _main ( ) : <NEWLINE> <INDENT> input ( ) <NEWLINE> <INDENT> s = sorted ( list ( input ( ) . split ( ) ) ) <NEWLINE> print ( <STRING> . join ( s ) ) <NEWLINE> <NL> <NL> <DEDENT> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> _main ( ) <NEWLINE> <DEDENT>
n , l = map ( int , input ( ) . split ( ) ) <NEWLINE> s = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> s . append ( str ( input ( ) ) ) <NEWLINE> <NL> <DEDENT> a = <STRING> . join ( sorted ( s ) ) <NEWLINE> <NL> <NL> print ( a <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = sorted ( [ input ( ) for i in range ( N ) ] ) <NEWLINE> print ( * s , sep = <STRING> ) <NEWLINE>
5 5 7 <NEWLINE> Yes <NEWLINE> N , L = map ( int , input ( ) . split ( ) ) <NEWLINE> str_list = [ ] <NEWLINE> final_str = <STRING> <NEWLINE> for i in range ( N ) : <NEWLINE> <INDENT> str_list . append ( input ( ) ) <NEWLINE> <DEDENT> new_list = sorted ( str_list ) <NEWLINE> for n in range ( N ) : <NEWLINE> <INDENT> final_str += new_list [ n ] <NEWLINE> <DEDENT> print ( final_str ) <NEWLINE> 3 3 <NEWLINE>
n , l = ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> ss = [ ] <NEWLINE> for i in range ( n ) : <NEWLINE> <INDENT> ss . append ( input ( ) ) <NEWLINE> <NL> <DEDENT> ss . sort ( ) <NEWLINE> print ( str . join ( ss ) ) <NEWLINE>
n , l = map ( int , input ( ) . split ( ) ) <NEWLINE> s = [ int ( input ( ) ) for _ in range ( n ) ] <NEWLINE> s . sort ( ) <NEWLINE> <NL> for i in s : <NEWLINE> <INDENT> print ( i , end = <STRING> ) <NEWLINE> <DEDENT>
<COMMENT> <NL> N , L = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> S = [ ] <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> S . add ( str ( input ( ) ) ) <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> print ( <STRING> . join ( sorted ( S ) ) ) <NEWLINE>
n , l = map ( int , input ( ) . split ( ) ) <NEWLINE> s = [ int ( input ( ) ) for i in range ( n ) ] <NEWLINE> <NL> s . sort ( ) <NEWLINE> S = <STRING> <NEWLINE> for i in s : <NEWLINE> <INDENT> S += i <NEWLINE> <DEDENT> print ( S ) <NEWLINE>
a = input ( ) . split ( ) <NEWLINE> tg = a [ 0 ] <NEWLINE> ok_nums = set ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) <NEWLINE> ng_nums = set ( input ( ) . split ( ) ) <NEWLINE> ok_nums = ok_nums - ng_nums <NEWLINE> rt = 0 <NEWLINE> i = int ( tg ) <NEWLINE> while True : <NEWLINE> <INDENT> if ok_nums >= set ( d for d in str ( i ) ) : <NEWLINE> <INDENT> print ( i ) <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> i += 1 <NEWLINE> <DEDENT> <DEDENT>
<COMMENT> <NL> <COMMENT> <NL> <NL> N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> D = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> numList = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] <NEWLINE> listAns = [ ] <NEWLINE> <NL> num = [ ] <NEWLINE> listN = [ int ( x ) for x in list ( str ( N ) ) ] <NEWLINE> <NL> <COMMENT> <NL> <NL> for i in numList : <NEWLINE> <INDENT> if i not in D : <NEWLINE> <INDENT> num . append ( i ) <NEWLINE> <NL> <COMMENT> <NL> <NL> <DEDENT> <DEDENT> for i in listN : <NEWLINE> <INDENT> for j in num : <NEWLINE> <INDENT> if j >= i : <NEWLINE> <INDENT> listAns . append ( j ) <NEWLINE> break <NEWLINE> <NL> <COMMENT> <NL> <DEDENT> <DEDENT> <DEDENT> ans = int ( reduce ( lambda x , y : x + y , [ str ( x ) for x in listAns ] ) ) <NEWLINE> print ( ans ) <NEWLINE>
n , k = input ( ) . split ( ) <NEWLINE> l = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> checkNum = [ i for i in range ( 11 ) ] <NEWLINE> <NL> def find ( x ) : <NEWLINE> <INDENT> while x != checkNum [ x ] : <NEWLINE> <INDENT> checkNum [ x ] = checkNum [ checkNum [ x ] ] <NEWLINE> x = checkNum [ x ] <NEWLINE> <DEDENT> return x <NEWLINE> <NL> <DEDENT> for i in l : <NEWLINE> <INDENT> checkNum [ find ( i ) ] = checkNum [ find ( i + 1 ) ] <NEWLINE> <NL> <DEDENT> fin = <STRING> <NEWLINE> for i in range ( len ( n ) ) : <NEWLINE> <INDENT> first = int ( n [ i ] ) <NEWLINE> k = find ( first ) <NEWLINE> if k == first : <NEWLINE> <INDENT> fin += str ( k ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if k != 10 : <NEWLINE> <INDENT> fin += str ( k ) <NEWLINE> i += 1 <NEWLINE> <DEDENT> else : fin += str ( find ( 1 ) ) <NEWLINE> fin += str ( find ( 0 ) ) * ( len ( n ) - i ) <NEWLINE> break <NEWLINE> <NL> <DEDENT> <DEDENT> p <NEWLINE>
import itertools <NEWLINE> <NL> N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> D = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> dic = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] <NEWLINE> <NL> for i in D : <NEWLINE> <INDENT> dic . remove ( i ) <NEWLINE> <NL> <DEDENT> dict = map ( str , dic ) <NEWLINE> n = len ( str ( N ) ) <COMMENT> <NEWLINE> <NL> ans = [ ] <NEWLINE> for i in range ( 2 ) : <NEWLINE> <INDENT> for v in itertools . permutations ( dict , n + i ) : <NEWLINE> <INDENT> if int ( <STRING> . join ( v ) ) >= N : <NEWLINE> <INDENT> ans . append ( int ( <STRING> . join ( v ) ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( min ( ans ) ) <NEWLINE>
N , K = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> D = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> D_ = [ _ for _ in range ( 10 ) if _ not in D ] <NEWLINE> D_ . sort ( ) <NEWLINE> <NL> N_ = N + 1 <NEWLINE> break_flag = False <NEWLINE> for s_ in D_ : <NEWLINE> <INDENT> if break_flag : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> elif s_ == 0 : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> for p in product ( D_ , repeat = len ( str ( N_ ) ) - 1 ) : <NEWLINE> <INDENT> ans = int ( str ( s_ ) + <STRING> . join ( map ( str , p ) ) ) <NEWLINE> if N + 1 <= ans : <NEWLINE> <INDENT> print ( ans ) <NEWLINE> break_flag = True <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
N , K = input ( ) . split ( ) <NEWLINE> Dk = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> for i in range ( N , 10 * N + 1 ) : <NEWLINE> <INDENT> if set ( i ) & set ( Dk ) == set ( ) : <NEWLINE> <INDENT> print ( i ) <NEWLINE> <DEDENT> <DEDENT>
<COMMENT> <NL> N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> N = str ( N ) <NEWLINE> N_len = len ( N ) <NEWLINE> a = [ ] <NEWLINE> out = N <NEWLINE> for i in range ( K ) : <NEWLINE> <INDENT> a . append ( input ( ) ) <NEWLINE> <DEDENT> for i2 in range ( N_len ) : <NEWLINE> <INDENT> for i3 in range ( K ) : <NEWLINE> <INDENT> if N [ i2 ] == a [ i3 ] : <NEWLINE> <INDENT> out += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( out ) <NEWLINE> <NL>
n , k = input ( ) . split ( ) <NEWLINE> d = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> num = [ i for i in range ( 10 ) ] <NEWLINE> poss = list ( set ( d ) ^ set ( num ) ) <NEWLINE> an = int ( n ) <NEWLINE> while True : <NEWLINE> <INDENT> sum = 0 <NEWLINE> for p in poss : <NEWLINE> <INDENT> sum += n . count ( str ( p ) ) <NEWLINE> <DEDENT> if sum == len ( n ) : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> an += 1 <NEWLINE> <DEDENT> <DEDENT> print ( an ) <NEWLINE>
n , k = map ( int , input ( ) . split ( ) ) <NEWLINE> d = set ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> i = n <NEWLINE> while True : <NEWLINE> <INDENT> if not set ( ( str ( i ) ) ) & d : i += 1 <NEWLINE> else : <NEWLINE> <INDENT> print ( i ) <NEWLINE> exit ( ) <NEWLINE> <DEDENT> <DEDENT>
def check ( n , s ) : <NEWLINE> <INDENT> v = str ( n ) <NEWLINE> for i in v : <NEWLINE> <INDENT> if i in s : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> return True <NEWLINE> <DEDENT> def solve ( ) : <NEWLINE> <INDENT> n , k = mp ( ) <NEWLINE> s = input ( ) . split ( ) <NEWLINE> s = set ( s ) <NEWLINE> <NL> while True : <NEWLINE> <INDENT> if check ( n , s ) : <NEWLINE> <INDENT> print ( n ) <NEWLINE> break <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> n += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> for _ in range ( 1 ) : <NEWLINE> <INDENT> solve ( ) <NEWLINE> <DEDENT>
N , K = map ( int , input ( ) . split ( ) ) <NEWLINE> l = [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 ] <NEWLINE> for _ in range ( K ) : <NEWLINE> <INDENT> l . remove ( int ( input ( ) ) ) <NEWLINE> <DEDENT> n = [ int ( x ) for x in str ( N ) ] <NEWLINE> c = len ( n ) <NEWLINE> <NL> max = l [ 0 ] <NEWLINE> min = l [ - 1 ] <NEWLINE> if N > 1111 * max : <NEWLINE> <INDENT> b = 10000 * min ( [ i for i in l if i > 0 ] ) + 1111 * min <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a = [ max ] * c <NEWLINE> for j in range ( c ) : <NEWLINE> <INDENT> if a [ j ] > n [ j ] : <NEWLINE> <INDENT> a [ j ] = min ( [ i for i in l if i >= n [ j ] ] ) <NEWLINE> <DEDENT> <DEDENT> b = <STRING> <NEWLINE> for j in range ( c ) : <NEWLINE> <INDENT> b += str ( a [ j ] ) <NEWLINE> <DEDENT> b = int ( b ) <NEWLINE> <NL> <DEDENT> print ( b ) <NEWLINE>
def digit ( ) : <NEWLINE> <INDENT> N , K = [ int ( n ) for n in input ( ) . split ( ) ] <NEWLINE> digit = [ int ( n ) for n in input ( ) . split ( ) ] <NEWLINE> <NL> for i in range ( N , N * 10 ) : <NEWLINE> <INDENT> b = i <NEWLINE> while b != 0 : <NEWLINE> <INDENT> if ( b % 10 ) in digit : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> b /= 10 <NEWLINE> <DEDENT> if b == 0 : <NEWLINE> <INDENT> print ( i ) <NEWLINE> break : <NEWLINE> <NL> <DEDENT> <DEDENT> <DEDENT> digit ( ) <NEWLINE>
a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> fac = [ 0 ] * 200001 <COMMENT> <NEWLINE> inv = [ 0 ] * 200001 <COMMENT> <NEWLINE> fac [ 0 ] = 1 <NEWLINE> ans = 0 <NEWLINE> for i in range ( 1 , 200001 ) : <NEWLINE> <INDENT> fac [ i ] = fac [ i - 1 ] * i % 1000000007 <NEWLINE> <DEDENT> inv [ 200000 ] = pow ( fac [ 200000 ] , 1000000005 , 1000000007 ) <NEWLINE> for i in range ( 199999 , 0 , - 1 ) : <NEWLINE> <INDENT> inv [ i ] = ( inv [ i + 1 ] * ( i + 1 ) ) % 1000000007 <NEWLINE> inv [ 0 ] = 1 <NEWLINE> <DEDENT> for i in range ( h - a ) : <NEWLINE> <INDENT> if i == 0 : <NEWLINE> <INDENT> if h == 1 : <NEWLINE> <INDENT> x = 1 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> x = ( fac [ w - b + h - 2 <NEWLINE> <INDENT> - i ] * inv [ w - 1 - b ] * inv [ h - 1 - i ] ) % 1000000007 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> elif w == b + 1 : <NEWLINE> <INDENT> x = ( fac [ b - 1 + i ] * inv [ b - 1 ] * inv [ i ] ) % 1000000007 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> x = ( ( fac [ b - 1 + i ] * inv [ b - 1 ] * inv [ i ] ) % 1000000007 ) * ( ( fac [ w - b + h - 2 - i ] * inv [ w - b - 1 ] * inv [ h - 1 - i ] ) % 1000000007 ) <NEWLINE> <DEDENT> ans = ( ans + x ) % 1000000007 <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
h , w , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> <NL> p = 10 ** 9 + 7 <NEWLINE> <COMMENT> <NL> <NL> def modp_factorial ( n ) : <NEWLINE> <INDENT> s = 1 <NEWLINE> for x in range ( 1 , h + 1 ) : <NEWLINE> <INDENT> s = ( s * x ) % p <NEWLINE> <DEDENT> return s <NEWLINE> <DEDENT> def modp_prod ( lst ) : <NEWLINE> <INDENT> s = 1 <NEWLINE> for x in lst : <NEWLINE> <INDENT> s = ( s * x ) % p <NEWLINE> <DEDENT> return s <NEWLINE> <DEDENT> def inv ( n ) : <NEWLINE> <INDENT> s = 1 <NEWLINE> q = p - 2 <NEWLINE> while q > 0 : <NEWLINE> <INDENT> if q & 1 : <NEWLINE> <INDENT> s = s * n % p <NEWLINE> <DEDENT> n = n * n <NEWLINE> q >>= 1 <NEWLINE> <DEDENT> return s <NEWLINE> <NL> <DEDENT> l = [ 1 ] <NEWLINE> f = 1 <NEWLINE> for x in range ( 1 , h + w + 1 ) : <NEWLINE> <INDENT> f = f * x % p <NEWLINE> l . append ( f ) <NEWLINE> <DEDENT> invl = [ inv ( l [ - 1 ] ) ] <NEWLINE> for n in range ( h + w , 1 , - 1 ) : <NEWLINE> <INDENT> invl . append ( ( invl [ - 1 ] * n ) % p ) <NEWLINE> <DEDENT> invl . append ( 1 ) <NEWLINE> invl . reverse ( ) <NEWLINE> <NL> <NL> s = 0 <NEWLINE> for x in range ( 1 , h - a + 1 ) : <NEWLINE> <INDENT> s = s + modp_prod ( [ l [ x + b - 2 ] , invl [ x - 1 ] , invl [ b - 1 ] , l [ w - b + h - x - 1 ] , invl [ h - x ] , invl [ w - b - 1 ] ] ) % p <NEWLINE> <DEDENT> print ( s ) <NEWLINE>
P = 10 ** 9 + 7 <NEWLINE> fac = [ 1 ] <NEWLINE> ifac = [ 1 ] <NEWLINE> ff = 1 <NEWLINE> for i in range ( 1 , 200001 ) : <NEWLINE> <INDENT> ff *= i <NEWLINE> ff %= p <NEWLINE> fac . append ( ff ) <NEWLINE> ifac . append ( pow ( ff , p - 2 , p ) ) <NEWLINE> <DEDENT> def ncr ( n , r , p ) : <NEWLINE> <INDENT> return ( fac [ n ] * ifac [ r ] % p * ifac [ n - r ] % p ) ; <NEWLINE> <NL> <DEDENT> h , w , a , b = map ( int , input ( ) . split ( ) ) <NEWLINE> s = 0 <NEWLINE> nC = b - 1 <NEWLINE> kC = 0 <NEWLINE> nD = w - b - 1 + h - 1 <NEWLINE> kD = h - 1 <NEWLINE> for i in range ( h - a ) : <NEWLINE> <INDENT> C = ncr ( nC , kC , P ) <NEWLINE> D = ncr ( nD , kD , P ) <NEWLINE> s = ( s + C * D ) % P <NEWLINE> nC += 1 <NEWLINE> kC += 1 <NEWLINE> kD -= 1 <NEWLINE> nD -= 1 <NEWLINE> <DEDENT> print ( s ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = map ( int , input ( ) . split ( ) ) <NEWLINE> ans = 0 <NEWLINE> for i in range ( 0 , 2 * n , 2 ) : <NEWLINE> <INDENT> ans += a [ i + 1 ] <NEWLINE> <DEDENT> print ( ans ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> arr = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> arr = arr . sort ( ) <NEWLINE> s = 0 <NEWLINE> for i in range ( 0 , ( 2 * n ) - 1 , 2 ) : <NEWLINE> <INDENT> s += arr [ i ] <NEWLINE> <DEDENT> print ( s ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> array = input ( ) <NEWLINE> L = [ int ( val ) for val in array . split ( ) ] <NEWLINE> L = sorted ( L ) <NEWLINE> total = 0 <NEWLINE> start = 0 <NEWLINE> P = [ L for val in L ] <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> total += min ( P [ start ] , P [ start + 1 ] ) <NEWLINE> P . pop ( start ) <NEWLINE> P . pop ( start + 1 ) <NEWLINE> start += 2 <NEWLINE> <DEDENT> print ( total ) <NEWLINE>
try : <NEWLINE> <INDENT> k = input ( ) <NEWLINE> <DEDENT> except EOFError : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <DEDENT> try : <NEWLINE> <INDENT> li = input ( ) <NEWLINE> <DEDENT> except EOFError : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <NL> <NL> <DEDENT> li . sort ( ) <NEWLINE> sum = 0 <NEWLINE> for k in range ( len ( li ) ) : <NEWLINE> <NL> <INDENT> if k % 2 == 0 : <NEWLINE> <NL> <INDENT> sum = sum + li [ k ] <NEWLINE> <DEDENT> <DEDENT> print ( sum ) <NEWLINE>
n = int ( input ( ) ) <NEWLINE> a = sorted ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> s = 0 <NEWLINE> for i in range ( 2 n - 1 ) : <NEWLINE> <INDENT> s += min ( a [ i ] , a [ i + 1 ] ) <NEWLINE> <DEDENT> print ( s ) <NEWLINE>
N = int ( input ( ) ) <NEWLINE> L = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> L . sort ( ) <NEWLINE> S = 0 <NEWLINE> for i in range ( 0 , 2 * N + 1 , 2 ) : <NEWLINE> <INDENT> S += L [ i ] <NEWLINE> <DEDENT> print ( S ) <NEWLINE>
<NL> num = int ( input ( ) ) <NEWLINE> li = int ( input ( ) . split ( ) ) <NEWLINE> <NL> print ( num ) <NEWLINE> print ( li ) <NEWLINE>
from collections import Counter <NEWLINE> <NL> n = int ( input ( ) ) <NEWLINE> <NL> arr = list ( map ( int , input ( ) . split ( ) ) ) <NEWLINE> <NL> counts = Counter ( arr ) <NEWLINE> <NL> res = 0 <NEWLINE> <NL> for k , v in counts . items ( ) : <NEWLINE> <INDENT> if v >= 2 : <NEWLINE> <INDENT> res += v // 2 <NEWLINE> counts [ k ] = v % 2 <NEWLINE> <NL> <DEDENT> <DEDENT> items = sorted ( counts . items ( ) ) <NEWLINE> for i in range ( len ( items ) - 1 ) : <NEWLINE> <INDENT> res += min ( items [ i ] , items [ i + 1 ] ) <NEWLINE> <NL> <DEDENT> print ( res ) <NEWLINE>
N , X = input ( ) . split ( ) <NEWLINE> N , X = int ( N ) , int ( X ) <NEWLINE> answer = X + ( N - X ) <NEWLINE> <NL> <NL> def rhombus ( N , X ) : <NEWLINE> <INDENT> if N < X : <NEWLINE> <INDENT> temp = N <NEWLINE> N = X <NEWLINE> X = temp <NEWLINE> <NL> <DEDENT> if X == 1 : <NEWLINE> <INDENT> return N + 1 <NEWLINE> <DEDENT> if X == 0 : <NEWLINE> <INDENT> return 0 <NEWLINE> <NL> <DEDENT> if N % X == 0 : <NEWLINE> <INDENT> return X * ( N // X ) * 2 - X <NEWLINE> <NL> <DEDENT> else : <NEWLINE> <INDENT> k = N // X <NEWLINE> return k * 2 * X + rhombus ( X , N - ( k * X ) ) <NEWLINE> <NL> <NL> <NL> <DEDENT> <DEDENT> answer = answer + rhombus ( N - X , X ) <NEWLINE> print ( answer ) <NEWLINE>
import math <NEWLINE> n , x = map ( int , input ( ) . split ( ) ) <NEWLINE> print ( 3 * ( n - gcd ( n , x ) ) ) <NEWLINE>
